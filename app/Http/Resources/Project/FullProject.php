<?php

namespace App\Http\Resources\Project;

use App\Http\Resources\Administration\FullAdministration;
use App\Http\Resources\ContactGroup\FullContactGroup;
use App\Http\Resources\Document\FullDocument;
use App\Http\Resources\DocumentTemplate\FullDocumentTemplate;
use App\Http\Resources\EmailTemplate\FullEmailTemplate;
use App\Http\Resources\EnumWithIdAndName\FullEnumWithIdAndName;
use App\Http\Resources\FinancialOverview\FullFinancialOverviewProject;
use App\Http\Resources\GenericResource;
use App\Http\Resources\ParticipantProject\FullParticipantProject;
use App\Http\Resources\Task\GridTask;
use App\Http\Resources\User\FullUser;
use Illuminate\Http\Resources\Json\JsonResource;

class FullProject extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request
     *
     * @return array
     */
    public function toArray($request)
    {
        return
            [
                'id' => $this->id,
                'name' => $this->name,
                'code' => $this->code,
                'description' => $this->description,
                'ownedById' => $this->owned_by_id,
                'ownedBy' => FullUser::make($this->whenLoaded('ownedBy')),
                'projectStatusId' => $this->project_status_id,
                'projectStatus' => GenericResource::make($this->whenLoaded('projectStatus')),
                'dateStart' => $this->date_start,
                'dateEnd' => $this->date_end,
                'dateProduction' => $this->date_production,
                'dateStartRegistrations' => $this->date_start_registrations,
                'dateEndRegistrations' => $this->date_end_registrations,
                'dateEntry' => $this->date_entry,
                'dateInterestBearing' => $this->date_interest_bearing,
                'dateInterestBearingRedemption' => $this->date_interest_bearing_redemption,
                'kwhStartHighNextRevenue' => $this->kwh_start_high_next_revenue,
                'dateInterestBearingKwh' => $this->date_interest_bearing_kwh,
                'kwhStartLowNextRevenue' => $this->kwh_start_low_next_revenue,
                'projectTypeId' => $this->project_type_id,
                'projectType' => GenericResource::make($this->whenLoaded('projectType')),
                'isSceProject' => $this->is_sce_project,
                'baseProjectCodeRef' => $this->base_project_code_ref,
                'baseProjectCodeRefWithName' => FullEnumWithIdAndName::make($this->getBaseProjectCodeRef()),
                'checkDoubleAddresses' => $this->check_double_addresses,
                'checkPostalcodeLink' => $this->check_postalcode_link,
                'hideWhenNotMatchingPostalCheck' => $this->hide_when_not_matching_postal_check,
                'disableChangeContactNameOnPortal' => $this->disable_change_contact_name_on_portal,
                'postalCode' => $this->postal_code,
                'address' => $this->address,
                'city' => $this->city,
                'ean' => $this->ean,
                'eanManager' => $this->ean_manager,
                'warrantyOrigin' => $this->warranty_origin,
                'eanSupply' => $this->ean_supply,
                'participationWorth' => $this->participation_worth,
                'powerKwAvailable' => $this->power_kw_available,
                'maxParticipations' => $this->max_participations,
                'taxReferral' => $this->tax_referral,
                'totalParticipations' => $this->total_participations,
                'minParticipations' => $this->min_participations,
                'isMembershipRequired' => $this->is_membership_required,
                'visibleForAllContacts' => $this->visible_for_all_contacts,
                'textInfoProjectOnlyMembers' => $this->text_info_project_only_members,
                'isParticipationTransferable' => $this->is_participation_transferable,
                'createdAt' => $this->created_at,
                'createdById' => $this->created_by_id,
                'createdBy' => FullUser::make($this->whenLoaded('createdBy')),
                'updatedById' => $this->updated_by_id,
                'updatedBy' => FullUser::make($this->whenLoaded('updatedBy')),
                'updatedAt' => $this->updated_at,
                'valueCourses' => FullProjectValueCourse::collection($this->whenLoaded('projectValueCourses')),
                'currentBookWorth' => $this->currentBookWorth(),
                'revenues' => GridProjectRevenue::collection($this->whenLoaded('projectRevenues')),
                'revenuesKwh' => GridRevenuesKwh::collection($this->whenLoaded('revenuesKwh')),
                'typeId' => $this->project_type_id,
                'amountOfParticipants' => $this->participantsProject()->count(),
                'taskCount' => $this->tasks()->count(),
                'relatedTasks' => GridTask::collection($this->whenLoaded('tasks')),
                //todo WM: nog wijzigen (zie bijv. FullIntake
                'documentCountNotOnPortal' => $this->documentsNotOnPortal()->count(),
                'documentCountOnPortal' => $this->documentsOnPortal()->count(),
                'relatedDocumentsNotOnPortal' => FullDocument::collection($this->whenLoaded('documentsNotOnPortal')),
                'relatedDocumentsOnPortal' => FullDocument::collection($this->whenLoaded('documentsOnPortal')),
                'emailInboxCount' => $this->relatedEmailsInbox ? $this->relatedEmailsInbox->count() : 0,
                'relatedEmailsInbox' => $this->relatedEmailsInbox,
                'emailSentCount' => $this->relatedEmailsSent ? $this->relatedEmailsSent->count() : 0,
                'relatedEmailsSent' => $this->relatedEmailsSent,
                'currentParticipations' => $this->getCurrentParticipations(),
                'postalcodeLink' => $this->postalcode_link,
                'addressNumberSeries' => $this->address_number_series,
                'administrationId' => $this->administration_id,
                'administration' => FullAdministration::make($this->whenLoaded('administration')),
                'usesMollie' => $this->uses_mollie,
                'hasPaymentInvoices' => $this->getHasPaymentInvoices(),
                'hasRevenueKwh' => $this->getHasRevenueKwh(),
                'hasConfirmedLoanRedemptionRevenue' => $this->getHasConfirmedLoanRedemptionRevenue(),
                'dateInterestBearingWrong' => $this->getDateInterestBearingWrong(),
                'dateInterestBearingKwhWrong' => $this->getDateInterestBearingKwhWrong(),
                'dateInterestBearingRedemptionWrong' => $this->getDateInterestBearingRedemptionWrong(),
                'kwhStartHighNextRevenueWrong' => $this->getKwhStartHighNextRevenueWrong(),
                'kwhStartLowNextRevenueWrong' => $this->getKwhStartLowNextRevenueWrong(),
                'requiresContactGroups' => GenericResource::make($this->whenLoaded('requiresContactGroups')),
                'loanTypeId' => $this->loan_type_id,
                'projectLoanType' => GenericResource::make($this->whenLoaded('projectLoanType')),
                'amountOfLoanNeeded' => $this->amount_of_loan_needed,
                'minAmountLoan' => $this->min_amount_loan,
                'maxAmountLoan' => $this->max_amount_loan,
                'participationsDefinitive' => $this->participations_definitive,
                'participationsGranted' => $this->participations_granted,
                'participationsOptioned' => $this->participations_optioned,
                'participationsInteressed' => $this->participations_interessed,
                'amountDefinitive' => $this->amount_definitive,
                'amountGranted' => $this->amount_granted,
                'amountOptioned' => $this->amount_optioned,
                'amountInteressed' => $this->amount_interessed,
                'documentTemplateAgreementId' => $this->document_template_agreement_id,
                'documentTemplateAgreement' => FullDocumentTemplate::make($this->whenLoaded('documentTemplateAgreement')),
                'emailTemplateAgreementId' => $this->email_template_agreement_id,
                'emailTemplateAgreement' => FullEmailTemplate::make($this->whenLoaded('emailTemplateAgreement')),
                'allowIncreaseParticipationsInPortal' => $this->allow_increase_participations_in_portal,
                'documentTemplateIncreaseParticipationsId' => $this->document_template_increase_participations_id,
                'documentTemplateIncreaseParticipations' => FullDocumentTemplate::make($this->whenLoaded('documentTemplateIncreaseParticipations')),
                'emailTemplateIncreaseParticipationsId' => $this->email_template_increase_participations_id,
                'emailTemplateIncreaseParticipations' => FullEmailTemplate::make($this->whenLoaded('emailTemplateIncreaseParticipations')),
                'linkAgreeTerms' => $this->link_agree_terms,
                'linkUnderstandInfo' => $this->link_understand_info,
                'linkProjectInfo' => $this->link_project_info,
                'documentIdAgreeTerms' => $this->document_id_agree_terms,
                'documentAgreeTerms' => FullDocument::make($this->whenLoaded('documentAgreeTerms')),
                'documentIdUnderstandInfo' => $this->document_id_understand_info,
                'documentUnderstandInfo' => FullDocument::make($this->whenLoaded('documentUnderstandInfo')),
                'documentIdProjectInfo' => $this->document_id_project_info,
                'documentProjectInfo' => FullDocument::make($this->whenLoaded('documentProjectInfo')),
                'showQuestionAboutMembership' => $this->show_question_about_membership,
                'useTransactionCostsWithMembership' => $this->use_transaction_costs_with_membership,
                'questionAboutMembershipGroupId' => $this->question_about_membership_group_id,
                'questionAboutMembershipGroup' => FullContactGroup::make($this->whenLoaded('questionAboutMembershipGroup')),
                'textIsMember' => $this->text_is_member,
                'textIsNoMember' => $this->text_is_no_member,
                'textBecomeMember' => $this->text_become_member,
                'memberGroupId' => $this->member_group_id,
                'memberGroup' => FullContactGroup::make($this->whenLoaded('memberGroup')),
                'textBecomeNoMember' => $this->text_become_no_member,
                'noMemberGroupId' => $this->no_member_group_id,
                'noMemberGroup' => FullContactGroup::make($this->whenLoaded('noMemberGroup')),
                'lastYearFinancialOverviewDefinitive' => $this->last_year_financial_overview_definitive,
                'textAgreeTerms' => $this->text_agree_terms,
                'textLinkAgreeTerms' => $this->text_link_agree_terms,
                'textLinkUnderstandInfo' => $this->text_link_understand_info,
                'textAcceptAgreement' => $this->text_accept_agreement,
                'textAcceptAgreementQuestion' => $this->text_accept_agreement_question,
                'textRegistrationFinished' => $this->text_registration_finished,
                'textTransactionCosts' => $this->text_transaction_costs,
                'transactionCostsCodeRef' => $this->transaction_costs_code_ref,
                'transactionCostsCodeRefWithName' => FullEnumWithIdAndName::make($this->getTransactionCostsCodeRef()),
                'transactionCostsAmountMin' => $this->transaction_costs_amount_min,
                'transactionCostsAmountMax' => $this->transaction_costs_amount_max,
                'transactionCostsAmount' => $this->transaction_costs_amount,
                'transactionCostsPercentage' => $this->transaction_costs_percentage,
                'transactionCostsAmount2' => $this->transaction_costs_amount_2,
                'transactionCostsPercentage2' => $this->transaction_costs_percentage_2,
                'transactionCostsAmount3' => $this->transaction_costs_amount_3,
                'transactionCostsPercentage3' => $this->transaction_costs_percentage_3,
            ];
    }
}
