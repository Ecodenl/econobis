{"version":3,"sources":["context/AuthContext.js","context/PortalUserContext.js","components/layout/Header.js","api/default-setup/AxiosInstance.js","api/portal-user/PortalUserAPI.js","route/ProtectedRoute.js","route/PublicRoute.js","components/form/InputText.js","components/button/ButtonText.js","container/authorization/login/Form.js","api/auth/AuthAPI.js","api/portal-settings/PortalSettingsAPI.js","container/authorization/login/index.js","container/authorization/register/Form.js","container/authorization/register/index.js","container/authorization/forgot/Form.js","container/authorization/forgot/index.js","container/authorization/reset/Form.js","container/authorization/reset/index.js","api/contact/ContactAPI.js","helpers/RebaseContact.js","components/general/LoadingView.js","components/general/TextBlock.js","container/contact-details/default-form-personal/View.js","components/form/Select.js","data/Countries.js","data/EnergySuppliers.js","data/Titles.js","data/LastNamePrefixes.js","components/form/InputDate.js","container/contact-details/default-form-personal/Edit.js","helpers/ValidationSchemaPersonal.js","container/contact-details/Personal.js","container/contact-details/default-form-organisation/View.js","container/contact-details/default-form-organisation/Edit.js","helpers/ValidationSchemaOrganisation.js","container/contact-details/Organisation.js","container/contact-details/index.js","container/my-areas-of-interest/Form.js","container/my-areas-of-interest/index.js","api/project/ProjectAPI.js","helpers/MoneyPresenter.js","container/register/steps/StepOneLoan.js","container/register/steps/StepOneObligation.js","container/register/steps/StepOneCapital.js","container/register/steps/StepOnePcr.js","container/register/steps/StepTwo.js","container/register/steps/StepThree.js","components/general/ViewHtmlAsText.js","api/participant-project/ParticipantProjectAPI.js","container/register/steps/StepFour.js","container/register/steps/StepFive.js","container/register/steps/index.js","container/register/MasterForm.js","container/register/index.js","container/project/list/index.js","container/project/details/LoanDetails.js","container/project/details/ObligationDetails.js","container/project/details/CapitalDetails.js","container/project/details/PcrDetails.js","container/project/details/index.js","container/registration/list/index.js","container/authorization/new-account/NewAccountFormPersonal.js","container/authorization/new-account/NewAccountFormOrganisation.js","container/authorization/new-account/index.js","container/authorization/new-account/NewAccountSuccess.js","container/authorization/change-account/Email.js","container/authorization/change-account/Password.js","container/authorization/change-account/index.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","localStorageToken","AuthProvider","props","useState","window","localStorage","getItem","checkIfAuth","isAuth","setAuth","Provider","value","login","payload","cbRedirect","token","access_token","removeItem","setItem","moment","format","logout","children","AuthConsumer","Consumer","PortalUserContext","user","setInitialUserData","PortalUserProvider","setUser","currentSelectedContact","setCurrentContact","selectedContactId","id","occupationUser","occupations","find","occupation","primaryContact","organisationUser","typeId","switchCurrentContact","contact","resetCurrentUserToDefault","updateNameSelectedContact","fullName","updatedOccupations","map","occupationContact","PortalUserConsumer","withRouter","location","history","menuOpen","updateStateMenu","closeMenu","redirect","to","push","ref","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideAlerter","useRef","className","ReactHtmlParser","search","replace","firstName","slice","lastName","formatProfilePicName","xs","src","onClick","alignRight","Toggle","Menu","Header","Item","disabled","Divider","active","primary","occupationForPortal","key","right","width","isOpen","onStateChange","state","handleStateChange","customBurgerIcon","Fragment","pathname","BASE_URL","__SERVER_DATA__","base_url","axiosInstance","axios","create","baseURL","interceptors","request","use","config","lastActivity","add","hash","setTimeout","reload","checkTokenExpiration","AUTH_TOKEN","headers","Authorization","error","Promise","reject","get","params","jory","fld","rlt","values","post","ProtectedRoute","Component","component","rest","PortalUserAPI","then","data","catch","alert","render","ProtectedRouteWithContext","PublicRoute","InputText","field","type","readOnly","placeholder","showErrorMessage","errors","touched","classNameErrorMessage","customOnChange","onChange","name","Boolean","defaultProps","ButtonText","buttonClassName","buttonText","onClickAction","loading","title","loadingSpinnerColor","size","color","validationSchema","Yup","shape","username","email","required","password","LoginForm","handleSubmit","initialValues","enableReinitialize","onSubmit","actions","setSubmitting","isSubmitting","AUTH_KEY","client_id","client_secret","client_key","grant_type","requestUrl","defaults","common","loginCredentials","keys","isLoading","setIsLoading","showError","toggleError","redirectToReferrer","toggleRedirect","from","cooperativeName","setCooperativeName","showNewAtCooperativeLink","setShowNewAtCooperativeLink","AuthAPI","PortalSettingsAPI","fluid","sm","md","lg","xl","alt","variant","href","min","matches","passwordConfirmation","oneOf","RegisterForm","Register","match","showSuccessMessage","toggleSuccessMessage","registrationCode","decodeURIComponent","password_confirmation","RegisterWithContext","ForgotForm","Forgot","ResetForm","Reset","ResetWithContext","person","organisation","emailAddresses","phoneNumbers","addresses","country","primaryContactEnergySupplier","energySupplier","flt","f","d","participations","project","projectType","registerValues","contactId","projectId","contactData","emptyAddress","street","number","addition","postalCode","city","countryId","primaryAddress","visitAddress","postalAddress","invoiceAddress","address","emptyEmail","emailCorrespondence","emailAddress","emailInvoice","emptyPhoneNumber","phoneNumberPrimary","phoneNumber","phoneNumberTwo","filter","energySupplierId","esNumber","eanElectricity","memberSince","eanGas","Loading","style","height","TextBlock","showPlaceholder","undefined","DefaultContactPersonalView","portalSettings","initialContact","iban","ibanAttn","didAgreeAvg","dateDidAgreeAvg","initials","lastNamePrefix","dateOfBirth","checked","htmlFor","Select","options","optionLabel","emptyOption","option","InputDate","onChangeAction","formattedDate","onDayChange","date","formatDate","parseDate","dayPickerProps","showWeekNumbers","locale","firstDayOfWeek","localeUtils","MomentLocaleUtils","inputProps","autoComplete","DefaultContactPersonalEdit","projectTypeCodeRef","setFieldValue","Titles","LastNamePrefixes","isParticipant","isParticipantPcrProject","Countries","e","toUpperCase","EnergySuppliers","validationSchemaBasic","test","trim","nullable","Number","isInteger","this","parent","validationSchemaAdditional","titleId","typeError","ibantools","validationSchemaPcrAdditional","ContactDetailsPersonal","handleSubmitContactValues","editButtonGroup","editForm","setEditForm","ValidationSchemaPersonal","concat","aria-label","isEmpty","DefaultContactOrganisationView","primaryOccupations","chamberOfCommerceNumber","vatNumber","website","DefaultContactOrganisationEdit","ContactDetailsOrganisation","ValidationSchemaOrganisation","ContactDetails","setContact","setPortalSettings","setLoading","prevCurrentSelectedContact","usePrevious","callFetchContact","ContactAPI","rebaseContact","switchToView","updatedContact","setState","hasError","LoadingView","ContactDetailsWithContext","MyAreasOfInterestForm","console","log","arrayHelpers","myAreasOfInterest","myAreaOfInterest","index","participation","generalOptions","generalOption","MyAreasOfInterest","and","o","amount","parseFloat","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","StepOneLoan","next","initialRegisterValues","handleSubmitRegisterValues","amountOptioned","minAmountLoan","maxAmountLoan","Label","MoneyPresenter","StepOneObligation","participationsOptioned","minParticipations","max","maxParticipations","positive","participationWorth","StepOneCapital","StepOnePcr","pcrYearlyPowerKwhConsumption","pcrPostalCode","postalcodeLink","includes","substring","pcrNumberOfSolarPanels","pcrInputGeneratedNumberOfKwh","calculateEstimatedGeneratedNumberOfKwh","calculateGeneratedNumberOfKwh","calculatePowerKwhConsumption","powerKwhConsumption","pcrEstimatedGeneratedNumberOfKwh","Math","ceil","pcrAdviseMaxNumberOfParticipations","calculateAdviseMaxNumberOfParticipations","pcrHasSolarPanels","pcrEstimatedRevenueOk","StepTwo","previous","typeContact","validationSchemaPcrPersonal","validationSchemaPcrOrganisation","codeRef","StepThree","didAcceptAgreement","didUnderstandInfo","linkAgreeTerms","linkUnderstandInfo","ViewHtmlAsText","dangerouslySetInnerHTML","__html","StepFour","setSucces","contactDocument","setContactDocument","didAgreeRegistration","ParticipantProjectAPI","StepFive","Steps","currentStep","MasterForm","setStep","RegisterProject","initialPcrValues","setRegisterValues","setProject","isSucces","isRegistered","setRegistered","formatFullName","all","ProjectAPI","spread","payloadProject","payloadContact","contactProjecten","item","nextStep","RegisterProjectWithContext","ProjectList","contactProjectsArray","setContactProjectsArray","projectData","setProjectData","length","responsive","dateStartRegistrations","dateEndRegistrations","ProjectListWithContext","LoanDetails","amountOfLoanNeeded","description","ObligationDetails","totalParticipations","CapitalDetails","PcrDetails","ProjectDetails","renderDetails","RegistrationList","dateEnd","amountInteressed","amountGranted","amountDefinitive","participationsInteressed","participationsGranted","participationsDefinitive","RegistrationListWithContext","personTitleId","personFirstName","personLastName","NewAccountFormPersonal","organisationName","NewAccountFormOrganisation","NewAccount","executeRecaptcha","useGoogleReCaptcha","contactType","setContactType","errorMessage","setErrorMessage","a","reCaptchaToken","response","status","ButtonToolbar","toggle","block","NewAccountWithProvider","reCaptchaKey","process","language","NewAccountSuccess","close","ChangeAccountEmail","portalUserEmail","setPortalUserEmail","changePrimaryEmailAddress","resetForm","handleSubmitChangeEmail","ChangeAccountPassword","handleSubmitChangePassword","ChangeAccount","App","exact","path","Login","hostname","ReactDOM","getElementById","remove","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22b46df5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst AuthProvider = function(props) {\r\n    const [isAuth, setAuth] = useState(checkIfAuth());\r\n\r\n    function login(payload, cbRedirect) {\r\n        const token = payload.access_token;\r\n        window.localStorage.removeItem(localStorageCurrentSelectedContact);\r\n        window.localStorage.setItem(localStorageToken, token);\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n        setAuth(true);\r\n        cbRedirect();\r\n    }\r\n\r\n    function logout() {\r\n        window.localStorage.removeItem(localStorageToken);\r\n        window.localStorage.removeItem(localStorageLastActivity);\r\n        setAuth(false);\r\n    }\r\n\r\n    function checkIfAuth() {\r\n        const token = getToken();\r\n        if (!token) {\r\n            // Redirect to login\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getToken() {\r\n        return window.localStorage.getItem(localStorageToken);\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                isAuth: isAuth,\r\n                login: login,\r\n                logout: logout,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nconst AuthConsumer = AuthContext.Consumer;\r\n\r\nexport { AuthProvider, AuthConsumer };\r\n","import React, { createContext, useState } from 'react';\r\n\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst PortalUserContext = createContext({\r\n    user: {},\r\n    setInitialUserData: () => {},\r\n});\r\n\r\nconst PortalUserProvider = function(props) {\r\n    const [user, setUser] = useState({});\r\n    const [currentSelectedContact, setCurrentContact] = useState({});\r\n\r\n    function setInitialUserData(user) {\r\n        setUser(user);\r\n\r\n        const selectedContactId = window.localStorage.getItem(localStorageCurrentSelectedContact);\r\n\r\n        // When there is already a selected contact id then lookup the contact\r\n        // Selected contact could be the user or one of the occupations\r\n        if (selectedContactId) {\r\n            if (user.id == selectedContactId) {\r\n                setCurrentContact(user);\r\n            } else {\r\n                const occupationUser = user.occupations.find(\r\n                    occupation => occupation.primaryContact.id == selectedContactId\r\n                );\r\n\r\n                setCurrentContact(occupationUser.primaryContact);\r\n            }\r\n        } else {\r\n            // If there is no selected contact then set default the login user as selected contact.\r\n            // Except if the user has an organisation as occupation\r\n            const organisationUser = user.occupations.find(\r\n                occupation => occupation.primaryContact.typeId === 'organisation'\r\n            );\r\n\r\n            if (organisationUser) {\r\n                setCurrentContact(organisationUser.primaryContact);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, organisationUser.primaryContact.id);\r\n            } else {\r\n                setCurrentContact(user);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, user.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    function switchCurrentContact(contact) {\r\n        setCurrentContact(contact);\r\n        window.localStorage.setItem(localStorageCurrentSelectedContact, contact.id);\r\n    }\r\n\r\n    function resetCurrentUserToDefault() {\r\n        setUser({});\r\n        setCurrentContact({});\r\n    }\r\n\r\n    function updateNameSelectedContact(fullName) {\r\n        setCurrentContact({ ...currentSelectedContact, fullName });\r\n\r\n        if (user.id === currentSelectedContact.id) {\r\n            user.fullName = fullName;\r\n        }\r\n\r\n        const updatedOccupations = user.occupations.map(occupationContact => {\r\n            if (occupationContact.primaryContact.id === currentSelectedContact.id) {\r\n                occupationContact.primaryContact.fullName = fullName;\r\n            }\r\n            return occupationContact;\r\n        });\r\n\r\n        setUser({ ...user, occupations: updatedOccupations });\r\n    }\r\n\r\n    return (\r\n        <PortalUserContext.Provider\r\n            value={{\r\n                user: user,\r\n                setInitialUserData,\r\n                currentSelectedContact,\r\n                switchCurrentContact,\r\n                resetCurrentUserToDefault,\r\n                updateNameSelectedContact,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </PortalUserContext.Provider>\r\n    );\r\n};\r\n\r\nconst PortalUserConsumer = PortalUserContext.Consumer;\r\n\r\nexport { PortalUserProvider, PortalUserConsumer };\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { AuthConsumer } from '../../context/AuthContext';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { FaUser } from 'react-icons/fa';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nfunction Header({ location, history }) {\r\n    const [menuOpen, updateStateMenu] = useState(false);\r\n\r\n    // This keeps your state in sync with the opening/closing of the menu\r\n    // via the default means, e.g. clicking the X, pressing the ESC key etc.\r\n    function handleStateChange(state) {\r\n        updateStateMenu(state.isOpen);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function openMenu() {\r\n        updateStateMenu(true);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function closeMenu() {\r\n        updateStateMenu(false);\r\n    }\r\n\r\n    // This can be used to toggle the menu, e.g. when using a custom icon\r\n    // Tip: You probably want to hide either/both default icons if using a custom icon\r\n    // See https://github.com/negomi/react-burger-menu#custom-icons\r\n    function toggleMenu() {\r\n        updateStateMenu(!menuOpen);\r\n    }\r\n\r\n    function formatProfilePicName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName.replace(/\\s(?=\\S*$)/, '<br>');\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                let lastName = fullName.slice(0, fullName.search(','));\r\n                lastName = lastName.replace(/\\s(?=\\S*$)/, '<br>');\r\n                return firstName + '<br>' + lastName;\r\n            }\r\n        } else {\r\n            return '?';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hook that alerts clicks outside of the passed ref\r\n     */\r\n    function useOutsideAlerter(ref) {\r\n        /**\r\n         * Alert if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                updateStateMenu(false);\r\n            }\r\n        }\r\n\r\n        useEffect(() => {\r\n            // Bind the event listener\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n            return () => {\r\n                // Unbind the event listener on clean up\r\n                document.removeEventListener('mousedown', handleClickOutside);\r\n            };\r\n        });\r\n    }\r\n\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef);\r\n\r\n    function redirect(to) {\r\n        history.push(`/${to}`);\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"header-portal\">\r\n                <div className=\"profile-pic\">\r\n                    <PortalUserConsumer>\r\n                        {({ currentSelectedContact }) => (\r\n                            <p className=\"profile-title\">\r\n                                {ReactHtmlParser(formatProfilePicName(currentSelectedContact.fullName))}\r\n                            </p>\r\n                        )}\r\n                    </PortalUserConsumer>\r\n                </div>\r\n\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs={6}>\r\n                            <div className=\"header-logo\">\r\n                                <Image src=\"images/logo.png\" />\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                {/* Hambuger menu */}\r\n                                <div className=\"bm-burger-button\" onClick={openMenu}>\r\n                                    <span>\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-1\" />\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-2\" />\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-3\" />\r\n                                    </span>\r\n                                </div>\r\n                                {/* User switch menu */}\r\n                                <AuthConsumer>\r\n                                    {({ logout }) => {\r\n                                        return (\r\n                                            <PortalUserConsumer>\r\n                                                {({\r\n                                                    user,\r\n                                                    currentSelectedContact,\r\n                                                    switchCurrentContact,\r\n                                                    resetCurrentUserToDefault,\r\n                                                }) => {\r\n                                                    return (\r\n                                                        <Dropdown alignRight>\r\n                                                            <Dropdown.Toggle>\r\n                                                                <FaUser />\r\n                                                            </Dropdown.Toggle>\r\n                                                            <Dropdown.Menu>\r\n                                                                <Dropdown.Header>Ingelogd als</Dropdown.Header>\r\n                                                                <Dropdown.Item disabled>{user.fullName}</Dropdown.Item>\r\n                                                                <Dropdown.Item>\r\n                                                                    <Link\r\n                                                                        to={'/wijzig-inloggegevens'}\r\n                                                                        className={'dropdown-link'}\r\n                                                                    >\r\n                                                                        Wijzig inloggegevens\r\n                                                                    </Link>\r\n                                                                </Dropdown.Item>\r\n                                                                {/*<Dropdown.Item*/}\r\n                                                                {/*href={'#/wijzig-inloggegevens'}*/}\r\n                                                                {/*className={'dropdown-link'}*/}\r\n                                                                {/*>*/}\r\n                                                                {/*Wijzig inloggegevens*/}\r\n                                                                {/*</Dropdown.Item>*/}\r\n                                                                <Dropdown.Divider />\r\n                                                                <Dropdown.Header>Beheren van</Dropdown.Header>\r\n                                                                <Dropdown.Item\r\n                                                                    onClick={() => {\r\n                                                                        switchCurrentContact(user);\r\n                                                                        redirect('gegevens');\r\n                                                                    }}\r\n                                                                    active={\r\n                                                                        currentSelectedContact.id === user.id\r\n                                                                            ? true\r\n                                                                            : false\r\n                                                                    }\r\n                                                                >\r\n                                                                    {user.fullName}\r\n                                                                </Dropdown.Item>\r\n                                                                {user.occupations\r\n                                                                    ? user.occupations.map(occupationContact =>\r\n                                                                          (occupationContact.primaryContact.typeId ===\r\n                                                                              'organisation' &&\r\n                                                                              occupationContact.primary) ||\r\n                                                                          (occupationContact.primaryContact.typeId ===\r\n                                                                              'person' &&\r\n                                                                              occupationContact.occupation\r\n                                                                                  .occupationForPortal) ? (\r\n                                                                              <Dropdown.Item\r\n                                                                                  key={occupationContact.id}\r\n                                                                                  onClick={() => {\r\n                                                                                      switchCurrentContact(\r\n                                                                                          occupationContact.primaryContact\r\n                                                                                      );\r\n                                                                                      redirect('gegevens');\r\n                                                                                  }}\r\n                                                                                  active={\r\n                                                                                      currentSelectedContact.id ===\r\n                                                                                      occupationContact.primaryContact\r\n                                                                                          .id\r\n                                                                                          ? true\r\n                                                                                          : false\r\n                                                                                  }\r\n                                                                              >\r\n                                                                                  {\r\n                                                                                      occupationContact.primaryContact\r\n                                                                                          .fullName\r\n                                                                                  }\r\n                                                                              </Dropdown.Item>\r\n                                                                          ) : null\r\n                                                                      )\r\n                                                                    : null}\r\n                                                                <Dropdown.Divider />\r\n                                                                <Dropdown.Item\r\n                                                                    onClick={() => {\r\n                                                                        logout();\r\n                                                                        resetCurrentUserToDefault();\r\n                                                                    }}\r\n                                                                >\r\n                                                                    Log uit\r\n                                                                </Dropdown.Item>\r\n                                                            </Dropdown.Menu>\r\n                                                        </Dropdown>\r\n                                                    );\r\n                                                }}\r\n                                            </PortalUserConsumer>\r\n                                        );\r\n                                    }}\r\n                                </AuthConsumer>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            {/* Sidebar menu */}\r\n            <Menu\r\n                right\r\n                width={'300px'}\r\n                // noOverlay\r\n                isOpen={menuOpen}\r\n                onStateChange={state => handleStateChange(state)}\r\n                customBurgerIcon={false}\r\n            >\r\n                <div className={'sidebar-menu'}>\r\n                    <React.Fragment>\r\n                        <h6 className=\"heading in-menu\">MENU</h6>\r\n                        <Link\r\n                            to={'/inschrijvingen-projecten'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/inschrijvingen-projecten' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Huidige deelnames\r\n                        </Link>\r\n                        <Link\r\n                            to={'/gegevens'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/gegevens' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Gegevens\r\n                        </Link>\r\n                        {/* later */}\r\n                        {/*<Link*/}\r\n                        {/*to={'/deelname-projecten'}*/}\r\n                        {/*className={`nav-link w-nav-link w--nav-link-open ${*/}\r\n                        {/*location.pathname === '/' ? 'w--current' : ''*/}\r\n                        {/*}`}*/}\r\n                        {/*onClick={closeMenu}*/}\r\n                        {/*>*/}\r\n                        {/*Deelnames*/}\r\n                        {/*</Link>*/}\r\n                        <Link\r\n                            to={'/inschrijven-projecten'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/inschrijven-projecten' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Inschrijven projecten\r\n                        </Link>\r\n                    </React.Fragment>\r\n                </div>\r\n            </Menu>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `${BASE_URL}`,\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function(config) {\r\n        // First check if token is expired or not\r\n        checkTokenExpiration();\r\n        // Do something before request is sent\r\n        const AUTH_TOKEN = 'Bearer ' + localStorage.getItem(localStorageToken);\r\n        config.headers.Authorization = AUTH_TOKEN;\r\n        return config;\r\n    },\r\n    function(error) {\r\n        // Do something with request error\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Check token expiration and redirect if token is expired\r\nfunction checkTokenExpiration() {\r\n    const lastActivity = moment(localStorage.getItem(localStorageLastActivity));\r\n\r\n    if (\r\n        !localStorage.getItem(localStorageLastActivity) ||\r\n        lastActivity.add('30', 'minutes').format() < moment().format()\r\n    ) {\r\n        if (window.location.hash !== '#/login' && window.location.hash !== '#/loguit') {\r\n            setTimeout(() => {\r\n                localStorage.removeItem(localStorageToken);\r\n                localStorage.removeItem(localStorageLastActivity);\r\n                window.location.reload();\r\n            }, 100);\r\n        }\r\n    } else {\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n    }\r\n}\r\n\r\nexport default axiosInstance;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchPortalUserDetails: function() {\r\n        const requestUrl = `/me`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                    ],\r\n                    rlt: {\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: { fld: ['id', 'fullName', 'typeId'] },\r\n                                contact: { fld: ['id', 'fullName'] },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchPortalUserEmail: function() {\r\n        return axiosInstance.get(`/portal-user-email`);\r\n    },\r\n\r\n    changeEmail: values => {\r\n        const requestUrl = `/portal-user/change-email`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n\r\n    changePassword: values => {\r\n        const requestUrl = `/portal-user/change-password`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { AuthConsumer } from '../context/AuthContext';\r\nimport Header from '../components/layout/Header';\r\nimport PortalUserAPI from '../api/portal-user/PortalUserAPI';\r\nimport { PortalUserConsumer } from '../context/PortalUserContext';\r\n\r\nconst ProtectedRoute = ({ component: Component, setInitialUserData, isAuth, ...rest }) => {\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            (function callFetchPortalUserDetails() {\r\n                PortalUserAPI.fetchPortalUserDetails()\r\n                    .then(payload => {\r\n                        setInitialUserData(payload.data.data);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    });\r\n            })();\r\n        }\r\n    }, [isAuth]);\r\n\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <div className=\"body-2\" id=\"body-2\">\r\n                    <Header />\r\n                    <Route render={props => (isAuth ? <Component {...props} /> : <Redirect to=\"/login\" />)} {...rest} />\r\n                </div>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n};\r\n\r\nexport default function ProtectedRouteWithContext(props) {\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <PortalUserConsumer>\r\n                    {({ setInitialUserData }) => (\r\n                        <ProtectedRoute {...props} setInitialUserData={setInitialUserData} isAuth={isAuth} />\r\n                    )}\r\n                </PortalUserConsumer>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => (\r\n    <Route render={props => <Component {...props} />} {...rest} />\r\n);\r\n\r\nexport default PublicRoute;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst InputText = ({\r\n    field,\r\n    type,\r\n    className,\r\n    id,\r\n    readOnly,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <input\r\n                type={type}\r\n                className={`text-input w-input ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                readOnly={readOnly}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputText.defaultProps = {\r\n    type: 'text',\r\n    className: 'content',\r\n    readOnly: false,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputText.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputText;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ButtonText = ({\r\n    buttonClassName,\r\n    buttonText,\r\n    onClickAction,\r\n    type,\r\n    loading,\r\n    title,\r\n    loadingSpinnerColor,\r\n    disabled,\r\n}) => (\r\n    <Button\r\n        type={type}\r\n        className={`${buttonClassName}`}\r\n        onClick={onClickAction}\r\n        disabled={loading || disabled}\r\n        title={title}\r\n        size=\"sm\"\r\n    >\r\n        {loading ? <ClipLoader color={loadingSpinnerColor} size={17} /> : <span>{buttonText}</span>}\r\n    </Button>\r\n);\r\n\r\nButtonText.defaultProps = {\r\n    buttonClassName: '',\r\n    type: 'button',\r\n    title: '',\r\n    loading: false,\r\n    loadingSpinnerColor: 'white',\r\n    disabled: false,\r\n};\r\n\r\nButtonText.propTypes = {\r\n    buttonClassName: PropTypes.string,\r\n    buttonText: PropTypes.string.isRequired,\r\n    onClickAction: PropTypes.func,\r\n    type: PropTypes.string,\r\n    title: PropTypes.string,\r\n    loading: PropTypes.bool,\r\n    loadingSpinnerColor: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n};\r\n\r\nexport default ButtonText;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    password: Yup.string().required('Verplicht'),\r\n});\r\n\r\nconst LoginForm = function({ handleSubmit, login }) {\r\n    return (\r\n        <Formik\r\n            initialValues={{ username: '', password: '' }}\r\n            enableReinitialize={true}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                handleSubmit(values, actions, login);\r\n            }}\r\n            render={({ isSubmitting, errors, touched }) => {\r\n                return (\r\n                    <Form>\r\n                        <Field\r\n                            name=\"username\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"username\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={''}\r\n                                    placeholder={'Wachtwoord'}\r\n                                    type={'password'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <ButtonText\r\n                            buttonText={'Log in'}\r\n                            buttonClassName={'authorization-button'}\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                        />\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import axios from 'axios';\r\n\r\nconst AUTH_KEY = {\r\n    client_id: window.__SERVER_DATA__.client_id,\r\n    client_secret: window.__SERVER_DATA__.client_key,\r\n    grant_type: 'password',\r\n};\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\n\r\nexport default {\r\n    newAccount: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n    newAccountSuccess: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account-success`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    login: loginCredentials => {\r\n        const requestUrl = `${BASE_URL}/oauth/token`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, { ...AUTH_KEY, ...loginCredentials });\r\n    },\r\n\r\n    register: payload => {\r\n        const requestUrl = `${BASE_URL}/register`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    forgot: email => {\r\n        const requestUrl = `${BASE_URL}/password/email`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, email);\r\n    },\r\n\r\n    reset: payload => {\r\n        const requestUrl = `${BASE_URL}/password/reset`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nconst URL_PORTAL_SETTINGS = `setting`;\r\n\r\nexport default {\r\n    fetchPortalSettings: keys => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/multiple${keys}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchCooperativeName: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/cooperative-name`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchShowNewAtCooperativeLink: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/show-new-at-cooperative-link`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport LoginForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport PortalSettingsAPI from '../../../api/portal-settings/PortalSettingsAPI';\r\n\r\nexport default props => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = props.location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    const [cooperativeName, setCooperativeName] = useState('');\r\n    const [showNewAtCooperativeLink, setShowNewAtCooperativeLink] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (function callFetchCooperativeName() {\r\n            PortalSettingsAPI.fetchCooperativeName()\r\n                .then(payload => {\r\n                    setCooperativeName(payload.data);\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setIsLoading(false);\r\n                });\r\n        })();\r\n\r\n        (function callFetchShowNewAtCooperativeLink() {\r\n            PortalSettingsAPI.fetchShowNewAtCooperativeLink()\r\n                .then(payload => {\r\n                    setShowNewAtCooperativeLink(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n\r\n    function handleSubmit(values, actions, login) {\r\n        AuthAPI.login(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                login(payload.data, () => toggleRedirect(true));\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <AuthConsumer>\r\n                    {({ isAuth, login }) => (\r\n                        <Container fluid className=\"authorization-container\">\r\n                            <Row className=\"justify-content-center align-content-center full-height\">\r\n                                <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\r\n                                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n\r\n                                    {!isLoading && !cooperativeName ? (\r\n                                        <React.Fragment>\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    Deze applicatie is nog niet gereed voor gebruik!\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    ) : (\r\n                                        <React.Fragment>\r\n                                            <LoginForm handleSubmit={handleSubmit} login={login} />\r\n                                            {showError ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                        Gebruikte logingegevens zijn onjuist!\r\n                                                    </Alert>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Link to={'/wachtwoord-vergeten'} className=\"authorization-link\">\r\n                                                    Wachtwoord vergeten?\r\n                                                </Link>\r\n                                            </Row>\r\n                                            {showNewAtCooperativeLink ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <a\r\n                                                        href={'/#/nieuw-account'}\r\n                                                        className=\"authorization-link\"\r\n                                                        target=\"_blank\"\r\n                                                    >\r\n                                                        Nieuw bij {cooperativeName}?\r\n                                                    </a>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    )}\r\n                </AuthConsumer>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { GoogleReCaptchaProvider, GoogleReCaptcha } from 'react-google-recaptcha-v3';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst RegisterForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <div className=\"mb-3\">\r\n                    <p className={'text-white'}>\r\n                        Stel je wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </div>\r\n                <Row>\r\n                    <Col>\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'text-white'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-2\">\r\n                        <Field\r\n                            name=\"passwordConfirmation\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"passwordConfirmation\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Herhaal nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'text-white text-white mb-3'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"my-3\">\r\n                        <small className={'text-white'}>\r\n                            Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1\r\n                            hoofdletter bevatten.\r\n                        </small>\r\n                    </Col>\r\n                </Row>\r\n                <ButtonText\r\n                    buttonText={'Verzenden'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport RegisterForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst Register = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const registrationCode = decodeURIComponent(match.params.registrationCode);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.register({\r\n            registrationCode,\r\n            email,\r\n            password: values.password,\r\n            password_confirmation: values.passwordConfirmation,\r\n        })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <h3 className={'text-white'}>Je account is geactiveerd</h3>\r\n                                    <p className={'text-white'}>Je bent nu ingelogd</p>\r\n                                    <ButtonText\r\n                                        buttonText={'Ga verder'}\r\n                                        onClickAction={toggleRedirect}\r\n                                        buttonClassName={'authorization-button'}\r\n                                        size=\"sm\"\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <h3 className={'text-white'}>Account activeren</h3>\r\n                                    <RegisterForm handleSubmit={handleSubmit} email={email} />\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function RegisterWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Register {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ForgotForm = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Field\r\n                    name=\"email\"\r\n                    render={({ field }) => (\r\n                        <InputText\r\n                            field={field}\r\n                            id=\"email\"\r\n                            className={''}\r\n                            placeholder={'E-mailadres'}\r\n                            errors={errors}\r\n                            touched={touched}\r\n                            // todo check waarom dit erin stond ?!\r\n                            // showErrorMessage={false}\r\n                        />\r\n                    )}\r\n                />\r\n                <ButtonText\r\n                    buttonText={showSuccessMessage ? 'E-mail is verstuurd!' : 'Verstuur wachtwoord reset link'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                    disabled={showSuccessMessage}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ForgotForm;\r\n","import React, { useState } from 'react';\r\n\r\nimport ForgotForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Forgot = props => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.forgot(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If forgot API fails show error and then set submitting back to false\r\n                // toggleError(true);\r\n                // If forgot API fails show succesmessage anyway\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                    {showSuccessMessage ? (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Als het e-mailadres bij ons bekend is, dan ontvang je binnen enkele minuten een\r\n                                    e-mail met een persoonlijke link. Via deze link kun je een nieuw wachtwoord\r\n                                    instellen.\r\n                                    <br />\r\n                                    Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van\r\n                                    bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of\r\n                                    je onze mail daar terug vindt.\r\n                                </p>\r\n                            </Row>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Wachtwoord vergeten</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Vul het e-mailadres in waarmee je inlogt en die bij ons bekend is. Je ontvangt van\r\n                                    ons een e-mail waarmee je een nieuw wachtwoord kunt instellen.\r\n                                </p>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <Col xs={12} md={6}>\r\n                                    <ForgotForm handleSubmit={handleSubmit} showSuccessMessage={showSuccessMessage} />\r\n                                    {showError ? (\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            E-mailadres is niet bekend!\r\n                                        </Alert>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    )}\r\n                    <Row className={'justify-content-center '}>\r\n                        <Link to={'/login'} className=\"authorization-link\">\r\n                            Terug naar inloggen\r\n                        </Link>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Forgot;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ResetForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Row className=\"justify-content-center\">\r\n                    <p className={'text-white'}>\r\n                        Stel een nieuw wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"password\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"password\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'text-white'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"passwordConfirmation\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"passwordConfirmation\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Herhaal nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'text-white text-white mb-3'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <small className={'text-white'}>\r\n                        Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1 hoofdletter\r\n                        bevatten.\r\n                    </small>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <ButtonText\r\n                        buttonText={'Verzenden'}\r\n                        buttonClassName={'authorization-button'}\r\n                        size=\"sm\"\r\n                        type={'submit'}\r\n                        loading={isSubmitting}\r\n                        loadingSpinnerColor={'#034b8c'}\r\n                    />\r\n                </Row>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ResetForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport ResetForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst Reset = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const token = decodeURIComponent(match.params.token);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.reset({ token, email, password: values.password, password_confirmation: values.passwordConfirmation })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'text-white'}>Je wachtwoord is ingesteld</h3>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <p className={'text-white'}>Je bent nu ingelogd</p>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <ButtonText\r\n                                            buttonText={'Ga verder'}\r\n                                            onClickAction={toggleRedirect}\r\n                                            buttonClassName={'authorization-button'}\r\n                                            size=\"sm\"\r\n                                        />\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'text-white'}>Wachtwoord wijzigen</h3>\r\n                                    </Row>\r\n                                    <ResetForm handleSubmit={handleSubmit} email={email} />\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function ResetWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Reset {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchContact: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'isParticipant',\r\n                        'isParticipantPcrProject',\r\n                    ],\r\n                    rlt: {\r\n                        person: {\r\n                            fld: [\r\n                                'id',\r\n                                'firstName',\r\n                                'lastName',\r\n                                'initials',\r\n                                'titleId',\r\n                                'lastNamePrefix',\r\n                                'lastNamePrefixId',\r\n                                'dateOfBirth',\r\n                            ],\r\n                            rlt: {\r\n                                title: { fld: ['id', 'name'] },\r\n                            },\r\n                        },\r\n                        organisation: {\r\n                            fld: ['id', 'name', 'website', 'chamberOfCommerceNumber', 'vatNumber'],\r\n                        },\r\n                        emailAddresses: { fld: ['id', 'email', 'primary', 'typeId'] },\r\n                        phoneNumbers: { fld: ['id', 'number', 'primary', 'typeId'] },\r\n                        addresses: {\r\n                            fld: [\r\n                                'id',\r\n                                'street',\r\n                                'number',\r\n                                'addition',\r\n                                'postalCode',\r\n                                'city',\r\n                                'countryId',\r\n                                'primary',\r\n                                'typeId',\r\n                            ],\r\n                            rlt: {\r\n                                country: { fld: ['id', 'name'] },\r\n                            },\r\n                        },\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: {\r\n                                    fld: ['id', 'fullName'],\r\n                                },\r\n                            },\r\n                        },\r\n                        primaryContactEnergySupplier: {\r\n                            fld: [\r\n                                'id',\r\n                                'energySupplierId',\r\n                                'esNumber',\r\n                                'eanElectricity',\r\n                                'eanGas',\r\n                                'memberSince',\r\n                                'isCurrentSupplier',\r\n                            ],\r\n                            rlt: { energySupplier: [] },\r\n                            flt: {\r\n                                f: 'isCurrentSupplier',\r\n                                d: true,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchContactWithParticipants: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                    ],\r\n                    rlt: {\r\n                        participations: {\r\n                            fld: [\r\n                                'id',\r\n                                'dateRegister',\r\n                                'didAcceptAgreement',\r\n                                'dateDidAcceptAgreement',\r\n                                'didUnderstandInfo',\r\n                                'dateDidUnderstandInfo',\r\n                                'participationsDefinitive',\r\n                                'participationsGranted',\r\n                                'participationsOptioned',\r\n                                'participationsInteressed',\r\n                                'amountDefinitive',\r\n                                'amountGranted',\r\n                                'amountOptioned',\r\n                                'amountInteressed',\r\n                            ],\r\n                            rlt: {\r\n                                project: {\r\n                                    fld: ['id', 'name', 'dateEnd', 'linkUnderstandInfo'],\r\n                                    rlt: { projectType: { fld: ['id', 'codeRef'] } },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    updateContact: contact => {\r\n        const requestUrl = `/contact/${contact.id}`;\r\n\r\n        return axiosInstance.post(requestUrl, contact);\r\n    },\r\n\r\n    previewDocument: registerValues => {\r\n        const requestUrl = `/contact/${registerValues.contactId}/${registerValues.projectId}/preview-document`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n};\r\n","export default function(contactData) {\r\n    const typeContact = contactData.typeId ? contactData.typeId : null;\r\n\r\n    let emptyAddress = { street: '', number: '', addition: '', postalCode: '', city: '', countryId: null };\r\n    let primaryAddress = null;\r\n    let visitAddress = null;\r\n    let postalAddress = null;\r\n    let invoiceAddress = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            // Set primary address\r\n            primaryAddress = contactData.addresses.find(address => address.primary);\r\n            contactData.primaryAddress = primaryAddress ? { ...emptyAddress, ...primaryAddress } : emptyAddress;\r\n            break;\r\n        case 'organisation':\r\n            // Set visit, postal, invoice addresses\r\n            visitAddress = contactData.addresses.find(address => address.typeId === 'visit');\r\n            contactData.visitAddress = visitAddress ? { ...emptyAddress, ...visitAddress } : emptyAddress;\r\n            postalAddress = contactData.addresses.find(address => address.typeId === 'postal');\r\n            contactData.postalAddress = postalAddress ? { ...emptyAddress, ...postalAddress } : emptyAddress;\r\n            invoiceAddress = contactData.addresses.find(address => address.typeId === 'invoice');\r\n            contactData.invoiceAddress = invoiceAddress ? { ...emptyAddress, ...invoiceAddress } : emptyAddress;\r\n            break;\r\n    }\r\n\r\n    // Set correspondence email address\r\n    let emptyEmail = { email: '' };\r\n    const emailCorrespondence = contactData.emailAddresses.find(emailAddress => emailAddress.primary);\r\n    contactData.emailCorrespondence = emailCorrespondence ? { ...emptyEmail, ...emailCorrespondence } : emptyEmail;\r\n\r\n    // Set invoice email address\r\n    const emailInvoice = contactData.emailAddresses.find(\r\n        emailAddress => emailAddress.typeId === 'invoice' && !emailAddress.primary\r\n    );\r\n    contactData.emailInvoice = emailInvoice ? { ...emptyEmail, ...emailInvoice } : emptyEmail;\r\n\r\n    // Set primary phone number\r\n    let emptyPhoneNumber = { number: '' };\r\n    const phoneNumberPrimary = contactData.phoneNumbers.find(phoneNumber => phoneNumber.primary);\r\n    contactData.phoneNumberPrimary = phoneNumberPrimary\r\n        ? { ...emptyPhoneNumber, ...phoneNumberPrimary }\r\n        : emptyPhoneNumber;\r\n\r\n    // Set first phone number which is not primary\r\n    const phoneNumberTwo = contactData.phoneNumbers.filter(phoneNumber => !phoneNumber.primary)[0];\r\n    contactData.phoneNumberTwo = phoneNumberTwo ? { ...emptyPhoneNumber, ...phoneNumberTwo } : emptyPhoneNumber;\r\n\r\n    // Set primary contact energy supplier\r\n    let emptyPrimaryContactEnergySupplier = {\r\n        energySupplierId: null,\r\n        esNumber: '',\r\n        eanElectricity: '',\r\n        memberSince: '',\r\n        eanGas: '',\r\n    };\r\n    if (!contactData.primaryContactEnergySupplier) {\r\n        contactData.primaryContactEnergySupplier = emptyPrimaryContactEnergySupplier;\r\n    }\r\n    return contactData;\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nfunction Loading() {\r\n    return (\r\n        <Row className=\"justify-content-center align-content-center flex-wrap\" style={{ height: '40vh' }}>\r\n            <ClipLoader color={'#3898EC'} size={48} />\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TextBlock = ({ children, className, id, placeholder }) => {\r\n    const showPlaceholder = children === '' || children === null || children === undefined;\r\n\r\n    return (\r\n        <div className={`text-block ${className} ${showPlaceholder ? 'placeholder' : ''}`} id={id}>\r\n            {showPlaceholder ? <div className={'placeholder-message'}>{placeholder}</div> : children}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextBlock.defaultProps = {\r\n    className: 'text-block',\r\n    id: '',\r\n    children: '',\r\n    placeholder: '',\r\n};\r\n\r\nTextBlock.propTypes = {\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    placeholder: PropTypes.string,\r\n};\r\n\r\nexport default TextBlock;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactPersonalView({ portalSettings, initialContact }) {\r\n    const {\r\n        person = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        primaryAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n        primaryContactEnergySupplier,\r\n    } = initialContact;\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Naam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Aanhef'}>\r\n                        {person.title ? person.title.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Initialen'}>\r\n                        {person.initials}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Voornaam'}>\r\n                        {person.firstName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Tussenvoegsel'}>\r\n                        {person.lastNamePrefix}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Achternaam'}>\r\n                        {person.lastName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Geboortedatum</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6 col-md-4'} placeholder={'Geboortedatum'}>\r\n                        {person.dateOfBirth ? moment(person.dateOfBirth).format('L') : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {primaryAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {primaryAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {primaryAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {primaryAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {primaryAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {primaryAddress.country ? primaryAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? (\r\n                                <em>({dateDidAgreeAvg ? ' ' + moment(dateDidAgreeAvg).format('L') : ''})</em>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {primaryContactEnergySupplier.energySupplier\r\n                            ? primaryContactEnergySupplier.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                {primaryContactEnergySupplier && primaryContactEnergySupplier.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {primaryContactEnergySupplier.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {primaryContactEnergySupplier.memberSince\r\n                                    ? moment(primaryContactEnergySupplier.memberSince).format('L')\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                                {primaryContactEnergySupplier.eanElectricity}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                                {primaryContactEnergySupplier.eanGas}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactPersonalView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst Select = ({\r\n    field,\r\n    className,\r\n    id,\r\n    options,\r\n    optionLabel,\r\n    emptyOption,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n}) => {\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <select\r\n                className={`select-field w-select content ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                disabled={disabled}\r\n            >\r\n                {emptyOption ? <option value=\"\">{placeholder ? `-- ${placeholder} --` : ''}</option> : null}\r\n                {options.map(option => {\r\n                    return (\r\n                        <option key={option.id} value={option.id}>\r\n                            {option[optionLabel]}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </>\r\n    );\r\n};\r\n\r\nSelect.defaultProps = {\r\n    className: '',\r\n    readOnly: false,\r\n    required: '',\r\n    optionLabel: 'name',\r\n    emptyOption: true,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nSelect.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    options: PropTypes.array.isRequired,\r\n    optionLabel: PropTypes.string,\r\n    emptyOption: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default Select;\r\n","export default [\r\n    { id: 'AU', name: 'Australië' },\r\n    { id: 'BE', name: 'België' },\r\n    { id: 'CA', name: 'Canade' },\r\n    { id: 'DK', name: 'Denemarken' },\r\n    { id: 'DE', name: 'Duitsland' },\r\n    { id: 'FI', name: 'Finland' },\r\n    { id: 'FR', name: 'Frankrijk' },\r\n    { id: 'IE', name: 'Ierland' },\r\n    { id: 'IT', name: 'Italië' },\r\n    { id: 'LU', name: 'Luxemburg' },\r\n    { id: 'NL', name: 'Nederland' },\r\n    { id: 'NO', name: 'Noorwegen' },\r\n    { id: 'AT', name: 'Oostenrijk' },\r\n    { id: 'PL', name: 'Polen' },\r\n    { id: 'PT', name: 'Portugal' },\r\n    { id: 'ES', name: 'Spanje' },\r\n    { id: 'GB', name: 'Verenigd Koninkrijk' },\r\n    { id: 'VS', name: 'Verenigde Staten' },\r\n    { id: 'SE', name: 'Zweden' },\r\n    { id: 'CH', name: 'Zwitserland' },\r\n];\r\n","export default [\r\n    { id: 1, name: 'OM' },\r\n    { id: 2, name: 'Budget Energie' },\r\n    { id: 3, name: 'E.on' },\r\n    { id: 4, name: 'Eneco' },\r\n    { id: 5, name: 'Energiedirect' },\r\n    { id: 6, name: 'Engie' },\r\n    { id: 7, name: 'Essent' },\r\n    { id: 8, name: 'Greenchoice' },\r\n    { id: 9, name: 'Holland Wind' },\r\n    { id: 10, name: 'Main energie' },\r\n    { id: 11, name: 'N.E.M.' },\r\n    { id: 12, name: 'NL Energie' },\r\n    { id: 13, name: 'Vattenfall' },\r\n    { id: 14, name: 'Oxxio' },\r\n    { id: 15, name: 'Pure energy' },\r\n    { id: 16, name: 'Qurrent' },\r\n    { id: 17, name: 'VanDeBron' },\r\n    { id: 18, name: 'Overig' },\r\n    { id: 19, name: 'Energie VanOns' },\r\n    { id: 20, name: 'Huismerk Energie' },\r\n    { id: 21, name: 'Energieflex' },\r\n    { id: 22, name: 'United Consumers' },\r\n    { id: 23, name: 'Innova Energie' },\r\n    { id: 24, name: 'Betuwe stroom' },\r\n    { id: 25, name: 'Delta Energie' },\r\n    { id: 26, name: 'Agem' },\r\n    { id: 27, name: 'Anode Energie' },\r\n    { id: 28, name: 'De Groene Stroomfabriek' },\r\n    { id: 29, name: 'Energie Van Ons' },\r\n    { id: 30, name: 'HVC Kringloop Energie' },\r\n    { id: 31, name: 'Sepa Green' },\r\n    { id: 32, name: 'Servicehouse' },\r\n    { id: 33, name: 'Holthausen Clean Energy (HCE)' },\r\n    { id: 34, name: 'Total' },\r\n    { id: 35, name: 'Fenor energie' },\r\n    { id: 36, name: 'Power peers' },\r\n    { id: 37, name: 'Energyhouse' },\r\n    { id: 38, name: 'NieuweStroom' },\r\n    { id: 39, name: 'ParkStroom' },\r\n    { id: 40, name: 'Groenpand' },\r\n    { id: 41, name: 'Windcentrale' },\r\n    { id: 42, name: 'Energiebesteding' },\r\n    { id: 43, name: 'GreenNL' },\r\n];\r\n","export default [\r\n    { id: 1, name: 'Dhr' },\r\n    { id: 2, name: 'Mevr' },\r\n    { id: 3, name: 'De heer, Mevrouw' },\r\n    { id: 4, name: 'Familie' },\r\n    { id: 5, name: 'De heer of mevrouw' },\r\n    { id: 6, name: 'De heren' },\r\n    { id: 7, name: 'De dames' },\r\n];\r\n","export default [\r\n    { id: 0, name: '' },\r\n    { id: 1, name: 'van' },\r\n    { id: 2, name: 'de' },\r\n    { id: 3, name: 'van der' },\r\n    { id: 4, name: 'van de' },\r\n    { id: 5, name: 'van den' },\r\n    { id: 6, name: 'den' },\r\n    { id: 7, name: 'ten' },\r\n    { id: 8, name: 'ter' },\r\n    { id: 9, name: 'te' },\r\n    { id: 10, name: \"van 't\" },\r\n    { id: 11, name: 'el' },\r\n    { id: 12, name: 'le' },\r\n    { id: 13, name: 'van het' },\r\n    { id: 14, name: \"in 't\" },\r\n    { id: 15, name: \"'t\" },\r\n    { id: 16, name: 'von' },\r\n    { id: 17, name: 'du' },\r\n    { id: 18, name: 'da' },\r\n    { id: 19, name: 'de la' },\r\n    { id: 20, name: 'la' },\r\n    { id: 21, name: 'der' },\r\n    { id: 22, name: 'van ter' },\r\n    { id: 23, name: \"op 't\" },\r\n    { id: 24, name: 'op den' },\r\n    { id: 25, name: 'op ten' },\r\n];\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport MomentLocaleUtils, { formatDate, parseDate } from 'react-day-picker/moment';\r\nimport moment from 'moment';\r\nimport { get } from 'lodash';\r\n\r\nconst InputDate = ({\r\n    className,\r\n    id,\r\n    value,\r\n    required,\r\n    readOnly,\r\n    name,\r\n    onChangeAction,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n}) => {\r\n    const handleDayChange = date => {\r\n        // Convert date in correct value for database\r\n        const formattedDate = date ? moment(date).format('Y-MM-DD') : '';\r\n\r\n        onChangeAction(name, formattedDate);\r\n    };\r\n\r\n    const formattedDate = value ? moment(value).format('L') : '';\r\n\r\n    return (\r\n        <>\r\n            {get(errors, name, '') && get(touched, name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, name, '')}</small>\r\n            ) : null}\r\n            <DayPickerInput\r\n                id={id}\r\n                value={formattedDate}\r\n                onDayChange={handleDayChange}\r\n                formatDate={formatDate}\r\n                parseDate={parseDate}\r\n                dayPickerProps={{\r\n                    showWeekNumbers: true,\r\n                    locale: 'nl',\r\n                    firstDayOfWeek: 1,\r\n                    localeUtils: MomentLocaleUtils,\r\n                }}\r\n                inputProps={{\r\n                    className: `text-input content w-input ${className} ${\r\n                        Boolean(get(errors, name, '') && get(touched, name, '')) ? 'has-error mb-0' : ''\r\n                    } `,\r\n                    name: name,\r\n                    autoComplete: 'off',\r\n                    readOnly: readOnly,\r\n                    disabled: readOnly,\r\n                    placeholder: placeholder,\r\n                }}\r\n                required={required}\r\n                readOnly={readOnly}\r\n                placeholder={''}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputDate.defaultProps = {\r\n    className: '',\r\n    required: '',\r\n    readOnly: false,\r\n    value: null,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputDate.propTypes = {\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    onChangeAction: PropTypes.func,\r\n    required: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputDate;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport InputDate from '../../../components/form/InputDate';\r\n\r\nconst DefaultContactPersonalEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.titleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.initials\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"initials\"\r\n                                    placeholder={'Initialen'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.firstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name\"\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.lastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.lastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name\"\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel\r\n                    htmlFor=\"date_of_birth\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Geboortedatum\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.dateOfBirth\"\r\n                            render={({ field }) => (\r\n                                <InputDate\r\n                                    {...field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    onChangeAction={setFieldValue}\r\n                                    id=\"date_of_birth\"\r\n                                    placeholder={'Geboortedatum'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Adres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"primaryAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={initialContact.isParticipantPcrProject}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"primaryContactEnergySupplier.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            // disabled={\r\n                                            //     initialContact.primaryContactEnergySupplier &&\r\n                                            //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                            //     initialContact.isParticipant\r\n                                            // }\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.primaryContactEnergySupplier && values.primaryContactEnergySupplier.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.esNumber &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                    // readOnly={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.memberSince\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel\r\n                                    htmlFor=\"ean_electricity\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    EAN nummer electriciteit\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanElectricity\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_electricity\"\r\n                                                    placeholder={'EAN nummer electriciteit'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanElectricity &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                                    EAN nummer gas\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanGas\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_gas\"\r\n                                                    placeholder={'EAN nummer gas'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanGas\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactPersonalEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        // TODO set more correct values for validation, only important fields are set now\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        person: Yup.object().shape({\r\n            lastName: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        person: Yup.object().shape({\r\n            titleId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            firstName: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            dateOfBirth: Yup.date()\r\n                .typeError('Verplicht of ongeldige datum')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht')\r\n            .test('iban', 'Ongeldige IBAN !', value => ibantools.isValidIBAN(value)),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            energySupplierId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            esNumber: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactPersonalView from './default-form-personal/View';\r\nimport DefaultContactPersonalEdit from './default-form-personal/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from './../../helpers/ValidationSchemaPersonal';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsPersonal({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaPersonal.validationSchemaBasic\r\n              .concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n              .concat(ValidationSchemaPersonal.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaPersonal.validationSchemaBasic.concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n        : ValidationSchemaPersonal.validationSchemaBasic;\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichten velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactPersonalView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsPersonal;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactOrganisationView({ portalSettings, initialContact }) {\r\n    const {\r\n        organisation = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        visitAddress,\r\n        postalAddress,\r\n        invoiceAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n        primaryContactEnergySupplier,\r\n        primaryOccupations,\r\n    } = initialContact;\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Bedrijfsnaam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Bedrijfsnaam'}>\r\n                        {organisation.name}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'KvK'}>\r\n                        {organisation.chamberOfCommerceNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'BTW nummer'}>\r\n                        {organisation.vatNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Website'}>\r\n                        {organisation.website}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? <em>({dateDidAgreeAvg ? moment(dateDidAgreeAvg).format('L') : ''})</em> : ''}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Bezoekadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {visitAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {visitAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {visitAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {visitAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {visitAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {visitAddress.country ? visitAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Postadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {postalAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {postalAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {postalAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {postalAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {postalAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {postalAddress.country ? postalAddress.country.name : ''}\r\n                    </TextBlock>{' '}\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Nota adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {invoiceAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {invoiceAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {invoiceAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {invoiceAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {invoiceAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {invoiceAddress.country ? invoiceAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {primaryContactEnergySupplier.energySupplier\r\n                            ? primaryContactEnergySupplier.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                {primaryContactEnergySupplier && primaryContactEnergySupplier.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {primaryContactEnergySupplier.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {primaryContactEnergySupplier.memberSince\r\n                                    ? moment(primaryContactEnergySupplier.memberSince).format('L')\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                                {primaryContactEnergySupplier.eanElectricity}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                                {primaryContactEnergySupplier.eanGas}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n\r\n                {/*<FormLabel className={'field-label'}>Contacten</FormLabel>*/}\r\n                {/*{primaryOccupations ? (*/}\r\n                {/*primaryOccupations.map(primaryOccupation => (*/}\r\n                {/*<Row>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-4'} placeholder={'Contact naam'}>*/}\r\n                {/*{primaryOccupation.contact.fullName}*/}\r\n                {/*</TextBlock>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-4'} placeholder={'Contact verbinding'}>*/}\r\n                {/*{primaryOccupation.occupation.primaryOccupation}*/}\r\n                {/*</TextBlock>*/}\r\n                {/*</Row>*/}\r\n                {/*))*/}\r\n                {/*) : (*/}\r\n                {/*<Row>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-8'} />*/}\r\n                {/*</Row>*/}\r\n                {/*)}*/}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactOrganisationView;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport InputDate from '../../../components/form/InputDate';\r\n\r\nconst DefaultContactOrganisationEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.name\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"name\"\r\n                                    placeholder={'Naam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.chamberOfCommerceNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"chamber_of_commerce_number\"\r\n                                    placeholder={'KvK'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.vatNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"vat_number\"\r\n                                    placeholder={'BTW nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.website\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"website\"\r\n                                    placeholder={'Website'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Bezoekadres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"visitAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={initialContact.isParticipantPcrProject}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Postadres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"postalAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Nota adres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"invoiceAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"primaryContactEnergySupplier.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            // disabled={\r\n                                            //     initialContact.primaryContactEnergySupplier &&\r\n                                            //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                            //     initialContact.isParticipant\r\n                                            // }\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.primaryContactEnergySupplier && values.primaryContactEnergySupplier.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.esNumber &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                    // readOnly={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.memberSince\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel\r\n                                    htmlFor=\"ean_electricity\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    EAN nummer electriciteit\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanElectricity\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_electricity\"\r\n                                                    placeholder={'EAN nummer electriciteit'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanElectricity &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                                    EAN nummer gas\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanGas\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_gas\"\r\n                                                    placeholder={'EAN nummer gas'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanGas\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactOrganisationEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        // TODO set more correct values for validation, only important fields are set now\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        organisation: Yup.object().shape({\r\n            name: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        postalAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        invoiceAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            energySupplierId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            esNumber: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactOrganisationView from './default-form-organisation/View';\r\nimport DefaultContactOrganisationEdit from './default-form-organisation/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaOrganisation from './../../helpers/ValidationSchemaOrganisation';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsOrganisation({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic\r\n              .concat(ValidationSchemaOrganisation.validationSchemaAdditional)\r\n              .concat(ValidationSchemaOrganisation.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic.concat(\r\n              ValidationSchemaOrganisation.validationSchemaAdditional\r\n          )\r\n        : ValidationSchemaOrganisation.validationSchemaBasic;\r\n\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichten velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactOrganisationView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsOrganisation;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactDetailsPersonal from './Personal';\r\nimport ContactDetailsOrganisation from './Organisation';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst ContactDetails = function(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n    const [editForm, setEditForm] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const keys =\r\n            '?keys[]=portalName' +\r\n            '&keys[]=portalWebsite' +\r\n            '&keys[]=portalUrl' +\r\n            '&keys[]=responsibleUserId' +\r\n            '&keys[]=checkContactTaskResponsibleUserId' +\r\n            '&keys[]=linkPrivacyPolicy';\r\n        PortalSettingsAPI.fetchPortalSettings(keys)\r\n            .then(payload => {\r\n                setPortalSettings({ ...payload.data });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ isLoading: false, hasError: true });\r\n            });\r\n\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n                props.updateNameSelectedContact(contactData.fullName);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, switchToView) {\r\n        const updatedContact = { ...contact, ...values };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                callFetchContact();\r\n                actions.setSubmitting(false);\r\n                switchToView();\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    const editButtonGroup = (\r\n        <ButtonGroup aria-label=\"Steps\" className={'float-right'}>\r\n            <Button\r\n                className={'w-button'}\r\n                size=\"sm\"\r\n                onClick={function() {\r\n                    setEditForm(true);\r\n                }}\r\n            >\r\n                Wijzig\r\n            </Button>\r\n        </ButtonGroup>\r\n    );\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <div className=\"content-container w-container\">\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                            <Link to={`/inschrijven-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Inschrijven projecten\r\n                                </Button>\r\n                            </Link>\r\n                            &nbsp;\r\n                            <Link to={`/inschrijvingen-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Huidige deelnames\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    {editForm ? (\r\n                        <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                    ) : (\r\n                        <Row>\r\n                            <Col>\r\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                            </Col>\r\n                            <Col>{editButtonGroup}</Col>\r\n                        </Row>\r\n                    )}\r\n                    <div className=\"w-form\" />\r\n                    {/* If contact is person */}\r\n                    {contact.typeId === 'person' ? (\r\n                        <ContactDetailsPersonal\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                    {/* If contact is organisation */}\r\n                    {contact.typeId === 'organisation' ? (\r\n                        <ContactDetailsOrganisation\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default function ContactDetailsWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact, updateNameSelectedContact }) => (\r\n                <ContactDetails\r\n                    {...props}\r\n                    currentSelectedContact={currentSelectedContact}\r\n                    updateNameSelectedContact={updateNameSelectedContact}\r\n                />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Field, FieldArray, Form, Formik } from 'formik';\r\nimport ButtonText from '../../components/button/ButtonText';\r\n\r\nconst MyAreasOfInterestForm = function({ handleSubmit, initialValues }) {\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            enableReinitialize={true}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                console.log(values);\r\n            }}\r\n            render={({ errors, touched, setFieldValue, isSubmitting, values }) => {\r\n                return (\r\n                    <Form id=\"email-form\" name=\"email-form\">\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <h6 className=\"heading-content\">Mijn interessegebieden</h6>\r\n                                <FieldArray\r\n                                    name=\"myAreasOfInterest\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.myAreasOfInterest &&\r\n                                                values.myAreasOfInterest.map((myAreaOfInterest, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`myAreasOfInterest[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={myAreaOfInterest.name}\r\n                                                                        checked={myAreaOfInterest.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={myAreaOfInterest.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {myAreaOfInterest.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Deelname</h6>\r\n                                <FieldArray\r\n                                    name=\"participations\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.participations &&\r\n                                                values.participations.map((participation, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`participations[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={participation.name}\r\n                                                                        checked={participation.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={participation.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {participation.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Algemeen</h6>\r\n                                <FieldArray\r\n                                    name=\"generalOptions\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.generalOptions &&\r\n                                                values.generalOptions.map((generalOption, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`generalOptions[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={generalOption.name}\r\n                                                                        checked={generalOption.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={generalOption.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {generalOption.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <ButtonText\r\n                                    buttonText={'Opslaan'}\r\n                                    buttonClassName={'save-btn w-button'}\r\n                                    type={'submit'}\r\n                                    loading={isSubmitting}\r\n                                />\r\n                            </div>\r\n                            <div className=\"w-col w-col-6\" />\r\n                        </div>\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterestForm;\r\n","import React from 'react';\r\nimport MyAreasOfInterestForm from './Form';\r\n\r\nconst MyAreasOfInterest = function() {\r\n    // TODO Fetch values from API\r\n    const initialValues = {\r\n        myAreasOfInterest: [\r\n            { id: 4, name: 'Gevel isolatie', value: true },\r\n            { id: 5, name: 'Zonnepanelen', value: false },\r\n            { id: 6, name: 'Dak isolatie', value: false },\r\n            { id: 7, name: 'Zonneboiler', value: true },\r\n        ],\r\n        participations: [{ id: 2, name: 'Test groep', value: true }, { id: 3, name: 'De leuke mensen', value: false }],\r\n        generalOptions: [{ id: 1, name: 'Test algemeen groep', value: false }],\r\n    };\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            <div className=\"content-container w-container\">\r\n                <h1 className=\"content-heading\">Instellingen</h1>\r\n                <div className=\"w-form\" />\r\n                <MyAreasOfInterestForm initialValues={initialValues} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterest;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n    fetchProjects: function() {\r\n        const requestUrl = `/jory/project`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: ['id', 'name', 'dateStartRegistrations', 'dateEndRegistrations'],\r\n                    flt: {\r\n                        and: [\r\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\r\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\r\n                        ],\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchProject: function(id) {\r\n        const requestUrl = `/jory/project/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'name',\r\n                        'description',\r\n                        'dateStartRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'minParticipations',\r\n                        'maxParticipations',\r\n                        'totalParticipations',\r\n                        'participationWorth',\r\n                        'amountOfLoanNeeded',\r\n                        'minAmountLoan',\r\n                        'maxAmountLoan',\r\n                        'postalcodeLink',\r\n                        'linkAgreeTerms',\r\n                        'linkUnderstandInfo',\r\n                    ],\r\n                    rlt: { projectType: { fld: ['id', 'codeRef'] } },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","export default amount => {\r\n    if (!amount) amount = 0;\r\n    // if (isNaN(amount)) {\r\n    //     amount = amount.replace(',', '.');\r\n    // }\r\n    amount = parseFloat(amount * 100) / 100;\r\n\r\n    if (isNaN(amount)) return 'Ongeldig bedrag';\r\n\r\n    return `€ ${amount.toLocaleString('nl', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n    })}`;\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepOneLoan({ next, project, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        amountOptioned: Yup.string()\r\n            .required('Verplicht')\r\n            .test(\r\n                'amountOptioned',\r\n                'Minimum van ' + project.minAmountLoan + ' nodig',\r\n                value => value.replace(',', '.') >= project.minAmountLoan\r\n            )\r\n            .test(\r\n                'amountOptioned',\r\n                'Maximum van ' + project.maxAmountLoan + ' bereikt',\r\n                value => value.replace(',', '.') <= project.maxAmountLoan\r\n            )\r\n            .matches(/^\\s*(?=.*[1-9])\\d*(?:\\.\\d{1,2})?\\s*$/, 'Fout bedrag'),\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues(values);\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n        >\r\n            {({ handleSubmit, values, touched, errors }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimaal bedrag</FormLabel>\r\n                                <TextBlock>{project.minAmountLoan}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximaal bedrag</FormLabel>\r\n                                <TextBlock>{project.maxAmountLoan}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>In te leggen bedrag</Form.Label>\r\n                                <Field\r\n                                    name=\"amountOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"amount_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Te betalen bedrag</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(values.amountOptioned)}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                            volgende stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneLoan;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepOneObligation({ next, project, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues(values);\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n        >\r\n            {({ handleSubmit, values, touched, errors }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Nominale waarde per obligatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal obligaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Te betalen bedrag</FormLabel>\r\n                                <TextBlock>\r\n                                    {MoneyPresenter(values.participationsOptioned * project.participationWorth)}\r\n                                </TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                            volgende stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneObligation;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepOneCapital({ next, project, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues(values);\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n        >\r\n            {({ handleSubmit, values, touched, errors }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Nominale waarde per participatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal participaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Te betalen bedrag</FormLabel>\r\n                                <TextBlock>\r\n                                    {MoneyPresenter(values.participationsOptioned * project.participationWorth)}\r\n                                </TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                            volgende stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneCapital;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepOnePcr({ next, project, initialContact, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrYearlyPowerKwhConsumption: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrPostalCode: Yup.string()\r\n            .min(4, 'Minimum van ${min} postcode cijfers nodig')\r\n            .required('Verplicht')\r\n            .test(\r\n                'pcrPostalCode',\r\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                value => value && project.postalcodeLink && project.postalcodeLink.includes(value.substring(0, 4))\r\n            ),\r\n        pcrNumberOfSolarPanels: Yup.number().typeError('Alleen nummers'),\r\n        pcrInputGeneratedNumberOfKwh: Yup.number().typeError('Alleen nummers'),\r\n    });\r\n\r\n    const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = 0.8;\r\n    const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = 250;\r\n\r\n    function calculateEstimatedGeneratedNumberOfKwh(values) {\r\n        return values.pcrNumberOfSolarPanels\r\n            ? values.pcrNumberOfSolarPanels * PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n            : 0;\r\n    }\r\n    function calculateGeneratedNumberOfKwh(values) {\r\n        return values.pcrInputGeneratedNumberOfKwh && values.pcrInputGeneratedNumberOfKwh > 0\r\n            ? values.pcrInputGeneratedNumberOfKwh\r\n            : calculateEstimatedGeneratedNumberOfKwh(values)\r\n            ? calculateEstimatedGeneratedNumberOfKwh(values)\r\n            : 0;\r\n    }\r\n    function calculatePowerKwhConsumption(values) {\r\n        let extraPowerKwhConsumption =\r\n            values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values) > 0\r\n                ? values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values)\r\n                : 0;\r\n        return extraPowerKwhConsumption;\r\n    }\r\n    function calculateAdviseMaxNumberOfParticipations(values) {\r\n        let pcrAdviseMaxNumberOfParticipations =\r\n            calculatePowerKwhConsumption(values) > 0\r\n                ? Math.ceil(\r\n                      (calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE) /\r\n                          PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n                  )\r\n                : 0;\r\n\r\n        if (pcrAdviseMaxNumberOfParticipations < project.minParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.minParticipations;\r\n        } else if (pcrAdviseMaxNumberOfParticipations > project.maxParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.maxParticipations;\r\n        }\r\n        return pcrAdviseMaxNumberOfParticipations;\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({ ...values, powerKwhConsumption: calculatePowerKwhConsumption(values) });\r\n                next();\r\n            }}\r\n            initialValues={{\r\n                ...initialRegisterValues,\r\n            }}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => {\r\n                let pcrEstimatedGeneratedNumberOfKwh = calculateEstimatedGeneratedNumberOfKwh(values);\r\n                let powerKwhConsumption = Math.ceil(\r\n                    calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE\r\n                );\r\n                let pcrAdviseMaxNumberOfParticipations = calculateAdviseMaxNumberOfParticipations(values);\r\n                return (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                                </Col>\r\n\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Nominale waarde per participatie</FormLabel>\r\n                                    <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>Je postcode</Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrPostalCode\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_postal_code\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>Deelnemende postcodes</Form.Label>\r\n                                    <TextBlock>{project.postalcodeLink}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Je (geschatte) jaarlijks verbruik (in kWh)\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrYearlyPowerKwhConsumption\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_yearly_power_kwh_consumption\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Heb je al zonnepanelen op je eigen dak of doe je mee in een ander project?\r\n                                    </Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrHasSolarPanels\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => setFieldValue('pcrHasSolarPanels', 'Y')}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrHasSolarPanels', 'N');\r\n                                                                setFieldValue('pcrNumberOfSolarPanels', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrHasSolarPanels === 'Y' ? (\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <Form.Label className={'field-label'}>\r\n                                            Hoeveel zonnepanelen wekken al stroom voor je op\r\n                                        </Form.Label>\r\n                                        <Field\r\n                                            name=\"pcrNumberOfSolarPanels\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"pcr_number_of_solar_panels\"\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Wij schatten in dat je panelen jaarlijks opwekken\r\n                                    </Form.Label>\r\n                                    <TextBlock id=\"pcr_input_estimated_generated_number_of_kwh\">\r\n                                        {pcrEstimatedGeneratedNumberOfKwh} kWh\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>Klopt het geschatte opbrengst?</Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrEstimatedRevenueOk\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrEstimatedRevenueOk', 'Y');\r\n                                                                setFieldValue('pcrInputGeneratedNumberOfKwh', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => setFieldValue('pcrEstimatedRevenueOk', 'N')}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrEstimatedRevenueOk === 'N' ? (\r\n                                <>\r\n                                    <Row>\r\n                                        <Col xs={12} md={6}>\r\n                                            <Form.Label className={'field-label'}>\r\n                                                Wat is de jaarlijkse opbrengst van jouw panelen (in kWh)\r\n                                            </Form.Label>\r\n                                            <Field\r\n                                                name=\"pcrInputGeneratedNumberOfKwh\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"pcr_input_generated_number_of_kwh\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <p>\r\n                                        We adviseren tot 80% van je jaarlijks verbruik minus de jaarlijkse opbrengsten\r\n                                        (in jouw geval {powerKwhConsumption} kWh) te dekken met participaties. In het\r\n                                        veld hier direct onder is voor je uitgerekend hoeveel participaties dat zijn.\r\n                                        Het is een advies, je mag er ook meer kopen. Dit kan echter slecht zijn voor je\r\n                                        rendement.\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Advies maximaal aantal participaties\r\n                                    </Form.Label>\r\n                                    <TextBlock>{pcrAdviseMaxNumberOfParticipations}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Gewenst aantal participaties\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"participationsOptioned\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"participations_optioned\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Te betalen bedrag</FormLabel>\r\n                                    <TextBlock>\r\n                                        {MoneyPresenter(values.participationsOptioned * project.participationWorth)}\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            Ga naar gegevens\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOnePcr;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DefaultContactPersonalEdit from '../../contact-details/default-form-personal/Edit';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from '../../../helpers/ValidationSchemaPersonal';\r\nimport ValidationSchemaOrganisation from '../../../helpers/ValidationSchemaOrganisation';\r\nimport * as Yup from 'yup';\r\nimport DefaultContactOrganisationEdit from '../../contact-details/default-form-organisation/Edit';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepTwo({ portalSettings, previous, next, project, initialContact, handleSubmitContactValues }) {\r\n    initialContact.isParticipant = true;\r\n    const typeContact = initialContact.typeId ? initialContact.typeId : null;\r\n    const validationSchemaPcrPersonal = Yup.object().shape({\r\n        primaryAddress: Yup.object().shape({\r\n            postalCode: Yup.string().test(\r\n                'postal-code-primary-address-in-pcr-area',\r\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                function(value) {\r\n                    return project.postalcodeLink.includes(value.substring(0, 4));\r\n                }\r\n            ),\r\n        }),\r\n    });\r\n    const validationSchemaPcrOrganisation = Yup.object().shape({\r\n        visitAddress: Yup.object().shape({\r\n            postalCode: Yup.string()\r\n                .test(\r\n                    'postal-code-visit-address-in-pcr-area',\r\n                    'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                    function(value) {\r\n                        return project.postalcodeLink.includes(value.substring(0, 4));\r\n                    }\r\n                )\r\n                .required('Verplicht'),\r\n        }),\r\n    });\r\n\r\n    let validationSchema = null;\r\n    let validationSchemaBasic = null;\r\n    let validationSchemaAdditional = null;\r\n    let validationSchemaPcrAdditional = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            validationSchemaBasic = ValidationSchemaPersonal.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaPersonal.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n                validationSchema = validationSchema.concat(validationSchemaPcrPersonal);\r\n            }\r\n            break;\r\n        case 'organisation':\r\n            validationSchemaBasic = ValidationSchemaOrganisation.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaOrganisation.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n                validationSchema = validationSchema.concat(validationSchemaPcrOrganisation);\r\n            }\r\n            break;\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactValues(values, actions, next);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, values, handleSubmit }) => {\r\n                    return (\r\n                        <Form>\r\n                            {/* If contact is person */}\r\n                            {initialContact.typeId === 'person' ? (\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            {/* If contact is organisation */}\r\n                            {initialContact.typeId === 'organisation' ? (\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan en doorgaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepTwo;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepThree({ project, previous, next, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        didAcceptAgreement: Yup.bool().test(\r\n            'didAcceptAgreement',\r\n            'Je dient akkoord te gaan met de voorwaarden!',\r\n            value => value === true\r\n        ),\r\n        didUnderstandInfo: Yup.bool().test(\r\n            'didUnderstandInfo',\r\n            'Je dient te bevestigen, dat de projectinformatie gelezen en begrepen is!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                onSubmit={function(values, actions) {\r\n                    handleSubmitRegisterValues(values);\r\n                    next();\r\n                }}\r\n                initialValues={initialRegisterValues}\r\n            >\r\n                {({ handleSubmit, touched, errors }) => (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <p>\r\n                                        Om deel te kunnen nemen dien je akkoord te gaan met de voorwaarden en dien je te\r\n                                        bevestigen dat je de projectinformatie hebt gelezen en begrepen.\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didAcceptAgreement\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_accept_agreement\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_accept_agreement\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                >\r\n                                                    Ik ga akkoord met de{' '}\r\n                                                    <a href={project.linkAgreeTerms} target=\"_blank\">\r\n                                                        voorwaarden\r\n                                                    </a>\r\n                                                </span>\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didUnderstandInfo\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_understand_info\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_understand_info\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                >\r\n                                                    Ik heb de{' '}\r\n                                                    <a href={`${project.linkUnderstandInfo}`} target=\"_blank\">\r\n                                                        projectinformatie\r\n                                                    </a>{' '}\r\n                                                    (inclusief de daarin beschreven risico’s) behorende bij het project\r\n                                                    gelezen en begrepen\r\n                                                </span>\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            Ga naar inschrijfformulier\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepThree;\r\n","import React from 'react';\r\nimport Frame from 'react-frame-component';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ViewHtmlAsText = ({ id, value }) => {\r\n    const createMarkup = () => {\r\n        return { __html: value };\r\n    };\r\n\r\n    return (\r\n        <Frame>\r\n            <div id={id} dangerouslySetInnerHTML={createMarkup()} />\r\n        </Frame>\r\n    );\r\n};\r\n\r\nViewHtmlAsText.defaultProps = {\r\n    value: '',\r\n};\r\n\r\nViewHtmlAsText.propTypes = {\r\n    id: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default ViewHtmlAsText;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    createParticipantProject: registerValues => {\r\n        const requestUrl = `/project/participant/create`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport ViewHtmlAsText from '../../../components/general/ViewHtmlAsText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepFour({ previous, next, registerValues, setSucces }) {\r\n    const [contactDocument, setContactDocument] = useState('');\r\n    const [isLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        (function callFetchContact() {\r\n            setLoading(true);\r\n            ContactAPI.previewDocument(registerValues)\r\n                .then(payload => {\r\n                    setContactDocument(payload.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [registerValues]);\r\n\r\n    function handleSubmitRegisterValues(actions, next) {\r\n        ParticipantProjectAPI.createParticipantProject(registerValues)\r\n            .then(payload => {\r\n                // console.log(payload);\r\n                actions.setSubmitting(false);\r\n                setSucces(true);\r\n                next();\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        didAgreeRegistration: Yup.bool().test(\r\n            'didAgreeRegistration',\r\n            'Je dient akkoord te gaan met het inschrijfformulier!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <Formik\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={function(values, actions) {\r\n                        handleSubmitRegisterValues(actions, next);\r\n                    }}\r\n                    initialValues={{ didAgreeRegistration: false }}\r\n                >\r\n                    {({ handleSubmit, touched, errors, isSubmitting }) => (\r\n                        <>\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ViewHtmlAsText value={contactDocument} />\r\n                                        <Field\r\n                                            name=\"didAgreeRegistration\"\r\n                                            render={({ field }) => (\r\n                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                    <input\r\n                                                        type=\"checkbox\"\r\n                                                        {...field}\r\n                                                        id=\"did_agree_registration\"\r\n                                                        checked={field.value}\r\n                                                        className=\"w-checkbox-input checkbox\"\r\n                                                    />\r\n                                                    <span\r\n                                                        htmlFor=\"did_agree_registration\"\r\n                                                        className=\"checkbox-label w-form-label\"\r\n                                                    >\r\n                                                        Ik ben akkoord met het inschrijfformulier\r\n                                                    </span>\r\n                                                    {touched[field.name] && errors[field.name] ? (\r\n                                                        <div className={'error-message text-danger'}>\r\n                                                            {errors[field.name]}\r\n                                                        </div>\r\n                                                    ) : null}\r\n                                                </label>\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            Wanneer je akkoord gaat met het inschrijfformulier en de inschrijving\r\n                                            bevestigt, is je inschrijving definitief.\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                                Terug\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met verwerken\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Bevestigen inschrijving'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                                    volgende stap!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        </>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StepFour;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction StepFive() {\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    <p>\r\n                        Bedankt voor je inschrijving! Je ontvangt van ons een e-mail met daarin alle gegevens van je\r\n                        inschrijving en informatie over de vervolgstappen die we nemen om jouw inschrijving definitief\r\n                        te maken.\r\n                        <br />\r\n                        Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van bijvoorbeeld Gmail\r\n                        en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of je onze mail daar terug vindt.\r\n                    </p>\r\n                    <p>Onder de menuknop “Huidige deelnames” vind je je inschrijving terug.</p>\r\n                    <p>Wil je je inschrijving aanpassen? Neem dan contact met ons op.</p>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    <ButtonGroup className=\"float-right\">\r\n                        <Link to={`/inschrijvingen-projecten`}>\r\n                            <Button className={'w-button'} size=\"sm\">\r\n                                Naar mijn huidige deelnames\r\n                            </Button>\r\n                        </Link>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepFive;\r\n","import React from 'react';\r\nimport StepOneLoan from './StepOneLoan';\r\nimport StepOneObligation from './StepOneObligation';\r\nimport StepOneCapital from './StepOneCapital';\r\nimport StepOnePcr from './StepOnePcr';\r\nimport StepTwo from './StepTwo';\r\nimport StepThree from './StepThree';\r\nimport StepFour from './StepFour';\r\nimport StepFive from './StepFive';\r\n\r\nfunction Steps({\r\n    portalSettings,\r\n    currentStep,\r\n    previous,\r\n    next,\r\n    project,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    switch (currentStep) {\r\n        case 1:\r\n            switch (project.projectType.codeRef) {\r\n                case 'loan':\r\n                    return (\r\n                        <StepOneLoan\r\n                            next={next}\r\n                            project={project}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'obligation':\r\n                    return (\r\n                        <StepOneObligation\r\n                            next={next}\r\n                            project={project}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'capital':\r\n                    return (\r\n                        <StepOneCapital\r\n                            next={next}\r\n                            project={project}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'postalcode_link_capital':\r\n                    return (\r\n                        <StepOnePcr\r\n                            next={next}\r\n                            project={project}\r\n                            initialContact={initialContact}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                default:\r\n                    return null;\r\n            }\r\n\r\n        case 2:\r\n            return (\r\n                <StepTwo\r\n                    portalSettings={portalSettings}\r\n                    previous={previous}\r\n                    next={next}\r\n                    project={project}\r\n                    initialContact={initialContact}\r\n                    handleSubmitContactValues={handleSubmitContactValues}\r\n                />\r\n            );\r\n        case 3:\r\n            return (\r\n                <StepThree\r\n                    project={project}\r\n                    previous={previous}\r\n                    next={next}\r\n                    initialRegisterValues={initialRegisterValues}\r\n                    handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                />\r\n            );\r\n        case 4:\r\n            return (\r\n                <StepFour\r\n                    previous={previous}\r\n                    next={next}\r\n                    registerValues={initialRegisterValues}\r\n                    setSucces={setSucces}\r\n                />\r\n            );\r\n        case 5:\r\n            return <StepFive />;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default Steps;\r\n","import React from 'react';\r\nimport Steps from './steps';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction MasterForm({\r\n    portalSettings,\r\n    project,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    const [currentStep, setStep] = React.useState(1);\r\n\r\n    function previous() {\r\n        setStep(currentStep <= 2 ? 1 : currentStep - 1);\r\n    }\r\n\r\n    function next() {\r\n        setStep(currentStep >= 4 ? 5 : currentStep + 1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {currentStep <= 4 ? (\r\n                <Row className={'mb-4'}>\r\n                    <Col>\r\n                        <div className={'arrow-steps clearfix'}>\r\n                            <div className={`step ${currentStep === 1 ? 'current' : ''}`}>1. Inschrijven</div>\r\n                            <div className={`step ${currentStep === 2 ? 'current' : ''}`}>2. Gegevens</div>\r\n                            <div className={`step ${currentStep === 3 ? 'current' : ''}`}>3. Voorwaarden</div>\r\n                            <div className={`step ${currentStep === 4 ? 'current' : ''}`}>4. Inschrijfformulier</div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            ) : null}\r\n            <Steps\r\n                portalSettings={portalSettings}\r\n                currentStep={currentStep}\r\n                previous={previous}\r\n                next={next}\r\n                project={project}\r\n                initialRegisterValues={initialRegisterValues}\r\n                handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                initialContact={initialContact}\r\n                handleSubmitContactValues={handleSubmitContactValues}\r\n                setSucces={setSucces}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MasterForm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../api/project/ProjectAPI';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport MasterForm from './MasterForm';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport axios from 'axios';\r\n\r\nfunction RegisterProject({ match, currentSelectedContact }) {\r\n    const initialRegisterValues = {\r\n        contactId: null,\r\n        projectId: null,\r\n        participationsOptioned: 0,\r\n        powerKwhConsumption: 0,\r\n        amountOptioned: 0,\r\n        didAcceptAgreement: false,\r\n        didUnderstandInfo: false,\r\n    };\r\n\r\n    const initialPcrValues = {\r\n        pcrYearlyPowerKwhConsumption: 0,\r\n        pcrPostalCode: '',\r\n        pcrHasSolarPanels: 'N',\r\n        pcrInputGeneratedNumberOfKwh: 0,\r\n        pcrEstimatedRevenueOk: 'Y',\r\n    };\r\n\r\n    const [registerValues, setRegisterValues] = useState(initialRegisterValues);\r\n\r\n    const [project, setProject] = useState({});\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isSucces, setSucces] = useState(false);\r\n    const [isRegistered, setRegistered] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function fetchContactAndProject() {\r\n                setLoading(true);\r\n\r\n                axios\r\n                    .all([ProjectAPI.fetchProject(match.params.id), ContactAPI.fetchContact(currentSelectedContact.id)])\r\n                    .then(\r\n                        axios.spread((payloadProject, payloadContact) => {\r\n                            const contact = payloadContact.data.data;\r\n                            const project = payloadProject.data.data;\r\n                            // console.log(project);\r\n                            setProject(project);\r\n                            const contactData = rebaseContact(contact);\r\n                            setContact(contactData);\r\n                            callFetchContactProjects();\r\n\r\n                            if (\r\n                                project &&\r\n                                project.projectType &&\r\n                                project.projectType.codeRef === 'postalcode_link_capital'\r\n                            ) {\r\n                                let pcrPostalCode = '';\r\n                                if (contactData.typeId === 'organisation') {\r\n                                    pcrPostalCode = contactData.visitAddress ? contactData.visitAddress.postalCode : '';\r\n                                } else {\r\n                                    pcrPostalCode = contactData.primaryAddress\r\n                                        ? contactData.primaryAddress.postalCode\r\n                                        : '';\r\n                                }\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    ...initialPcrValues,\r\n                                    pcrPostalCode,\r\n                                });\r\n                            } else {\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                });\r\n                            }\r\n\r\n                            setLoading(false);\r\n                        })\r\n                    )\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n\r\n        (function callFetchPortalSettings() {\r\n            setLoading(true);\r\n            const keys =\r\n                '?keys[]=portalName' +\r\n                '&keys[]=portalWebsite' +\r\n                '&keys[]=portalUrl' +\r\n                '&keys[]=responsibleUserId' +\r\n                '&keys[]=checkContactTaskResponsibleUserId' +\r\n                '&keys[]=linkPrivacyPolicy';\r\n            PortalSettingsAPI.fetchPortalSettings(keys)\r\n                .then(payload => {\r\n                    setPortalSettings({ ...payload.data });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ isLoading: false, hasError: true });\r\n                });\r\n        })();\r\n    }, [match, currentSelectedContact]);\r\n\r\n    function callFetchContactProjects() {\r\n        ContactAPI.fetchContactWithParticipants(currentSelectedContact.id)\r\n            .then(payload => {\r\n                let contactProjecten = [];\r\n                payload.data.data.participations.map(item => contactProjecten.push(item.project.id));\r\n\r\n                const projectId = match.params.id;\r\n\r\n                if (contactProjecten.includes(Number(projectId))) {\r\n                    setRegistered(true);\r\n                } else {\r\n                    setRegistered(false);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    function handleSubmitRegisterValues(values) {\r\n        setRegisterValues({ ...registerValues, ...values });\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, nextStep) {\r\n        const updatedContact = { ...contact, ...values };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                ContactAPI.fetchContact(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        const contactData = rebaseContact(payload.data.data);\r\n\r\n                        setContact(contactData);\r\n                        nextStep();\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : isRegistered ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                <strong>{formatFullName(contact.fullName)}</strong> is al ingeschreven voor project{' '}\r\n                                <strong>{project.name}</strong>\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : (\r\n                <Row>\r\n                    <Col>\r\n                        {isSucces ? (\r\n                            <h1 className=\"content-heading\">\r\n                                Ingeschreven voor project <strong>{project.name}</strong>\r\n                            </h1>\r\n                        ) : (\r\n                            <h1 className=\"content-heading\">\r\n                                Schrijf <strong>{formatFullName(contact.fullName)}</strong> in voor project{' '}\r\n                                <strong>{project.name}</strong>\r\n                            </h1>\r\n                        )}\r\n                        <MasterForm\r\n                            portalSettings={portalSettings}\r\n                            project={project}\r\n                            initialRegisterValues={registerValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                            // initialAdditionalPcrValues={additionalPcrValues}\r\n                            // handleSubmitAdditionalPcrValues={handleSubmitAdditionalPcrValues}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            setSucces={setSucces}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegisterProjectWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegisterProject {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../../api/project/ProjectAPI';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\n\r\nfunction ProjectList(props) {\r\n    const [contactProjectsArray, setContactProjectsArray] = useState([]);\r\n    const [contact, setContact] = useState({});\r\n    const [projectData, setProjectData] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        (function callFetchProjects() {\r\n            setLoading(true);\r\n            // Call Api if current selected contact id is filled\r\n            if (props.currentSelectedContact.id) {\r\n                // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n                if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                    callFetchContactProjects();\r\n                    callFetchContact();\r\n                }\r\n            }\r\n            ProjectAPI.fetchProjects()\r\n                .then(payload => {\r\n                    setProjectData(payload.data.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContactProjects() {\r\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                let contactProjecten = [];\r\n                payload.data.data.participations.map(item => contactProjecten.push(item.project.id));\r\n                setContactProjectsArray(contactProjecten);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function callFetchContact() {\r\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContact(payload.data.data);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        Overzicht projecten waarop <strong>{formatFullName(contact.fullName)}</strong> kan inschrijven.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <p>Klik op het project voor meer details.</p>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {isLoading ? (\r\n                        <LoadingView />\r\n                    ) : projectData.length === 0 ? (\r\n                        'Geen projecten beschikbaar om op in te schrijven.'\r\n                    ) : (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Project</th>\r\n                                    <th>Ingeschreven</th>\r\n                                    <th>Start inschrijving</th>\r\n                                    <th>Einde inschrijving</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {projectData.map(project => (\r\n                                    <tr key={project.id}>\r\n                                        <td>\r\n                                            {contactProjectsArray.includes(project.id) ? (\r\n                                                project.name\r\n                                            ) : (\r\n                                                <Link to={`/project/${project.id}`}>{project.name}</Link>\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            {contactProjectsArray.includes(project.id) ? (\r\n                                                <div className=\"text-success text-center\">✔</div>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            {project.dateStartRegistrations\r\n                                                ? moment(project.dateStartRegistrations).format('LL')\r\n                                                : ''}\r\n                                        </td>\r\n                                        <td>\r\n                                            {project.dateEndRegistrations\r\n                                                ? moment(project.dateEndRegistrations).format('LL')\r\n                                                : ''}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function ProjectListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => <ProjectList {...props} currentSelectedContact={currentSelectedContact} />}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction LoanDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                    <FormLabel>Lening nodig</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.amountOfLoanNeeded)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.minAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.maxAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoanDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction ObligationDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Nominale waarde per obligatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal obligaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ObligationDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction CapitalDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Nominale waarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CapitalDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction PcrDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Nominale waarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PcrDetails;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../../api/project/ProjectAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport LoanDetails from './LoanDetails';\r\nimport ObligationDetails from './ObligationDetails';\r\nimport CapitalDetails from './CapitalDetails';\r\nimport PcrDetails from './PcrDetails';\r\nimport PortalSettingsAPI from '../../../api/portal-settings/PortalSettingsAPI';\r\n\r\nfunction ProjectDetails({ match }) {\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [project, setProject] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const keys =\r\n            '?keys[]=portalName' +\r\n            '&keys[]=portalWebsite' +\r\n            '&keys[]=portalUrl' +\r\n            '&keys[]=responsibleUserId' +\r\n            '&keys[]=checkContactTaskResponsibleUserId' +\r\n            '&keys[]=linkPrivacyPolicy';\r\n        PortalSettingsAPI.fetchPortalSettings(keys)\r\n            .then(payload => {\r\n                setPortalSettings({ ...payload.data });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ isLoading: false, hasError: true });\r\n            });\r\n\r\n        (function callFetchProject() {\r\n            setLoading(true);\r\n            ProjectAPI.fetchProject(match.params.id)\r\n                .then(payload => {\r\n                    setProject(payload.data.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [match]);\r\n\r\n    function renderDetails() {\r\n        switch (project.projectType.codeRef) {\r\n            case 'loan':\r\n                return <LoanDetails project={project} />;\r\n            case 'obligation':\r\n                return <ObligationDetails project={project} />;\r\n            case 'capital':\r\n                return <CapitalDetails project={project} />;\r\n            case 'postalcode_link_capital':\r\n                return <PcrDetails project={project} />;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">Inschrijven project</h1>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {renderDetails()}\r\n\r\n                    <Row className={'mt-5'}>\r\n                        <Col>\r\n                            <p>\r\n                                Meer informatie over dit project vind je{' '}\r\n                                <a href={`${project.linkUnderstandInfo}`} target=\"_blank\">\r\n                                    hier\r\n                                </a>\r\n                            </p>\r\n                            <p>Wil je inschrijven op dit project. Klik dan op \"Ga naar inschrijven\".</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijven/${project.id}`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Ga naar inschrijven\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ProjectDetails;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport moment from 'moment';\r\n\r\nfunction RegistrationList(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContact(payload.data.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        De projecten waarin <strong>{formatFullName(contact.fullName)}</strong> deelneemt.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {isLoading ? (\r\n                        <LoadingView />\r\n                    ) : contact.length === 0 ? (\r\n                        'Nog geen inschrijvingen.'\r\n                    ) : (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Project</th>\r\n                                    <th>Deelname</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {contact.participations.map(participation => {\r\n                                    if (\r\n                                        !participation.project.dateEnd ||\r\n                                        moment(participation.project.dateEnd).format('YYYY-MM-DD') >=\r\n                                            moment().format('YYYY-MM-DD')\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={participation.id}>\r\n                                                <td>{participation.project.name}</td>\r\n                                                <td>\r\n                                                    {participation.project.projectType.codeRef == 'loan' ? (\r\n                                                        <>\r\n                                                            {participation.amountInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountInteressed)}{' '}\r\n                                                                    <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountOptioned)}{' '}\r\n                                                                    <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening {MoneyPresenter(participation.amountGranted)}{' '}\r\n                                                                    <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountDefinitive)}{' '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'obligation' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' obligaties '} <em> (Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' obligaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' obligaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' obligaties '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef ==\r\n                                                    'postalcode_link_capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegistrationListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegistrationList {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    personTitleId: Yup.string()\r\n        .nullable()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormPersonal = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            personTitleId: '',\r\n            personFirstName: '',\r\n            personLastName: '',\r\n        }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor jezelf</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonText\r\n                            buttonText={'Account aanmaken'}\r\n                            buttonClassName={'authorization-button'}\r\n                            size=\"sm\"\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                            disabled={showSuccessMessage}\r\n                        />\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormPersonal;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    organisationName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personTitleId: Yup.string()\r\n        .nullable()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormOrganisation = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '', organisationName: '', personTitleId: '', personFirstName: '', personLastName: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor je organisatie</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"organisationName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Naam Organisatie'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens contactpersoon</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonText\r\n                            buttonText={'Account aanmaken'}\r\n                            buttonClassName={'authorization-button'}\r\n                            size=\"sm\"\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                            disabled={showSuccessMessage}\r\n                        />\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormOrganisation;\r\n","import React, { useState } from 'react';\r\nimport { GoogleReCaptchaProvider, useGoogleReCaptcha } from 'react-google-recaptcha-v3';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport NewAccountFormPersonal from './NewAccountFormPersonal';\r\nimport NewAccountFormOrganisation from './NewAccountFormOrganisation';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, ButtonToolbar } from 'react-bootstrap';\r\n\r\nconst NewAccount = props => {\r\n    const { executeRecaptcha } = useGoogleReCaptcha();\r\n    const [contactType, setContactType] = useState('person');\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    async function handleSubmit(values, actions) {\r\n        if (!executeRecaptcha) {\r\n            return;\r\n        }\r\n        const reCaptchaToken = await executeRecaptcha('signup_page');\r\n\r\n        AuthAPI.newAccount({ ...values, contactType: contactType, reCaptchaToken })\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If new account fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                if (error.response && error.response.status === 404) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres.'\r\n                    );\r\n                } else if (error.response && error.response.status === 405) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een contact met het e-mailadres, voornaam en achternaam dat je hebt ingevuld. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres, voornaam of achternaam.'\r\n                    );\r\n                } else {\r\n                    setErrorMessage('Fout bij aanmaken nieuw account!');\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={'nieuw-account-succes'} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"authorization-container\">\r\n            <Container fluid className=\"authorization-text\">\r\n                <Row className=\"justify-content-center align-content-start align-content-lg-center full-height p-2\">\r\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"4\" xl=\"4\">\r\n                        <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container-small\" />\r\n\r\n                        {showSuccessMessage ? (\r\n                            redirect()\r\n                        ) : (\r\n                            <>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <h3 className={'authorization-text'}>Nieuw account</h3>\r\n                                </Row>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <p className={'authorization-text'}>Maak binnen 2 minuten een account aan.</p>\r\n                                </Row>\r\n                                <br />\r\n                                <Row className=\"justify-content-center\">\r\n                                    <ButtonToolbar toggle>\r\n                                        <Col>\r\n                                            <Button\r\n                                                className={'authorization-button'}\r\n                                                variant={\r\n                                                    contactType === 'person'\r\n                                                        ? 'primary fixed-height'\r\n                                                        : 'light fixed-height'\r\n                                                }\r\n                                                block\r\n                                                onClick={() => setContactType('person')}\r\n                                            >\r\n                                                Voor jezelf\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                className={'authorization-button'}\r\n                                                variant={contactType === 'organisation' ? 'primary' : 'light'}\r\n                                                block\r\n                                                onClick={() => setContactType('organisation')}\r\n                                            >\r\n                                                Voor je organisatie\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </ButtonToolbar>\r\n                                </Row>\r\n                                <br />\r\n\r\n                                {contactType === 'person' ? (\r\n                                    <NewAccountFormPersonal\r\n                                        handleSubmit={handleSubmit}\r\n                                        showSuccessMessage={showSuccessMessage}\r\n                                    />\r\n                                ) : (\r\n                                    <NewAccountFormOrganisation\r\n                                        handleSubmit={handleSubmit}\r\n                                        showSuccessMessage={showSuccessMessage}\r\n                                    />\r\n                                )}\r\n                                <br />\r\n\r\n                                {showError ? (\r\n                                    <Row>\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            {errorMessage}\r\n                                        </Alert>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction NewAccountWithProvider() {\r\n    const RE_CAPTCHA_KEY = process.env.REACT_APP_RE_CAPTCHA_KEY;\r\n\r\n    return (\r\n        <GoogleReCaptchaProvider reCaptchaKey={RE_CAPTCHA_KEY} language={'nl'}>\r\n            <NewAccount />\r\n        </GoogleReCaptchaProvider>\r\n    );\r\n}\r\n\r\nexport default NewAccountWithProvider;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NewAccountSuccess = () => {\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                    <div>\r\n                        <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                        <p className={'authorization-text'}>\r\n                            Binnen enkele minuten ontvang je een e-mail met een persoonlijke link. Via deze link kun je\r\n                            je account activeren.\r\n                            <br />\r\n                            Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van bijvoorbeeld\r\n                            Gmail en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of je onze mail daar\r\n                            terug vindt.\r\n                        </p>\r\n                        <a onClick={window.close} href=\"#\" className=\"authorization-link\">\r\n                            Sluit venster\r\n                        </a>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NewAccountSuccess;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email('Geen geldig e-mailadres')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountEmail() {\r\n    const [portalUserEmail, setPortalUserEmail] = useState('');\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (function callFetchUserEmail() {\r\n            PortalUserAPI.fetchPortalUserEmail()\r\n                .then(payload => {\r\n                    setPortalUserEmail(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n    function handleSubmitChangeEmail(values, actions) {\r\n        PortalUserAPI.changeEmail(values)\r\n            .then(payload => {\r\n                setPortalUserEmail(values.email);\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', changePrimaryEmailAddress: false }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangeEmail(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Inlog e-mail is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit\r\n                            e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan\r\n                            alsjeblieft een ander e-mailadres.\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12}>\r\n                            <FormLabel className={'field-label'}>Huidig e-mailadres</FormLabel>\r\n                            <TextBlock>{portalUserEmail}</TextBlock>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label pt-1'}>Nieuw e-mailadres</Form.Label>\r\n                            <Field\r\n                                name=\"email\"\r\n                                render={({ field }) => (\r\n                                    <InputText field={field} errors={errors} touched={touched} id=\"email\" />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Field\r\n                                name=\"changePrimaryEmailAddress\"\r\n                                render={({ field }) => (\r\n                                    <label className=\"w-checkbox checkbox-fld\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            {...field}\r\n                                            id=\"change-primary-email-address\"\r\n                                            checked={field.value}\r\n                                            className=\"w-checkbox-input checkbox\"\r\n                                        />\r\n                                        <span\r\n                                            htmlFor=\"change-primary-email-address\"\r\n                                            className=\"checkbox-label w-form-label\"\r\n                                        >\r\n                                            Wijziging ook doorvoeren op huidig correspondentie e-mailadres?\r\n                                        </span>\r\n                                    </label>\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig e-mailadres'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountEmail;\r\n","import React, { useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountPassword() {\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    function handleSubmitChangePassword(values, actions) {\r\n        PortalUserAPI.changePassword(values)\r\n            .then(payload => {\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ password: '', passwordConfirmation: '' }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangePassword(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Wachtwoord is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Fout bij wijzigen wachtwoord!\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label'}>Nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"password\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"password\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label mt-0'}>Herhaal nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"passwordConfirmation\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"passwordConfirmation\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Herhaal nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig wachtwoord'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountPassword;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ChangeAccountEmail from './Email';\r\nimport ChangeAccountPassword from './Password';\r\n\r\nfunction ChangeAccount() {\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">Wijzig inloggegevens</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={6} className={'mb-5'}>\r\n                    <h3 className={'h3'}>Wijzig inlog e-mailadres</h3>\r\n\r\n                    <ChangeAccountEmail />\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <h3 className={'h3'}>Wijzig wachtwoord</h3>\r\n\r\n                    <ChangeAccountPassword />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ChangeAccount;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch } from 'react-router-dom';\r\nimport ProtectedRoute from './route/ProtectedRoute';\r\nimport PublicRoute from './route/PublicRoute';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport { PortalUserProvider } from './context/PortalUserContext';\r\nimport Login from './container/authorization/login';\r\nimport Register from './container/authorization/register';\r\nimport Forgot from './container/authorization/forgot';\r\nimport Reset from './container/authorization/reset';\r\nimport ContactDetails from './container/contact-details';\r\nimport MyAreasOfInterest from './container/my-areas-of-interest';\r\nimport RegisterProject from './container/register';\r\nimport ProjectList from './container/project/list';\r\nimport ProjectDetails from './container/project/details';\r\nimport RegistrationList from './container/registration/list';\r\nimport NewAccount from './container/authorization/new-account';\r\nimport NewAccountSuccess from './container/authorization/new-account/NewAccountSuccess';\r\nimport ChangeAccount from './container/authorization/change-account';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n                <PortalUserProvider>\r\n                    <Switch>\r\n                        <ProtectedRoute exact path=\"/\" component={ContactDetails} />\r\n                        <ProtectedRoute path=\"/gegevens\" component={ContactDetails} />\r\n                        <ProtectedRoute path=\"/mijn-interessegebieden\" component={MyAreasOfInterest} />\r\n                        <ProtectedRoute path=\"/inschrijven/:id\" component={RegisterProject} />\r\n                        <ProtectedRoute path=\"/inschrijven-projecten\" component={ProjectList} />\r\n                        <ProtectedRoute path=\"/inschrijvingen-projecten\" component={RegistrationList} />\r\n                        <ProtectedRoute path=\"/project/:id\" component={ProjectDetails} />\r\n                        <ProtectedRoute path=\"/wijzig-inloggegevens\" component={ChangeAccount} />\r\n                        <PublicRoute path=\"/login\" component={Login} />\r\n                        <PublicRoute path=\"/activeer-registratie/:registrationCode/:email\" component={Register} />\r\n                        <PublicRoute path=\"/wachtwoord-vergeten\" component={Forgot} />\r\n                        <PublicRoute path=\"/wachtwoord-wijzigen/:token/:email\" component={Reset} />\r\n                        <PublicRoute path=\"/nieuw-account\" component={NewAccount} />\r\n                        <PublicRoute path=\"/nieuw-account-succes\" component={NewAccountSuccess} />\r\n                    </Switch>\r\n                </PortalUserProvider>\r\n            </AuthProvider>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/normalize.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-day-picker/lib/style.css';\r\nimport './css/webflow.css';\r\nimport './css/econobis.webflow.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'moment/locale/nl';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// Server data is set and can now removed\r\nvar serverDataScript = document.getElementById('server-data');\r\nserverDataScript.remove();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}