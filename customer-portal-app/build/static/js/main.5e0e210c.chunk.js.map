{"version":3,"sources":["context/AuthContext.js","context/PortalUserContext.js","context/ThemeSettingsContext.js","components/layout/Header.js","api/default-setup/AxiosInstance.js","api/portal-user/PortalUserAPI.js","route/ProtectedRoute.js","route/PublicRoute.js","components/form/InputText.js","components/button/ButtonText.js","container/authorization/login/Form.js","api/auth/AuthAPI.js","api/portal-settings/PortalSettingsAPI.js","api/general/MeAPI.js","container/authorization/login/index.js","container/authorization/two-factor/index.js","container/authorization/two-factor/recover.js","container/authorization/register/Form.js","container/authorization/register/index.js","container/authorization/forgot/Form.js","container/authorization/forgot/index.js","container/authorization/reset/Form.js","container/authorization/reset/index.js","components/general/LoadingView.js","api/contact/ContactAPI.js","helpers/RebaseContact.js","container/dashboard/widget/index.js","container/dashboard/widget/default.js","api/dashboard/DashboardSettingsAPI.js","container/dashboard/index.js","components/general/TextBlock.js","container/contact-details/default-form-personal/View.js","components/form/Select.js","data/Countries.js","data/EnergySuppliers.js","data/Titles.js","data/LastNamePrefixes.js","components/form/InputDate.js","container/contact-details/default-form-personal/Edit.js","helpers/ValidationSchemaPersonal.js","container/contact-details/Personal.js","container/contact-details/default-form-organisation/View.js","container/contact-details/default-form-organisation/Edit.js","helpers/ValidationSchemaOrganisation.js","container/contact-details/Organisation.js","container/contact-details/index.js","container/my-areas-of-interest/Form.js","container/my-areas-of-interest/index.js","api/project/ProjectAPI.js","helpers/MoneyPresenter.js","helpers/CalculateTransactionCosts.js","components/form/InputTextCurrency.js","container/register/steps/StepOneLoan.js","container/register/steps/StepOneObligation.js","container/register/steps/StepOneCapital.js","container/register/steps/StepOnePcr.js","container/register/steps/StepTwo.js","container/register/steps/StepThree.js","components/general/ViewHtmlAsText.js","api/participant-project/ParticipantProjectAPI.js","container/register/steps/StepFour.js","container/register/steps/StepFive.js","container/register/steps/index.js","container/register/MasterForm.js","container/register/index.js","container/project/list/address-person/Edit.js","container/project/list/address-organisation/Edit.js","container/project/list/index.js","container/project/details/LoanDetails.js","container/project/details/ObligationDetails.js","container/project/details/CapitalDetails.js","container/project/details/PcrDetails.js","container/project/details/index.js","container/registration/list/index.js","container/authorization/new-account/NewAccountFormPersonal.js","container/authorization/new-account/NewAccountFormOrganisation.js","container/authorization/new-account/index.js","container/authorization/new-account/NewAccountSuccess.js","container/authorization/change-account/Email.js","container/authorization/change-account/Password.js","container/authorization/change-account/TwoFactorSettings.js","container/authorization/change-account/index.js","container/about-us/list/index.js","container/registration/details/Title.js","helpers/ValueBasedOnTypePresenter.js","container/registration/details/project-table/index.js","helpers/classNameBasedOnTypePresenter.js","container/registration/details/mutation-table/index.js","container/registration/details/document-table/index.js","container/registration/details/index.js","container/financial-overview-documents/list/index.js","api/administration/AdministrationAPI.js","container/about-us/details/document-table/index.js","container/about-us/details/index.js","api/participant-mutation/ParticipantMutationAPI.js","container/register/mollie-redirect/index.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","localStorageToken","AuthProvider","props","useState","window","localStorage","getItem","checkIfAuth","isAuth","setAuth","Provider","value","login","payload","cbRedirect","token","access_token","removeItem","setItem","moment","format","logout","children","AuthConsumer","Consumer","PortalUserContext","user","setInitialUserData","PortalUserProvider","setUser","currentSelectedContact","setCurrentContact","selectedContactId","id","occupationUser","occupations","find","occupation","primaryContact","organisationUser","typeId","primary","switchCurrentContact","contact","resetCurrentUserToDefault","updateNameSelectedContact","fullNameFnf","firstName","lastNamePrefix","lastName","updatedOccupations","map","occupationContact","PortalUserConsumer","ThemeSettingsContext","defaultThemeSettings","setInitialThemeSettings","setCurrentThemeSettings","switchToDefaultThemeSettings","ThemeSettingsProvider","setDefaultThemeSettings","currentThemeSettings","Date","now","imageHash","useEffect","document","documentElement","style","setProperty","portal_image_bg_file_name_header","portal_main_background_color","portal_main_text_color","portal_background_color","portal_background_text_color","login_header_background_color","login_header_background_text_color","header_icons_color","login_field_background_color","login_field_background_text_color","button_color","button_text_color","ThemeSettingsConsumer","withRouter","location","history","menuOpen","updateStateMenu","closeMenu","formatProfilePicName","replace","redirect","to","push","ref","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","useOutsideAlerter","useRef","className","length","ReactHtmlParser","alignRight","Toggle","marginTop","Menu","Header","Item","onClick","active","occupationForPortal","key","xs","undefined","portal_logo_file_name_header","src","fontSize","marginLeft","padding","disabled","Divider","pathname","Button","right","width","isOpen","onStateChange","state","handleStateChange","customBurgerIcon","Fragment","hasFinancialOverviews","BASE_URL","__SERVER_DATA__","base_url","axiosInstance","axios","create","baseURL","interceptors","request","use","config","lastActivity","add","hash","setTimeout","reload","checkTokenExpiration","AUTH_TOKEN","TWO_FACTOR_TOKEN","headers","Authorization","TwoFactorToken","error","Promise","reject","get","params","jory","fld","rlt","values","post","ProtectedRoute","Component","component","rest","useLocation","useHistory","useContext","PortalUserAPI","then","data","portalSettingsLayoutAssigned","catch","response","status","alert","code","includes","render","ProtectedRouteWithContext","PublicRoute","InputText","field","type","readOnly","placeholder","showErrorMessage","errors","touched","classNameErrorMessage","customOnChange","onChange","name","Boolean","defaultProps","ButtonText","buttonClassName","buttonText","onClickAction","loading","title","loadingSpinnerColor","size","color","validationSchema","Yup","shape","username","email","required","password","LoginForm","handleSubmit","initialValues","enableReinitialize","onSubmit","actions","setSubmitting","isSubmitting","AUTH_KEY","client_id","client_secret","client_key","grant_type","requestUrl","defaults","common","loginCredentials","keys","PasswordConfirmation","recovery_code","isLoading","setIsLoading","showError","toggleError","redirectToReferrer","toggleRedirect","from","portalActive","setPortalActive","showNewAtCooperativeLink","setShowNewAtCooperativeLink","newAtCooperativeLinkText","setNewAtCooperativeLinkText","AuthAPI","MeAPI","hasTwoFactorEnabled","PortalSettingsAPI","fluid","sm","md","lg","xl","alt","variant","href","setCode","preventDefault","e","autoFocus","min","matches","passwordConfirmation","oneOf","RegisterForm","Register","match","showLoginLink","setLoginLink","errorMessage","setErrorMessage","showSuccessMessage","toggleSuccessMessage","registrationCode","decodeURIComponent","password_confirmation","message","RegisterWithContext","ForgotForm","Forgot","ResetForm","Reset","ResetWithContext","Loading","height","person","organisation","emailAddresses","phoneNumbers","addresses","country","primaryAddressEnergySupplierElectricity","energySupplier","flt","f","d","participations","project","projectType","administration","registerValues","contactId","projectId","responseType","contactData","emptyPrimaryAddressEnergySupplierElectricity","energySupplierId","esNumber","memberSince","emptyAddress","street","number","addition","postalCode","city","countryId","eanElectricity","eanGas","primaryAddress","visitAddress","postalAddress","invoiceAddress","address","emptyEmail","emailCorrespondence","emailAddress","emailInvoice","emptyPhoneNumber","phoneNumberPrimary","phoneNumber","phoneNumberTwo","filter","DashboardWidget","text","image","buttonLink","backgroundColorUsed","textColorUsed","externalLink","toLowerCase","startsWith","Card","backgroundColor","CardImg","whiteSpace","ContactDetailsDashboardWidget","typeContact","isEmpty","SwitchContactDashboardWidget","display","justifyContent","overflowX","margin","Dashboard","setLoading","setContact","dashboardSettings","setDashboardSettings","prevCurrentSelectedContact","usePrevious","ContactAPI","rebaseContact","console","log","finally","DashboardSettingsAPI","LoadingView","welcomeTitle","welcomeMessage","widgets","w","sort","a","b","order","widget","codeRef","widgetImageFileName","defaultWidgetBackgroundColor","defaultWidgetTextColor","DashboardWithContext","TextBlock","showPlaceholder","DefaultContactPersonalView","portalSettings","initialContact","iban","ibanAttn","didAgreeAvg","dateDidAgreeAvg","initials","dateOfBirth","checked","htmlFor","Select","options","optionLabel","emptyOption","option","InputDate","manualInput","disabledBefore","disabledAfter","onChangeAction","formattedDate","disabledDays","before","after","onDayChange","date","formatDate","parseDate","dayPickerProps","showWeekNumbers","locale","firstDayOfWeek","localeUtils","MomentLocaleUtils","inputProps","autoComplete","DefaultContactPersonalEdit","projectTypeCodeRef","setFieldValue","memberSinceDisabledBefore","memberSinceDisabledAfter","endDatePrevious","memberSinceNext","subtract","Titles","disableChangeContactNameOnPortal","data-tip","data-for","effect","place","multiline","aria-haspopup","LastNamePrefixes","isParticipant","blockChangeAddress","blockChangeAddressNumber","isParticipantSceProject","isParticipantPcrProject","isNaN","trim","Countries","toUpperCase","EnergySuppliers","validationSchemaBasic","test","nullable","Number","isInteger","this","parent","search","ibantools","validationSchemaAdditional","typeError","validationSchemaPcrAdditional","validationSchemaPostalCodeAndNumber","ContactDetailsPersonal","handleSubmitContactValues","editButtonGroup","editForm","setEditForm","ValidationSchemaPersonal","concat","aria-label","DefaultContactOrganisationView","primaryOccupations","chamberOfCommerceNumber","vatNumber","website","DefaultContactOrganisationEdit","ContactDetailsOrganisation","ValidationSchemaOrganisation","ContactDetails","setPortalSettings","callFetchContact","switchToView","updatedContact","setStatus","setState","hasError","ContactDetailsWithContext","MyAreasOfInterestForm","arrayHelpers","myAreasOfInterest","myAreaOfInterest","index","participation","generalOptions","generalOption","MyAreasOfInterest","and","o","documentAgreeTerms","documentUnderstandInfo","documentProjectInfo","amount","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","amountOptioned","participationsOptioned","transactionCosts","varAmountOptioned","toString","varParticipationsOptioned","toFixed","transactionCostsCodeRef","transactionCostsAmount","currentBookWorth","transactionCostsAmount3","transactionCostsPercentage3","transactionCostsAmount2","transactionCostsPercentage2","transactionCostsPercentage","transactionCostsAmountMin","transactionCostsAmountMax","InputTextCurrency","StepOneLoan","next","contactProjectData","initialRegisterValues","handleSubmitRegisterValues","transform","originalvalue","minAmountLoan","maxAmountLoan","choiceMembership","showQuestionAboutMembership","belongsToMembershipGroup","calculateAmount","calculateTransactionCostsAmount","useTransactionCostsWithMembership","calculateTransactionCosts","calculateTotalAmount","totalAmount","Label","MoneyPresenter","textIsMemberMerged","textIsNoMemberMerged","textBecomeMemberMerged","textBecomeNoMemberMerged","textTransactionCosts","StepOneObligation","integer","minParticipations","max","maxParticipations","positive","StepOneCapital","StepOnePcr","pcrYearlyPowerKwhConsumption","pcrPostalCode","checkPostalcodeLink","postalcodeLink","substring","pcrNumberOfSolarPanels","pcrInputGeneratedNumberOfKwh","PCR_POWER_KWH_CONSUMPTION_PERCENTAGE","PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL","calculateEstimatedGeneratedNumberOfKwh","calculateGeneratedNumberOfKwh","calculatePowerKwhConsumption","powerKwhConsumption","pcrEstimatedGeneratedNumberOfKwh","Math","ceil","pcrAdviseMaxNumberOfParticipations","calculateAdviseMaxNumberOfParticipations","pcrHasSolarPanels","pcrEstimatedRevenueOk","StepTwo","previous","StepThree","didAcceptAgreement","didUnderstandInfo","downloadFile","filename","ProjectAPI","fileDownload","dangerouslySetInnerHTML","__html","textAgreeTermsMerged","textLinkAgreeTermsMerged","textLinkUnderstandInfoMerged","usesMollie","ViewHtmlAsText","participantId","StepFour","setSucces","contactDocument","setContactDocument","didAgreeRegistration","contactDocumentOk","ParticipantProjectAPI","econobisPaymentLink","textAcceptAgreementMerged","textAcceptAgreementQuestionMerged","StepFive","textRegistrationFinishedMerged","split","item","Steps","currentStep","MasterForm","setStep","RegisterProject","initialPcrValues","setRegisterValues","setProject","isSucces","setContactProjectData","all","spread","payloadProject","payloadContact","payloadContactProjectData","projectRegisterIndicators","allowChangeParticipation","allowPayMollie","hasParticipation","allowRegisterToProject","nextStep","textNotAllowedRegisterToProject","RegisterProjectWithContext","PersonalAddressEdit","handleSubmitContactAddressValues","OrganisationAddressEdit","ProjectList","contactProjectsArray","setContactProjectsArray","sceOrPcrProjectsAvailable","setSceOrPcrProjectsAvailable","callFetchContactProjects","isSceOrPcrProject","noAddressesFound","responsive","administrationName","dateStartRegistrations","dateEndRegistrations","ProjectListWithContext","LoanDetails","amountOfLoanNeeded","description","ObligationDetails","totalParticipations","CapitalDetails","PcrDetails","ProjectDetails","renderDetails","linkProjectInfo","RegistrationList","dateEnd","amountInteressed","amountGranted","amountDefinitive","participationsInteressed","participationsGranted","participationsDefinitive","RegistrationListWithContext","personFirstName","personLastName","NewAccountFormPersonal","personTitleId","organisationName","NewAccountFormOrganisation","NewAccount","executeRecaptcha","useGoogleReCaptcha","contactType","setContactType","reCaptchaToken","ButtonToolbar","toggle","block","NewAccountWithProvider","reCaptchaKey","process","language","NewAccountSuccess","close","ChangeAccountEmail","portalUserEmail","setPortalUserEmail","changePrimaryEmailAddress","resetForm","handleSubmitChangeEmail","ChangeAccountPassword","handleSubmitChangePassword","TwoFactorSettings","activationCodeInput","setPassword","hasValidPassword","setHasValidPassword","setHasTwoFactorEnabled","activationQr","setActivationQr","isActivatingTwoFactor","setIsActivatingTwoFactor","activationCode","setActivationCode","recoveryCodes","setRecoveryCodes","fetchTwoFactorStatus","fetchQr","svg","fetchRecoveryCodes","confirm","focus","ChangeAccount","INITIAL_STATE","result","reducer","action","AboutUs","useReducer","dispatch","hasSingleRelatedAdministration","setHasSingleRelatedAdministration","singleRelatedAdministration","RegistrationDetailsTitle","contactName","projectName","moneyPresenter","RegistrationDetailsProjectTable","fields","label","valueBasedOnTypePresenter","RegistrationDetailsMutationTable","participantMutations","participantMutation","classNameBasedOnTypePresenter","RegistrationDetailsDocumentTable","documents","relatedDocumentsOnPortal","relatedDocumentsProjectOnPortal","RegistrationDetails","basicInformation","FinancialOverviewDocuments","documentsOnPortal","administrationId","AboutUsDocumentTable","AdministrationAPI","AboutUsAdministration","setAdministration","websiteLink","setWebsiteLink","Body","kvkNumber","iBAN","btwNumber","ProjectMollieRedirect","setParticipantMutation","ParticipantMutationAPI","payloadParticipantMutation","isPaidByMollie","textRegistrationFinished","ProjectMollieRedirectWithContext","App","exact","path","Login","TwoFactorConfirm","TwoFactorRecover","hostname","ReactDOM","getElementById","remove","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e0e210c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst AuthProvider = function(props) {\r\n    const [isAuth, setAuth] = useState(checkIfAuth());\r\n\r\n    function login(payload, cbRedirect) {\r\n        const token = payload.access_token;\r\n        window.localStorage.removeItem(localStorageCurrentSelectedContact);\r\n        window.localStorage.setItem(localStorageToken, token);\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n        setAuth(true);\r\n        cbRedirect();\r\n    }\r\n\r\n    function logout() {\r\n        window.localStorage.removeItem(localStorageToken);\r\n        window.localStorage.removeItem(localStorageLastActivity);\r\n        window.localStorage.removeItem('portal_two_factor_token');\r\n        setAuth(false);\r\n    }\r\n\r\n    function checkIfAuth() {\r\n        const token = getToken();\r\n        if (!token) {\r\n            // Redirect to login\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getToken() {\r\n        return window.localStorage.getItem(localStorageToken);\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                isAuth: isAuth,\r\n                login: login,\r\n                logout: logout,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nconst AuthConsumer = AuthContext.Consumer;\r\n\r\nexport { AuthProvider, AuthConsumer };\r\n","import React, { createContext, useState } from 'react';\r\n\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst PortalUserContext = createContext({\r\n    user: {},\r\n    setInitialUserData: () => {},\r\n});\r\n\r\nconst PortalUserProvider = function(props) {\r\n    const [user, setUser] = useState({});\r\n    const [currentSelectedContact, setCurrentContact] = useState({});\r\n\r\n    function setInitialUserData(user) {\r\n        setUser(user);\r\n\r\n        const selectedContactId = window.localStorage.getItem(localStorageCurrentSelectedContact);\r\n\r\n        // When there is already a selected contact id then lookup the contact\r\n        // Selected contact could be the user or one of the occupations\r\n        if (selectedContactId) {\r\n            if (user.id == selectedContactId) {\r\n                setCurrentContact(user);\r\n            } else {\r\n                const occupationUser = user.occupations.find(\r\n                    occupation => occupation.primaryContact.id == selectedContactId\r\n                );\r\n\r\n                setCurrentContact(occupationUser.primaryContact);\r\n            }\r\n        } else {\r\n            // If there is no selected contact then set default the login user as selected contact.\r\n            // Except if the user has an organisation as occupation that is primary\r\n            const organisationUser = user.occupations.find(\r\n                occupation => occupation.primaryContact.typeId === 'organisation' && occupation.primary\r\n            );\r\n\r\n            if (organisationUser) {\r\n                setCurrentContact(organisationUser.primaryContact);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, organisationUser.primaryContact.id);\r\n            } else {\r\n                setCurrentContact(user);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, user.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    function switchCurrentContact(contact) {\r\n        setCurrentContact(contact);\r\n        window.localStorage.setItem(localStorageCurrentSelectedContact, contact.id);\r\n    }\r\n\r\n    function resetCurrentUserToDefault() {\r\n        setUser({});\r\n        setCurrentContact({});\r\n    }\r\n\r\n    function updateNameSelectedContact(fullNameFnf, typeId, firstName, lastNamePrefix, lastName) {\r\n        setCurrentContact({ ...currentSelectedContact, fullNameFnf, typeId, firstName, lastNamePrefix, lastName });\r\n\r\n        if (user.id === currentSelectedContact.id) {\r\n            user.fullNameFnf = fullNameFnf;\r\n            user.typeId = typeId;\r\n            user.firstName = firstName;\r\n            user.lastNamePrefix = lastNamePrefix;\r\n            user.lastName = lastName;\r\n        }\r\n\r\n        const updatedOccupations = user.occupations.map(occupationContact => {\r\n            if (occupationContact.primaryContact.id === currentSelectedContact.id) {\r\n                occupationContact.primaryContact.fullNameFnf = fullNameFnf;\r\n                occupationContact.primaryContact.typeId = typeId;\r\n                occupationContact.primaryContact.firstName = firstName;\r\n                occupationContact.primaryContact.lastNamePrefix = lastNamePrefix;\r\n                occupationContact.primaryContact.lastName = lastName;\r\n            }\r\n            return occupationContact;\r\n        });\r\n\r\n        setUser({ ...user, occupations: updatedOccupations });\r\n    }\r\n\r\n    return (\r\n        <PortalUserContext.Provider\r\n            value={{\r\n                user: user,\r\n                setInitialUserData,\r\n                currentSelectedContact,\r\n                switchCurrentContact,\r\n                resetCurrentUserToDefault,\r\n                updateNameSelectedContact,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </PortalUserContext.Provider>\r\n    );\r\n};\r\n\r\nconst PortalUserConsumer = PortalUserContext.Consumer;\r\n\r\nexport { PortalUserProvider, PortalUserConsumer, PortalUserContext };\r\n","import React, { createContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeSettingsContext = createContext({\r\n    defaultThemeSettings: {},\r\n    setInitialThemeSettings: () => {},\r\n    setCurrentThemeSettings: () => {},\r\n    switchToDefaultThemeSettings: () => {},\r\n});\r\n\r\nconst ThemeSettingsProvider = function(props) {\r\n    const [defaultThemeSettings, setDefaultThemeSettings] = useState({});\r\n    const [currentThemeSettings, setCurrentThemeSettings] = useState({});\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentThemeSettings.id) {\r\n                handleChangeCurrentThemeSettings();\r\n            }\r\n        },\r\n        [currentThemeSettings.id]\r\n    );\r\n\r\n    function setInitialThemeSettings(payload) {\r\n        setDefaultThemeSettings(payload);\r\n        setCurrentThemeSettings(payload);\r\n    }\r\n\r\n    function switchToDefaultThemeSettings() {\r\n        setCurrentThemeSettings(defaultThemeSettings);\r\n    }\r\n\r\n    function handleChangeCurrentThemeSettings() {\r\n        document.documentElement.style.setProperty(\r\n            '--main-header-background-image-url',\r\n            'url(images/' + currentThemeSettings.portal_image_bg_file_name_header + '?' + imageHash + ')'\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--portal-main-background-color',\r\n            currentThemeSettings.portal_main_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--portal-main-text-color',\r\n            currentThemeSettings.portal_main_text_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--portal-background-color',\r\n            currentThemeSettings.portal_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--portal-background-text-color',\r\n            currentThemeSettings.portal_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-rgba',\r\n            currentThemeSettings.login_header_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-rgba-text-color',\r\n            currentThemeSettings.login_header_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-header-portal-icon-color',\r\n            currentThemeSettings.header_icons_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-secondary-color',\r\n            currentThemeSettings.login_field_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-secondary-text-color',\r\n            currentThemeSettings.login_field_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty('--button-primary-color', currentThemeSettings.button_color);\r\n        document.documentElement.style.setProperty(\r\n            '--button-primary-text-color',\r\n            currentThemeSettings.button_text_color\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ThemeSettingsContext.Provider\r\n            value={{\r\n                defaultThemeSettings,\r\n                setInitialThemeSettings,\r\n                setCurrentThemeSettings,\r\n                switchToDefaultThemeSettings,\r\n                currentThemeSettings,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ThemeSettingsContext.Provider>\r\n    );\r\n};\r\n\r\nconst ThemeSettingsConsumer = ThemeSettingsContext.Consumer;\r\n\r\nexport { ThemeSettingsProvider, ThemeSettingsConsumer, ThemeSettingsContext };\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { AuthConsumer } from '../../context/AuthContext';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport { ThemeSettingsConsumer } from '../../context/ThemeSettingsContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { FaHome, FaUser } from 'react-icons/fa';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nfunction Header({ location, history }) {\r\n    const [menuOpen, updateStateMenu] = useState(false);\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    // This keeps your state in sync with the opening/closing of the menu\r\n    // via the default means, e.g. clicking the X, pressing the ESC key etc.\r\n    function handleStateChange(state) {\r\n        updateStateMenu(state.isOpen);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function openMenu() {\r\n        updateStateMenu(true);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function closeMenu() {\r\n        updateStateMenu(false);\r\n    }\r\n\r\n    // This can be used to toggle the menu, e.g. when using a custom icon\r\n    // Tip: You probably want to hide either/both default icons if using a custom icon\r\n    // See https://github.com/negomi/react-burger-menu#custom-icons\r\n    function toggleMenu() {\r\n        updateStateMenu(!menuOpen);\r\n    }\r\n\r\n    function formatProfilePicName(currentSelectedContact) {\r\n        if (currentSelectedContact.typeId === 'person') {\r\n            return (\r\n                currentSelectedContact.firstName +\r\n                (currentSelectedContact.lastNamePrefix ? ' ' + currentSelectedContact.lastNamePrefix : '') +\r\n                (currentSelectedContact.firstName || currentSelectedContact.lastNamePrefix ? '<br>' : '') +\r\n                currentSelectedContact.lastName\r\n            );\r\n        } else if (currentSelectedContact.typeId === 'organisation') {\r\n            return currentSelectedContact.fullNameFnf.replace(/\\s(?=\\S*$)/, '<br>');\r\n        } else {\r\n            return '?';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hook that alerts clicks outside of the passed ref\r\n     */\r\n    function useOutsideAlerter(ref) {\r\n        /**\r\n         * Alert if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                updateStateMenu(false);\r\n            }\r\n        }\r\n\r\n        useEffect(() => {\r\n            // Bind the event listener\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n            return () => {\r\n                // Unbind the event listener on clean up\r\n                document.removeEventListener('mousedown', handleClickOutside);\r\n            };\r\n        });\r\n    }\r\n\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef);\r\n\r\n    function redirect(to) {\r\n        history.push(`/${to}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                <div className=\"header-portal\">\r\n                    <div className=\"profile-pic\">\r\n                        <PortalUserConsumer>\r\n                            {({ user, currentSelectedContact, switchCurrentContact, resetCurrentUserToDefault }) => {\r\n                                if (!user.occupations || user.occupations.length < 1) {\r\n                                    return <>{ReactHtmlParser(formatProfilePicName(currentSelectedContact))}</>;\r\n                                }\r\n\r\n                                return (\r\n                                    <Dropdown alignRight>\r\n                                        <Dropdown.Toggle style={{ marginTop: '0' }}>\r\n                                            {ReactHtmlParser(formatProfilePicName(currentSelectedContact))}\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                            <Dropdown.Header>Beheren van</Dropdown.Header>\r\n                                            <Dropdown.Item\r\n                                                onClick={() => {\r\n                                                    switchCurrentContact(user);\r\n                                                    redirect('dashboard');\r\n                                                }}\r\n                                                active={currentSelectedContact.id === user.id ? true : false}\r\n                                            >\r\n                                                {user.fullNameFnf}\r\n                                            </Dropdown.Item>\r\n                                            {user.occupations && user.occupations.length > 0\r\n                                                ? user.occupations.map(occupationContact =>\r\n                                                      (occupationContact.primaryContact.typeId === 'organisation' &&\r\n                                                          occupationContact.primary) ||\r\n                                                      (occupationContact.primaryContact.typeId === 'person' &&\r\n                                                          occupationContact.occupation.occupationForPortal) ? (\r\n                                                          <Dropdown.Item\r\n                                                              key={occupationContact.id}\r\n                                                              onClick={() => {\r\n                                                                  switchCurrentContact(\r\n                                                                      occupationContact.primaryContact\r\n                                                                  );\r\n                                                                  redirect('dashboard');\r\n                                                              }}\r\n                                                              active={\r\n                                                                  currentSelectedContact.id ===\r\n                                                                  occupationContact.primaryContact.id\r\n                                                              }\r\n                                                          >\r\n                                                              {occupationContact.primaryContact.fullNameFnf}\r\n                                                          </Dropdown.Item>\r\n                                                      ) : null\r\n                                                  )\r\n                                                : null}\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                );\r\n                            }}\r\n                        </PortalUserConsumer>\r\n                    </div>\r\n\r\n                    <Container>\r\n                        <Row>\r\n                            <Col xs={6}>\r\n                                <ThemeSettingsConsumer>\r\n                                    {({ currentThemeSettings }) => (\r\n                                        <div className=\"header-logo\">\r\n                                            {currentThemeSettings.portal_logo_file_name_header !== undefined && (\r\n                                                <Image\r\n                                                    src={`images/${currentThemeSettings.portal_logo_file_name_header}?${imageHash}`}\r\n                                                />\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                </ThemeSettingsConsumer>\r\n                            </Col>\r\n                            <Col xs={6}>\r\n                                <div className=\"d-flex justify-content-end\">\r\n                                    {/* Hambuger menu */}\r\n                                    <div className=\"bm-burger-button text-center\" onClick={openMenu}>\r\n                                        <span>\r\n                                            <span className=\"bm-burger-bars bm-burger-bar-1\" />\r\n                                            <span className=\"bm-burger-bars bm-burger-bar-2\" />\r\n                                            <span className=\"bm-burger-bars bm-burger-bar-3\" />\r\n                                        </span>\r\n                                        <br />\r\n                                        <small style={{ fontSize: '10px', marginLeft: '-3.5px' }}>MENU</small>\r\n                                    </div>\r\n                                    {/* User switch menu */}\r\n                                    <AuthConsumer>\r\n                                        {({ logout }) => {\r\n                                            return (\r\n                                                <PortalUserConsumer>\r\n                                                    {({\r\n                                                        user,\r\n                                                        currentSelectedContact,\r\n                                                        switchCurrentContact,\r\n                                                        resetCurrentUserToDefault,\r\n                                                    }) => {\r\n                                                        return (\r\n                                                            <Dropdown alignRight>\r\n                                                                <Dropdown.Toggle\r\n                                                                    id={'account-dropdown'}\r\n                                                                    style={{ padding: '0', marginTop: '14px' }}\r\n                                                                >\r\n                                                                    <FaUser />\r\n                                                                    <br />\r\n                                                                    <small\r\n                                                                        className={'account-dropdown-text'}\r\n                                                                        style={{ fontSize: '10px' }}\r\n                                                                    >\r\n                                                                        ACCOUNT\r\n                                                                    </small>\r\n                                                                </Dropdown.Toggle>\r\n                                                                <Dropdown.Menu>\r\n                                                                    <Dropdown.Header>Ingelogd als</Dropdown.Header>\r\n                                                                    <Dropdown.Item disabled>\r\n                                                                        {user.fullNameFnf}\r\n                                                                    </Dropdown.Item>\r\n                                                                    <Dropdown.Item>\r\n                                                                        <Link\r\n                                                                            to={'/wijzig-inloggegevens'}\r\n                                                                            className={'dropdown-link'}\r\n                                                                        >\r\n                                                                            Wijzig inloggegevens\r\n                                                                        </Link>\r\n                                                                    </Dropdown.Item>\r\n                                                                    <Dropdown.Item>\r\n                                                                        <Link\r\n                                                                            to={'/wijzig-inloggegevens'}\r\n                                                                            className={'dropdown-link'}\r\n                                                                        >\r\n                                                                            Twee factor authenticatie\r\n                                                                        </Link>\r\n                                                                    </Dropdown.Item>\r\n                                                                    <Dropdown.Divider />\r\n                                                                    <Dropdown.Item\r\n                                                                        onClick={() => {\r\n                                                                            logout();\r\n                                                                            resetCurrentUserToDefault();\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        Log uit\r\n                                                                    </Dropdown.Item>\r\n                                                                </Dropdown.Menu>\r\n                                                            </Dropdown>\r\n                                                        );\r\n                                                    }}\r\n                                                </PortalUserConsumer>\r\n                                            );\r\n                                        }}\r\n                                    </AuthConsumer>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        {location.pathname !== '/' && location.pathname !== '/dashboard' ? (\r\n                            <div className=\"header-dashboard-button\">\r\n                                <Button className={'w-button btn-sm'} onClick={() => history.push('/dashboard')}>\r\n                                    <FaHome />\r\n                                    &nbsp;Dashboard\r\n                                </Button>\r\n                            </div>\r\n                        ) : null}\r\n                    </Container>\r\n                </div>\r\n                {/* Sidebar menu */}\r\n                <Menu\r\n                    right\r\n                    width={'300px'}\r\n                    // noOverlay\r\n                    isOpen={menuOpen}\r\n                    onStateChange={state => handleStateChange(state)}\r\n                    customBurgerIcon={false}\r\n                >\r\n                    <div className={'sidebar-menu'}>\r\n                        <React.Fragment>\r\n                            <h6 className=\"heading in-menu\">MENU</h6>\r\n                            <Link\r\n                                to={'/inschrijvingen-projecten'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/inschrijvingen-projecten' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Huidige deelnames\r\n                            </Link>\r\n                            <Link\r\n                                to={'/gegevens'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/gegevens' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Gegevens\r\n                            </Link>\r\n                            <Link\r\n                                to={'/inschrijven-projecten'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/inschrijven-projecten' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Inschrijven projecten\r\n                            </Link>\r\n                            <PortalUserConsumer>\r\n                                {({\r\n                                    user,\r\n                                    currentSelectedContact,\r\n                                    switchCurrentContact,\r\n                                    resetCurrentUserToDefault,\r\n                                }) => {\r\n                                    if (currentSelectedContact && currentSelectedContact.hasFinancialOverviews) {\r\n                                        return (\r\n                                            <Link\r\n                                                to={'/waardestaat-documenten'}\r\n                                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                                    location.pathname === '/waardestaat-documenten' ? 'w--current' : ''\r\n                                                }`}\r\n                                                onClick={closeMenu}\r\n                                            >\r\n                                                Waardestaat\r\n                                            </Link>\r\n                                        );\r\n                                    }\r\n                                }}\r\n                            </PortalUserConsumer>\r\n                            <Link\r\n                                to={'/over-ons'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/over-ons' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Over ons\r\n                            </Link>\r\n                        </React.Fragment>\r\n                    </div>\r\n                </Menu>\r\n            </header>\r\n            {location.pathname !== '/' && location.pathname !== '/dashboard' ? (\r\n                <div className={'floating-action-button'}>\r\n                    <Button className={'w-button'} onClick={() => history.push('/dashboard')}>\r\n                        <FaHome />\r\n                        &nbsp;Dashboard\r\n                    </Button>\r\n                </div>\r\n            ) : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `${BASE_URL}`,\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function(config) {\r\n        // First check if token is expired or not\r\n        checkTokenExpiration();\r\n        // Do something before request is sent\r\n        const AUTH_TOKEN = 'Bearer ' + localStorage.getItem(localStorageToken);\r\n        const TWO_FACTOR_TOKEN = localStorage.getItem('portal_two_factor_token');\r\n        config.headers.Authorization = AUTH_TOKEN;\r\n        config.headers.TwoFactorToken = TWO_FACTOR_TOKEN;\r\n        return config;\r\n    },\r\n    function(error) {\r\n        // Do something with request error\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Check token expiration and redirect if token is expired\r\nfunction checkTokenExpiration() {\r\n    const lastActivity = moment(localStorage.getItem(localStorageLastActivity));\r\n\r\n    if (\r\n        !localStorage.getItem(localStorageLastActivity) ||\r\n        lastActivity.add('30', 'minutes').format() < moment().format()\r\n    ) {\r\n        if (window.location.hash !== '#/login' && window.location.hash !== '#/loguit') {\r\n            setTimeout(() => {\r\n                localStorage.removeItem(localStorageToken);\r\n                localStorage.removeItem(localStorageLastActivity);\r\n                window.location.reload();\r\n            }, 100);\r\n        }\r\n    } else {\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n    }\r\n}\r\n\r\nexport default axiosInstance;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchPortalUserDetails: function() {\r\n        const requestUrl = `/me`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'number',\r\n                        'fullNameFnf',\r\n                        'typeId',\r\n                        'firstName',\r\n                        'lastNamePrefix',\r\n                        'lastName',\r\n                        'hasFinancialOverviews',\r\n                        'singleRelatedAdministration',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'portalSettingsLayoutAssigned',\r\n                    ],\r\n                    rlt: {\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: {\r\n                                    fld: [\r\n                                        'id',\r\n                                        'typeId',\r\n                                        'fullNameFnf',\r\n                                        'firstName',\r\n                                        'lastNamePrefix',\r\n                                        'lastName',\r\n                                        'hasFinancialOverviews',\r\n                                        'singleRelatedAdministration',\r\n                                    ],\r\n                                },\r\n                                contact: {\r\n                                    fld: ['id', 'typeId', 'fullNameFnf', 'firstName', 'lastNamePrefix', 'lastName'],\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchPortalUserEmail: function() {\r\n        return axiosInstance.get(`/portal-user-email`);\r\n    },\r\n\r\n    changeEmail: values => {\r\n        const requestUrl = `/portal-user/change-email`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n\r\n    changePassword: values => {\r\n        const requestUrl = `/portal-user/change-password`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n};\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { Route, Redirect, useLocation, useHistory } from 'react-router-dom';\r\nimport { AuthConsumer } from '../context/AuthContext';\r\nimport Header from '../components/layout/Header';\r\nimport PortalUserAPI from '../api/portal-user/PortalUserAPI';\r\nimport { PortalUserConsumer } from '../context/PortalUserContext';\r\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\r\n\r\nconst ProtectedRoute = ({ component: Component, setInitialUserData, isAuth, ...rest }) => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const { setInitialThemeSettings, switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            (function callFetchPortalUserDetails() {\r\n                PortalUserAPI.fetchPortalUserDetails()\r\n                    .then(payload => {\r\n                        setInitialUserData(payload.data.data);\r\n                        setInitialThemeSettings(payload.data.data.portalSettingsLayoutAssigned);\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.response.status === 401) {\r\n                            if(error.response.data.code === 'two_factor_token_invalid') {\r\n                                history.push('/two-factor/confirm');\r\n                            }else{\r\n                                history.push('/login');\r\n                            }\r\n                            return;\r\n                        }\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuwd.');\r\n                    });\r\n            })();\r\n        }\r\n    }, [isAuth]);\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            if (\r\n                !location.pathname.includes('/project/') &&\r\n                !location.pathname.includes('/project-deelname/') &&\r\n                !location.pathname.includes('/inschrijven/') &&\r\n                !location.pathname.includes('/dashboard/')\r\n            ) {\r\n                switchToDefaultThemeSettings();\r\n            }\r\n        }\r\n    }, [location.pathname]);\r\n\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <div className=\"body-2\" id=\"body-2\">\r\n                    <Header />\r\n                    <Route render={props => (isAuth ? <Component {...props} /> : <Redirect to=\"/login\" />)} {...rest} />\r\n                </div>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n};\r\n\r\nexport default function ProtectedRouteWithContext(props) {\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <PortalUserConsumer>\r\n                    {({ setInitialUserData }) => (\r\n                        <ProtectedRoute {...props} setInitialUserData={setInitialUserData} isAuth={isAuth} />\r\n                    )}\r\n                </PortalUserConsumer>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Route, useLocation } from 'react-router-dom';\r\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => {\r\n    const location = useLocation();\r\n    const { switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    useEffect(() => {\r\n        switchToDefaultThemeSettings();\r\n    }, [location.pathname]);\r\n\r\n    return <Route render={props => <Component {...props} />} {...rest} />;\r\n};\r\n\r\nexport default PublicRoute;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst InputText = ({\r\n    field,\r\n    type,\r\n    className,\r\n    id,\r\n    readOnly,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <input\r\n                type={type}\r\n                className={`text-input w-input ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                readOnly={readOnly}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputText.defaultProps = {\r\n    type: 'text',\r\n    className: 'content',\r\n    readOnly: false,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputText.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputText;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ButtonText = ({\r\n    buttonClassName,\r\n    buttonText,\r\n    onClickAction,\r\n    type,\r\n    loading,\r\n    title,\r\n    loadingSpinnerColor,\r\n    disabled,\r\n}) => (\r\n    <Button\r\n        type={type}\r\n        className={`${buttonClassName}`}\r\n        onClick={onClickAction}\r\n        disabled={loading || disabled}\r\n        title={title}\r\n        size=\"sm\"\r\n    >\r\n        {loading ? <ClipLoader color={loadingSpinnerColor} size={17} /> : <span>{buttonText}</span>}\r\n    </Button>\r\n);\r\n\r\nButtonText.defaultProps = {\r\n    buttonClassName: '',\r\n    type: 'button',\r\n    title: '',\r\n    loading: false,\r\n    loadingSpinnerColor: 'white',\r\n    disabled: false,\r\n};\r\n\r\nButtonText.propTypes = {\r\n    buttonClassName: PropTypes.string,\r\n    buttonText: PropTypes.string.isRequired,\r\n    onClickAction: PropTypes.func,\r\n    type: PropTypes.string,\r\n    title: PropTypes.string,\r\n    loading: PropTypes.bool,\r\n    loadingSpinnerColor: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n};\r\n\r\nexport default ButtonText;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    password: Yup.string().required('Verplicht'),\r\n});\r\n\r\nconst LoginForm = function({ handleSubmit, login }) {\r\n    return (\r\n        <Formik\r\n            initialValues={{ username: '', password: '' }}\r\n            enableReinitialize={true}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                handleSubmit(values, actions, login);\r\n            }}\r\n            render={({ isSubmitting, errors, touched }) => {\r\n                return (\r\n                    <Form>\r\n                        <Field\r\n                            name=\"username\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"username\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={''}\r\n                                    placeholder={'Wachtwoord'}\r\n                                    type={'password'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <ButtonText\r\n                            buttonText={'Log in'}\r\n                            buttonClassName={'authorization-button'}\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                        />\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import axios from 'axios';\r\n\r\nconst AUTH_KEY = {\r\n    client_id: window.__SERVER_DATA__.client_id,\r\n    client_secret: window.__SERVER_DATA__.client_key,\r\n    grant_type: 'password',\r\n};\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\n\r\nexport default {\r\n    newAccount: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n    newAccountSuccess: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account-success`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    login: loginCredentials => {\r\n        const requestUrl = `${BASE_URL}/oauth/token`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, { ...AUTH_KEY, ...loginCredentials });\r\n    },\r\n\r\n    register: payload => {\r\n        const requestUrl = `${BASE_URL}/register`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    forgot: email => {\r\n        const requestUrl = `${BASE_URL}/password/email`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, email);\r\n    },\r\n\r\n    reset: payload => {\r\n        const requestUrl = `${BASE_URL}/password/reset`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nconst URL_PORTAL_SETTINGS = `setting`;\r\n\r\nexport default {\r\n    fetchPortalSettings: keys => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/multiple${keys}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchPortalActive: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/portal-active`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchCooperativeName: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/cooperative-name`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchShowNewAtCooperativeLink: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/show-new-at-cooperative-link`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchNewAtCooperativeLinkText: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/new-at-cooperative-link-text`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import axiosInstance from \"../default-setup/AxiosInstance\";\r\n\r\nexport default {\r\n    confirmTwoFactor: function (code) {\r\n        return axiosInstance.post(`me/confirmed-two-factor-authentication`, {\r\n            code\r\n        });\r\n    },\r\n\r\n    fetchTwoFactorQr: function (password) {\r\n        return axiosInstance.get(`me/two-factor-qr-code`, {\r\n            headers: {\r\n                PasswordConfirmation: password,\r\n            }\r\n        });\r\n    },\r\n\r\n    fetchTwoFactorRecoveryCodes: function (password) {\r\n        return axiosInstance.get(`me/two-factor-recovery-codes`, {\r\n            headers: {\r\n                PasswordConfirmation: password,\r\n            }\r\n        });\r\n    },\r\n\r\n    regenerateTwoFactorRecoveryCodes: function (password) {\r\n        return axiosInstance.post(`me/two-factor-recovery-codes`, {}, {\r\n            headers: {\r\n                PasswordConfirmation: password,\r\n            }\r\n        });\r\n    },\r\n\r\n    checkPassword: function (password) {\r\n        return axiosInstance.get(`me/check-password`, {\r\n            headers: {\r\n                PasswordConfirmation: password,\r\n            }\r\n        });\r\n    },\r\n\r\n    fetchTwoFactorStatus: function () {\r\n        return axiosInstance.get(`me/two-factor-status`);\r\n    },\r\n\r\n    enableTwoFactor: function (password) {\r\n        return axiosInstance.post(`me/two-factor-authentication`, {}, {\r\n            headers: {\r\n                PasswordConfirmation: password,\r\n            }\r\n        });\r\n    },\r\n\r\n    disableTwoFactor: function (password) {\r\n        return axiosInstance.post(`me/two-factor-authentication/delete`, {}, {\r\n            headers: {\r\n                PasswordConfirmation: password,\r\n            }\r\n        });\r\n    },\r\n\r\n    recoverTwoFactor: function (code) {\r\n        return axiosInstance.post(`me/two-factor-challenge`, {\r\n            recovery_code: code\r\n        });\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport {Link, Redirect, useHistory} from 'react-router-dom';\r\n\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport LoginForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport PortalSettingsAPI from '../../../api/portal-settings/PortalSettingsAPI';\r\nimport MeAPI from \"../../../api/general/MeAPI\";\r\n\r\nexport default props => {\r\n    const history = useHistory();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = props.location.state || { from: { pathname: '/dashboard' } };\r\n\r\n    const [portalActive, setPortalActive] = useState(false);\r\n    const [showNewAtCooperativeLink, setShowNewAtCooperativeLink] = useState(false);\r\n    const [newAtCooperativeLinkText, setNewAtCooperativeLinkText] = useState('');\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    useEffect(() => {\r\n        (function callFetchPortalActive() {\r\n            PortalSettingsAPI.fetchPortalActive()\r\n                .then(payload => {\r\n                    setPortalActive(payload.data);\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setIsLoading(false);\r\n                });\r\n        })();\r\n\r\n        (function callFetchShowNewAtCooperativeLink() {\r\n            PortalSettingsAPI.fetchShowNewAtCooperativeLink()\r\n                .then(payload => {\r\n                    setShowNewAtCooperativeLink(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n\r\n        (function callFetchNewAtCooperativeLinkText() {\r\n            PortalSettingsAPI.fetchNewAtCooperativeLinkText()\r\n                .then(payload => {\r\n                    setNewAtCooperativeLinkText(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n\r\n    function handleSubmit(values, actions, login) {\r\n        AuthAPI.login(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                login(payload.data, () => {\r\n                    MeAPI.fetchTwoFactorStatus().then(payload => {\r\n                        if(payload.data.hasTwoFactorEnabled) {\r\n                            history.push('/two-factor/confirm');\r\n                            return;\r\n                        }\r\n\r\n                        toggleRedirect(true)\r\n                    });\r\n                });\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <AuthConsumer>\r\n                    {({ isAuth, login }) => (\r\n                        <Container fluid className=\"authorization-container\">\r\n                            <Row className=\"justify-content-center align-content-center full-height\">\r\n                                <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\r\n                                    <img src={`images/logo.png?${imageHash}`} alt=\"\" className=\"image logo-container\" />\r\n                                    {isLoading ? (\r\n                                        <React.Fragment>\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    Applicatie wordt geladen...\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    ) : !portalActive ? (\r\n                                        <React.Fragment>\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    Deze applicatie kan op dit moment niet gebruikt worden.\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    ) : !isLoading ? (\r\n                                        <React.Fragment>\r\n                                            <LoginForm handleSubmit={handleSubmit} login={login} />\r\n                                            {showError ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                        Gebruikte logingegevens zijn onjuist!\r\n                                                    </Alert>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Link to={'/wachtwoord-vergeten'} className=\"authorization-link\">\r\n                                                    Wachtwoord vergeten?\r\n                                                </Link>\r\n                                            </Row>\r\n                                            {showNewAtCooperativeLink ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <a\r\n                                                        href={'/#/nieuw-account'}\r\n                                                        className=\"authorization-link\"\r\n                                                        target=\"_blank\"\r\n                                                    >\r\n                                                        {newAtCooperativeLinkText}\r\n                                                    </a>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                        </React.Fragment>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    )}\r\n                </AuthConsumer>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React, {useState} from 'react';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport MeAPI from \"../../../api/general/MeAPI\";\r\nimport ButtonText from \"../../../components/button/ButtonText\";\r\n\r\nexport default () => {\r\n    const history = useHistory();\r\n    const [showError, toggleError] = useState(false);\r\n    const [code, setCode] = useState('');\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        toggleError(false);\r\n\r\n        MeAPI.confirmTwoFactor(code)\r\n            .then(payload => {\r\n                localStorage.setItem('portal_two_factor_token', payload.data.token);\r\n\r\n                history.push('/dashboard');\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                toggleError(true);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container fluid className=\"authorization-container\">\r\n                <Row className=\"justify-content-center align-content-center full-height\">\r\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\r\n                        <img src={`images/logo.png`} alt=\"\" className=\"image logo-container\"/>\r\n                        <p>Account is beveiligd met twee factor authenticatie, voer hier onder de code uit uw authenticator app in.</p>\r\n                        <React.Fragment>\r\n                            <form onSubmit={handleSubmit}>\r\n                            <input\r\n                                type=\"text\"\r\n                                className={`text-input w-input`}\r\n                                placeholder=\"Twee factor code\"\r\n                                value={code}\r\n                                onChange={(e) => setCode(e.target.value)}\r\n                                autoFocus={true}\r\n                            />\r\n                            <ButtonText\r\n                                buttonText={'Bevestigen'}\r\n                                buttonClassName={'authorization-button'}\r\n                                type=\"submit\"\r\n                            />\r\n                            </form>\r\n\r\n                            {showError ? (\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                        Code is onjuist\r\n                                    </Alert>\r\n                                </Row>\r\n                            ) : null}\r\n                            <Row className=\"justify-content-center\">\r\n                                <Link to={'/two-factor/recover'} className=\"authorization-link\">\r\n                                    Twee factor herstellen\r\n                                </Link>\r\n                            </Row>\r\n                        </React.Fragment>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n","import React, {useState} from 'react';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport MeAPI from \"../../../api/general/MeAPI\";\r\nimport ButtonText from \"../../../components/button/ButtonText\";\r\n\r\nexport default () => {\r\n    const history = useHistory();\r\n    const [showError, toggleError] = useState(false);\r\n    const [code, setCode] = useState('');\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        toggleError(false);\r\n\r\n        MeAPI.recoverTwoFactor(code).then(() => {\r\n            history.push('/dashboard');\r\n        }).catch(() => {\r\n            toggleError(true);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container fluid className=\"authorization-container\">\r\n                <Row className=\"justify-content-center align-content-center full-height\">\r\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\r\n                        <img src={`images/logo.png`} alt=\"\" className=\"image logo-container\"/>\r\n                        <p>Voer hier één van de recovery codes van de twee factor authenticatie in.</p>\r\n                        <React.Fragment>\r\n                            <form onSubmit={handleSubmit}>\r\n                            <input\r\n                                type=\"text\"\r\n                                className={`text-input w-input`}\r\n                                placeholder=\"Recovery code\"\r\n                                value={code}\r\n                                onChange={(e) => setCode(e.target.value)}\r\n                                autoFocus={true}\r\n                            />\r\n                            <ButtonText\r\n                                buttonText={'Herstellen'}\r\n                                buttonClassName={'authorization-button'}\r\n                                type=\"submit\"\r\n                            />\r\n                            </form>\r\n\r\n                            {showError ? (\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                        Code is onjuist\r\n                                    </Alert>\r\n                                </Row>\r\n                            ) : null}\r\n                            <Row className=\"justify-content-center\">\r\n                                <Link to={'/two-factor/confirm'} className=\"authorization-link\">\r\n                                    Terug\r\n                                </Link>\r\n                            </Row>\r\n                        </React.Fragment>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { GoogleReCaptchaProvider, GoogleReCaptcha } from 'react-google-recaptcha-v3';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst RegisterForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <div className=\"mb-3\">\r\n                    <p className={'authorization-text'}>\r\n                        Stel je wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </div>\r\n                <Row>\r\n                    <Col>\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'authorization-text'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-2\">\r\n                        <Field\r\n                            name=\"passwordConfirmation\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"passwordConfirmation\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Herhaal nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'authorization-text mb-3'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"my-3\">\r\n                        <small className={'authorization-text'}>\r\n                            Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1\r\n                            hoofdletter bevatten.\r\n                        </small>\r\n                    </Col>\r\n                </Row>\r\n                <ButtonText\r\n                    buttonText={'Verzenden'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport RegisterForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst Register = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showLoginLink, setLoginLink] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const registrationCode = decodeURIComponent(match.params.registrationCode);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/dashboard' } };\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.register({\r\n            registrationCode,\r\n            email,\r\n            password: values.password,\r\n            password_confirmation: values.passwordConfirmation,\r\n        })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        setLoginLink(false);\r\n                        setErrorMessage('');\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        setLoginLink(true);\r\n                        setErrorMessage('Er is iets fout gegaan bij automatisch inloggen na activeren.');\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // console.log(error.response.status);\r\n                // console.log(error.response.data.message);\r\n                toggleError(true);\r\n                if (\r\n                    error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message &&\r\n                    error.response.status === 423\r\n                ) {\r\n                    setLoginLink(true);\r\n                    setErrorMessage(error.response.data.message);\r\n                } else {\r\n                    setLoginLink(false);\r\n                    setErrorMessage(\r\n                        'Er is iets fout gegaan bij activeren. Controleer of de activatie link juist en volledig is.'\r\n                    );\r\n                }\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src={`images/logo.png?${imageHash}`} alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <h3 className={'authorization-text'}>Je account is geactiveerd</h3>\r\n                                    <p className={'authorization-text'}>Je bent nu ingelogd</p>\r\n                                    <ButtonText\r\n                                        buttonText={'Ga verder'}\r\n                                        onClickAction={toggleRedirect}\r\n                                        buttonClassName={'authorization-button'}\r\n                                        size=\"sm\"\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <h3 className={'authorization-text'}>Account activeren</h3>\r\n                                    {!showLoginLink ? <RegisterForm handleSubmit={handleSubmit} email={email} /> : null}\r\n                                    {showError ? (\r\n                                        <Row className={'justify-content-center align-content-center '}>\r\n                                            <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                {errorMessage}\r\n                                            </Alert>\r\n                                        </Row>\r\n                                    ) : null}\r\n                                </>\r\n                            )}\r\n                            {showLoginLink ? (\r\n                                <ButtonText\r\n                                    buttonText={'Ga naar loginscherm'}\r\n                                    onClickAction={toggleRedirect}\r\n                                    buttonClassName={'authorization-button'}\r\n                                    size=\"sm\"\r\n                                />\r\n                            ) : null}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function RegisterWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Register {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ForgotForm = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Field\r\n                    name=\"email\"\r\n                    render={({ field }) => (\r\n                        <InputText\r\n                            field={field}\r\n                            id=\"email\"\r\n                            className={''}\r\n                            placeholder={'E-mailadres'}\r\n                            errors={errors}\r\n                            touched={touched}\r\n                            // todo check waarom dit erin stond ?!\r\n                            // showErrorMessage={false}\r\n                        />\r\n                    )}\r\n                />\r\n                <ButtonText\r\n                    buttonText={showSuccessMessage ? 'E-mail is verstuurd!' : 'Verstuur wachtwoord reset link'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                    disabled={showSuccessMessage}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ForgotForm;\r\n","import React, { useState } from 'react';\r\n\r\nimport ForgotForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Forgot = props => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.forgot(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If forgot API fails show error and then set submitting back to false\r\n                // toggleError(true);\r\n                // If forgot API fails show succesmessage anyway\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src={`images/logo.png?${imageHash}`} alt=\"\" className=\"image logo-container\" />\r\n                    {showSuccessMessage ? (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Als het e-mailadres bij ons bekend is, dan ontvang je binnen enkele minuten een\r\n                                    e-mail met een persoonlijke link. Via deze link kun je een nieuw wachtwoord\r\n                                    instellen.\r\n                                    <br />\r\n                                    Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van\r\n                                    bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of\r\n                                    je onze mail daar terug vindt.\r\n                                </p>\r\n                            </Row>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Wachtwoord vergeten</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Vul het e-mailadres in waarmee je inlogt en dat bij ons bekend is. Je ontvangt van\r\n                                    ons een e-mail waarmee je een nieuw wachtwoord kunt instellen.\r\n                                </p>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <Col xs={12} md={6}>\r\n                                    <ForgotForm handleSubmit={handleSubmit} showSuccessMessage={showSuccessMessage} />\r\n                                    {showError ? (\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            E-mailadres is niet bekend!\r\n                                        </Alert>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    )}\r\n                    <Row className={'justify-content-center '}>\r\n                        <Link to={'/login'} className=\"authorization-link\">\r\n                            Terug naar inloggen\r\n                        </Link>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Forgot;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ResetForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Row className=\"justify-content-center\">\r\n                    <p className={'authorization-text'}>\r\n                        Stel een nieuw wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"password\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"password\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'authorization-text'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"passwordConfirmation\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"passwordConfirmation\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Herhaal nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'authorization-text mb-3'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <small className={'authorization-text'}>\r\n                        Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1 hoofdletter\r\n                        bevatten.\r\n                    </small>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <ButtonText\r\n                        buttonText={'Verzenden'}\r\n                        buttonClassName={'authorization-button'}\r\n                        size=\"sm\"\r\n                        type={'submit'}\r\n                        loading={isSubmitting}\r\n                        loadingSpinnerColor={'#034b8c'}\r\n                    />\r\n                </Row>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ResetForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport ResetForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst Reset = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const token = decodeURIComponent(match.params.token);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/dashboard' } };\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.reset({ token, email, password: values.password, password_confirmation: values.passwordConfirmation })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src={`images/logo.png?${imageHash}`} alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'authorization-text'}>Je wachtwoord is ingesteld</h3>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <p className={'authorization-text'}>Je bent nu ingelogd</p>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <ButtonText\r\n                                            buttonText={'Ga verder'}\r\n                                            onClickAction={toggleRedirect}\r\n                                            buttonClassName={'authorization-button'}\r\n                                            size=\"sm\"\r\n                                        />\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'authorization-text'}>Wachtwoord wijzigen</h3>\r\n                                    </Row>\r\n                                    <ResetForm handleSubmit={handleSubmit} email={email} />\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function ResetWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Reset {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nfunction Loading() {\r\n    return (\r\n        <Row className=\"justify-content-center align-content-center flex-wrap\" style={{ height: '40vh' }}>\r\n            <ClipLoader color={'#3898EC'} size={48} />\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Loading;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchContact: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullNameFnf',\r\n                        'firstName',\r\n                        'lastNamePrefix',\r\n                        'lastName',\r\n                        'hasFinancialOverviews',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'isParticipant',\r\n                        'disableChangeContactNameOnPortal',\r\n                        'noAddressesFound',\r\n                        'isParticipantPcrProject',\r\n                        'isParticipantSceProject',\r\n                        'blockChangeAddress',\r\n                        'blockChangeAddressNumber',\r\n                    ],\r\n                    rlt: {\r\n                        person: {\r\n                            fld: [\r\n                                'id',\r\n                                'firstName',\r\n                                'lastName',\r\n                                'initials',\r\n                                'titleId',\r\n                                'lastNamePrefix',\r\n                                'lastNamePrefixId',\r\n                                'dateOfBirth',\r\n                            ],\r\n                            rlt: {\r\n                                title: { fld: ['id', 'name'] },\r\n                            },\r\n                        },\r\n                        organisation: {\r\n                            fld: ['id', 'name', 'website', 'chamberOfCommerceNumber', 'vatNumber'],\r\n                        },\r\n                        emailAddresses: { fld: ['id', 'email', 'primary', 'typeId'] },\r\n                        phoneNumbers: { fld: ['id', 'number', 'primary', 'typeId'] },\r\n                        addresses: {\r\n                            fld: [\r\n                                'id',\r\n                                'street',\r\n                                'number',\r\n                                'addition',\r\n                                'postalCode',\r\n                                'city',\r\n                                'countryId',\r\n                                'primary',\r\n                                'typeId',\r\n                                'eanElectricity',\r\n                                'eanGas',\r\n                            ],\r\n                            rlt: {\r\n                                country: { fld: ['id', 'name'] },\r\n                                primaryAddressEnergySupplierElectricity: {\r\n                                    fld: [\r\n                                        'id',\r\n                                        'energySupplierId',\r\n                                        'esNumber',\r\n                                        'memberSince',\r\n                                        'isCurrentSupplier',\r\n                                        'endDatePrevious',\r\n                                        'memberSinceNext',\r\n                                    ],\r\n                                    rlt: { energySupplier: [] },\r\n                                    flt: {\r\n                                        f: 'isCurrentSupplier',\r\n                                        d: true,\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: {\r\n                                    fld: ['id', 'fullNameFnf'],\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchContactWithParticipants: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullNameFnf',\r\n                        'typeId',\r\n                        'firstName',\r\n                        'lastNamePrefix',\r\n                        'lastName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                    ],\r\n                    rlt: {\r\n                        participations: {\r\n                            fld: [\r\n                                'id',\r\n                                'dateRegister',\r\n                                'didAcceptAgreement',\r\n                                'dateDidAcceptAgreement',\r\n                                'didUnderstandInfo',\r\n                                'dateDidUnderstandInfo',\r\n                                'participationsDefinitive',\r\n                                'participationsGranted',\r\n                                'participationsOptioned',\r\n                                'participationsInteressed',\r\n                                'amountDefinitive',\r\n                                'amountGranted',\r\n                                'amountOptioned',\r\n                                'amountInteressed',\r\n                                'powerKwhConsumption',\r\n                            ],\r\n                            rlt: {\r\n                                project: {\r\n                                    fld: [\r\n                                        'id',\r\n                                        'name',\r\n                                        'dateEnd',\r\n                                        'linkProjectInfo',\r\n                                        'linkUnderstandInfo',\r\n                                        'showQuestionAboutMembership',\r\n                                        'usesMollie',\r\n                                    ],\r\n                                    rlt: {\r\n                                        projectType: { fld: ['id', 'codeRef'] },\r\n                                        administration: { fld: ['name'] },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    updateContact: contact => {\r\n        const requestUrl = `/contact/${contact.id}`;\r\n\r\n        return axiosInstance.post(requestUrl, contact);\r\n    },\r\n\r\n    previewDocument: registerValues => {\r\n        const requestUrl = `/contact/${registerValues.contactId}/${registerValues.projectId}/preview-document`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n\r\n    fetchContactProjects: function(contactId, projectId) {\r\n        const requestUrl = `/contact/${contactId}/contact-projects`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    fetchContactProjectData: function(contactId, projectId) {\r\n        const requestUrl = `/contact/${contactId}/${projectId}/contact-project-data`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    fetchContactFinancialOverviewDocuments: function(contactId) {\r\n        const requestUrl = `/contact/${contactId}/financial-overview-documents`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    financialOverviewContactDownload: function(id) {\r\n        const requestUrl = `/financial-overview-contact/${id}/download`;\r\n\r\n        return axiosInstance(requestUrl, { responseType: 'blob' });\r\n    },\r\n\r\n    fetchContactRelatedAdministrations: function(contactId) {\r\n        const requestUrl = `/contact/${contactId}/related-administrations`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","export default function(contactData) {\r\n    const typeContact = contactData.typeId ? contactData.typeId : null;\r\n\r\n    let emptyPrimaryAddressEnergySupplierElectricity = {\r\n        energySupplierId: null,\r\n        esNumber: '',\r\n        memberSince: '',\r\n    };\r\n    let emptyAddress = {\r\n        street: '',\r\n        number: '',\r\n        addition: '',\r\n        postalCode: '',\r\n        city: '',\r\n        countryId: null,\r\n        eanElectricity: '',\r\n        eanGas: '',\r\n        primaryAddressEnergySupplierElectricity: emptyPrimaryAddressEnergySupplierElectricity,\r\n    };\r\n    let primaryAddress = null;\r\n    let visitAddress = null;\r\n    let postalAddress = null;\r\n    let invoiceAddress = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            // Set primary address\r\n            primaryAddress = contactData.addresses.find(address => address.primary);\r\n            contactData.primaryAddress = primaryAddress ? { ...emptyAddress, ...primaryAddress } : emptyAddress;\r\n            if (!contactData.primaryAddress.primaryAddressEnergySupplierElectricity) {\r\n                contactData.primaryAddress.primaryAddressEnergySupplierElectricity = {\r\n                    ...contactData.primaryAddress,\r\n                    emptyPrimaryAddressEnergySupplierElectricity,\r\n                };\r\n            }\r\n            break;\r\n        case 'organisation':\r\n            // Set visit, postal, invoice addresses\r\n            visitAddress = contactData.addresses.find(address => address.typeId === 'visit');\r\n            contactData.visitAddress = visitAddress ? { ...emptyAddress, ...visitAddress } : emptyAddress;\r\n            if (!contactData.visitAddress.primaryAddressEnergySupplierElectricity) {\r\n                contactData.visitAddress.primaryAddressEnergySupplierElectricity = {\r\n                    ...contactData.visitAddress,\r\n                    emptyPrimaryAddressEnergySupplierElectricity,\r\n                };\r\n            }\r\n            postalAddress = contactData.addresses.find(address => address.typeId === 'postal');\r\n            contactData.postalAddress = postalAddress ? { ...emptyAddress, ...postalAddress } : emptyAddress;\r\n            invoiceAddress = contactData.addresses.find(address => address.typeId === 'invoice');\r\n            contactData.invoiceAddress = invoiceAddress ? { ...emptyAddress, ...invoiceAddress } : emptyAddress;\r\n            break;\r\n    }\r\n\r\n    // Set correspondence email address\r\n    let emptyEmail = { email: '' };\r\n    const emailCorrespondence = contactData.emailAddresses.find(emailAddress => emailAddress.primary);\r\n    contactData.emailCorrespondence = emailCorrespondence ? { ...emptyEmail, ...emailCorrespondence } : emptyEmail;\r\n\r\n    // Set invoice email address\r\n    const emailInvoice = contactData.emailAddresses.find(\r\n        emailAddress => emailAddress.typeId === 'invoice' && !emailAddress.primary\r\n    );\r\n    contactData.emailInvoice = emailInvoice ? { ...emptyEmail, ...emailInvoice } : emptyEmail;\r\n\r\n    // Set primary phone number\r\n    let emptyPhoneNumber = { number: '' };\r\n    const phoneNumberPrimary = contactData.phoneNumbers.find(phoneNumber => phoneNumber.primary);\r\n    contactData.phoneNumberPrimary = phoneNumberPrimary\r\n        ? { ...emptyPhoneNumber, ...phoneNumberPrimary }\r\n        : emptyPhoneNumber;\r\n\r\n    // Set first phone number which is not primary\r\n    const phoneNumberTwo = contactData.phoneNumbers.filter(phoneNumber => !phoneNumber.primary)[0];\r\n    contactData.phoneNumberTwo = phoneNumberTwo ? { ...emptyPhoneNumber, ...phoneNumberTwo } : emptyPhoneNumber;\r\n\r\n    return contactData;\r\n}\r\n","import { Card, CardImg } from 'react-bootstrap';\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst DashboardWidget = function({\r\n    id,\r\n    title,\r\n    text,\r\n    image,\r\n    buttonText,\r\n    buttonLink,\r\n    backgroundColorUsed,\r\n    textColorUsed,\r\n}) {\r\n    const history = useHistory();\r\n    const key = 'widget-' + id;\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    let externalLink = null;\r\n    if (buttonLink.toLowerCase().startsWith('www')) {\r\n        externalLink = 'https://' + buttonLink;\r\n    } else if (buttonLink.toLowerCase().startsWith('http') || buttonLink.toLowerCase().startsWith('https')) {\r\n        externalLink = buttonLink;\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            key={key}\r\n            id={key}\r\n            style={{ marginTop: '30px', backgroundColor: backgroundColorUsed, color: textColorUsed }}\r\n        >\r\n            <CardImg\r\n                src={image && image.includes('images/') ? image + '?' + imageHash : 'images/' + image + '?' + imageHash}\r\n                variant={'top'}\r\n            />\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{title}</h5>\r\n                <p className=\"card-text\" style={{ whiteSpace: 'break-spaces' }}>\r\n                    {text}\r\n                </p>\r\n                {externalLink === null ? (\r\n                    <button className=\"w-button btn btn-primary btn-sm\" onClick={() => history.push(buttonLink)}>\r\n                        {buttonText}\r\n                    </button>\r\n                ) : (\r\n                    <a href={externalLink} target=\"_blank\">\r\n                        <button className=\"w-button btn btn-primary btn-sm\">{buttonText}</button>\r\n                    </a>\r\n                )}\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default DashboardWidget;\r\n","import { Button, Card } from 'react-bootstrap';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { isEmpty } from 'lodash';\r\n\r\nexport const ContactDetailsDashboardWidget = function({ contact, backgroundColorUsed, textColorUsed }) {\r\n    const history = useHistory();\r\n    const key = 'widget-' + 'contact-details';\r\n\r\n    const typeContact = contact.typeId ? contact.typeId : null;\r\n\r\n    return (\r\n        <Card\r\n            key={key}\r\n            id={key}\r\n            style={{ marginTop: '30px', backgroundColor: backgroundColorUsed, color: textColorUsed }}\r\n        >\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{contact.fullNameFnf}</h5>\r\n                <div className=\"card-text\">\r\n                    {typeContact === 'person' ? (\r\n                        <>\r\n                            {contact.primaryAddress !== undefined ? (\r\n                                <div>\r\n                                    <b>Adres</b>\r\n                                    <br />\r\n                                    {contact.primaryAddress.street} {contact.primaryAddress.number}\r\n                                    <br />\r\n                                    {contact.primaryAddress.postalCode} {contact.primaryAddress.city},{' '}\r\n                                    {contact.primaryAddress.country ? contact.primaryAddress.country.name : ''}\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                        </>\r\n                    ) : null}\r\n                    {typeContact === 'organisation' ? (\r\n                        <>\r\n                            {contact.visitAddress !== undefined ? (\r\n                                <div>\r\n                                    <b>Bezoekadres</b>\r\n                                    <br />\r\n                                    {contact.visitAddress.street} {contact.visitAddress.number}\r\n                                    <br />\r\n                                    {contact.visitAddress.postalCode} {contact.visitAddress.city},{' '}\r\n                                    {contact.visitAddress.country ? contact.visitAddress.country.name : ''}\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                            {contact.postalAddress !== undefined &&\r\n                            contact.postalAddress &&\r\n                            !isEmpty(contact.postalAddress.postalCode) ? (\r\n                                <div>\r\n                                    <b>Postadres</b>\r\n                                    <br />\r\n                                    {contact.postalAddress.street} {contact.postalAddress.number}\r\n                                    <br />\r\n                                    {contact.postalAddress.postalCode} {contact.postalAddress.city},{' '}\r\n                                    {contact.postalAddress.country ? contact.postalAddress.country.name : ''}\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                            {contact.invoiceAddress !== undefined &&\r\n                            contact.invoiceAddress &&\r\n                            !isEmpty(contact.invoiceAddress.postalCode) ? (\r\n                                <div>\r\n                                    <b>Nota adres</b>\r\n                                    <br />\r\n                                    {contact.invoiceAddress.street} {contact.invoiceAddress.number}\r\n                                    <br />\r\n                                    {contact.invoiceAddress.postalCode} {contact.invoiceAddress.city},{' '}\r\n                                    {contact.invoiceAddress.country ? contact.invoiceAddress.country.name : ''}\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                        </>\r\n                    ) : null}\r\n\r\n                    <div>\r\n                        <br />\r\n                        <b>Telefoon</b>\r\n                        <br />\r\n                        {contact.phoneNumberPrimary.number}\r\n                    </div>\r\n                    <div>\r\n                        <br />\r\n                        <b>E-mail</b>\r\n                        <br />\r\n                        {contact.emailCorrespondence.email}\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <button className=\"w-button btn btn-primary btn-sm\" onClick={() => history.push('/gegevens')}>\r\n                    Gegevens beheren\r\n                </button>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport const SwitchContactDashboardWidget = function({\r\n    user,\r\n    currentSelectedContact,\r\n    switchCurrentContact,\r\n    backgroundColorUsed,\r\n    textColorUsed,\r\n}) {\r\n    const history = useHistory();\r\n    const key = 'widget-' + 'switch-contact';\r\n\r\n    return (\r\n        <Card\r\n            key={key}\r\n            id={key}\r\n            style={{ marginTop: '30px', backgroundColor: backgroundColorUsed, color: textColorUsed }}\r\n        >\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Wissel van contact</h5>\r\n                <div\r\n                    className=\"card-text\"\r\n                    style={{ display: 'flex', justifyContent: 'space-between', overflowX: 'auto' }}\r\n                >\r\n                    {user.occupations && user.occupations.length > 0 ? (\r\n                        <>\r\n                            <Button\r\n                                className=\"w-button btn btn-primary btn-sm\"\r\n                                key={'user-' + user.id}\r\n                                id={'user-' + user.id}\r\n                                onClick={() => {\r\n                                    switchCurrentContact(user);\r\n                                }}\r\n                                disabled={currentSelectedContact.id === user.id}\r\n                                style={{ margin: '5px' }}\r\n                            >\r\n                                {user.fullNameFnf}\r\n                            </Button>\r\n                            {user.occupations.map(occupationContact =>\r\n                                (occupationContact.primaryContact.typeId === 'organisation' &&\r\n                                    occupationContact.primary) ||\r\n                                (occupationContact.primaryContact.typeId === 'person' &&\r\n                                    occupationContact.occupation.occupationForPortal) ? (\r\n                                    <Button\r\n                                        className=\"w-button btn btn-primary btn-sm\"\r\n                                        key={'user-' + occupationContact.primaryContact.id}\r\n                                        id={'user-' + occupationContact.primaryContact.id}\r\n                                        onClick={() => {\r\n                                            switchCurrentContact(occupationContact.primaryContact);\r\n                                        }}\r\n                                        disabled={currentSelectedContact.id === occupationContact.primaryContact.id}\r\n                                        style={{ margin: '5px' }}\r\n                                    >\r\n                                        {occupationContact.primaryContact.fullNameFnf}\r\n                                    </Button>\r\n                                ) : null\r\n                            )}\r\n                        </>\r\n                    ) : null}\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nconst URL_PORTAL_SETTINGS_DASHBOARD = `/portal-settings-dashboard`;\r\n\r\nexport default {\r\n    fetchDashboardSettings: (id, contactId) => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS_DASHBOARD}/${id}/${contactId}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport DashboardWidget from './widget';\r\nimport { ContactDetailsDashboardWidget, SwitchContactDashboardWidget } from './widget/default';\r\nimport DashboardSettingsAPI from '../../api/dashboard/DashboardSettingsAPI';\r\nimport { isEmpty } from 'lodash';\r\n\r\nconst Dashboard = function(props) {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [contact, setContact] = useState({});\r\n    const [dashboardSettings, setDashboardSettings] = useState({});\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n                props.updateNameSelectedContact(\r\n                    contactData.fullNameFnf,\r\n                    contactData.typeId,\r\n                    contactData.firstName,\r\n                    contactData.lastNamePrefix,\r\n                    contactData.lastName\r\n                );\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            })\r\n            .finally(() => callFetchDashboardSettings());\r\n    }\r\n\r\n    function callFetchDashboardSettings() {\r\n        setLoading(true);\r\n        // todo WM: check anders\r\n        //\r\n        const id = 1;\r\n        DashboardSettingsAPI.fetchDashboardSettings(id, props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setDashboardSettings(payload.data.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <div className=\"content-container w-container\">\r\n                    <Row>\r\n                        <Col>\r\n                            {!isEmpty(dashboardSettings.welcomeTitle) ? (\r\n                                <h1 className=\"content-heading mt-0 text-center\">{dashboardSettings.welcomeTitle}</h1>\r\n                            ) : null}\r\n                            {!isEmpty(dashboardSettings.welcomeMessage) ? (\r\n                                <p className={'text-center'} style={{ whiteSpace: 'break-spaces' }}>\r\n                                    {dashboardSettings.welcomeMessage}\r\n                                </p>\r\n                            ) : null}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        {dashboardSettings.widgets\r\n                            .filter(w => w.active)\r\n                            .sort((a, b) => (a.order > b.order ? 1 : -1))\r\n                            .map(widget => (\r\n                                <Col md={6}>\r\n                                    <DashboardWidget\r\n                                        id={widget.codeRef}\r\n                                        image={widget.widgetImageFileName}\r\n                                        title={widget.title}\r\n                                        text={widget.text}\r\n                                        buttonText={widget.buttonText}\r\n                                        buttonLink={widget.buttonLink}\r\n                                        backgroundColorUsed={widget.backgroundColorUsed}\r\n                                        textColorUsed={widget.textColorUsed}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <ContactDetailsDashboardWidget\r\n                                contact={contact}\r\n                                backgroundColorUsed={dashboardSettings.defaultWidgetBackgroundColor}\r\n                                textColorUsed={dashboardSettings.defaultWidgetTextColor}\r\n                            />\r\n                        </Col>\r\n                        <PortalUserConsumer>\r\n                            {({ user, currentSelectedContact, switchCurrentContact }) => {\r\n                                if (user.occupations && user.occupations.length > 0) {\r\n                                    return (\r\n                                        <Col md={6}>\r\n                                            <SwitchContactDashboardWidget\r\n                                                user={user}\r\n                                                currentSelectedContact={currentSelectedContact}\r\n                                                switchCurrentContact={switchCurrentContact}\r\n                                                backgroundColorUsed={dashboardSettings.defaultWidgetBackgroundColor}\r\n                                                textColorUsed={dashboardSettings.defaultWidgetTextColor}\r\n                                            />\r\n                                        </Col>\r\n                                    );\r\n                                }\r\n                            }}\r\n                        </PortalUserConsumer>\r\n                    </Row>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default function DashboardWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ user, currentSelectedContact, updateNameSelectedContact }) => (\r\n                <Dashboard\r\n                    {...props}\r\n                    user={user}\r\n                    currentSelectedContact={currentSelectedContact}\r\n                    updateNameSelectedContact={updateNameSelectedContact}\r\n                />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TextBlock = ({ children, className, id, placeholder }) => {\r\n    const showPlaceholder = children === '' || children === null || children === undefined;\r\n\r\n    return (\r\n        <div className={`text-block ${className} ${showPlaceholder ? 'placeholder' : ''}`} id={id}>\r\n            {showPlaceholder ? <div className={'placeholder-message'}>{placeholder}</div> : children}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextBlock.defaultProps = {\r\n    className: 'text-block',\r\n    id: '',\r\n    children: '',\r\n    placeholder: '',\r\n};\r\n\r\nTextBlock.propTypes = {\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    placeholder: PropTypes.string,\r\n};\r\n\r\nexport default TextBlock;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactPersonalView({ portalSettings, initialContact }) {\r\n    const {\r\n        person = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        primaryAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n    } = initialContact;\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Naam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Aanhef'}>\r\n                        {person.title ? person.title.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Initialen'}>\r\n                        {person.initials}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Voornaam'}>\r\n                        {person.firstName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Tussenvoegsel'}>\r\n                        {person.lastNamePrefix}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Achternaam'}>\r\n                        {person.lastName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Geboortedatum</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Geboortedatum (dd-mm-jjjj)'}>\r\n                        {person.dateOfBirth ? moment(person.dateOfBirth).format('L') : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {primaryAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {primaryAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {primaryAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {primaryAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {primaryAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {primaryAddress.country ? primaryAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                        {primaryAddress.eanElectricity}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                        {primaryAddress.eanGas}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? (\r\n                                <em>({dateDidAgreeAvg ? ' ' + moment(dateDidAgreeAvg).format('L') : ''})</em>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {primaryAddress.primaryAddressEnergySupplierElectricity.energySupplier\r\n                            ? primaryAddress.primaryAddressEnergySupplierElectricity.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                {primaryAddress.primaryAddressEnergySupplierElectricity &&\r\n                primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {primaryAddress.primaryAddressEnergySupplierElectricity.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {primaryAddress.primaryAddressEnergySupplierElectricity.memberSince\r\n                                    ? moment(primaryAddress.primaryAddressEnergySupplierElectricity.memberSince).format(\r\n                                          'L'\r\n                                      )\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactPersonalView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst Select = ({\r\n    field,\r\n    className,\r\n    id,\r\n    options,\r\n    optionLabel,\r\n    emptyOption,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <select\r\n                className={`select-field w-select content ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                disabled={disabled}\r\n            >\r\n                {emptyOption ? <option value=\"\">{placeholder ? `-- ${placeholder} --` : ''}</option> : null}\r\n                {options.map(option => {\r\n                    return (\r\n                        <option key={option.id} value={option.id}>\r\n                            {option[optionLabel]}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </>\r\n    );\r\n};\r\n\r\nSelect.defaultProps = {\r\n    className: '',\r\n    readOnly: false,\r\n    required: '',\r\n    optionLabel: 'name',\r\n    emptyOption: true,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nSelect.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    options: PropTypes.array.isRequired,\r\n    optionLabel: PropTypes.string,\r\n    emptyOption: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default Select;\r\n","export default [\r\n    { id: 'AU', name: 'Australië' },\r\n    { id: 'BE', name: 'België' },\r\n    { id: 'CA', name: 'Canade' },\r\n    { id: 'DK', name: 'Denemarken' },\r\n    { id: 'DE', name: 'Duitsland' },\r\n    { id: 'FI', name: 'Finland' },\r\n    { id: 'FR', name: 'Frankrijk' },\r\n    { id: 'IE', name: 'Ierland' },\r\n    { id: 'IT', name: 'Italië' },\r\n    { id: 'LU', name: 'Luxemburg' },\r\n    { id: 'NL', name: 'Nederland' },\r\n    { id: 'NZ', name: 'Nieuw-Zeeland' },\r\n    { id: 'NO', name: 'Noorwegen' },\r\n    { id: 'AT', name: 'Oostenrijk' },\r\n    { id: 'PL', name: 'Polen' },\r\n    { id: 'PT', name: 'Portugal' },\r\n    { id: 'ES', name: 'Spanje' },\r\n    { id: 'CZ', name: 'Tsjechië' },\r\n    { id: 'GB', name: 'Verenigd Koninkrijk' },\r\n    { id: 'VS', name: 'Verenigde Staten' },\r\n    { id: 'SE', name: 'Zweden' },\r\n    { id: 'CH', name: 'Zwitserland' },\r\n];\r\n","export default [\r\n    { id: 26, name: 'Agem' },\r\n    { id: 27, name: 'Anode Energie' },\r\n    { id: 66, name: 'ANWB Energie' },\r\n    { id: 24, name: 'Betuwe stroom' },\r\n    { id: 2, name: 'Budget Energie' },\r\n    { id: 58, name: 'CEN / WoonEnergie' },\r\n    { id: 54, name: 'Clean Energy' },\r\n    { id: 68, name: 'Coolblue Energie' },\r\n    { id: 28, name: 'De Groene Stroomfabriek' },\r\n    { id: 59, name: 'De Vrije Energie Producent' },\r\n    { id: 25, name: 'Delta Energie' },\r\n    { id: 50, name: 'DGB Energie' },\r\n    { id: 51, name: 'Discount Energie' },\r\n    { id: 46, name: 'Dorpstroom' },\r\n    { id: 53, name: 'DVEP Energie' },\r\n    { id: 3, name: 'E.on' },\r\n    { id: 45, name: 'Easyenergy' },\r\n    { id: 4, name: 'Eneco' },\r\n    { id: 19, name: 'Energie VanOns' },\r\n    { id: 42, name: 'Energiebesteding' },\r\n    { id: 5, name: 'Energiedirect' },\r\n    { id: 21, name: 'Energieflex' },\r\n    { id: 37, name: 'Energyhouse' },\r\n    { id: 49, name: 'EnergyZero' },\r\n    { id: 52, name: 'EnerZie' },\r\n    { id: 6, name: 'Engie' },\r\n    { id: 7, name: 'Essent' },\r\n    { id: 35, name: 'Fenor energie' },\r\n    { id: 60, name: 'Gazprom' },\r\n    { id: 56, name: 'Gezinsenergie' },\r\n    { id: 8, name: 'Greenchoice' },\r\n    { id: 43, name: 'GreenNL' },\r\n    { id: 40, name: 'Groenpand' },\r\n    { id: 44, name: 'Hezelaer' },\r\n    { id: 69, name: 'HollandsStroom' },\r\n    { id: 9, name: 'Holland Wind' },\r\n    { id: 20, name: 'Huismerk Energie' },\r\n    { id: 30, name: 'HVC Kringloop Energie' },\r\n    { id: 23, name: 'Innova Energie' },\r\n    { id: 10, name: 'Main energie' },\r\n    { id: 65, name: 'Mijn Domein Energie' },\r\n    { id: 61, name: 'Nieuw Hollands Energiebedrijf' },\r\n    { id: 38, name: 'NieuweStroom' },\r\n    { id: 12, name: 'NL Energie' },\r\n    { id: 1, name: 'OM' },\r\n    { id: 18, name: 'Overig' },\r\n    { id: 14, name: 'Oxxio' },\r\n    { id: 39, name: 'ParkStroom' },\r\n    { id: 62, name: 'PostcodeStroom' },\r\n    { id: 36, name: 'Power peers' },\r\n    { id: 15, name: 'Pure energie' },\r\n    { id: 63, name: 'PZEM' },\r\n    { id: 16, name: 'Qurrent' },\r\n    { id: 48, name: 'Qwint' },\r\n    { id: 55, name: 'Samsam' },\r\n    { id: 31, name: 'Sepa Green' },\r\n    { id: 32, name: 'Servicehouse' },\r\n    { id: 67, name: 'Shell Energie' },\r\n    { id: 34, name: 'Total' },\r\n    { id: 22, name: 'United Consumers' },\r\n    { id: 17, name: 'VanDeBron' },\r\n    { id: 13, name: 'Vattenfall' },\r\n    { id: 64, name: 'Vrij Op Naam' },\r\n    { id: 47, name: 'Welkom Energie' },\r\n    { id: 41, name: 'Windcentrale' },\r\n    { id: 57, name: 'Onbekend' },\r\n];\r\n","export default [\r\n    { id: 0, name: '' },\r\n    { id: 1, name: 'Dhr' },\r\n    { id: 2, name: 'Mevr' },\r\n    { id: 3, name: 'De heer, Mevrouw' },\r\n    { id: 4, name: 'Familie' },\r\n    { id: 5, name: 'De heer of mevrouw' },\r\n    { id: 6, name: 'De heren' },\r\n    { id: 7, name: 'De dames' },\r\n    { id: 8, name: 'Erven' },\r\n];\r\n","export default [\r\n    { id: 0, name: '' },\r\n    { id: 1, name: 'van' },\r\n    { id: 2, name: 'de' },\r\n    { id: 3, name: 'van der' },\r\n    { id: 4, name: 'van de' },\r\n    { id: 5, name: 'van den' },\r\n    { id: 6, name: 'den' },\r\n    { id: 7, name: 'ten' },\r\n    { id: 8, name: 'ter' },\r\n    { id: 9, name: 'te' },\r\n    { id: 10, name: \"van 't\" },\r\n    { id: 11, name: 'el' },\r\n    { id: 12, name: 'le' },\r\n    { id: 13, name: 'van het' },\r\n    { id: 14, name: \"in 't\" },\r\n    { id: 15, name: \"'t\" },\r\n    { id: 16, name: 'von' },\r\n    { id: 17, name: 'du' },\r\n    { id: 18, name: 'da' },\r\n    { id: 19, name: 'de la' },\r\n    { id: 20, name: 'la' },\r\n    { id: 21, name: 'der' },\r\n    { id: 22, name: 'van ter' },\r\n    { id: 23, name: \"op 't\" },\r\n    { id: 24, name: 'op den' },\r\n    { id: 25, name: 'op ten' },\r\n    { id: 26, name: 'op de' },\r\n    { id: 27, name: 'uit den' },\r\n];\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport MomentLocaleUtils, { formatDate, parseDate } from 'react-day-picker/moment';\r\nimport moment from 'moment';\r\nimport { get } from 'lodash';\r\n\r\nconst InputDate = ({\r\n    className,\r\n    id,\r\n    value,\r\n    required,\r\n    readOnly,\r\n    manualInput,\r\n    name,\r\n    disabledBefore,\r\n    disabledAfter,\r\n    onChangeAction,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n}) => {\r\n    const handleDayChange = date => {\r\n        // Convert date in correct value for database\r\n        const formattedDate = date ? moment(date).format('Y-MM-DD') : '';\r\n\r\n        onChangeAction(name, formattedDate);\r\n    };\r\n\r\n    const formattedDate = value ? moment(value).format('L') : '';\r\n    let disabledDays = {};\r\n    if (disabledBefore) disabledDays.before = new Date(disabledBefore);\r\n    if (disabledAfter) disabledDays.after = new Date(disabledAfter);\r\n\r\n    return (\r\n        <>\r\n            {/*{get(errors, name, '') && get(touched, name, '') && showErrorMessage ? (*/}\r\n            {get(errors, name, '') && showErrorMessage ? (\r\n                <>\r\n                    <small className={`${classNameErrorMessage}`}>{get(errors, name, '')}</small>\r\n                    <br />\r\n                </>\r\n            ) : null}\r\n            <DayPickerInput\r\n                id={id}\r\n                value={formattedDate}\r\n                onDayChange={handleDayChange}\r\n                formatDate={formatDate}\r\n                parseDate={parseDate}\r\n                dayPickerProps={{\r\n                    showWeekNumbers: true,\r\n                    locale: 'nl',\r\n                    firstDayOfWeek: 1,\r\n                    localeUtils: MomentLocaleUtils,\r\n                    disabledDays: disabledDays,\r\n                }}\r\n                inputProps={{\r\n                    className: `text-input content ${className}\r\n                     ${Boolean(manualInput) ? ' w-input' : ' w-input-date'}\r\n                     ${\r\n                         // Boolean(get(errors, name, '') && get(touched, name, '')) ? 'has-error mb-0' : ''\r\n                         Boolean(get(errors, name, '')) ? ' has-error mb-0' : ''\r\n                     } `,\r\n                    name: name,\r\n                    autoComplete: 'off',\r\n                    readOnly: Boolean(manualInput) ? readOnly : true,\r\n                    disabled: readOnly,\r\n                    placeholder: placeholder,\r\n                }}\r\n                required={required}\r\n                readOnly={readOnly}\r\n                placeholder={''}\r\n                style={{ width: '100%' }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputDate.defaultProps = {\r\n    className: '',\r\n    required: '',\r\n    readOnly: false,\r\n    manualInput: true,\r\n    value: null,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputDate.propTypes = {\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    onChangeAction: PropTypes.func,\r\n    required: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputDate;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport InputDate from '../../../components/form/InputDate';\r\nimport { FaInfoCircle } from 'react-icons/fa';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst DefaultContactPersonalEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // determine memberSince disabledBefore and after\r\n    let memberSinceDisabledBefore = '';\r\n    let memberSinceDisabledAfter = '';\r\n    if (initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId) {\r\n        if (\r\n            initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince &&\r\n            initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId !==\r\n                values.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId\r\n        ) {\r\n            memberSinceDisabledBefore = moment(\r\n                initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince\r\n            )\r\n                .add(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        } else if (initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.endDatePrevious) {\r\n            memberSinceDisabledBefore = moment(\r\n                initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.endDatePrevious\r\n            )\r\n                .add(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        }\r\n        if (initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.memberSinceNext) {\r\n            memberSinceDisabledAfter = moment(\r\n                initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.memberSinceNext\r\n            )\r\n                .subtract(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        }\r\n    }\r\n\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.titleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={6}>\r\n                        {initialContact.disableChangeContactNameOnPortal ? (\r\n                            <>\r\n                                <FaInfoCircle\r\n                                    color={'blue'}\r\n                                    size={'15px'}\r\n                                    data-tip={\r\n                                        'Je neemt deel aan een project waarvan de deelnemingen op naam zijn uitgegeven.<br />' +\r\n                                        'Daarom kun je jouw naam niet zelf wijzigen.<br />' +\r\n                                        'Overige contactgegevens kun je wel zelf aanpassen.<br />' +\r\n                                        'Een wijziging van rekeningnummer wordt door ons gecontroleerd.<br />' +\r\n                                        'Heb je vragen of wil je jouw gegevens door de beheerder laten wijzigen?<br />' +\r\n                                        'Kijk in het menu onder \"Over ons\" voor contact gegevens.'\r\n                                    }\r\n                                    data-for={`contact-${initialContact.id}`}\r\n                                />\r\n                                <ReactTooltip\r\n                                    id={`contact-${initialContact.id}`}\r\n                                    effect=\"float\"\r\n                                    place=\"right\"\r\n                                    multiline={true}\r\n                                    aria-haspopup=\"true\"\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.initials\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"initials\"\r\n                                    placeholder={'Initialen'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.firstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name\"\r\n                                    placeholder={'Voornaam'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.lastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.lastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name\"\r\n                                    placeholder={'Achternaam'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel\r\n                    htmlFor=\"date_of_birth\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Geboortedatum\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"person.dateOfBirth\"\r\n                            render={({ field }) => (\r\n                                <InputDate\r\n                                    {...field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    onChangeAction={setFieldValue}\r\n                                    id=\"date_of_birth\"\r\n                                    placeholder={'Geboortedatum (dd-mm-jjjj)'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Adres\r\n                    {initialContact.blockChangeAddress ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Adres kan momenteel niet worden aangepast. Geef jouw adreswijziging per e-mail aan ons door.`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : initialContact.blockChangeAddressNumber ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode en huisnummer is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied met huisnummerreeks`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </FormLabel>\r\n                {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\r\n                    (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\r\n                    values.primaryAddress.postalCode.trim() == '') &&\r\n                (values.primaryAddress.street.trim() != '' ||\r\n                    values.primaryAddress.number.trim() != '' ||\r\n                    values.primaryAddress.addition.trim() != '' ||\r\n                    values.primaryAddress.postalCode.trim() != '' ||\r\n                    values.primaryAddress.city.trim() != '') ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"primaryAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress ||\r\n                                        initialContact.isParticipantSceProject ||\r\n                                        initialContact.isParticipantPcrProject\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel\r\n                    htmlFor=\"ean_electricity\"\r\n                    className={\r\n                        projectTypeCodeRef === 'postalcode_link_capital' ? 'field-label required' : 'field-label'\r\n                    }\r\n                >\r\n                    EAN nummer electriciteit\r\n                </FormLabel>\r\n                {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\r\n                    (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\r\n                    values.primaryAddress.postalCode.trim() == '') &&\r\n                values.primaryAddress.eanElectricity != null &&\r\n                values.primaryAddress.eanElectricity.trim() != '' ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                EAN nummer electriciteit wordt alleen opgeslagen als minimaal nummer en postcode zijn\r\n                                ingevuld bij adres.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"primaryAddress.eanElectricity\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"eanElectricity\"\r\n                                    placeholder={'EAN nummer electriciteit'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                    EAN nummer gas\r\n                </FormLabel>\r\n                {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\r\n                    (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\r\n                    values.primaryAddress.postalCode.trim() == '') &&\r\n                values.primaryAddress.eanGas != null &&\r\n                values.primaryAddress.eanGas.trim() != '' ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                EAN nummer gas wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld bij\r\n                                adres.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"primaryAddress.eanGas\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"eanGas\"\r\n                                    placeholder={'EAN nummer gas'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\r\n                            (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\r\n                            values.primaryAddress.postalCode.trim() == '') &&\r\n                        (values.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId != null ||\r\n                            (values.primaryAddress.primaryAddressEnergySupplierElectricity.esNumber &&\r\n                                values.primaryAddress.primaryAddressEnergySupplierElectricity.esNumber.trim() != '') ||\r\n                            (values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince &&\r\n                                values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() !=\r\n                                    '')) ? (\r\n                            <Row>\r\n                                <Col xs={12} sm={12}>\r\n                                    <small className={'text-danger'}>\r\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als minimaal nummer\r\n                                        en postcode zijn ingevuld bij adres.\r\n                                    </small>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        {(!values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince ||\r\n                            values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() == '') &&\r\n                        ((values.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId != null &&\r\n                            values.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId != '') ||\r\n                            (values.primaryAddress.primaryAddressEnergySupplierElectricity.esNumber &&\r\n                                values.primaryAddress.primaryAddressEnergySupplierElectricity.esNumber.trim() != '') ||\r\n                            (values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince &&\r\n                                values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() !=\r\n                                    '')) ? (\r\n                            <Row>\r\n                                <Col xs={12} sm={12}>\r\n                                    <small className={'text-danger'}>\r\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als Klant bij\r\n                                        leverancier sinds is ingevuld.\r\n                                    </small>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            customOnChange={e => {\r\n                                                setFieldValue(\r\n                                                    'primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId',\r\n                                                    e.target.value\r\n                                                );\r\n                                                setFieldValue(\r\n                                                    'primaryAddress.primaryAddressEnergySupplierElectricity.esNumber',\r\n                                                    ''\r\n                                                );\r\n                                                setFieldValue(\r\n                                                    'primaryAddress.primaryAddressEnergySupplierElectricity.memberSince',\r\n                                                    ''\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.primaryAddress.primaryAddressEnergySupplierElectricity &&\r\n                        values.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryAddress.primaryAddressEnergySupplierElectricity.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryAddress.primaryAddressEnergySupplierElectricity.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    disabledBefore={memberSinceDisabledBefore}\r\n                                                    disabledAfter={memberSinceDisabledAfter}\r\n                                                    manualInput={false}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactPersonalEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\nimport { isEmpty } from 'lodash';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        person: Yup.object().shape({\r\n            lastName: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        iban: Yup.string()\r\n            .nullable()\r\n            .trim()\r\n            .test(\r\n                'iban',\r\n                'Ongeldige IBAN of gebruik geen spaties.',\r\n                value => ibantools.isValidIBAN(value) || isEmpty(value)\r\n            ),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        person: Yup.object().shape({\r\n            firstName: Yup.string()\r\n                .trim()\r\n                // .required('Verplicht'),\r\n                .test('initials-and-first-name-check', 'Voornaam of initialen verplicht', function(value) {\r\n                    if (value.trim() != '' || this.parent.initials.trim() != '') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }),\r\n            dateOfBirth: Yup.date()\r\n                .typeError('Verplicht of ongeldige datum')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht')\r\n            .test('iban', 'Ongeldige IBAN of gebruik geen spaties.', value => ibantools.isValidIBAN(value)),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        primaryAddress: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            primaryAddressEnergySupplierElectricity: Yup.object().shape({\r\n                energySupplierId: Yup.string()\r\n                    .nullable()\r\n                    .required('Verplicht'),\r\n                esNumber: Yup.string()\r\n                    .nullable()\r\n                    .trim()\r\n                    .required('Verplicht'),\r\n            }),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPostalCodeAndNumber: Yup.object().shape({\r\n        primaryAddress: Yup.object().shape({\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactPersonalView from './default-form-personal/View';\r\nimport DefaultContactPersonalEdit from './default-form-personal/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from './../../helpers/ValidationSchemaPersonal';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsPersonal({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaPersonal.validationSchemaBasic\r\n              .concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n              .concat(ValidationSchemaPersonal.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaPersonal.validationSchemaBasic.concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n        : ValidationSchemaPersonal.validationSchemaBasic;\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"personal\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactPersonalView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsPersonal;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactOrganisationView({ portalSettings, initialContact }) {\r\n    const {\r\n        organisation = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        visitAddress,\r\n        postalAddress,\r\n        invoiceAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n        primaryOccupations,\r\n    } = initialContact;\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Bedrijfsnaam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Bedrijfsnaam'}>\r\n                        {organisation.name}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'KvK'}>\r\n                        {organisation.chamberOfCommerceNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'BTW nummer'}>\r\n                        {organisation.vatNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Website'}>\r\n                        {organisation.website}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? <em>({dateDidAgreeAvg ? moment(dateDidAgreeAvg).format('L') : ''})</em> : ''}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Bezoekadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {visitAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {visitAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {visitAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {visitAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {visitAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {visitAddress.country ? visitAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                        {visitAddress.eanElectricity}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                        {visitAddress.eanGas}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {visitAddress.primaryAddressEnergySupplierElectricity.energySupplier\r\n                            ? visitAddress.primaryAddressEnergySupplierElectricity.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                {visitAddress.primaryAddressEnergySupplierElectricity &&\r\n                visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {visitAddress.primaryAddressEnergySupplierElectricity.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {visitAddress.primaryAddressEnergySupplierElectricity.memberSince\r\n                                    ? moment(visitAddress.primaryAddressEnergySupplierElectricity.memberSince).format(\r\n                                          'L'\r\n                                      )\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n\r\n                <FormLabel className={'field-label'}>Postadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {postalAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {postalAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {postalAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {postalAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {postalAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {postalAddress.country ? postalAddress.country.name : ''}\r\n                    </TextBlock>{' '}\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Nota adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {invoiceAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {invoiceAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {invoiceAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {invoiceAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {invoiceAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {invoiceAddress.country ? invoiceAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactOrganisationView;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport InputDate from '../../../components/form/InputDate';\r\nimport { FaInfoCircle } from 'react-icons/fa';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst DefaultContactOrganisationEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // determine memberSince disabledBefore and after\r\n    let memberSinceDisabledBefore = '';\r\n    let memberSinceDisabledAfter = '';\r\n    if (initialContact.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId) {\r\n        if (\r\n            initialContact.visitAddress.primaryAddressEnergySupplierElectricity.memberSince &&\r\n            initialContact.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId !==\r\n                values.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId\r\n        ) {\r\n            memberSinceDisabledBefore = moment(\r\n                initialContact.visitAddress.primaryAddressEnergySupplierElectricity.memberSince\r\n            )\r\n                .add(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        } else if (initialContact.visitAddress.primaryAddressEnergySupplierElectricity.endDatePrevious) {\r\n            memberSinceDisabledBefore = moment(\r\n                initialContact.visitAddress.primaryAddressEnergySupplierElectricity.endDatePrevious\r\n            )\r\n                .add(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        }\r\n        if (initialContact.visitAddress.primaryAddressEnergySupplierElectricity.memberSinceNext) {\r\n            memberSinceDisabledAfter = moment(\r\n                initialContact.visitAddress.primaryAddressEnergySupplierElectricity.memberSinceNext\r\n            )\r\n                .subtract(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        }\r\n    }\r\n\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.name\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"name\"\r\n                                    placeholder={'Naam'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        {initialContact.disableChangeContactNameOnPortal ? (\r\n                            <>\r\n                                <FaInfoCircle\r\n                                    color={'blue'}\r\n                                    size={'15px'}\r\n                                    data-tip={\r\n                                        'Je neemt deel aan een project waarvan de deelnemingen op naam zijn uitgegeven.<br />' +\r\n                                        'Daarom kun je jouw naam niet zelf wijzigen.<br />' +\r\n                                        'Overige contactgegevens kun je wel zelf aanpassen.<br />' +\r\n                                        'Een wijziging van rekeningnummer wordt door ons gecontroleerd.<br />' +\r\n                                        'Heb je vragen of wil je jouw gegevens door de beheerder laten wijzigen?<br />' +\r\n                                        'Kijk in het menu onder \"Over ons\" voor contact gegevens.'\r\n                                    }\r\n                                    data-for={`contact-${initialContact.id}`}\r\n                                />\r\n                                <ReactTooltip\r\n                                    id={`contact-${initialContact.id}`}\r\n                                    effect=\"float\"\r\n                                    place=\"right\"\r\n                                    multiline={true}\r\n                                    aria-haspopup=\"true\"\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.chamberOfCommerceNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"chamber_of_commerce_number\"\r\n                                    placeholder={'KvK'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.vatNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"vat_number\"\r\n                                    placeholder={'BTW nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.website\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"website\"\r\n                                    placeholder={'Website'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Bezoekadres\r\n                    {initialContact.blockChangeAddress ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Adres kan momenteel niet worden aangepast. Geef jouw adreswijziging per e-mail aan ons door.`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : initialContact.blockChangeAddressNumber ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode en huisnummer is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied met huisnummerreeks`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </FormLabel>\r\n                {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\r\n                    (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\r\n                    values.visitAddress.postalCode.trim() == '') &&\r\n                (values.visitAddress.street.trim() != '' ||\r\n                    values.visitAddress.number.trim() != '' ||\r\n                    values.visitAddress.addition.trim() != '' ||\r\n                    values.visitAddress.postalCode.trim() != '' ||\r\n                    values.visitAddress.city.trim() != '') ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"visitAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress ||\r\n                                        initialContact.isParticipantSceProject ||\r\n                                        initialContact.isParticipantPcrProject\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel\r\n                    htmlFor=\"ean_electricity\"\r\n                    className={\r\n                        projectTypeCodeRef === 'postalcode_link_capital' ? 'field-label required' : 'field-label'\r\n                    }\r\n                >\r\n                    EAN nummer electriciteit\r\n                </FormLabel>\r\n                {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\r\n                    (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\r\n                    values.visitAddress.postalCode.trim() == '') &&\r\n                values.visitAddress.eanElectricity != null &&\r\n                values.visitAddress.eanElectricity.trim() != '' ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                EAN nummer electriciteit wordt alleen opgeslagen als minimaal nummer en postcode zijn\r\n                                ingevuld bij bezoekadres.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"visitAddress.eanElectricity\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"ean_electricity\"\r\n                                    placeholder={'EAN nummer electriciteit'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                    EAN nummer gas\r\n                </FormLabel>\r\n                {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\r\n                    (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\r\n                    values.visitAddress.postalCode.trim() == '') &&\r\n                values.visitAddress.eanGas != null &&\r\n                values.visitAddress.eanGas.trim() != '' ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                EAN nummer gas wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld bij\r\n                                bezoekadres.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"visitAddress.eanGas\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"ean_gas\"\r\n                                    placeholder={'EAN nummer gas'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\r\n                            (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\r\n                            values.visitAddress.postalCode.trim() == '') &&\r\n                        (values.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId != null ||\r\n                            (values.visitAddress.primaryAddressEnergySupplierElectricity.esNumber &&\r\n                                values.visitAddress.primaryAddressEnergySupplierElectricity.esNumber.trim() != '') ||\r\n                            (values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince &&\r\n                                values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() !=\r\n                                    '')) ? (\r\n                            <Row>\r\n                                <Col xs={12} sm={12}>\r\n                                    <small className={'text-danger'}>\r\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als minimaal nummer\r\n                                        en postcode zijn ingevuld bij bezoekadres.\r\n                                    </small>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        {(!values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince ||\r\n                            values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() == '') &&\r\n                        ((values.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId != null &&\r\n                            values.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId != '') ||\r\n                            (values.visitAddress.primaryAddressEnergySupplierElectricity.esNumber &&\r\n                                values.visitAddress.primaryAddressEnergySupplierElectricity.esNumber.trim() != '') ||\r\n                            (values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince &&\r\n                                values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() !=\r\n                                    '')) ? (\r\n                            <Row>\r\n                                <Col xs={12} sm={12}>\r\n                                    <small className={'text-danger'}>\r\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als Klant bij\r\n                                        leverancier sinds is ingevuld.\r\n                                    </small>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            customOnChange={e => {\r\n                                                setFieldValue(\r\n                                                    'visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId',\r\n                                                    e.target.value\r\n                                                );\r\n                                                setFieldValue(\r\n                                                    'visitAddress.primaryAddressEnergySupplierElectricity.esNumber',\r\n                                                    ''\r\n                                                );\r\n                                                setFieldValue(\r\n                                                    'visitAddress.primaryAddressEnergySupplierElectricity.memberSince',\r\n                                                    ''\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.visitAddress.primaryAddressEnergySupplierElectricity &&\r\n                        values.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"visitAddress.primaryAddressEnergySupplierElectricity.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"visitAddress.primaryAddressEnergySupplierElectricity.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    disabledBefore={memberSinceDisabledBefore}\r\n                                                    disabledAfter={memberSinceDisabledAfter}\r\n                                                    manualInput={false}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Postadres\r\n                </FormLabel>\r\n                {((!isNaN(values.postalAddress.number) && values.postalAddress.number == 0) ||\r\n                    (isNaN(values.postalAddress.number) && values.postalAddress.number.trim() == '') ||\r\n                    values.postalAddress.postalCode.trim() == '') &&\r\n                (values.postalAddress.street.trim() != '' ||\r\n                    values.postalAddress.number.trim() != '' ||\r\n                    values.postalAddress.addition.trim() != '' ||\r\n                    values.postalAddress.postalCode.trim() != '' ||\r\n                    values.postalAddress.city.trim() != '') ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"postalAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Nota adres\r\n                </FormLabel>\r\n                {((!isNaN(values.invoiceAddress.number) && values.invoiceAddress.number == 0) ||\r\n                    (isNaN(values.invoiceAddress.number) && values.invoiceAddress.number.trim() == '') ||\r\n                    values.invoiceAddress.postalCode.trim() == '') &&\r\n                (values.invoiceAddress.street.trim() != '' ||\r\n                    values.invoiceAddress.number.trim() != '' ||\r\n                    values.invoiceAddress.addition.trim() != '' ||\r\n                    values.invoiceAddress.postalCode.trim() != '' ||\r\n                    values.invoiceAddress.city.trim() != '') ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"invoiceAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactOrganisationEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\nimport { isEmpty } from 'lodash';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        organisation: Yup.object().shape({\r\n            name: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        postalAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n        invoiceAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        iban: Yup.string()\r\n            .nullable()\r\n            .trim()\r\n            .test(\r\n                'iban',\r\n                'Ongeldige IBAN of gebruik geen spaties.',\r\n                value => ibantools.isValidIBAN(value) || isEmpty(value)\r\n            ),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht')\r\n            .test('iban', 'Ongeldige IBAN of gebruik geen spaties.', value => ibantools.isValidIBAN(value)),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n        organisation: Yup.object().shape({\r\n            chamberOfCommerceNumber: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        visitAddress: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            primaryAddressEnergySupplierElectricity: Yup.object().shape({\r\n                energySupplierId: Yup.string()\r\n                    .nullable()\r\n                    .required('Verplicht'),\r\n                esNumber: Yup.string()\r\n                    .nullable()\r\n                    .trim()\r\n                    .required('Verplicht'),\r\n            }),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPostalCodeAndNumber: Yup.object().shape({\r\n        visitAddress: Yup.object().shape({\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactOrganisationView from './default-form-organisation/View';\r\nimport DefaultContactOrganisationEdit from './default-form-organisation/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaOrganisation from './../../helpers/ValidationSchemaOrganisation';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsOrganisation({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic\r\n              .concat(ValidationSchemaOrganisation.validationSchemaAdditional)\r\n              .concat(ValidationSchemaOrganisation.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic.concat(\r\n              ValidationSchemaOrganisation.validationSchemaAdditional\r\n          )\r\n        : ValidationSchemaOrganisation.validationSchemaBasic;\r\n\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"organisation\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactOrganisationView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsOrganisation;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactDetailsPersonal from './Personal';\r\nimport ContactDetailsOrganisation from './Organisation';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst ContactDetails = function(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n    const [editForm, setEditForm] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const keys =\r\n            '?keys[]=portalName' +\r\n            '&keys[]=portalWebsite' +\r\n            '&keys[]=portalUrl' +\r\n            '&keys[]=responsibleUserId' +\r\n            '&keys[]=checkContactTaskResponsibleUserId' +\r\n            '&keys[]=linkPrivacyPolicy' +\r\n            '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n            '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n        PortalSettingsAPI.fetchPortalSettings(keys)\r\n            .then(payload => {\r\n                setPortalSettings({ ...payload.data });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ isLoading: false, hasError: true });\r\n            });\r\n\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n                props.updateNameSelectedContact(\r\n                    contactData.fullNameFnf,\r\n                    contactData.typeId,\r\n                    contactData.firstName,\r\n                    contactData.lastNamePrefix,\r\n                    contactData.lastName\r\n                );\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, switchToView) {\r\n        const updatedContact = { ...contact, ...values, projectId: null };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                callFetchContact();\r\n                actions.setSubmitting(false);\r\n                switchToView();\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    const editButtonGroup = (\r\n        <ButtonGroup aria-label=\"contact-details\" className={'float-right'}>\r\n            <Button\r\n                className={'w-button'}\r\n                size=\"sm\"\r\n                onClick={function() {\r\n                    setEditForm(true);\r\n                }}\r\n            >\r\n                Wijzig\r\n            </Button>\r\n        </ButtonGroup>\r\n    );\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <div className=\"content-container w-container\">\r\n                    {editForm ? (\r\n                        <Row>\r\n                            <Col>\r\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : (\r\n                        <Row>\r\n                            <Col>\r\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                            </Col>\r\n                            <Col>{editButtonGroup}</Col>\r\n                        </Row>\r\n                    )}\r\n                    <div className=\"w-form\" />\r\n                    {/* If contact is person */}\r\n                    {contact.typeId === 'person' ? (\r\n                        <ContactDetailsPersonal\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                    {/* If contact is organisation */}\r\n                    {contact.typeId === 'organisation' ? (\r\n                        <ContactDetailsOrganisation\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default function ContactDetailsWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact, updateNameSelectedContact }) => (\r\n                <ContactDetails\r\n                    {...props}\r\n                    currentSelectedContact={currentSelectedContact}\r\n                    updateNameSelectedContact={updateNameSelectedContact}\r\n                />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Field, FieldArray, Form, Formik } from 'formik';\r\nimport ButtonText from '../../components/button/ButtonText';\r\n\r\nconst MyAreasOfInterestForm = function({ handleSubmit, initialValues }) {\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            enableReinitialize={true}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                console.log(values);\r\n            }}\r\n            render={({ errors, touched, setFieldValue, isSubmitting, values }) => {\r\n                return (\r\n                    <Form id=\"email-form\" name=\"email-form\">\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <h6 className=\"heading-content\">Mijn interessegebieden</h6>\r\n                                <FieldArray\r\n                                    name=\"myAreasOfInterest\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.myAreasOfInterest &&\r\n                                                values.myAreasOfInterest.map((myAreaOfInterest, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`myAreasOfInterest[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={myAreaOfInterest.name}\r\n                                                                        checked={myAreaOfInterest.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={myAreaOfInterest.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {myAreaOfInterest.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Deelname</h6>\r\n                                <FieldArray\r\n                                    name=\"participations\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.participations &&\r\n                                                values.participations.map((participation, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`participations[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={participation.name}\r\n                                                                        checked={participation.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={participation.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {participation.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Algemeen</h6>\r\n                                <FieldArray\r\n                                    name=\"generalOptions\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.generalOptions &&\r\n                                                values.generalOptions.map((generalOption, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`generalOptions[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={generalOption.name}\r\n                                                                        checked={generalOption.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={generalOption.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {generalOption.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <ButtonText\r\n                                    buttonText={'Opslaan'}\r\n                                    buttonClassName={'save-btn w-button'}\r\n                                    type={'submit'}\r\n                                    loading={isSubmitting}\r\n                                />\r\n                            </div>\r\n                            <div className=\"w-col w-col-6\" />\r\n                        </div>\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterestForm;\r\n","import React from 'react';\r\nimport MyAreasOfInterestForm from './Form';\r\n\r\nconst MyAreasOfInterest = function() {\r\n    // TODO Fetch values from API\r\n    const initialValues = {\r\n        myAreasOfInterest: [\r\n            { id: 4, name: 'Gevel isolatie', value: true },\r\n            { id: 5, name: 'Zonnepanelen', value: false },\r\n            { id: 6, name: 'Dak isolatie', value: false },\r\n            { id: 7, name: 'Zonneboiler', value: true },\r\n        ],\r\n        participations: [{ id: 2, name: 'Test groep', value: true }, { id: 3, name: 'De leuke mensen', value: false }],\r\n        generalOptions: [{ id: 1, name: 'Test algemeen groep', value: false }],\r\n    };\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            <div className=\"content-container w-container\">\r\n                <h1 className=\"content-heading\">Instellingen</h1>\r\n                <div className=\"w-form\" />\r\n                <MyAreasOfInterestForm initialValues={initialValues} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterest;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n    fetchProjects: function() {\r\n        const requestUrl = `/jory/project`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: ['id', 'name', 'dateStartRegistrations', 'dateEndRegistrations'],\r\n                    flt: {\r\n                        and: [\r\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\r\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\r\n                        ],\r\n                    },\r\n                    rlt: {\r\n                        administration: { fld: ['id', 'name'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchProject: function(id) {\r\n        const requestUrl = `/jory/project/${id}`;\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'name',\r\n                        'description',\r\n                        'dateStartRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'minParticipations',\r\n                        'maxParticipations',\r\n                        'totalParticipations',\r\n                        'participationWorth',\r\n                        'currentBookWorth',\r\n                        'amountOfLoanNeeded',\r\n                        'minAmountLoan',\r\n                        'maxAmountLoan',\r\n                        'isSceProject',\r\n                        'checkPostalcodeLink',\r\n                        'postalcodeLink',\r\n                        'linkAgreeTerms',\r\n                        'linkProjectInfo',\r\n                        'linkUnderstandInfo',\r\n                        'showQuestionAboutMembership',\r\n                        'useTransactionCostsWithMembership',\r\n                        'usesMollie',\r\n                        'textTransactionCosts',\r\n                        'transactionCostsCodeRef',\r\n                        'transactionCostsAmountMin',\r\n                        'transactionCostsAmountMax',\r\n                        'transactionCostsAmount',\r\n                        'transactionCostsPercentage',\r\n                        'transactionCostsAmount2',\r\n                        'transactionCostsPercentage2',\r\n                        'transactionCostsAmount3',\r\n                        'transactionCostsPercentage3',\r\n                    ],\r\n                    flt: {\r\n                        and: [\r\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\r\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\r\n                        ],\r\n                    },\r\n                    rlt: {\r\n                        projectType: { fld: ['id', 'codeRef'] },\r\n                        administration: { fld: ['id', 'name', 'portalSettingsLayoutAssigned'] },\r\n                        documentAgreeTerms: { fld: ['id', 'filename'] },\r\n                        documentUnderstandInfo: { fld: ['id', 'filename'] },\r\n                        documentProjectInfo: { fld: ['id', 'filename'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    documentDownload: function(projectId, id) {\r\n        const requestUrl = `/project/${projectId}/document/${id}/download`;\r\n\r\n        return axiosInstance.get(requestUrl, { responseType: 'blob' });\r\n    },\r\n};\r\n","export default amount => {\r\n    if (!amount) amount = 0;\r\n    // if (isNaN(amount)) {\r\n    //     amount = amount.replace(',', '.');\r\n    // }\r\n    amount = parseFloat(amount * 100) / 100;\r\n\r\n    if (isNaN(amount)) return 'Ongeldig bedrag';\r\n\r\n    return `€ ${amount.toLocaleString('nl', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n    })}`;\r\n};\r\n","export default function(project, amountOptioned, participationsOptioned) {\r\n    let transactionCosts = 0;\r\n    let varAmountOptioned = amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\r\n    let varParticipationsOptioned = participationsOptioned ? parseFloat(participationsOptioned).toFixed(0) : 0;\r\n    switch (project.transactionCostsCodeRef) {\r\n        case 'amount-once':\r\n            transactionCosts = project.transactionCostsAmount;\r\n            break;\r\n        case 'amount':\r\n            if (project.projectType.codeRef === 'loan') {\r\n                transactionCosts = project.transactionCostsAmount;\r\n            } else {\r\n                transactionCosts = project.transactionCostsAmount * varParticipationsOptioned;\r\n            }\r\n            break;\r\n        case 'percentage':\r\n            let amount = 0;\r\n            if (project.projectType.codeRef === 'loan') {\r\n                amount = varAmountOptioned;\r\n            } else {\r\n                amount = varParticipationsOptioned * project.currentBookWorth;\r\n            }\r\n            if (amount != 0) {\r\n                if (project.transactionCostsAmount3 !== null && amount >= project.transactionCostsAmount3) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage3) / 100).toFixed(2));\r\n                } else if (project.transactionCostsAmount2 !== null && amount >= project.transactionCostsAmount2) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage2) / 100).toFixed(2));\r\n                } else if (project.transactionCostsAmount !== null && amount >= project.transactionCostsAmount) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage) / 100).toFixed(2));\r\n                } else {\r\n                    transactionCosts = 0;\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            transactionCosts = 0;\r\n    }\r\n    if (project.transactionCostsCodeRef !== 'none') {\r\n        if (project.transactionCostsAmountMin !== null && transactionCosts < project.transactionCostsAmountMin) {\r\n            transactionCosts = project.transactionCostsAmountMin;\r\n        }\r\n        if (project.transactionCostsAmountMax !== null && transactionCosts > project.transactionCostsAmountMax) {\r\n            transactionCosts = project.transactionCostsAmountMax;\r\n        }\r\n    }\r\n\r\n    return transactionCosts;\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst InputTextCurrency = ({\r\n    field,\r\n    type,\r\n    className,\r\n    id,\r\n    readOnly,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <input\r\n                type={type}\r\n                className={`text-input w-input ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                value={field.value.toString().replace('.', ',')}\r\n                readOnly={readOnly}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputTextCurrency.defaultProps = {\r\n    type: 'text',\r\n    className: 'content',\r\n    readOnly: false,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputTextCurrency.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputTextCurrency;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\nimport InputTextCurrency from '../../../components/form/InputTextCurrency';\r\n\r\nfunction StepOneLoan({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        amountOptioned: Yup.string()\r\n            .required('Verplicht')\r\n            .transform(function(value, originalvalue) {\r\n                return value ? value.replace(',', '.') : 0;\r\n            })\r\n            .test(\r\n                'amountOptioned',\r\n                'Minimum van ' + project.minAmountLoan + ' nodig',\r\n                value => value >= project.minAmountLoan\r\n            )\r\n            .test(\r\n                'amountOptioned',\r\n                'Maximum van ' + project.maxAmountLoan + ' bereikt',\r\n                value => value <= project.maxAmountLoan\r\n            )\r\n            .matches(/^\\s*(?=.*[1-9])\\d*(?:\\.\\d{1,2})?\\s*$/, 'Fout bedrag'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function setAmountOptioned(amountOptioned) {\r\n        return amountOptioned ? amountOptioned.toString().replace(',', '.') : '';\r\n    }\r\n    function calculateAmount(amountOptioned) {\r\n        return amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(amountOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, amountOptioned, null);\r\n    }\r\n    function calculateTotalAmount(amountOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(amountOptioned) + calculateTransactionCostsAmount(amountOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amountOptioned: setAmountOptioned(values.amountOptioned),\r\n                    amount: calculateAmount(values.amountOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.amountOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.amountOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimaal bedrag</FormLabel>\r\n                                <TextBlock>{project.minAmountLoan}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximaal bedrag</FormLabel>\r\n                                <TextBlock>{project.maxAmountLoan}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>In te leggen bedrag</Form.Label>\r\n                                <Field\r\n                                    name=\"amountOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputTextCurrency\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"amount_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.amountOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.amountOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(values.amountOptioned, values.choiceMembership)\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneLoan;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOneObligation({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Huidige hoofdsom per obligatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal obligaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneObligation;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOneCapital({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal participaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneCapital;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOnePcr({\r\n    portalSettings,\r\n    next,\r\n    project,\r\n    contactProjectData,\r\n    initialContact,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n}) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrYearlyPowerKwhConsumption: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrPostalCode: Yup.string()\r\n            .min(4, 'Minimum van ${min} postcode cijfers nodig')\r\n            .required('Verplicht')\r\n            .test(\r\n                'pcrPostalCode',\r\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                value =>\r\n                    value &&\r\n                    (!project.checkPostalcodeLink ||\r\n                        (project.postalcodeLink && project.postalcodeLink.includes(value.substring(0, 4))))\r\n            ),\r\n        pcrNumberOfSolarPanels: Yup.number().typeError('Alleen nummers'),\r\n        pcrInputGeneratedNumberOfKwh: Yup.number().typeError('Alleen nummers'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    // const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = 0.8;\r\n    const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = portalSettings['pcrPowerKwhConsumptionPercentage'];\r\n    // const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = 250;\r\n    const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = portalSettings['pcrGeneratingCapacityOneSolorPanel'];\r\n\r\n    function calculateEstimatedGeneratedNumberOfKwh(values) {\r\n        return values.pcrNumberOfSolarPanels\r\n            ? values.pcrNumberOfSolarPanels * PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n            : 0;\r\n    }\r\n    function calculateGeneratedNumberOfKwh(values) {\r\n        return values.pcrInputGeneratedNumberOfKwh && values.pcrInputGeneratedNumberOfKwh > 0\r\n            ? values.pcrInputGeneratedNumberOfKwh\r\n            : calculateEstimatedGeneratedNumberOfKwh(values)\r\n            ? calculateEstimatedGeneratedNumberOfKwh(values)\r\n            : 0;\r\n    }\r\n    function calculatePowerKwhConsumption(values) {\r\n        let extraPowerKwhConsumption =\r\n            values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values) > 0\r\n                ? values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values)\r\n                : 0;\r\n        return extraPowerKwhConsumption;\r\n    }\r\n    function calculateAdviseMaxNumberOfParticipations(values) {\r\n        let pcrAdviseMaxNumberOfParticipations =\r\n            calculatePowerKwhConsumption(values) > 0\r\n                ? Math.ceil(\r\n                      (calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE) /\r\n                          PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n                  )\r\n                : 0;\r\n\r\n        if (pcrAdviseMaxNumberOfParticipations < project.minParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.minParticipations;\r\n        } else if (pcrAdviseMaxNumberOfParticipations > project.maxParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.maxParticipations;\r\n        }\r\n        return pcrAdviseMaxNumberOfParticipations;\r\n    }\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    powerKwhConsumption: calculatePowerKwhConsumption(values),\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={{\r\n                ...initialRegisterValues,\r\n            }}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => {\r\n                let pcrEstimatedGeneratedNumberOfKwh = calculateEstimatedGeneratedNumberOfKwh(values);\r\n                let powerKwhConsumption = Math.ceil(\r\n                    calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE\r\n                );\r\n                let pcrAdviseMaxNumberOfParticipations = calculateAdviseMaxNumberOfParticipations(values);\r\n                return (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                                </Col>\r\n\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\r\n                                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>Je postcode</Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrPostalCode\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_postal_code\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>Deelnemende postcodes</Form.Label>\r\n                                    <TextBlock>{project.postalcodeLink}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Je (geschatte) jaarlijks verbruik (in kWh)\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrYearlyPowerKwhConsumption\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_yearly_power_kwh_consumption\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Heb je al zonnepanelen op je eigen dak of doe je mee in een ander project?\r\n                                    </Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrHasSolarPanels\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => setFieldValue('pcrHasSolarPanels', 'Y')}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrHasSolarPanels', 'N');\r\n                                                                setFieldValue('pcrNumberOfSolarPanels', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrHasSolarPanels === 'Y' ? (\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <Form.Label className={'field-label'}>\r\n                                            Hoeveel zonnepanelen wekken al stroom voor je op\r\n                                        </Form.Label>\r\n                                        <Field\r\n                                            name=\"pcrNumberOfSolarPanels\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"pcr_number_of_solar_panels\"\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Wij schatten in dat je panelen jaarlijks opwekken\r\n                                    </Form.Label>\r\n                                    <TextBlock id=\"pcr_input_estimated_generated_number_of_kwh\">\r\n                                        {pcrEstimatedGeneratedNumberOfKwh} kWh\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>Klopt het geschatte opbrengst?</Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrEstimatedRevenueOk\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrEstimatedRevenueOk', 'Y');\r\n                                                                setFieldValue('pcrInputGeneratedNumberOfKwh', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => setFieldValue('pcrEstimatedRevenueOk', 'N')}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrEstimatedRevenueOk === 'N' ? (\r\n                                <>\r\n                                    <Row>\r\n                                        <Col xs={12} md={6}>\r\n                                            <Form.Label className={'field-label'}>\r\n                                                Wat is de jaarlijkse opbrengst van jouw panelen (in kWh)\r\n                                            </Form.Label>\r\n                                            <Field\r\n                                                name=\"pcrInputGeneratedNumberOfKwh\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"pcr_input_generated_number_of_kwh\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <p>\r\n                                        We adviseren tot {PCR_POWER_KWH_CONSUMPTION_PERCENTAGE * 100}% van je jaarlijks\r\n                                        verbruik minus de jaarlijkse opbrengsten (in jouw geval {powerKwhConsumption}{' '}\r\n                                        kWh) te dekken met participaties. In het veld hier direct onder is voor je\r\n                                        uitgerekend hoeveel participaties dat zijn. Het is een advies, je mag er ook\r\n                                        meer kopen. Dit kan echter slecht zijn voor je rendement.\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Advies maximaal aantal participaties\r\n                                    </Form.Label>\r\n                                    <TextBlock>{pcrAdviseMaxNumberOfParticipations}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Gewenst aantal participaties\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"participationsOptioned\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"participations_optioned\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>\r\n                                        {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                    </FormLabel>\r\n                                    <TextBlock>\r\n                                        {MoneyPresenter(calculateAmount(values.participationsOptioned))}\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n                            {project.showQuestionAboutMembership ? (\r\n                                <>\r\n                                    <hr />\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <p>\r\n                                                {contactProjectData.belongsToMembershipGroup\r\n                                                    ? contactProjectData.textIsMemberMerged\r\n                                                    : contactProjectData.textIsNoMemberMerged}\r\n                                            </p>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {!contactProjectData.belongsToMembershipGroup ? (\r\n                                        <Row>\r\n                                            <Col xs={12} md={10}>\r\n                                                <Field\r\n                                                    name=\"choiceMembership\"\r\n                                                    render={({ field }) => (\r\n                                                        <>\r\n                                                            {get(errors, field.name, '') &&\r\n                                                                get(touched, field.name, '') && (\r\n                                                                    <small className=\"text-danger\">\r\n                                                                        {get(errors, field.name, '')}\r\n                                                                    </small>\r\n                                                                )}\r\n                                                            <div className=\"form-check\">\r\n                                                                <label className=\"radio-inline\">\r\n                                                                    <input\r\n                                                                        type=\"radio\"\r\n                                                                        {...field}\r\n                                                                        id=\"choice_membership_yes\"\r\n                                                                        checked={field.value === 1}\r\n                                                                        value={1}\r\n                                                                        onChange={() =>\r\n                                                                            setFieldValue('choiceMembership', 1)\r\n                                                                        }\r\n                                                                    />\r\n                                                                    &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                                </label>\r\n                                                                <label className=\"radio-inline\">\r\n                                                                    <input\r\n                                                                        type=\"radio\"\r\n                                                                        {...field}\r\n                                                                        id=\"choice_membership_no\"\r\n                                                                        checked={field.value === 2}\r\n                                                                        value={2}\r\n                                                                        onChange={() => {\r\n                                                                            setFieldValue('choiceMembership', 2);\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                                </label>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    ) : null}\r\n                                </>\r\n                            ) : null}\r\n\r\n                            {project.transactionCostsCodeRef !== 'none' ? (\r\n                                <>\r\n                                    <hr />\r\n                                    <Row>\r\n                                        <Col xs={12} md={6}>\r\n                                            <FormLabel className={'field-label'}>\r\n                                                {project.textTransactionCosts}\r\n                                            </FormLabel>\r\n                                            <TextBlock>\r\n                                                {MoneyPresenter(\r\n                                                    calculateTransactionCostsAmount(\r\n                                                        values.participationsOptioned,\r\n                                                        values.choiceMembership\r\n                                                    )\r\n                                                )}\r\n                                            </TextBlock>\r\n                                        </Col>\r\n                                        <Col xs={12} md={6}>\r\n                                            <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                            <TextBlock>\r\n                                                {MoneyPresenter(\r\n                                                    calculateTotalAmount(\r\n                                                        values.participationsOptioned,\r\n                                                        values.choiceMembership\r\n                                                    )\r\n                                                )}\r\n                                            </TextBlock>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            Ga naar gegevens\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOnePcr;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DefaultContactPersonalEdit from '../../contact-details/default-form-personal/Edit';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from '../../../helpers/ValidationSchemaPersonal';\r\nimport ValidationSchemaOrganisation from '../../../helpers/ValidationSchemaOrganisation';\r\nimport DefaultContactOrganisationEdit from '../../contact-details/default-form-organisation/Edit';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepTwo({ portalSettings, previous, next, project, initialContact, handleSubmitContactValues }) {\r\n    initialContact.isParticipant = true;\r\n    const typeContact = initialContact.typeId ? initialContact.typeId : null;\r\n\r\n    let validationSchema = null;\r\n    let validationSchemaBasic = null;\r\n    let validationSchemaAdditional = null;\r\n    let validationSchemaPcrAdditional = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            validationSchemaBasic = ValidationSchemaPersonal.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaPersonal.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n            }\r\n            break;\r\n        case 'organisation':\r\n            validationSchemaBasic = ValidationSchemaOrganisation.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaOrganisation.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n            }\r\n            break;\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactValues(values, actions, next);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    return (\r\n                        <Form>\r\n                            {/* If contact is person */}\r\n                            {initialContact.typeId === 'person' ? (\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            {/* If contact is organisation */}\r\n                            {initialContact.typeId === 'organisation' ? (\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan en doorgaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepTwo;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\nimport ProjectAPI from '../../../api/project/ProjectAPI';\r\nimport fileDownload from 'js-file-download';\r\nimport { FaFileDownload } from 'react-icons/all';\r\n\r\nfunction StepThree({ project, contactProjectData, previous, next, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        didAcceptAgreement: Yup.bool().test(\r\n            'didAcceptAgreement',\r\n            'Je dient akkoord te gaan met de voorwaarden!',\r\n            value => value === true\r\n        ),\r\n        didUnderstandInfo: Yup.bool().test(\r\n            'didUnderstandInfo',\r\n            'Je dient te bevestigen, dat de project informatie gelezen en begrepen is!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    function downloadFile(e, id, filename) {\r\n        e.preventDefault();\r\n\r\n        ProjectAPI.documentDownload(project.id, id)\r\n            .then(payload => {\r\n                fileDownload(payload.data, filename);\r\n            })\r\n            .catch(() => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                onSubmit={function(values, actions) {\r\n                    handleSubmitRegisterValues(values);\r\n                    next();\r\n                }}\r\n                initialValues={initialRegisterValues}\r\n            >\r\n                {({ handleSubmit, touched, errors }) => (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <p>\r\n                                        <span\r\n                                            dangerouslySetInnerHTML={{\r\n                                                __html: contactProjectData.textAgreeTermsMerged.replace(\r\n                                                    /\\n/g,\r\n                                                    '<br />'\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didAcceptAgreement\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_accept_agreement\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_accept_agreement\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                    dangerouslySetInnerHTML={{\r\n                                                        __html: contactProjectData.textLinkAgreeTermsMerged.replace(\r\n                                                            /\\n/g,\r\n                                                            '<br />'\r\n                                                        ),\r\n                                                    }}\r\n                                                />\r\n                                                {project.documentAgreeTerms ? (\r\n                                                    <>\r\n                                                        {' '}\r\n                                                        <a\r\n                                                            href=\"#\"\r\n                                                            onClick={e =>\r\n                                                                downloadFile(\r\n                                                                    e,\r\n                                                                    project.documentAgreeTerms.id,\r\n                                                                    project.documentAgreeTerms.filename\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            <FaFileDownload /> downloaden\r\n                                                        </a>\r\n                                                    </>\r\n                                                ) : null}\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didUnderstandInfo\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_understand_info\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_understand_info\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                    dangerouslySetInnerHTML={{\r\n                                                        __html: contactProjectData.textLinkUnderstandInfoMerged.replace(\r\n                                                            /\\n/g,\r\n                                                            '<br />'\r\n                                                        ),\r\n                                                    }}\r\n                                                />\r\n                                                {project.documentUnderstandInfo ? (\r\n                                                    <>\r\n                                                        {' '}\r\n                                                        <a\r\n                                                            href=\"#\"\r\n                                                            onClick={e =>\r\n                                                                downloadFile(\r\n                                                                    e,\r\n                                                                    project.documentUnderstandInfo.id,\r\n                                                                    project.documentUnderstandInfo.filename\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            <FaFileDownload /> downloaden\r\n                                                        </a>\r\n                                                    </>\r\n                                                ) : null}{' '}\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            {project.usesMollie ? (\r\n                                                <>Ga naar bevestigen en betalen</>\r\n                                            ) : (\r\n                                                <>Ga naar bevestigen</>\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepThree;\r\n","import React from 'react';\r\nimport Frame from 'react-frame-component';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ViewHtmlAsText = ({ id, value }) => {\r\n    const createMarkup = () => {\r\n        return { __html: value };\r\n    };\r\n\r\n    return (\r\n        <Frame>\r\n            <div id={id} dangerouslySetInnerHTML={createMarkup()} />\r\n        </Frame>\r\n    );\r\n};\r\n\r\nViewHtmlAsText.defaultProps = {\r\n    value: '',\r\n};\r\n\r\nViewHtmlAsText.propTypes = {\r\n    id: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default ViewHtmlAsText;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    createParticipantProject: registerValues => {\r\n        const requestUrl = `/project/participant/create`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n\r\n    show: id => {\r\n        const requestUrl = `/project/participant/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    participantDocumentDownload: function(participantId, id) {\r\n        const requestUrl = `/project/participant/${participantId}/document/${id}/download`;\r\n\r\n        return axiosInstance.get(requestUrl, { responseType: 'blob' });\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport ViewHtmlAsText from '../../../components/general/ViewHtmlAsText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction StepFour({ project, contactProjectData, previous, next, registerValues, setSucces }) {\r\n    const [contactDocument, setContactDocument] = useState('');\r\n    const [isLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        (function callFetchContact() {\r\n            setLoading(true);\r\n            ContactAPI.previewDocument(registerValues)\r\n                .then(payload => {\r\n                    setContactDocument(payload.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [registerValues]);\r\n\r\n    function handleSubmitRegisterValues(actions, next) {\r\n        ParticipantProjectAPI.createParticipantProject(registerValues)\r\n            .then(payload => {\r\n                actions.setSubmitting(false);\r\n\r\n                /**\r\n                 * Als Mollie is ingeschakeld voor het project wordt er een betaallink gereturned.\r\n                 * In dat geval huidige scherm verlaten en door naar mollie.\r\n                 */\r\n                if (payload.data.econobisPaymentLink) {\r\n                    window.location.href = payload.data.econobisPaymentLink;\r\n                    return;\r\n                }\r\n\r\n                setSucces(true);\r\n                next();\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        didAgreeRegistration: Yup.bool().test(\r\n            'didAgreeRegistration',\r\n            'Je dient akkoord te gaan met het inschrijfformulier!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    let contactDocumentOk = false;\r\n    if (!isEmpty('' + contactDocument)) {\r\n        contactDocumentOk = true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : !contactDocumentOk ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>Er ging iets mis bij het maken van het bevestingsformulier voorbeeld.</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                    Terug\r\n                                </Button>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : (\r\n                <Formik\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={function(values, actions) {\r\n                        handleSubmitRegisterValues(actions, next);\r\n                    }}\r\n                    initialValues={{ didAgreeRegistration: false }}\r\n                >\r\n                    {({ handleSubmit, touched, errors, isSubmitting, status }) => (\r\n                        <>\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <FormLabel className={'field-label'}>Controleer de inschrijving</FormLabel>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ViewHtmlAsText value={contactDocument} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={3}>\r\n                                        <FormLabel className={'field-label-text'}>\r\n                                            {project.transactionCostsCodeRef === 'none'\r\n                                                ? 'Te betalen bedrag'\r\n                                                : 'Bedrag'}\r\n                                        </FormLabel>\r\n                                    </Col>\r\n                                    <Col xs={12} md={3}>\r\n                                        <TextBlock className={'float-right'}>\r\n                                            {MoneyPresenter(registerValues.amount)}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                                {project.transactionCostsCodeRef !== 'none' ? (\r\n                                    <>\r\n                                        <Row>\r\n                                            <Col xs={12} md={3}>\r\n                                                <FormLabel className={'field-label-text'}>\r\n                                                    {project.textTransactionCosts}\r\n                                                </FormLabel>\r\n                                            </Col>\r\n                                            <Col xs={12} md={3}>\r\n                                                <TextBlock className={'float-right'}>\r\n                                                    {MoneyPresenter(registerValues.transactionCostsAmount)}\r\n                                                </TextBlock>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col xs={12} md={3}>\r\n                                                <FormLabel className={'field-label-text'}>Totaal te betalen</FormLabel>\r\n                                            </Col>\r\n                                            <Col xs={12} md={3}>\r\n                                                <TextBlock className={'float-right'}>\r\n                                                    {MoneyPresenter(registerValues.totalAmount)}\r\n                                                </TextBlock>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </>\r\n                                ) : null}\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p\r\n                                            dangerouslySetInnerHTML={{\r\n                                                __html: contactProjectData.textAcceptAgreementMerged.replace(\r\n                                                    /\\n/g,\r\n                                                    '<br />'\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <Field\r\n                                            name=\"didAgreeRegistration\"\r\n                                            render={({ field }) => (\r\n                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                    <input\r\n                                                        type=\"checkbox\"\r\n                                                        {...field}\r\n                                                        id=\"did_agree_registration\"\r\n                                                        checked={field.value}\r\n                                                        className=\"w-checkbox-input checkbox\"\r\n                                                    />\r\n                                                    <span\r\n                                                        htmlFor=\"did_agree_registration\"\r\n                                                        className=\"checkbox-label w-form-label\"\r\n                                                    >\r\n                                                        {contactProjectData.textAcceptAgreementQuestionMerged}\r\n                                                    </span>\r\n                                                    {touched[field.name] && errors[field.name] ? (\r\n                                                        <div className={'error-message text-danger'}>\r\n                                                            {errors[field.name]}\r\n                                                        </div>\r\n                                                    ) : null}\r\n                                                </label>\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                                Terug\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met verwerken\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        {project.usesMollie ? (\r\n                                                            <>Betaal en bevestig de inschrijving</>\r\n                                                        ) : (\r\n                                                            <>Bevestig inschrijving</>\r\n                                                        )}\r\n                                                    </>\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                    volgende stap!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        </>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StepFour;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport { Form } from 'formik';\r\n\r\nfunction StepFive({ contactProjectData }) {\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    {contactProjectData.textRegistrationFinishedMerged.split('\\n').map((item, key) => {\r\n                        return (\r\n                            <span key={key}>\r\n                                {item}\r\n                                <br />\r\n                            </span>\r\n                        );\r\n                    })}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    <ButtonGroup className=\"float-right\">\r\n                        <Link to={`/inschrijvingen-projecten`}>\r\n                            <Button className={'w-button'} size=\"sm\">\r\n                                Naar mijn huidige deelnames\r\n                            </Button>\r\n                        </Link>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepFive;\r\n","import React from 'react';\r\nimport StepOneLoan from './StepOneLoan';\r\nimport StepOneObligation from './StepOneObligation';\r\nimport StepOneCapital from './StepOneCapital';\r\nimport StepOnePcr from './StepOnePcr';\r\nimport StepTwo from './StepTwo';\r\nimport StepThree from './StepThree';\r\nimport StepFour from './StepFour';\r\nimport StepFive from './StepFive';\r\nimport { isEmpty } from 'lodash';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction Steps({\r\n    portalSettings,\r\n    currentStep,\r\n    previous,\r\n    next,\r\n    project,\r\n    contactProjectData,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    if (isEmpty(project)) {\r\n        return (\r\n            <Container className={'content-section'}>\r\n                <Row>\r\n                    <Col>\r\n                        <p>Fout bij ophalen project. Inschrijving niet (meer) mogelijk op dit moment.</p>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    switch (currentStep) {\r\n        case 1:\r\n            switch (project.projectType.codeRef) {\r\n                case 'loan':\r\n                    return (\r\n                        <StepOneLoan\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'obligation':\r\n                    return (\r\n                        <StepOneObligation\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'capital':\r\n                    return (\r\n                        <StepOneCapital\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'postalcode_link_capital':\r\n                    return (\r\n                        <StepOnePcr\r\n                            portalSettings={portalSettings}\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialContact={initialContact}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                default:\r\n                    return null;\r\n            }\r\n\r\n        case 2:\r\n            return (\r\n                <StepTwo\r\n                    portalSettings={portalSettings}\r\n                    previous={previous}\r\n                    next={next}\r\n                    project={project}\r\n                    initialContact={initialContact}\r\n                    handleSubmitContactValues={handleSubmitContactValues}\r\n                />\r\n            );\r\n        case 3:\r\n            return (\r\n                <StepThree\r\n                    project={project}\r\n                    contactProjectData={contactProjectData}\r\n                    previous={previous}\r\n                    next={next}\r\n                    initialRegisterValues={initialRegisterValues}\r\n                    handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                />\r\n            );\r\n        case 4:\r\n            return (\r\n                <StepFour\r\n                    project={project}\r\n                    contactProjectData={contactProjectData}\r\n                    previous={previous}\r\n                    next={next}\r\n                    registerValues={initialRegisterValues}\r\n                    setSucces={setSucces}\r\n                />\r\n            );\r\n        case 5:\r\n            return <StepFive contactProjectData={contactProjectData} />;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default Steps;\r\n","import React from 'react';\r\nimport Steps from './steps';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction MasterForm({\r\n    portalSettings,\r\n    project,\r\n    contactProjectData,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    const [currentStep, setStep] = React.useState(1);\r\n\r\n    function previous() {\r\n        setStep(currentStep <= 2 ? 1 : currentStep - 1);\r\n    }\r\n\r\n    function next() {\r\n        setStep(currentStep >= 4 ? 5 : currentStep + 1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {currentStep <= 4 ? (\r\n                <Row className={'mb-4'}>\r\n                    <Col>\r\n                        <div className={'arrow-steps clearfix'}>\r\n                            <div className={`step ${currentStep === 1 ? 'current' : ''}`}>1. Inschrijven</div>\r\n                            <div className={`step ${currentStep === 2 ? 'current' : ''}`}>2. Gegevens</div>\r\n                            <div className={`step ${currentStep === 3 ? 'current' : ''}`}>3. Voorwaarden</div>\r\n                            <div className={`step ${currentStep === 4 ? 'current' : ''}`}>\r\n                                {\r\n                                    project.usesMollie ? (\r\n                                        <>4. Bevestigen en betalen</>\r\n                                    ) : (\r\n                                        <>4. Bevestigen</>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            ) : null}\r\n            <Steps\r\n                portalSettings={portalSettings}\r\n                currentStep={currentStep}\r\n                previous={previous}\r\n                next={next}\r\n                project={project}\r\n                contactProjectData={contactProjectData}\r\n                initialRegisterValues={initialRegisterValues}\r\n                handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                initialContact={initialContact}\r\n                handleSubmitContactValues={handleSubmitContactValues}\r\n                setSucces={setSucces}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MasterForm;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../api/project/ProjectAPI';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport MasterForm from './MasterForm';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport axios from 'axios';\r\nimport { ThemeSettingsContext } from '../../context/ThemeSettingsContext';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction RegisterProject({ match, currentSelectedContact }) {\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    const initialRegisterValues = {\r\n        contactId: null,\r\n        projectId: null,\r\n        participationsOptioned: 0,\r\n        powerKwhConsumption: 0,\r\n        amountOptioned: 0,\r\n        didAcceptAgreement: false,\r\n        didUnderstandInfo: false,\r\n        choiceMembership: 0,\r\n    };\r\n\r\n    const initialPcrValues = {\r\n        pcrYearlyPowerKwhConsumption: 0,\r\n        pcrPostalCode: '',\r\n        pcrHasSolarPanels: 'N',\r\n        pcrInputGeneratedNumberOfKwh: 0,\r\n        pcrEstimatedRevenueOk: 'Y',\r\n    };\r\n\r\n    const [registerValues, setRegisterValues] = useState(initialRegisterValues);\r\n\r\n    const [project, setProject] = useState({});\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isSucces, setSucces] = useState(false);\r\n    const [contactProjectData, setContactProjectData] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function fetchContactAndProject() {\r\n                setLoading(true);\r\n\r\n                axios\r\n                    .all([\r\n                        ProjectAPI.fetchProject(match.params.id),\r\n                        ContactAPI.fetchContact(currentSelectedContact.id),\r\n                        ContactAPI.fetchContactProjectData(currentSelectedContact.id, match.params.id),\r\n                    ])\r\n                    .then(\r\n                        axios.spread((payloadProject, payloadContact, payloadContactProjectData) => {\r\n                            const contact = payloadContact.data.data;\r\n                            const project = payloadProject.data.data;\r\n                            setProject(project);\r\n                            setCurrentThemeSettings(project.administration.portalSettingsLayoutAssigned);\r\n                            const contactData = rebaseContact(contact);\r\n                            setContact(contactData);\r\n\r\n                            setContactProjectData(payloadContactProjectData.data);\r\n\r\n                            if (\r\n                                project &&\r\n                                project.projectType &&\r\n                                project.projectType.codeRef === 'postalcode_link_capital'\r\n                            ) {\r\n                                let pcrPostalCode = '';\r\n                                if (contactData.typeId === 'organisation') {\r\n                                    pcrPostalCode = contactData.visitAddress ? contactData.visitAddress.postalCode : '';\r\n                                } else {\r\n                                    pcrPostalCode = contactData.primaryAddress\r\n                                        ? contactData.primaryAddress.postalCode\r\n                                        : '';\r\n                                }\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\r\n                                    ...initialPcrValues,\r\n                                    pcrPostalCode,\r\n                                });\r\n                            } else {\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\r\n                                });\r\n                            }\r\n\r\n                            if (\r\n                                payloadContactProjectData.data.projectRegisterIndicators.allowChangeParticipation &&\r\n                                payloadContactProjectData.data.projectRegisterIndicators.allowPayMollie\r\n                            ) {\r\n                                /**\r\n                                 * Er is wel ingeschreven maar nog niet betaald, dan mag het formulier\r\n                                 * wel geopend worden en stellen we de eerder ingevoerde gegevens in. projectRegisterIndicators\r\n                                 */\r\n                                setRegisterValues(current => {\r\n                                    return {\r\n                                        ...current,\r\n                                        participationsOptioned:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators\r\n                                                .participationsOptioned,\r\n                                        amountOptioned:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators.amountOptioned,\r\n                                        pcrYearlyPowerKwhConsumption:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators\r\n                                                .powerKwhConsumption,\r\n                                        didAcceptAgreement: true,\r\n                                        didUnderstandInfo: true,\r\n                                    };\r\n                                });\r\n                            }\r\n\r\n                            setLoading(false);\r\n                        })\r\n                    )\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n\r\n        (function callFetchPortalSettings() {\r\n            setLoading(true);\r\n            const keys =\r\n                '?keys[]=portalName' +\r\n                '&keys[]=portalWebsite' +\r\n                '&keys[]=portalUrl' +\r\n                '&keys[]=responsibleUserId' +\r\n                '&keys[]=checkContactTaskResponsibleUserId' +\r\n                '&keys[]=linkPrivacyPolicy' +\r\n                '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n                '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n            PortalSettingsAPI.fetchPortalSettings(keys)\r\n                .then(payload => {\r\n                    setPortalSettings({ ...payload.data });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ isLoading: false, hasError: true });\r\n                });\r\n        })();\r\n    }, [match, currentSelectedContact]);\r\n\r\n    function handleSubmitRegisterValues(values) {\r\n        setRegisterValues({ ...registerValues, ...values });\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, nextStep) {\r\n        const updatedContact = { ...contact, ...values, projectId: project.id };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                ContactAPI.fetchContact(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        const contactData = rebaseContact(payload.data.data);\r\n\r\n                        setContact(contactData);\r\n                        nextStep();\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : !contactProjectData.projectRegisterIndicators.hasParticipation &&\r\n              !contactProjectData.projectRegisterIndicators.allowRegisterToProject ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                Inschrijving voor project <strong>{project.name}</strong>\r\n                            </h1>\r\n                            <Row className={'mb-4'}>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            {contactProjectData.projectRegisterIndicators.textNotAllowedRegisterToProject\r\n                                                .split('<br />')\r\n                                                .map((item, key) => {\r\n                                                    return (\r\n                                                        <span key={key}>\r\n                                                            {item}\r\n                                                            <br />\r\n                                                        </span>\r\n                                                    );\r\n                                                })}\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : contactProjectData.projectRegisterIndicators.hasParticipation &&\r\n              !contactProjectData.projectRegisterIndicators.allowChangeParticipation ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                <strong>{contact.fullNameFnf}</strong> is al ingeschreven voor project{' '}\r\n                                <strong>{project.name}</strong>\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : (\r\n                <Row>\r\n                    <Col>\r\n                        {isSucces ? (\r\n                            <h1 className=\"content-heading\">\r\n                                Ingeschreven voor project <strong>{project.name}</strong>\r\n                            </h1>\r\n                        ) : (\r\n                            <>\r\n                                <Row>\r\n                                    <ButtonGroup aria-label=\"register\" className=\"w-button-group-left\">\r\n                                        <Link to={`/inschrijven-projecten`}>\r\n                                            <Button className={'w-button'} size=\"sm\">\r\n                                                Inschrijven projecten\r\n                                            </Button>\r\n                                        </Link>\r\n                                    </ButtonGroup>\r\n                                </Row>\r\n                                <h1 className=\"content-heading\">\r\n                                    Schrijf <strong>{contact.fullNameFnf}</strong> in voor project{' '}\r\n                                    <strong>{project.name}</strong>\r\n                                </h1>\r\n                            </>\r\n                        )}\r\n                        <MasterForm\r\n                            portalSettings={portalSettings}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={registerValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            setSucces={setSucces}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegisterProjectWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegisterProject {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from './../../../../helpers/ValidationSchemaPersonal';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\nimport InputText from '../../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction PersonalAddressEdit({ initialContact, handleSubmitContactAddressValues }) {\r\n    const validationSchema = ValidationSchemaPersonal.validationSchemaPostalCodeAndNumber;\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactAddressValues(values, actions);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    return (\r\n                        <Form>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Op dit moment zijn je adresgegevens nog niet bij ons bekend.\r\n                                            <br />\r\n                                            Er zijn projecten waarop je kan inschrijven die afhankelijk van je adres\r\n                                            zijn.\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={12}>\r\n                                    <FormLabel className={'field-label'}>Postcode en huisnummer</FormLabel>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"primaryAddress.postalCode\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"postal_code\"\r\n                                                        placeholder={'Postcode'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"primaryAddress.number\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"street_number\"\r\n                                                        placeholder={'Nummer'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"primaryAddress.addition\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"addition\"\r\n                                                        placeholder={'Toevoeging'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"address-person\" className=\"float-right\">\r\n                                        <Link to={`/`}>\r\n                                            <Button variant={'outline-dark'} size=\"sm\">\r\n                                                Annuleren\r\n                                            </Button>\r\n                                        </Link>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonalAddressEdit;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaOrganisation from '../../../../helpers/ValidationSchemaOrganisation';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\nimport InputText from '../../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction OrganisationAddressEdit({ initialContact, handleSubmitContactAddressValues }) {\r\n    const validationSchema = ValidationSchemaOrganisation.validationSchemaPostalCodeAndNumber;\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactAddressValues(values, actions);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    return (\r\n                        <Form>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Op dit moment zijn je adresgegevens nog niet bij ons bekend.\r\n                                            <br />\r\n                                            Er zijn projecten waarop je kan inschrijven die afhankelijk van je adres\r\n                                            zijn.\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={12}>\r\n                                    <FormLabel className={'field-label'}>Postcode en huisnummer</FormLabel>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"visitAddress.postalCode\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"postal_code\"\r\n                                                        placeholder={'Postcode'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"visitAddress.number\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"street_number\"\r\n                                                        placeholder={'Nummer'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"visitAddress.addition\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"addition\"\r\n                                                        placeholder={'Toevoeging'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"address-organistation\" className=\"float-right\">\r\n                                        <Link to={`/`}>\r\n                                            <Button variant={'outline-dark'} size=\"sm\">\r\n                                                Annuleren\r\n                                            </Button>\r\n                                        </Link>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrganisationAddressEdit;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport { FaInfoCircle } from 'react-icons/fa';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport rebaseContact from '../../../helpers/RebaseContact';\r\nimport PersonalAddressEdit from './address-person/Edit';\r\nimport OrganisationAddressEdit from './address-organisation/Edit';\r\n\r\nfunction ProjectList(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [contactProjectsArray, setContactProjectsArray] = useState([]);\r\n    const [sceOrPcrProjectsAvailable, setSceOrPcrProjectsAvailable] = useState(false);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        (function callFetchProjects() {\r\n            setLoading(true);\r\n            // Call Api if current selected contact id is filled\r\n            if (props.currentSelectedContact.id) {\r\n                // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n                if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                    callFetchContact();\r\n                    callFetchContactProjects();\r\n                }\r\n            }\r\n        })();\r\n    }, [props.currentSelectedContact]);\r\n\r\n    useEffect(() => {\r\n        (function determineSceOrPcrProjectsAvailable() {\r\n            if (contactProjectsArray.length > 0) {\r\n                contactProjectsArray.find(function(project) {\r\n                    return project.isSceOrPcrProject && setSceOrPcrProjectsAvailable(true);\r\n                });\r\n            }\r\n        })();\r\n    }, [contactProjectsArray.length > 0]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function callFetchContactProjects() {\r\n        ContactAPI.fetchContactProjects(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContactProjectsArray(payload.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function handleSubmitContactAddressValues(values, actions) {\r\n        const updatedContact = { ...contact, ...values, projectId: null };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                actions.setSubmitting(false);\r\n                callFetchContact();\r\n                callFetchContactProjects();\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        Overzicht projecten waarop <strong>{props.currentSelectedContact.fullNameFnf}</strong> kan\r\n                        inschrijven.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            {sceOrPcrProjectsAvailable && contact.noAddressesFound && contact.typeId === 'person' ? (\r\n                <PersonalAddressEdit\r\n                    initialContact={contact}\r\n                    handleSubmitContactAddressValues={handleSubmitContactAddressValues}\r\n                />\r\n            ) : sceOrPcrProjectsAvailable && contact.noAddressesFound && contact.typeId === 'organisation' ? (\r\n                <OrganisationAddressEdit\r\n                    initialContact={contact}\r\n                    handleSubmitContactAddressValues={handleSubmitContactAddressValues}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <p>Klik op het project voor meer details.</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isLoading ? (\r\n                                <LoadingView />\r\n                            ) : contactProjectsArray.length === 0 ? (\r\n                                'Geen projecten beschikbaar om op in te schrijven.'\r\n                            ) : (\r\n                                <Table responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Organisatie</th>\r\n                                            <th>Project</th>\r\n                                            <th>Ingeschreven</th>\r\n                                            <th>Start inschrijving</th>\r\n                                            <th>Einde inschrijving</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {contactProjectsArray.map(project => (\r\n                                            <tr key={project.id}>\r\n                                                <td>{project.administrationName}</td>\r\n                                                <td>\r\n                                                    {project.allowChangeParticipation ? (\r\n                                                        <>\r\n                                                            {project.name} (\r\n                                                            <Link to={`/project/${project.id}`}>\r\n                                                                wijzig inschrijving\r\n                                                            </Link>\r\n                                                            )\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            {!project.hasParticipation &&\r\n                                                            project.allowRegisterToProject ? (\r\n                                                                <Link to={`/project/${project.id}`}>\r\n                                                                    {project.name}\r\n                                                                </Link>\r\n                                                            ) : (\r\n                                                                <span className={'text-muted'}>{project.name}</span>\r\n                                                            )}\r\n                                                        </>\r\n                                                    )}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {project.hasParticipation ? (\r\n                                                        <>\r\n                                                            {project.allowPayMollie ? (\r\n                                                                <div className=\"text-center\">\r\n                                                                    Nog niet betaald,\r\n                                                                    <br />\r\n                                                                    <a href={project.econobisPaymentLink}>betaal nu</a>\r\n                                                                </div>\r\n                                                            ) : (\r\n                                                                <div className=\"text-success text-center\">✔</div>\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <div className=\"text-center\">\r\n                                                            {!project.allowRegisterToProject ? (\r\n                                                                <>\r\n                                                                    <FaInfoCircle\r\n                                                                        color={'blue'}\r\n                                                                        size={'15px'}\r\n                                                                        data-tip={`${project.textNotAllowedRegisterToProject}`}\r\n                                                                        data-for={`project-${project.id}`}\r\n                                                                    />\r\n                                                                    <ReactTooltip\r\n                                                                        id={`project-${project.id}`}\r\n                                                                        effect=\"float\"\r\n                                                                        place=\"bottom\"\r\n                                                                        multiline={true}\r\n                                                                        aria-haspopup=\"true\"\r\n                                                                    />\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {project.dateStartRegistrations\r\n                                                        ? moment(project.dateStartRegistrations).format('LL')\r\n                                                        : ''}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {project.dateEndRegistrations\r\n                                                        ? moment(project.dateEndRegistrations).format('LL')\r\n                                                        : ''}\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function ProjectListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => <ProjectList {...props} currentSelectedContact={currentSelectedContact} />}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction LoanDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                    <FormLabel>Lening nodig</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.amountOfLoanNeeded)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.minAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.maxAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoanDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction ObligationDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige hoofdsom per obligatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal obligaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ObligationDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction CapitalDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CapitalDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction PcrDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PcrDetails;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../../api/project/ProjectAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport LoanDetails from './LoanDetails';\r\nimport ObligationDetails from './ObligationDetails';\r\nimport CapitalDetails from './CapitalDetails';\r\nimport PcrDetails from './PcrDetails';\r\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport { isEmpty } from 'lodash';\r\nimport fileDownload from 'js-file-download';\r\nimport { FaFileDownload } from 'react-icons/all';\r\n\r\nfunction ProjectDetails({ match }) {\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n    const [project, setProject] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function callFetchProject() {\r\n                setLoading(true);\r\n                ProjectAPI.fetchProject(match.params.id)\r\n                    .then(payload => {\r\n                        setProject(payload.data.data);\r\n                        setCurrentThemeSettings(payload.data.data.administration.portalSettingsLayoutAssigned);\r\n                        setLoading(false);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [match, currentSelectedContact]);\r\n\r\n    function downloadFile(e, id, filename) {\r\n        e.preventDefault();\r\n\r\n        ProjectAPI.documentDownload(project.id, id)\r\n            .then(payload => {\r\n                fileDownload(payload.data, filename);\r\n            })\r\n            .catch(() => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    function renderDetails() {\r\n        switch (project.projectType.codeRef) {\r\n            case 'loan':\r\n                return <LoanDetails project={project} />;\r\n            case 'obligation':\r\n                return <ObligationDetails project={project} />;\r\n            case 'capital':\r\n                return <CapitalDetails project={project} />;\r\n            case 'postalcode_link_capital':\r\n                return <PcrDetails project={project} />;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    if (isEmpty(project)) {\r\n        return (\r\n            <Container className={'content-section'}>\r\n                {isLoading ? (\r\n                    <LoadingView />\r\n                ) : (\r\n                    <Row>\r\n                        <Col>\r\n                            <p>Geen projectdetails bekend</p>\r\n                        </Col>\r\n                    </Row>\r\n                )}\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"project-details\" className=\"w-button-group-left\">\r\n                            <Link to={`/inschrijven-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Inschrijven projecten\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">Inschrijven project</h1>\r\n                            <div className=\"content-subheading\">Organisatie {project.administration.name}</div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {renderDetails()}\r\n\r\n                    <Row className={'mt-5'}>\r\n                        <Col>\r\n                            <p>\r\n                                {project.documentProjectInfo ? (\r\n                                    <>\r\n                                        {'Meer informatie over dit project kan je hier '}\r\n                                        <a\r\n                                            href=\"#\"\r\n                                            onClick={e =>\r\n                                                downloadFile(\r\n                                                    e,\r\n                                                    project.documentProjectInfo.id,\r\n                                                    project.documentProjectInfo.filename\r\n                                                )\r\n                                            }\r\n                                        >\r\n                                            <FaFileDownload /> downloaden\r\n                                        </a>\r\n                                    </>\r\n                                ) : project.linkProjectInfo != null ? (\r\n                                    <>\r\n                                        {'Meer informatie over dit project vind je '}\r\n                                        <a href={`${project.linkProjectInfo}`} target=\"_blank\">\r\n                                            hier\r\n                                        </a>\r\n                                    </>\r\n                                ) : null}\r\n                            </p>\r\n                            <p>Wil je inschrijven op dit project. Klik dan op \"Ga naar inschrijven\".</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijven/${project.id}`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Ga naar inschrijven\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ProjectDetails;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction RegistrationList(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContact(payload.data.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        De projecten waarin <strong>{contact.fullNameFnf}</strong> deelneemt.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {isLoading ? (\r\n                        <LoadingView />\r\n                    ) : contact.participations.length === 0 ? (\r\n                        'Geen huidige deelnames aanwezig.'\r\n                    ) : (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Organisatie</th>\r\n                                    <th>Project</th>\r\n                                    <th>Deelname</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {contact.participations.map(participation => {\r\n                                    if (\r\n                                        !participation.project.dateEnd ||\r\n                                        moment(participation.project.dateEnd).format('YYYY-MM-DD') >=\r\n                                            moment().format('YYYY-MM-DD')\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={participation.id}>\r\n                                                <td>{participation.project.administration.name}</td>\r\n                                                <td>\r\n                                                    <Link to={`/project-deelname/${participation.id}`}>\r\n                                                        {participation.project.name}\r\n                                                    </Link>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {participation.project.projectType.codeRef == 'loan' ? (\r\n                                                        <>\r\n                                                            {participation.amountInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountInteressed)}{' '}\r\n                                                                    <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountOptioned)}{' '}\r\n                                                                    <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening {MoneyPresenter(participation.amountGranted)}{' '}\r\n                                                                    <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountDefinitive)}{' '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'obligation' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' obligaties '} <em> (Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' obligaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' obligaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' obligaties '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef ==\r\n                                                    'postalcode_link_capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegistrationListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegistrationList {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormPersonal = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            personTitleId: '',\r\n            personFirstName: '',\r\n            personLastName: '',\r\n        }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor jezelf</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonGroup aria-label=\"create-account\" className=\"w-button-group\">\r\n                            <ButtonText\r\n                                buttonText={'Account aanmaken'}\r\n                                buttonClassName={'authorization-button'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                                loadingSpinnerColor={'#034b8c'}\r\n                                disabled={showSuccessMessage}\r\n                            />\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormPersonal;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    organisationName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormOrganisation = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '', organisationName: '', personTitleId: '', personFirstName: '', personLastName: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor je organisatie</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"organisationName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Naam Organisatie'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens contactpersoon</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonText\r\n                            buttonText={'Account aanmaken'}\r\n                            buttonClassName={'authorization-button'}\r\n                            size=\"sm\"\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                            disabled={showSuccessMessage}\r\n                        />\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormOrganisation;\r\n","import React, { useState } from 'react';\r\nimport { GoogleReCaptchaProvider, useGoogleReCaptcha } from 'react-google-recaptcha-v3';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport NewAccountFormPersonal from './NewAccountFormPersonal';\r\nimport NewAccountFormOrganisation from './NewAccountFormOrganisation';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, ButtonToolbar } from 'react-bootstrap';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n\r\nconst NewAccount = props => {\r\n    const { executeRecaptcha } = useGoogleReCaptcha();\r\n    const [contactType, setContactType] = useState('person');\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    async function handleSubmit(values, actions) {\r\n        if (!executeRecaptcha) {\r\n            return;\r\n        }\r\n        const reCaptchaToken = await executeRecaptcha('signup_page');\r\n\r\n        AuthAPI.newAccount({ ...values, contactType: contactType, reCaptchaToken })\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If new account fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                if (error.response && error.response.status === 404) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres.'\r\n                    );\r\n                } else if (error.response && error.response.status === 405) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een contact met het e-mailadres, voornaam en achternaam dat je hebt ingevuld. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres, voornaam of achternaam.'\r\n                    );\r\n                } else {\r\n                    setErrorMessage('Fout bij aanmaken nieuw account!');\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect(from) {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer && !showSuccessMessage ? (\r\n                redirect('/dashboard')\r\n            ) : (\r\n                <div className=\"authorization-container\">\r\n                    <Container fluid className=\"authorization-text\">\r\n                        <Row className=\"justify-content-center align-content-start align-content-lg-center full-height p-2\">\r\n                            <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"4\" xl=\"4\">\r\n                                <img\r\n                                    src={`images/logo.png?${imageHash}`}\r\n                                    alt=\"\"\r\n                                    className=\"image logo-container-small\"\r\n                                />\r\n\r\n                                {showSuccessMessage ? (\r\n                                    redirect('nieuw-account-succes')\r\n                                ) : (\r\n                                    <>\r\n                                        <Row className=\"justify-content-center\">\r\n                                            <h3 className={'authorization-text'}>Nieuw account</h3>\r\n                                        </Row>\r\n                                        <Row className=\"justify-content-center\">\r\n                                            <p className={'authorization-text'}>\r\n                                                Maak binnen 2 minuten een account aan.\r\n                                            </p>\r\n                                        </Row>\r\n                                        <br />\r\n                                        <Row className=\"justify-content-center\">\r\n                                            <ButtonToolbar toggle>\r\n                                                <Col>\r\n                                                    <Button\r\n                                                        className={'authorization-button'}\r\n                                                        variant={\r\n                                                            contactType === 'person'\r\n                                                                ? 'primary fixed-height'\r\n                                                                : 'light fixed-height'\r\n                                                        }\r\n                                                        block\r\n                                                        onClick={() => setContactType('person')}\r\n                                                    >\r\n                                                        Voor jezelf\r\n                                                    </Button>\r\n                                                </Col>\r\n                                                <Col>\r\n                                                    <Button\r\n                                                        className={'authorization-button'}\r\n                                                        variant={contactType === 'organisation' ? 'primary' : 'light'}\r\n                                                        block\r\n                                                        onClick={() => setContactType('organisation')}\r\n                                                    >\r\n                                                        Voor je organisatie\r\n                                                    </Button>\r\n                                                </Col>\r\n                                            </ButtonToolbar>\r\n                                        </Row>\r\n                                        <br />\r\n\r\n                                        {contactType === 'person' ? (\r\n                                            <NewAccountFormPersonal\r\n                                                handleSubmit={handleSubmit}\r\n                                                showSuccessMessage={showSuccessMessage}\r\n                                            />\r\n                                        ) : (\r\n                                            <NewAccountFormOrganisation\r\n                                                handleSubmit={handleSubmit}\r\n                                                showSuccessMessage={showSuccessMessage}\r\n                                            />\r\n                                        )}\r\n                                        {showError ? (\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    {errorMessage}\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        ) : null}\r\n                                        <Row className=\"justify-content-center\">\r\n                                            <ButtonGroup aria-label=\"redirect-to-login\" className=\"w-button-group\">\r\n                                                <Col>\r\n                                                    <ButtonText\r\n                                                        buttonText={'Heb je al een account ?'}\r\n                                                        onClickAction={toggleRedirect}\r\n                                                        buttonClassName={'authorization-button'}\r\n                                                        size=\"sm\"\r\n                                                    />\r\n                                                </Col>\r\n                                            </ButtonGroup>\r\n                                        </Row>\r\n                                    </>\r\n                                )}\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nfunction NewAccountWithProvider() {\r\n    const RE_CAPTCHA_KEY = process.env.REACT_APP_RE_CAPTCHA_KEY;\r\n\r\n    return (\r\n        <GoogleReCaptchaProvider reCaptchaKey={RE_CAPTCHA_KEY} language={'nl'}>\r\n            <NewAccount />\r\n        </GoogleReCaptchaProvider>\r\n    );\r\n}\r\n\r\nexport default NewAccountWithProvider;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NewAccountSuccess = () => {\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src={`images/logo.png?${imageHash}`} alt=\"\" className=\"image logo-container\" />\r\n                    <div>\r\n                        <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                        <p className={'authorization-text'}>\r\n                            Binnen enkele minuten ontvang je een e-mail met een persoonlijke link. Via deze link kun je\r\n                            je account activeren.\r\n                            <br />\r\n                            <br />\r\n                            <strong>Let op:</strong> Het kan zijn dat de mail door een spamfilter is geblokkeerd.\r\n                            Spamfilters van bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de\r\n                            Spam/Reclame of je onze mail daar terug vindt.\r\n                        </p>\r\n                        <a onClick={window.close} href=\"#\" className=\"authorization-link\">\r\n                            Sluit venster\r\n                        </a>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NewAccountSuccess;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email('Geen geldig e-mailadres')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountEmail() {\r\n    const [portalUserEmail, setPortalUserEmail] = useState('');\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (function callFetchUserEmail() {\r\n            PortalUserAPI.fetchPortalUserEmail()\r\n                .then(payload => {\r\n                    setPortalUserEmail(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n    function handleSubmitChangeEmail(values, actions) {\r\n        PortalUserAPI.changeEmail(values)\r\n            .then(payload => {\r\n                setPortalUserEmail(values.email);\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', changePrimaryEmailAddress: false }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangeEmail(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Inlog e-mail is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit\r\n                            e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan\r\n                            alsjeblieft een ander e-mailadres.\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12}>\r\n                            <FormLabel className={'field-label'}>Huidig e-mailadres</FormLabel>\r\n                            <TextBlock>{portalUserEmail}</TextBlock>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label pt-1'}>Nieuw e-mailadres</Form.Label>\r\n                            <Field\r\n                                name=\"email\"\r\n                                render={({ field }) => (\r\n                                    <InputText field={field} errors={errors} touched={touched} id=\"email\" />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Field\r\n                                name=\"changePrimaryEmailAddress\"\r\n                                render={({ field }) => (\r\n                                    <label className=\"w-checkbox checkbox-fld\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            {...field}\r\n                                            id=\"change-primary-email-address\"\r\n                                            checked={field.value}\r\n                                            className=\"w-checkbox-input checkbox\"\r\n                                        />\r\n                                        <span\r\n                                            htmlFor=\"change-primary-email-address\"\r\n                                            className=\"checkbox-label w-form-label\"\r\n                                        >\r\n                                            Wijziging ook doorvoeren op huidig correspondentie e-mailadres?\r\n                                        </span>\r\n                                    </label>\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig e-mailadres'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountEmail;\r\n","import React, { useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountPassword() {\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    function handleSubmitChangePassword(values, actions) {\r\n        PortalUserAPI.changePassword(values)\r\n            .then(payload => {\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ password: '', passwordConfirmation: '' }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangePassword(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Wachtwoord is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Fout bij wijzigen wachtwoord!\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label'}>Nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"password\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"password\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label mt-0'}>Herhaal nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"passwordConfirmation\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"passwordConfirmation\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Herhaal nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig wachtwoord'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountPassword;\r\n","import React, {useRef, useState} from 'react';\r\nimport MeAPI from \"../../../api/general/MeAPI\";\r\nimport {Alert} from \"react-bootstrap\";\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst TwoFactorSettings = function () {\r\n    const activationCodeInput = useRef(null);\r\n    const [password, setPassword] = useState('');\r\n    const [hasValidPassword, setHasValidPassword] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [hasTwoFactorEnabled, setHasTwoFactorEnabled] = useState(false);\r\n    const [activationQr, setActivationQr] = useState(null);\r\n    const [isActivatingTwoFactor, setIsActivatingTwoFactor] = useState(false);\r\n    const [activationCode, setActivationCode] = useState('');\r\n    const [recoveryCodes, setRecoveryCodes] = useState([]);\r\n\r\n    const checkPasswordHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        setErrorMessage('');\r\n        MeAPI.checkPassword(password).then(payload => {\r\n            setHasValidPassword(true);\r\n\r\n            fetchTwoFactorStatus();\r\n        }).catch(error => {\r\n            setErrorMessage('Het wachtwoord is onjuist');\r\n        });\r\n    }\r\n\r\n    const enableTwoFactorHandler = () => {\r\n        MeAPI.enableTwoFactor(password).then(payload => {\r\n            setIsActivatingTwoFactor(true);\r\n            activationCodeInput.current.focus();\r\n            fetchQr();\r\n        });\r\n    }\r\n\r\n    const disableTwoFactorHandler = () => {\r\n        if(!window.confirm('Weet u zeker dat u twee factor authenticatie wilt uitschakelen.')) {\r\n            return;\r\n        }\r\n\r\n        MeAPI.disableTwoFactor(password).then(payload => {\r\n            setHasTwoFactorEnabled(false);\r\n            localStorage.removeItem('portal_two_factor_token');\r\n        });\r\n    }\r\n\r\n    const fetchTwoFactorStatus = () => {\r\n        MeAPI.fetchTwoFactorStatus().then(payload => {\r\n            setHasTwoFactorEnabled(payload.data.hasTwoFactorEnabled);\r\n        });\r\n    }\r\n\r\n    const fetchQr = () => {\r\n        MeAPI.fetchTwoFactorQr(password).then(payload => {\r\n            setActivationQr(payload.data.svg);\r\n        });\r\n    }\r\n\r\n    const confirmTwoFactorHandler = () => {\r\n        setErrorMessage('');\r\n\r\n        MeAPI.confirmTwoFactor(activationCode).then(payload => {\r\n            setIsActivatingTwoFactor(false);\r\n            setHasTwoFactorEnabled(true);\r\n            setActivationCode('');\r\n            fetchRecoveryCodes();\r\n\r\n            localStorage.setItem('portal_two_factor_token', payload.data.token);\r\n        }).catch(() => {\r\n            setErrorMessage('De code is onjuist');\r\n        });\r\n    }\r\n\r\n    const fetchRecoveryCodes = () => {\r\n        MeAPI.fetchTwoFactorRecoveryCodes(password).then(payload => {\r\n            setRecoveryCodes(payload.data);\r\n        });\r\n    }\r\n\r\n    const regenerateRecoveryCodes = () => {\r\n        if(!window.confirm('Weet u zeker dat u nieuwe recovery code wilt genereren? De huidige code is daarna niet meer geldig.')) {\r\n            return;\r\n        }\r\n\r\n        MeAPI.regenerateTwoFactorRecoveryCodes(password).then(payload => {\r\n            fetchRecoveryCodes();\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={9}>\r\n            {errorMessage && (<>\r\n                <Alert variant={'danger'}>\r\n                    {errorMessage}\r\n                </Alert>\r\n            </>)}\r\n\r\n            {hasValidPassword ? (\r\n                <>\r\n                    {hasTwoFactorEnabled ? (\r\n                        <>\r\n                            <p>U heeft twee factor authenticatie geactiveerd.</p>\r\n                            <button onClick={disableTwoFactorHandler} className=\"btn btn-primary btn-sm\">Twee factor uitschakelen</button>\r\n                            <br/><br/>\r\n                            <strong>Recovery code</strong>\r\n                            <p><small>De recovery code kunt u gebruiken om uw account te herstellen bij problemen met uw authenticator app\r\n                                of verlies van uw telefoon. Sla deze op een veilige plek op.</small></p>\r\n\r\n                            {recoveryCodes.length ? (<>\r\n                                <ul>\r\n                                    {recoveryCodes.map((code) => {\r\n                                        return (\r\n                                            <li key={code} style={{'font-family': 'courier'}}>{code}</li>\r\n                                        );\r\n                                    })}\r\n                                </ul>\r\n                                <button onClick={() => setRecoveryCodes([])} className=\"btn btn-sm\">Verbergen</button>\r\n                                <button onClick={regenerateRecoveryCodes} className=\"btn btn-sm btn-primary\">Vernieuwen</button>\r\n                            </>) : (<>\r\n                                <button onClick={fetchRecoveryCodes} className=\"btn btn-primary btn-sm\">Toon recovery code</button>\r\n                            </>)}\r\n                        </>) : (\r\n                        <>\r\n                            {isActivatingTwoFactor ? (\r\n                                <>\r\n                                    <p>Scan onderstaande QR met uw authenticator app en voer de zescijferige code\r\n                                        in.</p>\r\n                                    <div dangerouslySetInnerHTML={{__html: activationQr}}/>\r\n                                    <br/>\r\n                                    <input ref={activationCodeInput} placeholder=\"Code\" className=\"text-input w-input content\" type=\"text\" value={activationCode}\r\n                                           onChange={(e) => setActivationCode(e.target.value)}/>\r\n                                    <button onClick={() => setIsActivatingTwoFactor(false)} className=\"btn btn-sm btn-light\">Annuleren</button>\r\n                                    <button onClick={confirmTwoFactorHandler} className=\"btn btn-primary btn-sm\">Bevestigen</button>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <p>U heeft twee factor authenticatie <strong>niet</strong> geactiveerd.</p>\r\n                                    <button onClick={enableTwoFactorHandler} className=\"btn btn-primary btn-sm\">Twee factor inschakelen</button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )\r\n                    }\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <form onSubmit={checkPasswordHandler}>\r\n                    Voer uw wachtwoord in om de twee factor instellingen te wijzigen.<br/>\r\n                    <input placeholder=\"Wachtwoord\" className=\"text-input w-input content\" type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-sm\">Ontgrendel</button>\r\n                    </form>\r\n                </>\r\n            )}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default TwoFactorSettings;","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ChangeAccountEmail from './Email';\r\nimport ChangeAccountPassword from './Password';\r\nimport TwoFactorSettings from \"./TwoFactorSettings\";\r\n\r\nfunction ChangeAccount() {\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">Wijzig inloggegevens</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={6} className={'mb-5'}>\r\n                    <h3 className={'h3'}>Wijzig inlog e-mailadres</h3>\r\n\r\n                    <ChangeAccountEmail />\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <h3 className={'h3'}>Wijzig wachtwoord</h3>\r\n\r\n                    <ChangeAccountPassword />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={6} style={{marginTop: '24px'}}>\r\n                    <h3 className={'h3'}>Twee factor authenticatie</h3>\r\n\r\n                    <TwoFactorSettings/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ChangeAccount;\r\n","import React, { useEffect, useReducer, useContext, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction AboutUs() {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n    const [hasSingleRelatedAdministration, setHasSingleRelatedAdministration] = useState(false);\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentSelectedContact.id) {\r\n                if (currentSelectedContact.singleRelatedAdministration) {\r\n                    setIsLoading(false);\r\n                    setHasSingleRelatedAdministration(true);\r\n                } else {\r\n                    ContactAPI.fetchContactRelatedAdministrations(currentSelectedContact.id)\r\n                        .then(payload => {\r\n                            dispatch({\r\n                                type: 'updateResult',\r\n                                payload: payload.data.data,\r\n                            });\r\n                            setIsLoading(false);\r\n                        })\r\n                        .catch(() => {\r\n                            alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n            }\r\n        },\r\n        [currentSelectedContact.id]\r\n    );\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {hasSingleRelatedAdministration ? (\r\n                <Redirect to={`/over-ons-organisatie/${currentSelectedContact.singleRelatedAdministration}`} />\r\n            ) : (\r\n                <Container className={'content-section'}>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                Overzicht organisaties waar <strong>{currentSelectedContact.fullNameFnf}</strong> een\r\n                                relatie mee heeft.\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    {state.isLoading ? (\r\n                        <Row>\r\n                            <Col>\r\n                                <LoadingView />\r\n                            </Col>\r\n                        </Row>\r\n                    ) : state.result.length === 0 ? (\r\n                        <Row>\r\n                            <Col>Geen informatie organisaties beschikbaar waar contact een relatie mee heeft.</Col>\r\n                        </Row>\r\n                    ) : (\r\n                        <>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p>Klik op de organisatie voor meer details.</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Table responsive>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Naam</th>\r\n                                        <th>Adres</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {state.result.map(item => (\r\n                                        <tr key={item.id}>\r\n                                            <td>\r\n                                                <Link to={`/over-ons-organisatie/${item.id}`}>{item.name}</Link>\r\n                                            </td>\r\n                                            <td>\r\n                                                {item.address}, {item.city}\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        </>\r\n                    )}\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AboutUs;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nfunction RegistrationDetailsTitle({ contactName, projectName, administrationName }) {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <h1 className=\"content-heading\">\r\n                    Deelname van {contactName} in de {projectName}\r\n                </h1>\r\n                <div className=\"content-subheading\">Organisatie {administrationName}</div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsTitle;\r\n","import moneyPresenter from './MoneyPresenter';\r\nimport moment from 'moment';\r\n\r\nexport default field => {\r\n    switch (field.type) {\r\n        case 'date':\r\n            return field.value ? moment(field.value).format('L') : '';\r\n        case 'decimal':\r\n            return field.value\r\n                ? field.value.toLocaleString('nl', {\r\n                      minimumFractionDigits: 2,\r\n                      maximumFractionDigits: 2,\r\n                  })\r\n                : '';\r\n        case 'money':\r\n            return moneyPresenter(field.value);\r\n        case 'string':\r\n        case 'integer':\r\n        default:\r\n            return field.value;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\r\n\r\nfunction RegistrationDetailsProjectTable({ fields }) {\r\n    if (!fields || fields.length === 0) return <p>Geen projectdetails bekend</p>;\r\n\r\n    return (\r\n        <Table>\r\n            <tbody>\r\n                {fields.map((field, index) => (\r\n                    <tr key={index}>\r\n                        <td>\r\n                            <strong>{field.label}</strong>\r\n                        </td>\r\n                        <td>{valueBasedOnTypePresenter(field)}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsProjectTable;\r\n","export default field => {\r\n    switch (field.type) {\r\n        case 'date':\r\n        case 'string':\r\n            return 'text-left';\r\n        case 'decimal':\r\n        case 'money':\r\n        case 'integer':\r\n            return 'text-right';\r\n        default:\r\n            return 'text-left';\r\n    }\r\n};\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\r\nimport classNameBasedOnTypePresenter from '../../../../helpers/classNameBasedOnTypePresenter';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction RegistrationDetailsMutationTable({ participantMutations }) {\r\n    if (!participantMutations || participantMutations.length === 0) return <p>Geen mutaties bekend</p>;\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col>\r\n                    <div className=\"content-subheading\">Mutaties</div>\r\n                </Col>\r\n            </Row>\r\n            <Table responsive={true}>\r\n                <thead>\r\n                    <tr>\r\n                        {participantMutations[0].fields.map((field, index) => (\r\n                            <th key={index}>{field.label}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {participantMutations.map((participantMutation, index) => (\r\n                        <tr key={index}>\r\n                            {participantMutation.fields.map((field, index) => (\r\n                                <td className={classNameBasedOnTypePresenter(field)} key={index}>\r\n                                    {valueBasedOnTypePresenter(field)}\r\n                                </td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsMutationTable;\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { FaFileDownload } from 'react-icons/all';\r\nimport fileDownload from 'js-file-download';\r\nimport ParticipantProjectAPI from '../../../../api/participant-project/ParticipantProjectAPI';\r\n\r\nfunction RegistrationDetailsDocumentTable({ participantId, documents }) {\r\n    function downloadFile(e, id, filename) {\r\n        e.preventDefault();\r\n\r\n        ParticipantProjectAPI.participantDocumentDownload(participantId, id)\r\n            .then(payload => {\r\n                fileDownload(payload.data, filename);\r\n            })\r\n            .catch(() => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    if (\r\n        (documents && documents.relatedDocumentsOnPortal && documents.relatedDocumentsOnPortal.length !== 0) ||\r\n        (documents &&\r\n            documents.relatedDocumentsProjectOnPortal &&\r\n            documents.relatedDocumentsProjectOnPortal.length !== 0)\r\n    ) {\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <div className=\"content-subheading\">Documenten</div>\r\n                    </Col>\r\n                </Row>\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Naam</th>\r\n                            <th>Omschrijving</th>\r\n                            <th>Downloaden</th>\r\n                        </tr>\r\n                    </thead>\r\n                    {documents &&\r\n                    documents.relatedDocumentsOnPortal &&\r\n                    documents.relatedDocumentsOnPortal.length !== 0 ? (\r\n                        <tbody>\r\n                            {documents.relatedDocumentsOnPortal.map(item => (\r\n                                <tr key={item.id}>\r\n                                    <td>{item.filename}</td>\r\n                                    <td>{item.description}</td>\r\n                                    <td>\r\n                                        <a href=\"#\" onClick={e => downloadFile(e, item.id, item.filename)}>\r\n                                            <FaFileDownload /> downloaden\r\n                                        </a>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    ) : null}\r\n                    {documents &&\r\n                    documents.relatedDocumentsProjectOnPortal &&\r\n                    documents.relatedDocumentsProjectOnPortal.length !== 0 ? (\r\n                        <tbody>\r\n                            {documents.relatedDocumentsProjectOnPortal.map(item => (\r\n                                <tr key={item.id}>\r\n                                    <td>{item.filename}</td>\r\n                                    <td>{item.description}</td>\r\n                                    <td>\r\n                                        <a href=\"#\" onClick={e => downloadFile(e, item.id, item.filename)}>\r\n                                            <FaFileDownload /> downloaden\r\n                                        </a>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    ) : null}\r\n                </Table>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default RegistrationDetailsDocumentTable;\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport RegistrationDetailsTitle from './Title';\r\nimport RegistrationDetailsProjectTable from './project-table';\r\nimport RegistrationDetailsMutationTable from './mutation-table';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport RegistrationDetailsDocumentTable from './document-table';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction RegistrationDetails({ match: { params } }) {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function() {\r\n                ParticipantProjectAPI.show(params.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setCurrentThemeSettings(payload.data.data.basicInformation.portalSettingsLayoutAssigned);\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [params.id, currentSelectedContact]);\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {state.isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"current-participations\" className=\"w-button-group-left\">\r\n                            <Link to={`/inschrijvingen-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Huidige deelnames\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <RegistrationDetailsTitle {...state.result.basicInformation} />\r\n                    {state.result.length === 0 ? (\r\n                        <Row>\r\n                            <Col>Geen huidige deelname aanwezig.</Col>\r\n                        </Row>\r\n                    ) : (\r\n                        <>\r\n                            <RegistrationDetailsProjectTable fields={state.result.fields} />\r\n                            <RegistrationDetailsMutationTable\r\n                                participantMutations={state.result.participantMutations}\r\n                            />\r\n                            <RegistrationDetailsDocumentTable\r\n                                participantId={params.id}\r\n                                documents={state.result.documents}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetails;\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { FaFileDownload } from 'react-icons/all';\r\nimport fileDownload from 'js-file-download';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction FinancialOverviewDocuments() {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentSelectedContact.id) {\r\n                ContactAPI.fetchContactFinancialOverviewDocuments(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        },\r\n        [currentSelectedContact.id]\r\n    );\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    function downloadFile(e, id) {\r\n        e.preventDefault();\r\n\r\n        ContactAPI.financialOverviewContactDownload(id)\r\n            .then(payload => {\r\n                fileDownload(payload.data, payload.headers['x-filename']);\r\n            })\r\n            .catch(() => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {state.isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading mt-0\">Waardestaat documenten</h1>\r\n                        </Col>\r\n                    </Row>\r\n                    {state.result.length === 0 ? (\r\n                        <Row>\r\n                            <Col>Geen waardestaat documenten aanwezig om te tonen.</Col>\r\n                        </Row>\r\n                    ) : (\r\n                        <Table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Naam</th>\r\n                                    <th>Omschrijving</th>\r\n                                    <th>Downloaden</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {state.result.map(item => (\r\n                                    <tr key={item.id}>\r\n                                        <td>{item.name}</td>\r\n                                        <td>{item.description}</td>\r\n                                        <td>\r\n                                            <a href=\"#\" onClick={e => downloadFile(e, item.id)}>\r\n                                                <FaFileDownload /> downloaden\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default FinancialOverviewDocuments;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n    fetchAdministration: function(id) {\r\n        const requestUrl = `/jory/administration/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'name',\r\n                        'address',\r\n                        'postalCode',\r\n                        'city',\r\n                        'kvkNumber',\r\n                        'iBAN',\r\n                        'ibanAttn',\r\n                        'btwNumber',\r\n                        'website',\r\n                        'email',\r\n                    ],\r\n                    rlt: {\r\n                        country: { fld: ['name'] },\r\n                        documentsOnPortal: { fld: ['id', 'filename', 'description'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n    documentDownload: function(administrationId, id) {\r\n        const requestUrl = `/administration/${administrationId}/document/${id}/download`;\r\n\r\n        return axiosInstance.get(requestUrl, { responseType: 'blob' });\r\n    },\r\n};\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { FaFileDownload } from 'react-icons/all';\r\nimport fileDownload from 'js-file-download';\r\nimport AdministrationAPI from '../../../../api/administration/AdministrationAPI';\r\n\r\nfunction AboutUsDocumentTable({ administrationId, documents }) {\r\n    function downloadFile(e, id, filename) {\r\n        e.preventDefault();\r\n\r\n        AdministrationAPI.documentDownload(administrationId, id)\r\n            .then(payload => {\r\n                fileDownload(payload.data, filename);\r\n            })\r\n            .catch(() => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    if (documents && documents.length !== 0) {\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <div className=\"content-subheading\">Documenten</div>\r\n                    </Col>\r\n                </Row>\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Naam</th>\r\n                            <th>Omschrijving</th>\r\n                            <th>Downloaden</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {documents.map(item => (\r\n                            <tr key={item.id}>\r\n                                <td>{item.filename}</td>\r\n                                <td>{item.description}</td>\r\n                                <td>\r\n                                    <a href=\"#\" onClick={e => downloadFile(e, item.id, item.filename)}>\r\n                                        <FaFileDownload /> downloaden\r\n                                    </a>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default AboutUsDocumentTable;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport { Card, Table } from 'react-bootstrap';\r\nimport AdministrationAPI from '../../../api/administration/AdministrationAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport AboutUsDocumentTable from './document-table';\r\n\r\nfunction AboutUsAdministration({ match }) {\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n    const [administration, setAdministration] = useState({});\r\n    const [websiteLink, setWebsiteLink] = useState(null);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function callFetchAdministration() {\r\n                setLoading(true);\r\n                // console.log(match);\r\n                AdministrationAPI.fetchAdministration(match.params.id)\r\n                    .then(payload => {\r\n                        setAdministration(payload.data.data);\r\n                        setLoading(false);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [match, currentSelectedContact]);\r\n\r\n    useEffect(() => {\r\n        if (administration.id && administration.website) {\r\n            if (\r\n                administration.website.toLowerCase().startsWith('http') ||\r\n                administration.website.toLowerCase().startsWith('https')\r\n            ) {\r\n                setWebsiteLink(administration.website);\r\n            } else {\r\n                setWebsiteLink('https://' + administration.website);\r\n            }\r\n        }\r\n    }, [administration]);\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"about-us\" className=\"w-button-group-left\">\r\n                            <Link to={`/over-ons`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Over ons\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <Row className={'justify-content-center align-content-center flex-wrap'}>\r\n                        <Col xs={12} lg={6} className={'mb-3'}>\r\n                            <Card>\r\n                                <Card.Header className={'card-header_title'}>\r\n                                    Informatie over {administration.name}\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    <Table responsive>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Naam</strong>\r\n                                                </td>\r\n                                                <td>{administration.name}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Adres</strong>\r\n                                                </td>\r\n                                                <td>{administration.address}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Postcode / Plaats</strong>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {administration.postalCode} {administration.city}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Kvk</strong>\r\n                                                </td>\r\n                                                <td>{administration.kvkNumber}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Website</strong>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {administration.website && (\r\n                                                        <a href={websiteLink} target=\"_blank\">\r\n                                                            <button className=\"w-button btn btn-primary btn-sm\">\r\n                                                                {administration.website}\r\n                                                            </button>\r\n                                                        </a>\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>E-mail</strong>\r\n                                                </td>\r\n                                                <td>{administration.email}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>IBAN</strong>\r\n                                                </td>\r\n                                                <td>{administration.iBAN}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>IBAN t.n.v.</strong>\r\n                                                </td>\r\n                                                <td>{administration.ibanAttn}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>BTW nummer</strong>\r\n                                                </td>\r\n                                                <td>{administration.btwNumber}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <AboutUsDocumentTable\r\n                        administrationId={match.params.id}\r\n                        documents={administration.documentsOnPortal}\r\n                    />\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AboutUsAdministration;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchByCode: code => {\r\n        const requestUrl = `/jory/participant-mutation`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    flt: {\r\n                        f: 'code',\r\n                        d: code,\r\n                    },\r\n                    fld: ['econobisPaymentLink', 'isPaidByMollie'],\r\n                    rlt: {\r\n                        participation: {\r\n                            rlt: {\r\n                                project: {\r\n                                    fld: ['name', 'textRegistrationFinished'],\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ParticipantMutationAPI from '../../../api/participant-mutation/ParticipantMutationAPI';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport {PortalUserConsumer} from '../../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport {Link} from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\n\r\nfunction ProjectMollieRedirect({match, currentSelectedContact}) {\r\n    const [participantMutation, setParticipantMutation] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const handlePaymentRetry = () => {\r\n        window.location.href = participantMutation.econobisPaymentLink;\r\n    }\r\n\r\n    useEffect(() => {\r\n        (function fetchContactAndProject() {\r\n            setLoading(true);\r\n\r\n            axios\r\n                .all([\r\n                    ParticipantMutationAPI.fetchByCode(match.params.code),\r\n                ])\r\n                .then(\r\n                    axios.spread((payloadParticipantMutation) => {\r\n                        if(payloadParticipantMutation.data.data.length !== 1){\r\n                            alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                            setLoading(false);\r\n                            return;\r\n                        }\r\n\r\n                        setParticipantMutation(payloadParticipantMutation.data.data[0]);\r\n                        setLoading(false);\r\n                    })\r\n                )\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [match]);\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView/>\r\n            ) : (\r\n                <>\r\n                    <Row className={'mb-4'}>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                {\r\n                                    participantMutation.isPaidByMollie ? (\r\n                                        <>Ingeschreven voor\r\n                                            project <strong>{participantMutation.participation.project.name}</strong></>\r\n                                    ) : (\r\n                                        <>Betaling voor\r\n                                            project <strong>{participantMutation.participation.project.name}</strong> nog\r\n                                            niet gelukt.</>\r\n                                    )\r\n                                }\r\n\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            {participantMutation.isPaidByMollie ? (\r\n                                <>\r\n                                    <p>\r\n                                        { participantMutation.participation.project.textRegistrationFinished.split('\\n').map((item, key) => {\r\n                                            return <span key={key}>{item}<br/></span>\r\n                                        }) }\r\n                                    </p>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <p>\r\n                                        Uw inschrijving kon nog niet worden afgerond doordat de betaling niet is gelukt,\r\n                                        gebruik onderstaande betaal button om de betaling alsnog uit te voeren.</p>\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar mijn huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                                {!participantMutation.isPaidByMollie && (\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handlePaymentRetry}>\r\n                                        Betalen\r\n                                    </Button>\r\n                                )}\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function ProjectMollieRedirectWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({currentSelectedContact}) => (\r\n                <ProjectMollieRedirect {...props} currentSelectedContact={currentSelectedContact}/>\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch } from 'react-router-dom';\r\nimport ProtectedRoute from './route/ProtectedRoute';\r\nimport PublicRoute from './route/PublicRoute';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport { PortalUserProvider } from './context/PortalUserContext';\r\nimport Login from './container/authorization/login';\r\nimport TwoFactorConfirm from './container/authorization/two-factor';\r\nimport TwoFactorRecover from './container/authorization/two-factor/recover';\r\nimport Register from './container/authorization/register';\r\nimport Forgot from './container/authorization/forgot';\r\nimport Reset from './container/authorization/reset';\r\nimport Dashboard from './container/dashboard';\r\nimport ContactDetails from './container/contact-details';\r\nimport MyAreasOfInterest from './container/my-areas-of-interest';\r\nimport RegisterProject from './container/register';\r\nimport ProjectList from './container/project/list';\r\nimport ProjectDetails from './container/project/details';\r\nimport RegistrationList from './container/registration/list';\r\nimport NewAccount from './container/authorization/new-account';\r\nimport NewAccountSuccess from './container/authorization/new-account/NewAccountSuccess';\r\nimport ChangeAccount from './container/authorization/change-account';\r\nimport AboutUs from './container/about-us/list';\r\nimport RegistrationDetails from './container/registration/details';\r\nimport FinancialOverviewDocuments from './container/financial-overview-documents/list';\r\nimport { ThemeSettingsProvider } from './context/ThemeSettingsContext';\r\nimport AboutUsAdministration from './container/about-us/details';\r\nimport ProjectMollieRedirectWithContext from './container/register/mollie-redirect';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n                <PortalUserProvider>\r\n                    <ThemeSettingsProvider>\r\n                        <Switch>\r\n                            <ProtectedRoute exact path=\"/\" component={Dashboard} />\r\n                            <ProtectedRoute path=\"/dashboard\" component={Dashboard} />\r\n                            <ProtectedRoute path=\"/gegevens\" component={ContactDetails} />\r\n                            <ProtectedRoute path=\"/mijn-interessegebieden\" component={MyAreasOfInterest} />\r\n                            <ProtectedRoute\r\n                                path=\"/inschrijven/mollie-resultaat/:code\"\r\n                                component={ProjectMollieRedirectWithContext}\r\n                            />\r\n                            <ProtectedRoute path=\"/inschrijven/:id\" component={RegisterProject} />\r\n                            <ProtectedRoute path=\"/inschrijven-projecten\" component={ProjectList} />\r\n                            <ProtectedRoute path=\"/inschrijvingen-projecten\" component={RegistrationList} />\r\n                            <ProtectedRoute path=\"/project-deelname/:id\" component={RegistrationDetails} />\r\n                            <ProtectedRoute path=\"/project/:id\" component={ProjectDetails} />\r\n                            <ProtectedRoute path=\"/waardestaat-documenten\" component={FinancialOverviewDocuments} />\r\n                            <ProtectedRoute path=\"/wijzig-inloggegevens\" component={ChangeAccount} />\r\n                            <ProtectedRoute path=\"/over-ons\" component={AboutUs} />\r\n                            <ProtectedRoute path=\"/over-ons-organisatie/:id\" component={AboutUsAdministration} />\r\n                            <PublicRoute path=\"/login\" component={Login} />\r\n                            <PublicRoute path=\"/two-factor/confirm\" component={TwoFactorConfirm} />\r\n                            <PublicRoute path=\"/two-factor/recover\" component={TwoFactorRecover} />\r\n                            <PublicRoute path=\"/activeer-registratie/:registrationCode/:email\" component={Register} />\r\n                            <PublicRoute path=\"/wachtwoord-vergeten\" component={Forgot} />\r\n                            <PublicRoute path=\"/wachtwoord-wijzigen/:token/:email\" component={Reset} />\r\n                            <PublicRoute path=\"/nieuw-account\" component={NewAccount} />\r\n                            <PublicRoute path=\"/nieuw-account-succes\" component={NewAccountSuccess} />\r\n                        </Switch>\r\n                    </ThemeSettingsProvider>\r\n                </PortalUserProvider>\r\n            </AuthProvider>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/normalize.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-day-picker/lib/style.css';\r\nimport './css/webflow.css';\r\nimport './css/econobis.webflow.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'moment/locale/nl';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// Server data is set and can now removed\r\nvar serverDataScript = document.getElementById('server-data');\r\nserverDataScript.remove();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}