{"version":3,"sources":["context/AuthContext.js","context/PortalUserContext.js","context/ThemeSettingsContext.js","components/layout/Header.js","api/default-setup/AxiosInstance.js","api/portal-user/PortalUserAPI.js","route/ProtectedRoute.js","route/PublicRoute.js","components/form/InputText.js","components/button/ButtonText.js","container/authorization/login/Form.js","api/auth/AuthAPI.js","api/portal-settings/PortalSettingsAPI.js","container/authorization/login/index.js","container/authorization/register/Form.js","container/authorization/register/index.js","container/authorization/forgot/Form.js","container/authorization/forgot/index.js","container/authorization/reset/Form.js","container/authorization/reset/index.js","components/general/LoadingView.js","api/project/ProjectAPI.js","api/contact/ContactAPI.js","helpers/RebaseContact.js","container/dashboard/widget/index.js","container/dashboard/widget/default.js","api/dashboard/DashboardSettingsAPI.js","container/dashboard/index.js","components/general/TextBlock.js","container/contact-details/default-form-personal/View.js","components/form/Select.js","data/Countries.js","data/EnergySuppliers.js","data/Titles.js","data/LastNamePrefixes.js","components/form/InputDate.js","container/contact-details/default-form-personal/Edit.js","helpers/ValidationSchemaPersonal.js","container/contact-details/Personal.js","container/contact-details/default-form-organisation/View.js","container/contact-details/default-form-organisation/Edit.js","helpers/ValidationSchemaOrganisation.js","container/contact-details/Organisation.js","container/contact-details/index.js","container/my-areas-of-interest/Form.js","container/my-areas-of-interest/index.js","helpers/MoneyPresenter.js","helpers/CalculateTransactionCosts.js","components/form/InputTextCurrency.js","container/register/steps/StepOneLoan.js","container/register/steps/StepOneObligation.js","container/register/steps/StepOneCapital.js","container/register/steps/StepOnePcr.js","container/register/steps/StepTwo.js","container/register/steps/StepThree.js","components/general/ViewHtmlAsText.js","api/participant-project/ParticipantProjectAPI.js","container/register/steps/StepFour.js","container/register/steps/StepFive.js","container/register/steps/index.js","container/register/MasterForm.js","container/register/index.js","container/project/list/address-person/Edit.js","container/project/list/address-organisation/Edit.js","container/project/list/index.js","container/project/details/LoanDetails.js","container/project/details/ObligationDetails.js","container/project/details/CapitalDetails.js","container/project/details/PcrDetails.js","container/project/details/index.js","container/registration/list/index.js","container/authorization/new-account/NewAccountFormPersonal.js","container/authorization/new-account/NewAccountFormOrganisation.js","container/authorization/new-account/index.js","container/authorization/new-account/NewAccountSuccess.js","container/authorization/change-account/Email.js","container/authorization/change-account/Password.js","container/authorization/change-account/index.js","container/about-us/list/index.js","container/registration/details/Title.js","helpers/classNameBasedOnTypePresenter.js","helpers/ValueBasedOnTypePresenter.js","container/registration/details/project-table/index.js","container/registration/details/mutation-table/index.js","container/registration/details/index.js","container/financial-overview-documents/list/index.js","api/administration/AdministrationAPI.js","container/about-us/details/index.js","api/participant-mutation/ParticipantMutationAPI.js","container/register/mollie-redirect/index.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","localStorageToken","AuthProvider","props","useState","window","localStorage","getItem","checkIfAuth","isAuth","setAuth","Provider","value","login","payload","cbRedirect","token","access_token","removeItem","setItem","moment","format","logout","children","AuthConsumer","Consumer","PortalUserContext","user","setInitialUserData","PortalUserProvider","setUser","currentSelectedContact","setCurrentContact","selectedContactId","id","occupationUser","occupations","find","occupation","primaryContact","organisationUser","typeId","primary","switchCurrentContact","contact","resetCurrentUserToDefault","updateNameSelectedContact","fullNameFnf","firstName","lastNamePrefix","lastName","updatedOccupations","map","occupationContact","PortalUserConsumer","ThemeSettingsContext","defaultThemeSettings","setInitialThemeSettings","setCurrentThemeSettings","switchToDefaultThemeSettings","ThemeSettingsProvider","setDefaultThemeSettings","currentThemeSettings","useEffect","document","documentElement","style","setProperty","portal_image_bg_file_name_header","portal_background_color","portal_background_text_color","login_header_background_color","login_header_background_text_color","header_icons_color","login_field_background_color","login_field_background_text_color","button_color","button_text_color","ThemeSettingsConsumer","withRouter","location","history","menuOpen","updateStateMenu","closeMenu","formatProfilePicName","replace","redirect","to","push","ref","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","useOutsideAlerter","useRef","className","length","ReactHtmlParser","alignRight","Toggle","marginTop","Menu","Header","Item","onClick","active","occupationForPortal","key","xs","undefined","portal_logo_file_name_header","src","fontSize","marginLeft","padding","disabled","Divider","pathname","Button","right","width","isOpen","onStateChange","state","handleStateChange","customBurgerIcon","Fragment","hasFinancialOverviews","BASE_URL","__SERVER_DATA__","base_url","axiosInstance","axios","create","baseURL","interceptors","request","use","config","lastActivity","add","hash","setTimeout","reload","checkTokenExpiration","AUTH_TOKEN","headers","Authorization","error","Promise","reject","get","params","jory","fld","rlt","values","post","ProtectedRoute","Component","component","rest","useLocation","useContext","PortalUserAPI","then","data","portalSettingsLayoutAssigned","catch","alert","includes","render","ProtectedRouteWithContext","PublicRoute","InputText","field","type","readOnly","placeholder","showErrorMessage","errors","touched","classNameErrorMessage","customOnChange","onChange","name","Boolean","defaultProps","ButtonText","buttonClassName","buttonText","onClickAction","loading","title","loadingSpinnerColor","size","color","validationSchema","Yup","shape","username","email","required","password","LoginForm","handleSubmit","initialValues","enableReinitialize","onSubmit","actions","setSubmitting","isSubmitting","AUTH_KEY","client_id","client_secret","client_key","grant_type","requestUrl","defaults","common","loginCredentials","keys","isLoading","setIsLoading","showError","toggleError","redirectToReferrer","toggleRedirect","from","portalActive","setPortalActive","showNewAtCooperativeLink","setShowNewAtCooperativeLink","newAtCooperativeLinkText","setNewAtCooperativeLinkText","AuthAPI","PortalSettingsAPI","fluid","sm","md","lg","xl","alt","variant","href","min","matches","passwordConfirmation","oneOf","RegisterForm","Register","match","showLoginLink","setLoginLink","errorMessage","setErrorMessage","showSuccessMessage","toggleSuccessMessage","registrationCode","decodeURIComponent","password_confirmation","console","log","response","status","message","RegisterWithContext","ForgotForm","Forgot","ResetForm","Reset","ResetWithContext","Loading","height","flt","and","f","o","d","projectType","administration","person","organisation","emailAddresses","phoneNumbers","addresses","country","primaryContactEnergySupplier","energySupplier","participations","project","registerValues","contactId","projectId","responseType","contactData","emptyAddress","street","number","addition","postalCode","city","countryId","primaryAddress","visitAddress","postalAddress","invoiceAddress","address","emptyEmail","emailCorrespondence","emailAddress","emailInvoice","emptyPhoneNumber","phoneNumberPrimary","phoneNumber","phoneNumberTwo","filter","energySupplierId","esNumber","eanElectricity","memberSince","eanGas","DashboardWidget","text","image","buttonLink","useHistory","externalLink","toLowerCase","startsWith","Card","CardImg","whiteSpace","ContactDetailsDashboardWidget","typeContact","isEmpty","SwitchContactDashboardWidget","display","justifyContent","overflowX","margin","Dashboard","setLoading","setContact","dashboardSettings","setDashboardSettings","prevCurrentSelectedContact","usePrevious","ContactAPI","rebaseContact","finally","DashboardSettingsAPI","LoadingView","welcomeTitle","welcomeMessage","widgets","w","sort","a","b","order","widget","DashboardWithContext","TextBlock","showPlaceholder","DefaultContactPersonalView","portalSettings","initialContact","iban","ibanAttn","didAgreeAvg","dateDidAgreeAvg","initials","dateOfBirth","checked","htmlFor","Select","options","optionLabel","emptyOption","option","InputDate","onChangeAction","formattedDate","onDayChange","date","formatDate","parseDate","dayPickerProps","showWeekNumbers","locale","firstDayOfWeek","localeUtils","MomentLocaleUtils","inputProps","autoComplete","DefaultContactPersonalEdit","projectTypeCodeRef","setFieldValue","Titles","disableChangeContactNameOnPortal","data-tip","data-for","effect","place","multiline","aria-haspopup","LastNamePrefixes","isParticipant","blockChangeAddressNumber","isParticipantSceProject","isParticipantPcrProject","Countries","e","toUpperCase","EnergySuppliers","validationSchemaBasic","test","trim","nullable","Number","isInteger","this","parent","search","validationSchemaAdditional","typeError","ibantools","validationSchemaPcrAdditional","validationSchemaPostalCodeAndNumber","ContactDetailsPersonal","handleSubmitContactValues","editButtonGroup","editForm","setEditForm","ValidationSchemaPersonal","concat","aria-label","DefaultContactOrganisationView","primaryOccupations","chamberOfCommerceNumber","vatNumber","website","DefaultContactOrganisationEdit","ContactDetailsOrganisation","ValidationSchemaOrganisation","ContactDetails","setPortalSettings","callFetchContact","switchToView","updatedContact","setStatus","setState","hasError","ContactDetailsWithContext","MyAreasOfInterestForm","arrayHelpers","myAreasOfInterest","myAreaOfInterest","index","participation","generalOptions","generalOption","MyAreasOfInterest","amount","parseFloat","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","amountOptioned","participationsOptioned","transactionCosts","varAmountOptioned","toString","varParticipationsOptioned","toFixed","transactionCostsCodeRef","transactionCostsAmount","codeRef","currentBookWorth","transactionCostsAmount3","transactionCostsPercentage3","transactionCostsAmount2","transactionCostsPercentage2","transactionCostsPercentage","transactionCostsAmountMin","transactionCostsAmountMax","InputTextCurrency","StepOneLoan","next","contactProjectData","initialRegisterValues","handleSubmitRegisterValues","transform","originalvalue","minAmountLoan","maxAmountLoan","choiceMembership","showQuestionAboutMembership","belongsToMembershipGroup","calculateAmount","calculateTransactionCostsAmount","useTransactionCostsWithMembership","calculateTransactionCosts","calculateTotalAmount","totalAmount","Label","MoneyPresenter","textIsMemberMerged","textIsNoMemberMerged","textBecomeMemberMerged","textBecomeNoMemberMerged","textTransactionCosts","StepOneObligation","integer","minParticipations","max","maxParticipations","positive","StepOneCapital","StepOnePcr","pcrYearlyPowerKwhConsumption","pcrPostalCode","checkPostalcodeLink","postalcodeLink","substring","pcrNumberOfSolarPanels","pcrInputGeneratedNumberOfKwh","PCR_POWER_KWH_CONSUMPTION_PERCENTAGE","PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL","calculateEstimatedGeneratedNumberOfKwh","calculateGeneratedNumberOfKwh","calculatePowerKwhConsumption","powerKwhConsumption","pcrEstimatedGeneratedNumberOfKwh","Math","ceil","pcrAdviseMaxNumberOfParticipations","calculateAdviseMaxNumberOfParticipations","pcrHasSolarPanels","pcrEstimatedRevenueOk","StepTwo","previous","StepThree","didAcceptAgreement","didUnderstandInfo","dangerouslySetInnerHTML","__html","textAgreeTermsMerged","textLinkAgreeTermsMerged","textLinkUnderstandInfoMerged","usesMollie","ViewHtmlAsText","StepFour","setSucces","contactDocument","setContactDocument","didAgreeRegistration","contactDocumentOk","ParticipantProjectAPI","econobisPaymentLink","textAcceptAgreementMerged","textAcceptAgreementQuestionMerged","StepFive","textRegistrationFinishedMerged","split","item","Steps","currentStep","MasterForm","setStep","RegisterProject","initialPcrValues","setRegisterValues","setProject","isSucces","setContactProjectData","all","ProjectAPI","spread","payloadProject","payloadContact","payloadContactProjectData","projectRegisterIndicators","allowChangeParticipation","allowPayMollie","hasParticipation","allowRegisterToProject","nextStep","textNotAllowedRegisterToProject","RegisterProjectWithContext","PersonalAddressEdit","handleSubmitContactAddressValues","OrganisationAddressEdit","ProjectList","contactProjectsArray","setContactProjectsArray","sceOrPcrProjectsAvailable","setSceOrPcrProjectsAvailable","callFetchContactProjects","isSceOrPcrProject","noAddressesFound","responsive","administrationName","dateStartRegistrations","dateEndRegistrations","ProjectListWithContext","LoanDetails","amountOfLoanNeeded","description","ObligationDetails","totalParticipations","CapitalDetails","PcrDetails","ProjectDetails","renderDetails","linkProjectInfo","RegistrationList","dateEnd","amountInteressed","amountGranted","amountDefinitive","participationsInteressed","participationsGranted","participationsDefinitive","RegistrationListWithContext","personFirstName","personLastName","NewAccountFormPersonal","personTitleId","organisationName","NewAccountFormOrganisation","NewAccount","executeRecaptcha","useGoogleReCaptcha","contactType","setContactType","reCaptchaToken","ButtonToolbar","toggle","block","NewAccountWithProvider","reCaptchaKey","process","language","NewAccountSuccess","close","ChangeAccountEmail","portalUserEmail","setPortalUserEmail","changePrimaryEmailAddress","resetForm","handleSubmitChangeEmail","ChangeAccountPassword","handleSubmitChangePassword","ChangeAccount","INITIAL_STATE","result","reducer","action","AboutUs","useReducer","dispatch","RegistrationDetailsTitle","contactName","projectName","moneyPresenter","RegistrationDetailsProjectTable","fields","label","valueBasedOnTypePresenter","RegistrationDetailsMutationTable","participantMutations","participantMutation","classNameBasedOnTypePresenter","RegistrationDetails","basicInformation","FinancialOverviewDocuments","preventDefault","fileDownload","downloadFile","AboutUsAdministration","setAdministration","AdministrationAPI","Body","kvkNumber","iBAN","btwNumber","code","ProjectMollieRedirect","setParticipantMutation","ParticipantMutationAPI","payloadParticipantMutation","isPaidByMollie","textRegistrationFinished","ProjectMollieRedirectWithContext","App","exact","path","Login","hostname","ReactDOM","getElementById","remove","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a7537ae.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst AuthProvider = function(props) {\r\n    const [isAuth, setAuth] = useState(checkIfAuth());\r\n\r\n    function login(payload, cbRedirect) {\r\n        const token = payload.access_token;\r\n        window.localStorage.removeItem(localStorageCurrentSelectedContact);\r\n        window.localStorage.setItem(localStorageToken, token);\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n        setAuth(true);\r\n        cbRedirect();\r\n    }\r\n\r\n    function logout() {\r\n        window.localStorage.removeItem(localStorageToken);\r\n        window.localStorage.removeItem(localStorageLastActivity);\r\n        setAuth(false);\r\n    }\r\n\r\n    function checkIfAuth() {\r\n        const token = getToken();\r\n        if (!token) {\r\n            // Redirect to login\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getToken() {\r\n        return window.localStorage.getItem(localStorageToken);\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                isAuth: isAuth,\r\n                login: login,\r\n                logout: logout,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nconst AuthConsumer = AuthContext.Consumer;\r\n\r\nexport { AuthProvider, AuthConsumer };\r\n","import React, { createContext, useState } from 'react';\r\n\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst PortalUserContext = createContext({\r\n    user: {},\r\n    setInitialUserData: () => {},\r\n});\r\n\r\nconst PortalUserProvider = function(props) {\r\n    const [user, setUser] = useState({});\r\n    const [currentSelectedContact, setCurrentContact] = useState({});\r\n\r\n    function setInitialUserData(user) {\r\n        setUser(user);\r\n\r\n        const selectedContactId = window.localStorage.getItem(localStorageCurrentSelectedContact);\r\n\r\n        // When there is already a selected contact id then lookup the contact\r\n        // Selected contact could be the user or one of the occupations\r\n        if (selectedContactId) {\r\n            if (user.id == selectedContactId) {\r\n                setCurrentContact(user);\r\n            } else {\r\n                const occupationUser = user.occupations.find(\r\n                    occupation => occupation.primaryContact.id == selectedContactId\r\n                );\r\n\r\n                setCurrentContact(occupationUser.primaryContact);\r\n            }\r\n        } else {\r\n            // If there is no selected contact then set default the login user as selected contact.\r\n            // Except if the user has an organisation as occupation that is primary\r\n            const organisationUser = user.occupations.find(\r\n                occupation => occupation.primaryContact.typeId === 'organisation' && occupation.primary\r\n            );\r\n\r\n            if (organisationUser) {\r\n                setCurrentContact(organisationUser.primaryContact);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, organisationUser.primaryContact.id);\r\n            } else {\r\n                setCurrentContact(user);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, user.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    function switchCurrentContact(contact) {\r\n        setCurrentContact(contact);\r\n        window.localStorage.setItem(localStorageCurrentSelectedContact, contact.id);\r\n    }\r\n\r\n    function resetCurrentUserToDefault() {\r\n        setUser({});\r\n        setCurrentContact({});\r\n    }\r\n\r\n    function updateNameSelectedContact(fullNameFnf, typeId, firstName, lastNamePrefix, lastName) {\r\n        setCurrentContact({ ...currentSelectedContact, fullNameFnf, typeId, firstName, lastNamePrefix, lastName });\r\n\r\n        if (user.id === currentSelectedContact.id) {\r\n            user.fullNameFnf = fullNameFnf;\r\n            user.typeId = typeId;\r\n            user.firstName = firstName;\r\n            user.lastNamePrefix = lastNamePrefix;\r\n            user.lastName = lastName;\r\n        }\r\n\r\n        const updatedOccupations = user.occupations.map(occupationContact => {\r\n            if (occupationContact.primaryContact.id === currentSelectedContact.id) {\r\n                occupationContact.primaryContact.fullNameFnf = fullNameFnf;\r\n                occupationContact.primaryContact.typeId = typeId;\r\n                occupationContact.primaryContact.firstName = firstName;\r\n                occupationContact.primaryContact.lastNamePrefix = lastNamePrefix;\r\n                occupationContact.primaryContact.lastName = lastName;\r\n            }\r\n            return occupationContact;\r\n        });\r\n\r\n        setUser({ ...user, occupations: updatedOccupations });\r\n    }\r\n\r\n    return (\r\n        <PortalUserContext.Provider\r\n            value={{\r\n                user: user,\r\n                setInitialUserData,\r\n                currentSelectedContact,\r\n                switchCurrentContact,\r\n                resetCurrentUserToDefault,\r\n                updateNameSelectedContact,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </PortalUserContext.Provider>\r\n    );\r\n};\r\n\r\nconst PortalUserConsumer = PortalUserContext.Consumer;\r\n\r\nexport { PortalUserProvider, PortalUserConsumer, PortalUserContext };\r\n","import React, { createContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeSettingsContext = createContext({\r\n    defaultThemeSettings: {},\r\n    setInitialThemeSettings: () => {},\r\n    setCurrentThemeSettings: () => {},\r\n    switchToDefaultThemeSettings: () => {},\r\n});\r\n\r\nconst ThemeSettingsProvider = function(props) {\r\n    const [defaultThemeSettings, setDefaultThemeSettings] = useState({});\r\n    const [currentThemeSettings, setCurrentThemeSettings] = useState({});\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentThemeSettings.id) {\r\n                handleChangeCurrentThemeSettings();\r\n            }\r\n        },\r\n        [currentThemeSettings.id]\r\n    );\r\n\r\n    function setInitialThemeSettings(payload) {\r\n        setDefaultThemeSettings(payload);\r\n        setCurrentThemeSettings(payload);\r\n    }\r\n\r\n    function switchToDefaultThemeSettings() {\r\n        setCurrentThemeSettings(defaultThemeSettings);\r\n    }\r\n\r\n    function handleChangeCurrentThemeSettings() {\r\n        document.documentElement.style.setProperty(\r\n            '--main-header-background-image-url',\r\n            'url(images/' + currentThemeSettings.portal_image_bg_file_name_header + ')'\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-color',\r\n            currentThemeSettings.portal_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-text-color',\r\n            currentThemeSettings.portal_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-rgba',\r\n            currentThemeSettings.login_header_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-rgba-text-color',\r\n            currentThemeSettings.login_header_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-header-portal-icon-color',\r\n            currentThemeSettings.header_icons_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-secondary-color',\r\n            currentThemeSettings.login_field_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-secondary-text-color',\r\n            currentThemeSettings.login_field_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty('--button-primary-color', currentThemeSettings.button_color);\r\n        document.documentElement.style.setProperty(\r\n            '--button-primary-text-color',\r\n            currentThemeSettings.button_text_color\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ThemeSettingsContext.Provider\r\n            value={{\r\n                defaultThemeSettings,\r\n                setInitialThemeSettings,\r\n                setCurrentThemeSettings,\r\n                switchToDefaultThemeSettings,\r\n                currentThemeSettings,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ThemeSettingsContext.Provider>\r\n    );\r\n};\r\n\r\nconst ThemeSettingsConsumer = ThemeSettingsContext.Consumer;\r\n\r\nexport { ThemeSettingsProvider, ThemeSettingsConsumer, ThemeSettingsContext };\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { AuthConsumer } from '../../context/AuthContext';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport { ThemeSettingsConsumer } from '../../context/ThemeSettingsContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { FaHome, FaUser } from 'react-icons/fa';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nfunction Header({ location, history }) {\r\n    const [menuOpen, updateStateMenu] = useState(false);\r\n\r\n    // This keeps your state in sync with the opening/closing of the menu\r\n    // via the default means, e.g. clicking the X, pressing the ESC key etc.\r\n    function handleStateChange(state) {\r\n        updateStateMenu(state.isOpen);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function openMenu() {\r\n        updateStateMenu(true);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function closeMenu() {\r\n        updateStateMenu(false);\r\n    }\r\n\r\n    // This can be used to toggle the menu, e.g. when using a custom icon\r\n    // Tip: You probably want to hide either/both default icons if using a custom icon\r\n    // See https://github.com/negomi/react-burger-menu#custom-icons\r\n    function toggleMenu() {\r\n        updateStateMenu(!menuOpen);\r\n    }\r\n\r\n    function formatProfilePicName(currentSelectedContact) {\r\n        if (currentSelectedContact.typeId === 'person') {\r\n            return (\r\n                currentSelectedContact.firstName +\r\n                (currentSelectedContact.lastNamePrefix ? ' ' + currentSelectedContact.lastNamePrefix : '') +\r\n                (currentSelectedContact.firstName || currentSelectedContact.lastNamePrefix ? '<br>' : '') +\r\n                currentSelectedContact.lastName\r\n            );\r\n        } else if (currentSelectedContact.typeId === 'organisation') {\r\n            return currentSelectedContact.fullNameFnf.replace(/\\s(?=\\S*$)/, '<br>');\r\n        } else {\r\n            return '?';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hook that alerts clicks outside of the passed ref\r\n     */\r\n    function useOutsideAlerter(ref) {\r\n        /**\r\n         * Alert if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                updateStateMenu(false);\r\n            }\r\n        }\r\n\r\n        useEffect(() => {\r\n            // Bind the event listener\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n            return () => {\r\n                // Unbind the event listener on clean up\r\n                document.removeEventListener('mousedown', handleClickOutside);\r\n            };\r\n        });\r\n    }\r\n\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef);\r\n\r\n    function redirect(to) {\r\n        history.push(`/${to}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                <div className=\"header-portal\">\r\n                    <div className=\"profile-pic\">\r\n                        <PortalUserConsumer>\r\n                            {({ user, currentSelectedContact, switchCurrentContact, resetCurrentUserToDefault }) => {\r\n                                if (!user.occupations || user.occupations.length < 1) {\r\n                                    return <>{ReactHtmlParser(formatProfilePicName(currentSelectedContact))}</>;\r\n                                }\r\n\r\n                                return (\r\n                                    <Dropdown alignRight>\r\n                                        <Dropdown.Toggle style={{ marginTop: '0' }}>\r\n                                            {ReactHtmlParser(formatProfilePicName(currentSelectedContact))}\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                            <Dropdown.Header>Beheren van</Dropdown.Header>\r\n                                            <Dropdown.Item\r\n                                                onClick={() => {\r\n                                                    switchCurrentContact(user);\r\n                                                    redirect('dashboard');\r\n                                                }}\r\n                                                active={currentSelectedContact.id === user.id ? true : false}\r\n                                            >\r\n                                                {user.fullNameFnf}\r\n                                            </Dropdown.Item>\r\n                                            {user.occupations && user.occupations.length > 0\r\n                                                ? user.occupations.map(occupationContact =>\r\n                                                      (occupationContact.primaryContact.typeId === 'organisation' &&\r\n                                                          occupationContact.primary) ||\r\n                                                      (occupationContact.primaryContact.typeId === 'person' &&\r\n                                                          occupationContact.occupation.occupationForPortal) ? (\r\n                                                          <Dropdown.Item\r\n                                                              key={occupationContact.id}\r\n                                                              onClick={() => {\r\n                                                                  switchCurrentContact(\r\n                                                                      occupationContact.primaryContact\r\n                                                                  );\r\n                                                                  redirect('dashboard');\r\n                                                              }}\r\n                                                              active={\r\n                                                                  currentSelectedContact.id ===\r\n                                                                  occupationContact.primaryContact.id\r\n                                                              }\r\n                                                          >\r\n                                                              {occupationContact.primaryContact.fullNameFnf}\r\n                                                          </Dropdown.Item>\r\n                                                      ) : null\r\n                                                  )\r\n                                                : null}\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                );\r\n                            }}\r\n                        </PortalUserConsumer>\r\n                    </div>\r\n\r\n                    <Container>\r\n                        <Row>\r\n                            <Col xs={6}>\r\n                                <ThemeSettingsConsumer>\r\n                                    {({ currentThemeSettings }) => (\r\n                                        <div className=\"header-logo\">\r\n                                            {currentThemeSettings.portal_logo_file_name_header !== undefined && (\r\n                                                <Image\r\n                                                    src={`images/${currentThemeSettings.portal_logo_file_name_header}`}\r\n                                                />\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                </ThemeSettingsConsumer>\r\n                            </Col>\r\n                            <Col xs={6}>\r\n                                <div className=\"d-flex justify-content-end\">\r\n                                    {/* Hambuger menu */}\r\n                                    <div className=\"bm-burger-button text-center\" onClick={openMenu}>\r\n                                        <span>\r\n                                            <span className=\"bm-burger-bars bm-burger-bar-1\" />\r\n                                            <span className=\"bm-burger-bars bm-burger-bar-2\" />\r\n                                            <span className=\"bm-burger-bars bm-burger-bar-3\" />\r\n                                        </span>\r\n                                        <br />\r\n                                        <small style={{ fontSize: '10px', marginLeft: '-3.5px' }}>MENU</small>\r\n                                    </div>\r\n                                    {/* User switch menu */}\r\n                                    <AuthConsumer>\r\n                                        {({ logout }) => {\r\n                                            return (\r\n                                                <PortalUserConsumer>\r\n                                                    {({\r\n                                                        user,\r\n                                                        currentSelectedContact,\r\n                                                        switchCurrentContact,\r\n                                                        resetCurrentUserToDefault,\r\n                                                    }) => {\r\n                                                        return (\r\n                                                            <Dropdown alignRight>\r\n                                                                <Dropdown.Toggle\r\n                                                                    id={'account-dropdown'}\r\n                                                                    style={{ padding: '0', marginTop: '14px' }}\r\n                                                                >\r\n                                                                    <FaUser />\r\n                                                                    <br />\r\n                                                                    <small style={{ fontSize: '10px' }}>ACCOUNT</small>\r\n                                                                </Dropdown.Toggle>\r\n                                                                <Dropdown.Menu>\r\n                                                                    <Dropdown.Header>Ingelogd als</Dropdown.Header>\r\n                                                                    <Dropdown.Item disabled>\r\n                                                                        {user.fullNameFnf}\r\n                                                                    </Dropdown.Item>\r\n                                                                    <Dropdown.Item>\r\n                                                                        <Link\r\n                                                                            to={'/wijzig-inloggegevens'}\r\n                                                                            className={'dropdown-link'}\r\n                                                                        >\r\n                                                                            Wijzig inloggegevens\r\n                                                                        </Link>\r\n                                                                    </Dropdown.Item>\r\n                                                                    <Dropdown.Divider />\r\n                                                                    <Dropdown.Item\r\n                                                                        onClick={() => {\r\n                                                                            logout();\r\n                                                                            resetCurrentUserToDefault();\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        Log uit\r\n                                                                    </Dropdown.Item>\r\n                                                                </Dropdown.Menu>\r\n                                                            </Dropdown>\r\n                                                        );\r\n                                                    }}\r\n                                                </PortalUserConsumer>\r\n                                            );\r\n                                        }}\r\n                                    </AuthConsumer>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        {location.pathname !== '/' && location.pathname !== '/dashboard' ? (\r\n                            <div className=\"header-dashboard-button\">\r\n                                <Button className={'w-button'} onClick={() => history.push('/dashboard')}>\r\n                                    <FaHome />\r\n                                    &nbsp;Dashboard\r\n                                </Button>\r\n                            </div>\r\n                        ) : null}\r\n                    </Container>\r\n                </div>\r\n                {/* Sidebar menu */}\r\n                <Menu\r\n                    right\r\n                    width={'300px'}\r\n                    // noOverlay\r\n                    isOpen={menuOpen}\r\n                    onStateChange={state => handleStateChange(state)}\r\n                    customBurgerIcon={false}\r\n                >\r\n                    <div className={'sidebar-menu'}>\r\n                        <React.Fragment>\r\n                            <h6 className=\"heading in-menu\">MENU</h6>\r\n                            <Link\r\n                                to={'/inschrijvingen-projecten'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/inschrijvingen-projecten' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Huidige deelnames\r\n                            </Link>\r\n                            <Link\r\n                                to={'/gegevens'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/gegevens' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Gegevens\r\n                            </Link>\r\n                            <Link\r\n                                to={'/inschrijven-projecten'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/inschrijven-projecten' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Inschrijven projecten\r\n                            </Link>\r\n                            <PortalUserConsumer>\r\n                                {({\r\n                                    user,\r\n                                    currentSelectedContact,\r\n                                    switchCurrentContact,\r\n                                    resetCurrentUserToDefault,\r\n                                }) => {\r\n                                    if (currentSelectedContact && currentSelectedContact.hasFinancialOverviews) {\r\n                                        return (\r\n                                            <Link\r\n                                                to={'/waardestaat-documenten'}\r\n                                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                                    location.pathname === '/waardestaat-documenten' ? 'w--current' : ''\r\n                                                }`}\r\n                                                onClick={closeMenu}\r\n                                            >\r\n                                                Waardestaat\r\n                                            </Link>\r\n                                        );\r\n                                    }\r\n                                }}\r\n                            </PortalUserConsumer>\r\n                            <Link\r\n                                to={'/over-ons'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/over-ons' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Over ons\r\n                            </Link>\r\n                        </React.Fragment>\r\n                    </div>\r\n                </Menu>\r\n            </header>\r\n            {location.pathname !== '/' && location.pathname !== '/dashboard' ? (\r\n                <div className={'floating-action-button'}>\r\n                    <Button className={'w-button'} onClick={() => history.push('/dashboard')}>\r\n                        <FaHome />\r\n                        &nbsp;Dashboard\r\n                    </Button>\r\n                </div>\r\n            ) : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `${BASE_URL}`,\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function(config) {\r\n        // First check if token is expired or not\r\n        checkTokenExpiration();\r\n        // Do something before request is sent\r\n        const AUTH_TOKEN = 'Bearer ' + localStorage.getItem(localStorageToken);\r\n        config.headers.Authorization = AUTH_TOKEN;\r\n        return config;\r\n    },\r\n    function(error) {\r\n        // Do something with request error\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Check token expiration and redirect if token is expired\r\nfunction checkTokenExpiration() {\r\n    const lastActivity = moment(localStorage.getItem(localStorageLastActivity));\r\n\r\n    if (\r\n        !localStorage.getItem(localStorageLastActivity) ||\r\n        lastActivity.add('30', 'minutes').format() < moment().format()\r\n    ) {\r\n        if (window.location.hash !== '#/login' && window.location.hash !== '#/loguit') {\r\n            setTimeout(() => {\r\n                localStorage.removeItem(localStorageToken);\r\n                localStorage.removeItem(localStorageLastActivity);\r\n                window.location.reload();\r\n            }, 100);\r\n        }\r\n    } else {\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n    }\r\n}\r\n\r\nexport default axiosInstance;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchPortalUserDetails: function() {\r\n        const requestUrl = `/me`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'number',\r\n                        'fullNameFnf',\r\n                        'typeId',\r\n                        'firstName',\r\n                        'lastNamePrefix',\r\n                        'lastName',\r\n                        'hasFinancialOverviews',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'portalSettingsLayoutAssigned',\r\n                    ],\r\n                    rlt: {\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: {\r\n                                    fld: [\r\n                                        'id',\r\n                                        'typeId',\r\n                                        'fullNameFnf',\r\n                                        'firstName',\r\n                                        'lastNamePrefix',\r\n                                        'lastName',\r\n                                        'hasFinancialOverviews',\r\n                                    ],\r\n                                },\r\n                                contact: {\r\n                                    fld: ['id', 'typeId', 'fullNameFnf', 'firstName', 'lastNamePrefix', 'lastName'],\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchPortalUserEmail: function() {\r\n        return axiosInstance.get(`/portal-user-email`);\r\n    },\r\n\r\n    changeEmail: values => {\r\n        const requestUrl = `/portal-user/change-email`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n\r\n    changePassword: values => {\r\n        const requestUrl = `/portal-user/change-password`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n};\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { Route, Redirect, useLocation } from 'react-router-dom';\r\nimport { AuthConsumer } from '../context/AuthContext';\r\nimport Header from '../components/layout/Header';\r\nimport PortalUserAPI from '../api/portal-user/PortalUserAPI';\r\nimport { PortalUserConsumer } from '../context/PortalUserContext';\r\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\r\n\r\nconst ProtectedRoute = ({ component: Component, setInitialUserData, isAuth, ...rest }) => {\r\n    const location = useLocation();\r\n    const { setInitialThemeSettings, switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            (function callFetchPortalUserDetails() {\r\n                PortalUserAPI.fetchPortalUserDetails()\r\n                    .then(payload => {\r\n                        setInitialUserData(payload.data.data);\r\n                        setInitialThemeSettings(payload.data.data.portalSettingsLayoutAssigned);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    });\r\n            })();\r\n        }\r\n    }, [isAuth]);\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            if (\r\n                !location.pathname.includes('/project/') &&\r\n                !location.pathname.includes('/project-deelname/') &&\r\n                !location.pathname.includes('/inschrijven/') &&\r\n                !location.pathname.includes('/dashboard/')\r\n            ) {\r\n                switchToDefaultThemeSettings();\r\n            }\r\n        }\r\n    }, [location.pathname]);\r\n\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <div className=\"body-2\" id=\"body-2\">\r\n                    <Header />\r\n                    <Route render={props => (isAuth ? <Component {...props} /> : <Redirect to=\"/login\" />)} {...rest} />\r\n                </div>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n};\r\n\r\nexport default function ProtectedRouteWithContext(props) {\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <PortalUserConsumer>\r\n                    {({ setInitialUserData }) => (\r\n                        <ProtectedRoute {...props} setInitialUserData={setInitialUserData} isAuth={isAuth} />\r\n                    )}\r\n                </PortalUserConsumer>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Route, useLocation } from 'react-router-dom';\r\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => {\r\n    const location = useLocation();\r\n    const { switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    useEffect(() => {\r\n        switchToDefaultThemeSettings();\r\n    }, [location.pathname]);\r\n\r\n    return <Route render={props => <Component {...props} />} {...rest} />;\r\n};\r\n\r\nexport default PublicRoute;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst InputText = ({\r\n    field,\r\n    type,\r\n    className,\r\n    id,\r\n    readOnly,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <input\r\n                type={type}\r\n                className={`text-input w-input ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                readOnly={readOnly}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputText.defaultProps = {\r\n    type: 'text',\r\n    className: 'content',\r\n    readOnly: false,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputText.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputText;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ButtonText = ({\r\n    buttonClassName,\r\n    buttonText,\r\n    onClickAction,\r\n    type,\r\n    loading,\r\n    title,\r\n    loadingSpinnerColor,\r\n    disabled,\r\n}) => (\r\n    <Button\r\n        type={type}\r\n        className={`${buttonClassName}`}\r\n        onClick={onClickAction}\r\n        disabled={loading || disabled}\r\n        title={title}\r\n        size=\"sm\"\r\n    >\r\n        {loading ? <ClipLoader color={loadingSpinnerColor} size={17} /> : <span>{buttonText}</span>}\r\n    </Button>\r\n);\r\n\r\nButtonText.defaultProps = {\r\n    buttonClassName: '',\r\n    type: 'button',\r\n    title: '',\r\n    loading: false,\r\n    loadingSpinnerColor: 'white',\r\n    disabled: false,\r\n};\r\n\r\nButtonText.propTypes = {\r\n    buttonClassName: PropTypes.string,\r\n    buttonText: PropTypes.string.isRequired,\r\n    onClickAction: PropTypes.func,\r\n    type: PropTypes.string,\r\n    title: PropTypes.string,\r\n    loading: PropTypes.bool,\r\n    loadingSpinnerColor: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n};\r\n\r\nexport default ButtonText;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    password: Yup.string().required('Verplicht'),\r\n});\r\n\r\nconst LoginForm = function({ handleSubmit, login }) {\r\n    return (\r\n        <Formik\r\n            initialValues={{ username: '', password: '' }}\r\n            enableReinitialize={true}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                handleSubmit(values, actions, login);\r\n            }}\r\n            render={({ isSubmitting, errors, touched }) => {\r\n                return (\r\n                    <Form>\r\n                        <Field\r\n                            name=\"username\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"username\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={''}\r\n                                    placeholder={'Wachtwoord'}\r\n                                    type={'password'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <ButtonText\r\n                            buttonText={'Log in'}\r\n                            buttonClassName={'authorization-button'}\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                        />\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import axios from 'axios';\r\n\r\nconst AUTH_KEY = {\r\n    client_id: window.__SERVER_DATA__.client_id,\r\n    client_secret: window.__SERVER_DATA__.client_key,\r\n    grant_type: 'password',\r\n};\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\n\r\nexport default {\r\n    newAccount: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n    newAccountSuccess: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account-success`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    login: loginCredentials => {\r\n        const requestUrl = `${BASE_URL}/oauth/token`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, { ...AUTH_KEY, ...loginCredentials });\r\n    },\r\n\r\n    register: payload => {\r\n        const requestUrl = `${BASE_URL}/register`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    forgot: email => {\r\n        const requestUrl = `${BASE_URL}/password/email`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, email);\r\n    },\r\n\r\n    reset: payload => {\r\n        const requestUrl = `${BASE_URL}/password/reset`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nconst URL_PORTAL_SETTINGS = `setting`;\r\n\r\nexport default {\r\n    fetchPortalSettings: keys => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/multiple${keys}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchPortalActive: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/portal-active`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchCooperativeName: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/cooperative-name`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchShowNewAtCooperativeLink: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/show-new-at-cooperative-link`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchNewAtCooperativeLinkText: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/new-at-cooperative-link-text`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport LoginForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport PortalSettingsAPI from '../../../api/portal-settings/PortalSettingsAPI';\r\n\r\nexport default props => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = props.location.state || { from: { pathname: '/dashboard' } };\r\n\r\n    const [portalActive, setPortalActive] = useState(false);\r\n    const [showNewAtCooperativeLink, setShowNewAtCooperativeLink] = useState(false);\r\n    const [newAtCooperativeLinkText, setNewAtCooperativeLinkText] = useState('');\r\n\r\n    useEffect(() => {\r\n        (function callFetchPortalActive() {\r\n            PortalSettingsAPI.fetchPortalActive()\r\n                .then(payload => {\r\n                    setPortalActive(payload.data);\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setIsLoading(false);\r\n                });\r\n        })();\r\n\r\n        (function callFetchShowNewAtCooperativeLink() {\r\n            PortalSettingsAPI.fetchShowNewAtCooperativeLink()\r\n                .then(payload => {\r\n                    setShowNewAtCooperativeLink(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n\r\n        (function callFetchNewAtCooperativeLinkText() {\r\n            PortalSettingsAPI.fetchNewAtCooperativeLinkText()\r\n                .then(payload => {\r\n                    setNewAtCooperativeLinkText(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n\r\n    function handleSubmit(values, actions, login) {\r\n        AuthAPI.login(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                login(payload.data, () => toggleRedirect(true));\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <AuthConsumer>\r\n                    {({ isAuth, login }) => (\r\n                        <Container fluid className=\"authorization-container\">\r\n                            <Row className=\"justify-content-center align-content-center full-height\">\r\n                                <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\r\n                                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                                    {isLoading ? (\r\n                                        <React.Fragment>\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    Applicatie wordt geladen...\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    ) : !portalActive ? (\r\n                                        <React.Fragment>\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    Deze applicatie kan op dit moment niet gebruikt worden.\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    ) : !isLoading ? (\r\n                                        <React.Fragment>\r\n                                            <LoginForm handleSubmit={handleSubmit} login={login} />\r\n                                            {showError ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                        Gebruikte logingegevens zijn onjuist!\r\n                                                    </Alert>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Link to={'/wachtwoord-vergeten'} className=\"authorization-link\">\r\n                                                    Wachtwoord vergeten?\r\n                                                </Link>\r\n                                            </Row>\r\n                                            {showNewAtCooperativeLink ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <a\r\n                                                        href={'/#/nieuw-account'}\r\n                                                        className=\"authorization-link\"\r\n                                                        target=\"_blank\"\r\n                                                    >\r\n                                                        {newAtCooperativeLinkText}\r\n                                                    </a>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                        </React.Fragment>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    )}\r\n                </AuthConsumer>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { GoogleReCaptchaProvider, GoogleReCaptcha } from 'react-google-recaptcha-v3';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst RegisterForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <div className=\"mb-3\">\r\n                    <p className={'authorization-text'}>\r\n                        Stel je wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </div>\r\n                <Row>\r\n                    <Col>\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'authorization-text'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-2\">\r\n                        <Field\r\n                            name=\"passwordConfirmation\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"passwordConfirmation\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Herhaal nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'authorization-text mb-3'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"my-3\">\r\n                        <small className={'authorization-text'}>\r\n                            Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1\r\n                            hoofdletter bevatten.\r\n                        </small>\r\n                    </Col>\r\n                </Row>\r\n                <ButtonText\r\n                    buttonText={'Verzenden'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport RegisterForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst Register = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showLoginLink, setLoginLink] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const registrationCode = decodeURIComponent(match.params.registrationCode);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/dashboard' } };\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.register({\r\n            registrationCode,\r\n            email,\r\n            password: values.password,\r\n            password_confirmation: values.passwordConfirmation,\r\n        })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        setLoginLink(false);\r\n                        setErrorMessage('');\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        setLoginLink(true);\r\n                        setErrorMessage('Er is iets fout gegaan bij automatisch inloggen na activeren.');\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                console.log(error.response.status);\r\n                console.log(error.response.data.message);\r\n                toggleError(true);\r\n                if (\r\n                    error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message &&\r\n                    error.response.status === 423\r\n                ) {\r\n                    setLoginLink(true);\r\n                    setErrorMessage(error.response.data.message);\r\n                } else {\r\n                    setLoginLink(false);\r\n                    setErrorMessage(\r\n                        'Er is iets fout gegaan bij activeren. Controleer of de activatie link juist en volledig is.'\r\n                    );\r\n                }\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <h3 className={'authorization-text'}>Je account is geactiveerd</h3>\r\n                                    <p className={'authorization-text'}>Je bent nu ingelogd</p>\r\n                                    <ButtonText\r\n                                        buttonText={'Ga verder'}\r\n                                        onClickAction={toggleRedirect}\r\n                                        buttonClassName={'authorization-button'}\r\n                                        size=\"sm\"\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <h3 className={'authorization-text'}>Account activeren</h3>\r\n                                    {!showLoginLink ? <RegisterForm handleSubmit={handleSubmit} email={email} /> : null}\r\n                                    {showError ? (\r\n                                        <Row className={'justify-content-center align-content-center '}>\r\n                                            <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                {errorMessage}\r\n                                            </Alert>\r\n                                        </Row>\r\n                                    ) : null}\r\n                                </>\r\n                            )}\r\n                            {showLoginLink ? (\r\n                                <ButtonText\r\n                                    buttonText={'Ga naar loginscherm'}\r\n                                    onClickAction={toggleRedirect}\r\n                                    buttonClassName={'authorization-button'}\r\n                                    size=\"sm\"\r\n                                />\r\n                            ) : null}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function RegisterWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Register {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ForgotForm = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Field\r\n                    name=\"email\"\r\n                    render={({ field }) => (\r\n                        <InputText\r\n                            field={field}\r\n                            id=\"email\"\r\n                            className={''}\r\n                            placeholder={'E-mailadres'}\r\n                            errors={errors}\r\n                            touched={touched}\r\n                            // todo check waarom dit erin stond ?!\r\n                            // showErrorMessage={false}\r\n                        />\r\n                    )}\r\n                />\r\n                <ButtonText\r\n                    buttonText={showSuccessMessage ? 'E-mail is verstuurd!' : 'Verstuur wachtwoord reset link'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                    disabled={showSuccessMessage}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ForgotForm;\r\n","import React, { useState } from 'react';\r\n\r\nimport ForgotForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Forgot = props => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.forgot(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If forgot API fails show error and then set submitting back to false\r\n                // toggleError(true);\r\n                // If forgot API fails show succesmessage anyway\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                    {showSuccessMessage ? (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Als het e-mailadres bij ons bekend is, dan ontvang je binnen enkele minuten een\r\n                                    e-mail met een persoonlijke link. Via deze link kun je een nieuw wachtwoord\r\n                                    instellen.\r\n                                    <br />\r\n                                    Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van\r\n                                    bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of\r\n                                    je onze mail daar terug vindt.\r\n                                </p>\r\n                            </Row>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Wachtwoord vergeten</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Vul het e-mailadres in waarmee je inlogt en dat bij ons bekend is. Je ontvangt van\r\n                                    ons een e-mail waarmee je een nieuw wachtwoord kunt instellen.\r\n                                </p>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <Col xs={12} md={6}>\r\n                                    <ForgotForm handleSubmit={handleSubmit} showSuccessMessage={showSuccessMessage} />\r\n                                    {showError ? (\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            E-mailadres is niet bekend!\r\n                                        </Alert>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    )}\r\n                    <Row className={'justify-content-center '}>\r\n                        <Link to={'/login'} className=\"authorization-link\">\r\n                            Terug naar inloggen\r\n                        </Link>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Forgot;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ResetForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Row className=\"justify-content-center\">\r\n                    <p className={'authorization-text'}>\r\n                        Stel een nieuw wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"password\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"password\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'authorization-text'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"passwordConfirmation\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"passwordConfirmation\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Herhaal nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'authorization-text mb-3'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <small className={'authorization-text'}>\r\n                        Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1 hoofdletter\r\n                        bevatten.\r\n                    </small>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <ButtonText\r\n                        buttonText={'Verzenden'}\r\n                        buttonClassName={'authorization-button'}\r\n                        size=\"sm\"\r\n                        type={'submit'}\r\n                        loading={isSubmitting}\r\n                        loadingSpinnerColor={'#034b8c'}\r\n                    />\r\n                </Row>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ResetForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport ResetForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst Reset = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const token = decodeURIComponent(match.params.token);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/dashboard' } };\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.reset({ token, email, password: values.password, password_confirmation: values.passwordConfirmation })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'authorization-text'}>Je wachtwoord is ingesteld</h3>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <p className={'authorization-text'}>Je bent nu ingelogd</p>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <ButtonText\r\n                                            buttonText={'Ga verder'}\r\n                                            onClickAction={toggleRedirect}\r\n                                            buttonClassName={'authorization-button'}\r\n                                            size=\"sm\"\r\n                                        />\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'authorization-text'}>Wachtwoord wijzigen</h3>\r\n                                    </Row>\r\n                                    <ResetForm handleSubmit={handleSubmit} email={email} />\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function ResetWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Reset {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nfunction Loading() {\r\n    return (\r\n        <Row className=\"justify-content-center align-content-center flex-wrap\" style={{ height: '40vh' }}>\r\n            <ClipLoader color={'#3898EC'} size={48} />\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Loading;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n    fetchProjects: function() {\r\n        const requestUrl = `/jory/project`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: ['id', 'name', 'dateStartRegistrations', 'dateEndRegistrations'],\r\n                    flt: {\r\n                        and: [\r\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\r\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\r\n                        ],\r\n                    },\r\n                    rlt: {\r\n                        administration: { fld: ['id', 'name'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchProject: function(id) {\r\n        const requestUrl = `/jory/project/${id}`;\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'name',\r\n                        'description',\r\n                        'dateStartRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'minParticipations',\r\n                        'maxParticipations',\r\n                        'totalParticipations',\r\n                        'participationWorth',\r\n                        'currentBookWorth',\r\n                        'amountOfLoanNeeded',\r\n                        'minAmountLoan',\r\n                        'maxAmountLoan',\r\n                        'isSceProject',\r\n                        'checkPostalcodeLink',\r\n                        'postalcodeLink',\r\n                        'linkAgreeTerms',\r\n                        'linkProjectInfo',\r\n                        'linkUnderstandInfo',\r\n                        'showQuestionAboutMembership',\r\n                        'useTransactionCostsWithMembership',\r\n                        'usesMollie',\r\n                        'textTransactionCosts',\r\n                        'transactionCostsCodeRef',\r\n                        'transactionCostsAmountMin',\r\n                        'transactionCostsAmountMax',\r\n                        'transactionCostsAmount',\r\n                        'transactionCostsPercentage',\r\n                        'transactionCostsAmount2',\r\n                        'transactionCostsPercentage2',\r\n                        'transactionCostsAmount3',\r\n                        'transactionCostsPercentage3',\r\n                    ],\r\n                    flt: {\r\n                        and: [\r\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\r\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\r\n                        ],\r\n                    },\r\n                    rlt: {\r\n                        projectType: { fld: ['id', 'codeRef'] },\r\n                        administration: { fld: ['id', 'name', 'portalSettingsLayoutAssigned'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from '../project/ProjectAPI';\r\n\r\nexport default {\r\n    fetchContact: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullNameFnf',\r\n                        'firstName',\r\n                        'lastNamePrefix',\r\n                        'lastName',\r\n                        'hasFinancialOverviews',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'isParticipant',\r\n                        'disableChangeContactNameOnPortal',\r\n                        'noAddressesFound',\r\n                        'isParticipantPcrProject',\r\n                        'isParticipantSceProject',\r\n                        'blockChangeAddressNumber',\r\n                    ],\r\n                    rlt: {\r\n                        person: {\r\n                            fld: [\r\n                                'id',\r\n                                'firstName',\r\n                                'lastName',\r\n                                'initials',\r\n                                'titleId',\r\n                                'lastNamePrefix',\r\n                                'lastNamePrefixId',\r\n                                'dateOfBirth',\r\n                            ],\r\n                            rlt: {\r\n                                title: { fld: ['id', 'name'] },\r\n                            },\r\n                        },\r\n                        organisation: {\r\n                            fld: ['id', 'name', 'website', 'chamberOfCommerceNumber', 'vatNumber'],\r\n                        },\r\n                        emailAddresses: { fld: ['id', 'email', 'primary', 'typeId'] },\r\n                        phoneNumbers: { fld: ['id', 'number', 'primary', 'typeId'] },\r\n                        addresses: {\r\n                            fld: [\r\n                                'id',\r\n                                'street',\r\n                                'number',\r\n                                'addition',\r\n                                'postalCode',\r\n                                'city',\r\n                                'countryId',\r\n                                'primary',\r\n                                'typeId',\r\n                            ],\r\n                            rlt: {\r\n                                country: { fld: ['id', 'name'] },\r\n                            },\r\n                        },\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: {\r\n                                    fld: ['id', 'fullNameFnf'],\r\n                                },\r\n                            },\r\n                        },\r\n                        primaryContactEnergySupplier: {\r\n                            fld: [\r\n                                'id',\r\n                                'energySupplierId',\r\n                                'esNumber',\r\n                                'eanElectricity',\r\n                                'eanGas',\r\n                                'memberSince',\r\n                                'isCurrentSupplier',\r\n                            ],\r\n                            rlt: { energySupplier: [] },\r\n                            flt: {\r\n                                f: 'isCurrentSupplier',\r\n                                d: true,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchContactWithParticipants: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullNameFnf',\r\n                        'typeId',\r\n                        'firstName',\r\n                        'lastNamePrefix',\r\n                        'lastName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                    ],\r\n                    rlt: {\r\n                        participations: {\r\n                            fld: [\r\n                                'id',\r\n                                'dateRegister',\r\n                                'didAcceptAgreement',\r\n                                'dateDidAcceptAgreement',\r\n                                'didUnderstandInfo',\r\n                                'dateDidUnderstandInfo',\r\n                                'participationsDefinitive',\r\n                                'participationsGranted',\r\n                                'participationsOptioned',\r\n                                'participationsInteressed',\r\n                                'amountDefinitive',\r\n                                'amountGranted',\r\n                                'amountOptioned',\r\n                                'amountInteressed',\r\n                                'powerKwhConsumption',\r\n                            ],\r\n                            rlt: {\r\n                                project: {\r\n                                    fld: [\r\n                                        'id',\r\n                                        'name',\r\n                                        'dateEnd',\r\n                                        'linkProjectInfo',\r\n                                        'linkUnderstandInfo',\r\n                                        'showQuestionAboutMembership',\r\n                                        'usesMollie',\r\n                                    ],\r\n                                    rlt: {\r\n                                        projectType: { fld: ['id', 'codeRef'] },\r\n                                        administration: { fld: ['name'] },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    updateContact: contact => {\r\n        const requestUrl = `/contact/${contact.id}`;\r\n\r\n        return axiosInstance.post(requestUrl, contact);\r\n    },\r\n\r\n    previewDocument: registerValues => {\r\n        const requestUrl = `/contact/${registerValues.contactId}/${registerValues.projectId}/preview-document`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n\r\n    fetchContactProjects: function(contactId, projectId) {\r\n        const requestUrl = `/contact/${contactId}/contact-projects`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    fetchContactProjectData: function(contactId, projectId) {\r\n        const requestUrl = `/contact/${contactId}/${projectId}/contact-project-data`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    fetchContactFinancialOverviewDocuments: function(contactId) {\r\n        const requestUrl = `/contact/${contactId}/financial-overview-documents`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    financialOverviewContactDownload: function(id) {\r\n        const requestUrl = `/financial-overview-contact/${id}/download`;\r\n\r\n        return axiosInstance(requestUrl, { responseType: 'blob' });\r\n    },\r\n\r\n    fetchContactRelatedAdministrations: function(contactId) {\r\n        const requestUrl = `/contact/${contactId}/related-administrations`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","export default function(contactData) {\r\n    const typeContact = contactData.typeId ? contactData.typeId : null;\r\n\r\n    let emptyAddress = { street: '', number: '', addition: '', postalCode: '', city: '', countryId: null };\r\n    let primaryAddress = null;\r\n    let visitAddress = null;\r\n    let postalAddress = null;\r\n    let invoiceAddress = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            // Set primary address\r\n            primaryAddress = contactData.addresses.find(address => address.primary);\r\n            contactData.primaryAddress = primaryAddress ? { ...emptyAddress, ...primaryAddress } : emptyAddress;\r\n            break;\r\n        case 'organisation':\r\n            // Set visit, postal, invoice addresses\r\n            visitAddress = contactData.addresses.find(address => address.typeId === 'visit');\r\n            contactData.visitAddress = visitAddress ? { ...emptyAddress, ...visitAddress } : emptyAddress;\r\n            postalAddress = contactData.addresses.find(address => address.typeId === 'postal');\r\n            contactData.postalAddress = postalAddress ? { ...emptyAddress, ...postalAddress } : emptyAddress;\r\n            invoiceAddress = contactData.addresses.find(address => address.typeId === 'invoice');\r\n            contactData.invoiceAddress = invoiceAddress ? { ...emptyAddress, ...invoiceAddress } : emptyAddress;\r\n            break;\r\n    }\r\n\r\n    // Set correspondence email address\r\n    let emptyEmail = { email: '' };\r\n    const emailCorrespondence = contactData.emailAddresses.find(emailAddress => emailAddress.primary);\r\n    contactData.emailCorrespondence = emailCorrespondence ? { ...emptyEmail, ...emailCorrespondence } : emptyEmail;\r\n\r\n    // Set invoice email address\r\n    const emailInvoice = contactData.emailAddresses.find(\r\n        emailAddress => emailAddress.typeId === 'invoice' && !emailAddress.primary\r\n    );\r\n    contactData.emailInvoice = emailInvoice ? { ...emptyEmail, ...emailInvoice } : emptyEmail;\r\n\r\n    // Set primary phone number\r\n    let emptyPhoneNumber = { number: '' };\r\n    const phoneNumberPrimary = contactData.phoneNumbers.find(phoneNumber => phoneNumber.primary);\r\n    contactData.phoneNumberPrimary = phoneNumberPrimary\r\n        ? { ...emptyPhoneNumber, ...phoneNumberPrimary }\r\n        : emptyPhoneNumber;\r\n\r\n    // Set first phone number which is not primary\r\n    const phoneNumberTwo = contactData.phoneNumbers.filter(phoneNumber => !phoneNumber.primary)[0];\r\n    contactData.phoneNumberTwo = phoneNumberTwo ? { ...emptyPhoneNumber, ...phoneNumberTwo } : emptyPhoneNumber;\r\n\r\n    // Set primary contact energy supplier\r\n    let emptyPrimaryContactEnergySupplier = {\r\n        energySupplierId: null,\r\n        esNumber: '',\r\n        eanElectricity: '',\r\n        memberSince: '',\r\n        eanGas: '',\r\n    };\r\n    if (!contactData.primaryContactEnergySupplier) {\r\n        contactData.primaryContactEnergySupplier = emptyPrimaryContactEnergySupplier;\r\n    }\r\n    return contactData;\r\n}\r\n","import { Card, CardImg } from 'react-bootstrap';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst DashboardWidget = function({ id, title, text, image, buttonText, buttonLink }) {\r\n    const history = useHistory();\r\n    const key = 'widget-' + id;\r\n\r\n    let externalLink = null;\r\n    if (buttonLink.toLowerCase().startsWith('www')) {\r\n        externalLink = 'https://' + buttonLink;\r\n    } else if (buttonLink.toLowerCase().startsWith('http') || buttonLink.toLowerCase().startsWith('https')) {\r\n        externalLink = buttonLink;\r\n    }\r\n\r\n    return (\r\n        <Card key={key} id={key} style={{ marginTop: '30px' }}>\r\n            <CardImg src={image && image.includes('images/') ? image : 'images/' + image} variant={'top'} />\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{title}</h5>\r\n                <p className=\"card-text\" style={{ whiteSpace: 'break-spaces' }}>\r\n                    {text}\r\n                </p>\r\n                {externalLink === null ? (\r\n                    <button className=\"w-button btn btn-primary btn-sm\" onClick={() => history.push(buttonLink)}>\r\n                        {buttonText}\r\n                    </button>\r\n                ) : (\r\n                    <a href={externalLink} target=\"_blank\">\r\n                        <button className=\"w-button btn btn-primary btn-sm\">{buttonText}</button>\r\n                    </a>\r\n                )}\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default DashboardWidget;\r\n","import { Button, Card } from 'react-bootstrap';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { isEmpty } from 'lodash';\r\n\r\nexport const ContactDetailsDashboardWidget = function({ contact }) {\r\n    const history = useHistory();\r\n    const key = 'widget-' + 'contact-details';\r\n\r\n    const typeContact = contact.typeId ? contact.typeId : null;\r\n\r\n    return (\r\n        <Card key={key} id={key}>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{contact.fullNameFnf}</h5>\r\n                <div className=\"card-text\">\r\n                    {typeContact === 'person' ? (\r\n                        <>\r\n                            {contact.primaryAddress !== undefined ? (\r\n                                <div>\r\n                                    <b>Adres</b>\r\n                                    <br />\r\n                                    {contact.primaryAddress.street} {contact.primaryAddress.number}\r\n                                    <br />\r\n                                    {contact.primaryAddress.postalCode} {contact.primaryAddress.city},{' '}\r\n                                    {contact.primaryAddress.country ? contact.primaryAddress.country.name : ''}\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                        </>\r\n                    ) : null}\r\n                    {typeContact === 'organisation' ? (\r\n                        <>\r\n                            {contact.visitAddress !== undefined ? (\r\n                                <div>\r\n                                    <b>Bezoekadres</b>\r\n                                    <br />\r\n                                    {contact.visitAddress.street} {contact.visitAddress.number}\r\n                                    <br />\r\n                                    {contact.visitAddress.postalCode} {contact.visitAddress.city},{' '}\r\n                                    {contact.visitAddress.country ? contact.visitAddress.country.name : ''}\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                            {contact.postalAddress !== undefined &&\r\n                            contact.postalAddress &&\r\n                            !isEmpty(contact.postalAddress.postalCode) ? (\r\n                                <div>\r\n                                    <b>Postadres</b>\r\n                                    <br />\r\n                                    {contact.postalAddress.street} {contact.postalAddress.number}\r\n                                    <br />\r\n                                    {contact.postalAddress.postalCode} {contact.postalAddress.city},{' '}\r\n                                    {contact.postalAddress.country ? contact.postalAddress.country.name : ''}\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                            {contact.invoiceAddress !== undefined &&\r\n                            contact.invoiceAddress &&\r\n                            !isEmpty(contact.invoiceAddress.postalCode) ? (\r\n                                <div>\r\n                                    <b>Nota adres</b>\r\n                                    <br />\r\n                                    {contact.invoiceAddress.street} {contact.invoiceAddress.number}\r\n                                    <br />\r\n                                    {contact.invoiceAddress.postalCode} {contact.invoiceAddress.city},{' '}\r\n                                    {contact.invoiceAddress.country ? contact.invoiceAddress.country.name : ''}\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                        </>\r\n                    ) : null}\r\n\r\n                    <div>\r\n                        <br />\r\n                        <b>Telefoon</b>\r\n                        <br />\r\n                        {contact.phoneNumberPrimary.number}\r\n                    </div>\r\n                    <div>\r\n                        <br />\r\n                        <b>E-mail</b>\r\n                        <br />\r\n                        {contact.emailCorrespondence.email}\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <button className=\"w-button btn btn-primary btn-sm\" onClick={() => history.push('/gegevens')}>\r\n                    Gegevens beheren\r\n                </button>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport const SwitchContactDashboardWidget = function({ user, currentSelectedContact, switchCurrentContact }) {\r\n    const history = useHistory();\r\n    const key = 'widget-' + 'switch-contact';\r\n\r\n    return (\r\n        <Card key={key} id={key}>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Wissel van contact</h5>\r\n                <div\r\n                    className=\"card-text\"\r\n                    style={{ display: 'flex', justifyContent: 'space-between', overflowX: 'auto' }}\r\n                >\r\n                    {user.occupations && user.occupations.length > 0 ? (\r\n                        <>\r\n                            <Button\r\n                                className=\"w-button btn btn-primary btn-sm\"\r\n                                key={'user-' + user.id}\r\n                                id={'user-' + user.id}\r\n                                onClick={() => {\r\n                                    switchCurrentContact(user);\r\n                                }}\r\n                                disabled={currentSelectedContact.id === user.id}\r\n                                style={{ margin: '5px' }}\r\n                            >\r\n                                {user.fullNameFnf}\r\n                            </Button>\r\n                            {user.occupations.map(occupationContact =>\r\n                                (occupationContact.primaryContact.typeId === 'organisation' &&\r\n                                    occupationContact.primary) ||\r\n                                (occupationContact.primaryContact.typeId === 'person' &&\r\n                                    occupationContact.occupation.occupationForPortal) ? (\r\n                                    <Button\r\n                                        className=\"w-button btn btn-primary btn-sm\"\r\n                                        key={'user-' + occupationContact.primaryContact.id}\r\n                                        id={'user-' + occupationContact.primaryContact.id}\r\n                                        onClick={() => {\r\n                                            switchCurrentContact(occupationContact.primaryContact);\r\n                                        }}\r\n                                        disabled={currentSelectedContact.id === occupationContact.primaryContact.id}\r\n                                        style={{ margin: '5px' }}\r\n                                    >\r\n                                        {occupationContact.primaryContact.fullNameFnf}\r\n                                    </Button>\r\n                                ) : null\r\n                            )}\r\n                        </>\r\n                    ) : null}\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nconst URL_PORTAL_SETTINGS_DASHBOARD = `setting-dashboard`;\r\n\r\nexport default {\r\n    fetchDashboardSettings: keys => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS_DASHBOARD}/multiple${keys}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport DashboardWidget from './widget';\r\nimport { ContactDetailsDashboardWidget, SwitchContactDashboardWidget } from './widget/default';\r\nimport DashboardSettingsAPI from '../../api/dashboard/DashboardSettingsAPI';\r\nimport { isEmpty } from 'lodash';\r\n\r\nconst Dashboard = function(props) {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [contact, setContact] = useState({});\r\n    const [dashboardSettings, setDashboardSettings] = useState({});\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n                props.updateNameSelectedContact(\r\n                    contactData.fullNameFnf,\r\n                    contactData.typeId,\r\n                    contactData.firstName,\r\n                    contactData.lastNamePrefix,\r\n                    contactData.lastName\r\n                );\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            })\r\n            .finally(() => callFetchDashboardSettings());\r\n    }\r\n\r\n    function callFetchDashboardSettings() {\r\n        setLoading(true);\r\n        const keys = '?keys[]=welcomeTitle&keys[]=welcomeMessage&keys[]=widgets';\r\n        DashboardSettingsAPI.fetchDashboardSettings(keys)\r\n            .then(payload => {\r\n                setDashboardSettings(payload.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <div className=\"content-container w-container\">\r\n                    <Row>\r\n                        <Col>\r\n                            {!isEmpty(dashboardSettings.welcomeTitle) ? (\r\n                                <h1 className=\"content-heading mt-0 text-center\">{dashboardSettings.welcomeTitle}</h1>\r\n                            ) : null}\r\n                            {!isEmpty(dashboardSettings.welcomeMessage) ? (\r\n                                <p className={'text-center'} style={{ whiteSpace: 'break-spaces' }}>\r\n                                    {dashboardSettings.welcomeMessage}\r\n                                </p>\r\n                            ) : null}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        {dashboardSettings.widgets\r\n                            .filter(w => w.active)\r\n                            .sort((a, b) => (a.order > b.order ? 1 : -1))\r\n                            .map(widget => (\r\n                                <Col md={6}>\r\n                                    <DashboardWidget\r\n                                        id={widget.id}\r\n                                        image={widget.image}\r\n                                        title={widget.title}\r\n                                        text={widget.text}\r\n                                        buttonText={widget.buttonText}\r\n                                        buttonLink={widget.buttonLink}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <ContactDetailsDashboardWidget contact={contact} />\r\n                        </Col>\r\n                        <PortalUserConsumer>\r\n                            {({ user, currentSelectedContact, switchCurrentContact }) => {\r\n                                if (user.occupations && user.occupations.length > 0) {\r\n                                    return (\r\n                                        <Col md={6}>\r\n                                            <SwitchContactDashboardWidget\r\n                                                user={user}\r\n                                                currentSelectedContact={currentSelectedContact}\r\n                                                switchCurrentContact={switchCurrentContact}\r\n                                            />\r\n                                        </Col>\r\n                                    );\r\n                                }\r\n                            }}\r\n                        </PortalUserConsumer>\r\n                    </Row>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default function DashboardWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ user, currentSelectedContact, updateNameSelectedContact }) => (\r\n                <Dashboard\r\n                    {...props}\r\n                    user={user}\r\n                    currentSelectedContact={currentSelectedContact}\r\n                    updateNameSelectedContact={updateNameSelectedContact}\r\n                />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TextBlock = ({ children, className, id, placeholder }) => {\r\n    const showPlaceholder = children === '' || children === null || children === undefined;\r\n\r\n    return (\r\n        <div className={`text-block ${className} ${showPlaceholder ? 'placeholder' : ''}`} id={id}>\r\n            {showPlaceholder ? <div className={'placeholder-message'}>{placeholder}</div> : children}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextBlock.defaultProps = {\r\n    className: 'text-block',\r\n    id: '',\r\n    children: '',\r\n    placeholder: '',\r\n};\r\n\r\nTextBlock.propTypes = {\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    placeholder: PropTypes.string,\r\n};\r\n\r\nexport default TextBlock;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactPersonalView({ portalSettings, initialContact }) {\r\n    const {\r\n        person = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        primaryAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n        primaryContactEnergySupplier,\r\n    } = initialContact;\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Naam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Aanhef'}>\r\n                        {person.title ? person.title.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Initialen'}>\r\n                        {person.initials}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Voornaam'}>\r\n                        {person.firstName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Tussenvoegsel'}>\r\n                        {person.lastNamePrefix}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Achternaam'}>\r\n                        {person.lastName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Geboortedatum</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6 col-md-4'} placeholder={'Geboortedatum'}>\r\n                        {person.dateOfBirth ? moment(person.dateOfBirth).format('L') : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {primaryAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {primaryAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {primaryAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {primaryAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {primaryAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {primaryAddress.country ? primaryAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? (\r\n                                <em>({dateDidAgreeAvg ? ' ' + moment(dateDidAgreeAvg).format('L') : ''})</em>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {primaryContactEnergySupplier.energySupplier\r\n                            ? primaryContactEnergySupplier.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                {primaryContactEnergySupplier && primaryContactEnergySupplier.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {primaryContactEnergySupplier.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {primaryContactEnergySupplier.memberSince\r\n                                    ? moment(primaryContactEnergySupplier.memberSince).format('L')\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                                {primaryContactEnergySupplier.eanElectricity}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                                {primaryContactEnergySupplier.eanGas}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactPersonalView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst Select = ({\r\n    field,\r\n    className,\r\n    id,\r\n    options,\r\n    optionLabel,\r\n    emptyOption,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n}) => {\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <select\r\n                className={`select-field w-select content ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                disabled={disabled}\r\n            >\r\n                {emptyOption ? <option value=\"\">{placeholder ? `-- ${placeholder} --` : ''}</option> : null}\r\n                {options.map(option => {\r\n                    return (\r\n                        <option key={option.id} value={option.id}>\r\n                            {option[optionLabel]}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </>\r\n    );\r\n};\r\n\r\nSelect.defaultProps = {\r\n    className: '',\r\n    readOnly: false,\r\n    required: '',\r\n    optionLabel: 'name',\r\n    emptyOption: true,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nSelect.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    options: PropTypes.array.isRequired,\r\n    optionLabel: PropTypes.string,\r\n    emptyOption: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default Select;\r\n","export default [\r\n    { id: 'AU', name: 'Australië' },\r\n    { id: 'BE', name: 'België' },\r\n    { id: 'CA', name: 'Canade' },\r\n    { id: 'DK', name: 'Denemarken' },\r\n    { id: 'DE', name: 'Duitsland' },\r\n    { id: 'FI', name: 'Finland' },\r\n    { id: 'FR', name: 'Frankrijk' },\r\n    { id: 'IE', name: 'Ierland' },\r\n    { id: 'IT', name: 'Italië' },\r\n    { id: 'LU', name: 'Luxemburg' },\r\n    { id: 'NL', name: 'Nederland' },\r\n    { id: 'NZ', name: 'Nieuw-Zeeland' },\r\n    { id: 'NO', name: 'Noorwegen' },\r\n    { id: 'AT', name: 'Oostenrijk' },\r\n    { id: 'PL', name: 'Polen' },\r\n    { id: 'PT', name: 'Portugal' },\r\n    { id: 'ES', name: 'Spanje' },\r\n    { id: 'CZ', name: 'Tsjechië' },\r\n    { id: 'GB', name: 'Verenigd Koninkrijk' },\r\n    { id: 'VS', name: 'Verenigde Staten' },\r\n    { id: 'SE', name: 'Zweden' },\r\n    { id: 'CH', name: 'Zwitserland' },\r\n];\r\n","export default [\r\n    { id: 26, name: 'Agem' },\r\n    { id: 27, name: 'Anode Energie' },\r\n    { id: 24, name: 'Betuwe stroom' },\r\n    { id: 2, name: 'Budget Energie' },\r\n    { id: 58, name: 'CEN / WoonEnergie' },\r\n    { id: 54, name: 'Clean Energy' },\r\n    { id: 28, name: 'De Groene Stroomfabriek' },\r\n    { id: 59, name: 'De Vrije Energie Producent' },\r\n    { id: 25, name: 'Delta Energie' },\r\n    { id: 50, name: 'DGB Energie' },\r\n    { id: 51, name: 'Discount Energie' },\r\n    { id: 46, name: 'Dorpstroom' },\r\n    { id: 53, name: 'DVEP Energie' },\r\n    { id: 3, name: 'E.on' },\r\n    { id: 45, name: 'Easyenergy' },\r\n    { id: 4, name: 'Eneco' },\r\n    { id: 19, name: 'Energie VanOns' },\r\n    { id: 49, name: 'Energie Zero' },\r\n    { id: 42, name: 'Energiebesteding' },\r\n    { id: 5, name: 'Energiedirect' },\r\n    { id: 21, name: 'Energieflex' },\r\n    { id: 37, name: 'Energyhouse' },\r\n    { id: 52, name: 'EnerZie' },\r\n    { id: 6, name: 'Engie' },\r\n    { id: 7, name: 'Essent' },\r\n    { id: 35, name: 'Fenor energie' },\r\n    { id: 60, name: 'Gazprom' },\r\n    { id: 56, name: 'Gezinsenergie' },\r\n    { id: 8, name: 'Greenchoice' },\r\n    { id: 43, name: 'GreenNL' },\r\n    { id: 40, name: 'Groenpand' },\r\n    { id: 44, name: 'Hezelaer' },\r\n    { id: 9, name: 'Holland Wind' },\r\n    { id: 33, name: 'Holthausen Clean Energy (HCE)' },\r\n    { id: 20, name: 'Huismerk Energie' },\r\n    { id: 30, name: 'HVC Kringloop Energie' },\r\n    { id: 23, name: 'Innova Energie' },\r\n    { id: 10, name: 'Main energie' },\r\n    { id: 61, name: 'Nieuw Hollands Energiebedrijf' },\r\n    { id: 38, name: 'NieuweStroom' },\r\n    { id: 12, name: 'NL Energie' },\r\n    { id: 1, name: 'OM' },\r\n    { id: 18, name: 'Overig' },\r\n    { id: 14, name: 'Oxxio' },\r\n    { id: 39, name: 'ParkStroom' },\r\n    { id: 62, name: 'PostcodeStroom' },\r\n    { id: 36, name: 'Power peers' },\r\n    { id: 15, name: 'Pure energy' },\r\n    { id: 63, name: 'PZEM' },\r\n    { id: 16, name: 'Qurrent' },\r\n    { id: 48, name: 'Qwint' },\r\n    { id: 55, name: 'Samsam' },\r\n    { id: 31, name: 'Sepa Green' },\r\n    { id: 32, name: 'Servicehouse' },\r\n    { id: 34, name: 'Total' },\r\n    { id: 22, name: 'United Consumers' },\r\n    { id: 17, name: 'VanDeBron' },\r\n    { id: 13, name: 'Vattenfall' },\r\n    { id: 64, name: 'Vrij Op Naam' },\r\n    { id: 47, name: 'Welkom Energie' },\r\n    { id: 41, name: 'Windcentrale' },\r\n    { id: 57, name: 'Onbekend' },\r\n];\r\n","export default [\r\n    { id: 0, name: '' },\r\n    { id: 1, name: 'Dhr' },\r\n    { id: 2, name: 'Mevr' },\r\n    { id: 3, name: 'De heer, Mevrouw' },\r\n    { id: 4, name: 'Familie' },\r\n    { id: 5, name: 'De heer of mevrouw' },\r\n    { id: 6, name: 'De heren' },\r\n    { id: 7, name: 'De dames' },\r\n    { id: 8, name: 'Erven' },\r\n];\r\n","export default [\r\n    { id: 0, name: '' },\r\n    { id: 1, name: 'van' },\r\n    { id: 2, name: 'de' },\r\n    { id: 3, name: 'van der' },\r\n    { id: 4, name: 'van de' },\r\n    { id: 5, name: 'van den' },\r\n    { id: 6, name: 'den' },\r\n    { id: 7, name: 'ten' },\r\n    { id: 8, name: 'ter' },\r\n    { id: 9, name: 'te' },\r\n    { id: 10, name: \"van 't\" },\r\n    { id: 11, name: 'el' },\r\n    { id: 12, name: 'le' },\r\n    { id: 13, name: 'van het' },\r\n    { id: 14, name: \"in 't\" },\r\n    { id: 15, name: \"'t\" },\r\n    { id: 16, name: 'von' },\r\n    { id: 17, name: 'du' },\r\n    { id: 18, name: 'da' },\r\n    { id: 19, name: 'de la' },\r\n    { id: 20, name: 'la' },\r\n    { id: 21, name: 'der' },\r\n    { id: 22, name: 'van ter' },\r\n    { id: 23, name: \"op 't\" },\r\n    { id: 24, name: 'op den' },\r\n    { id: 25, name: 'op ten' },\r\n    { id: 26, name: 'op de' },\r\n];\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport MomentLocaleUtils, { formatDate, parseDate } from 'react-day-picker/moment';\r\nimport moment from 'moment';\r\nimport { get } from 'lodash';\r\n\r\nconst InputDate = ({\r\n    className,\r\n    id,\r\n    value,\r\n    required,\r\n    readOnly,\r\n    name,\r\n    onChangeAction,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n}) => {\r\n    const handleDayChange = date => {\r\n        // Convert date in correct value for database\r\n        const formattedDate = date ? moment(date).format('Y-MM-DD') : '';\r\n\r\n        onChangeAction(name, formattedDate);\r\n    };\r\n\r\n    const formattedDate = value ? moment(value).format('L') : '';\r\n\r\n    return (\r\n        <>\r\n            {get(errors, name, '') && get(touched, name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, name, '')}</small>\r\n            ) : null}\r\n            <DayPickerInput\r\n                id={id}\r\n                value={formattedDate}\r\n                onDayChange={handleDayChange}\r\n                formatDate={formatDate}\r\n                parseDate={parseDate}\r\n                dayPickerProps={{\r\n                    showWeekNumbers: true,\r\n                    locale: 'nl',\r\n                    firstDayOfWeek: 1,\r\n                    localeUtils: MomentLocaleUtils,\r\n                }}\r\n                inputProps={{\r\n                    className: `text-input content w-input ${className} ${\r\n                        Boolean(get(errors, name, '') && get(touched, name, '')) ? 'has-error mb-0' : ''\r\n                    } `,\r\n                    name: name,\r\n                    autoComplete: 'off',\r\n                    readOnly: readOnly,\r\n                    disabled: readOnly,\r\n                    placeholder: placeholder,\r\n                }}\r\n                required={required}\r\n                readOnly={readOnly}\r\n                placeholder={''}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputDate.defaultProps = {\r\n    className: '',\r\n    required: '',\r\n    readOnly: false,\r\n    value: null,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputDate.propTypes = {\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    onChangeAction: PropTypes.func,\r\n    required: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputDate;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport InputDate from '../../../components/form/InputDate';\r\nimport { FaInfoCircle } from 'react-icons/fa';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst DefaultContactPersonalEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.titleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={6}>\r\n                        {initialContact.disableChangeContactNameOnPortal ? (\r\n                            <>\r\n                                <FaInfoCircle\r\n                                    color={'blue'}\r\n                                    size={'15px'}\r\n                                    data-tip={\r\n                                        'Je neemt deel aan een project waarvan de deelnemingen op naam zijn uitgegeven.<br />' +\r\n                                        'Daarom kun je jouw naam niet zelf wijzigen.<br />' +\r\n                                        'Overige contactgegevens kun je wel zelf aanpassen.<br />' +\r\n                                        'Een wijziging van rekeningnummer wordt door ons gecontroleerd.<br />' +\r\n                                        'Heb je vragen of wil je jouw gegevens door de beheerder laten wijzigen?<br />' +\r\n                                        'Kijk in het menu onder \"Over ons\" voor contact gegevens.'\r\n                                    }\r\n                                    data-for={`contact-${initialContact.id}`}\r\n                                />\r\n                                <ReactTooltip\r\n                                    id={`contact-${initialContact.id}`}\r\n                                    effect=\"float\"\r\n                                    place=\"right\"\r\n                                    multiline={true}\r\n                                    aria-haspopup=\"true\"\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.initials\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"initials\"\r\n                                    placeholder={'Initialen'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.firstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name\"\r\n                                    placeholder={'Voornaam'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.lastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.lastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name\"\r\n                                    placeholder={'Achternaam'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel\r\n                    htmlFor=\"date_of_birth\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Geboortedatum\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.dateOfBirth\"\r\n                            render={({ field }) => (\r\n                                <InputDate\r\n                                    {...field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    onChangeAction={setFieldValue}\r\n                                    id=\"date_of_birth\"\r\n                                    placeholder={'Geboortedatum'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Adres\r\n                    {initialContact.blockChangeAddressNumber ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode en huisnummer is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied met huisnummerreeks`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"primaryAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                    disabled={initialContact.blockChangeAddressNumber}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                    disabled={initialContact.blockChangeAddressNumber}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={\r\n                                        initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"primaryContactEnergySupplier.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            // disabled={\r\n                                            //     initialContact.primaryContactEnergySupplier &&\r\n                                            //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                            //     initialContact.isParticipant\r\n                                            // }\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.primaryContactEnergySupplier && values.primaryContactEnergySupplier.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.esNumber &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                    // readOnly={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.memberSince\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel\r\n                                    htmlFor=\"ean_electricity\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    EAN nummer electriciteit\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanElectricity\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_electricity\"\r\n                                                    placeholder={'EAN nummer electriciteit'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanElectricity &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                                    EAN nummer gas\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanGas\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_gas\"\r\n                                                    placeholder={'EAN nummer gas'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanGas\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactPersonalEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        // TODO set more correct values for validation, only important fields are set now\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        person: Yup.object().shape({\r\n            lastName: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        person: Yup.object().shape({\r\n            firstName: Yup.string()\r\n                .trim()\r\n                // .required('Verplicht'),\r\n                .test('initials-and-first-name-check', 'Voornaam of initialen verplicht', function(value) {\r\n                    if (value.trim() != '' || this.parent.initials.trim() != '') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }),\r\n            dateOfBirth: Yup.date()\r\n                .typeError('Verplicht of ongeldige datum')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht')\r\n            .test('iban', 'Ongeldige IBAN of gebruik geen spaties.', value => ibantools.isValidIBAN(value)),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            energySupplierId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            esNumber: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPostalCodeAndNumber: Yup.object().shape({\r\n        primaryAddress: Yup.object().shape({\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactPersonalView from './default-form-personal/View';\r\nimport DefaultContactPersonalEdit from './default-form-personal/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from './../../helpers/ValidationSchemaPersonal';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsPersonal({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaPersonal.validationSchemaBasic\r\n              .concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n              .concat(ValidationSchemaPersonal.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaPersonal.validationSchemaBasic.concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n        : ValidationSchemaPersonal.validationSchemaBasic;\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactPersonalView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsPersonal;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactOrganisationView({ portalSettings, initialContact }) {\r\n    const {\r\n        organisation = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        visitAddress,\r\n        postalAddress,\r\n        invoiceAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n        primaryContactEnergySupplier,\r\n        primaryOccupations,\r\n    } = initialContact;\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Bedrijfsnaam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Bedrijfsnaam'}>\r\n                        {organisation.name}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'KvK'}>\r\n                        {organisation.chamberOfCommerceNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'BTW nummer'}>\r\n                        {organisation.vatNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Website'}>\r\n                        {organisation.website}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? <em>({dateDidAgreeAvg ? moment(dateDidAgreeAvg).format('L') : ''})</em> : ''}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Bezoekadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {visitAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {visitAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {visitAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {visitAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {visitAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {visitAddress.country ? visitAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Postadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {postalAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {postalAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {postalAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {postalAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {postalAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {postalAddress.country ? postalAddress.country.name : ''}\r\n                    </TextBlock>{' '}\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Nota adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {invoiceAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {invoiceAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {invoiceAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {invoiceAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {invoiceAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {invoiceAddress.country ? invoiceAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {primaryContactEnergySupplier.energySupplier\r\n                            ? primaryContactEnergySupplier.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                {primaryContactEnergySupplier && primaryContactEnergySupplier.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {primaryContactEnergySupplier.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {primaryContactEnergySupplier.memberSince\r\n                                    ? moment(primaryContactEnergySupplier.memberSince).format('L')\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                                {primaryContactEnergySupplier.eanElectricity}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                                {primaryContactEnergySupplier.eanGas}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n\r\n                {/*<FormLabel className={'field-label'}>Contacten</FormLabel>*/}\r\n                {/*{primaryOccupations ? (*/}\r\n                {/*primaryOccupations.map(primaryOccupation => (*/}\r\n                {/*<Row>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-4'} placeholder={'Contact naam'}>*/}\r\n                {/*{primaryOccupation.contact.fullNameFnf}*/}\r\n                {/*</TextBlock>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-4'} placeholder={'Contact verbinding'}>*/}\r\n                {/*{primaryOccupation.occupation.primaryOccupation}*/}\r\n                {/*</TextBlock>*/}\r\n                {/*</Row>*/}\r\n                {/*))*/}\r\n                {/*) : (*/}\r\n                {/*<Row>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-8'} />*/}\r\n                {/*</Row>*/}\r\n                {/*)}*/}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactOrganisationView;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport InputDate from '../../../components/form/InputDate';\r\nimport { FaInfoCircle } from 'react-icons/fa';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst DefaultContactOrganisationEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.name\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"name\"\r\n                                    placeholder={'Naam'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        {initialContact.disableChangeContactNameOnPortal ? (\r\n                            <>\r\n                                <FaInfoCircle\r\n                                    color={'blue'}\r\n                                    size={'15px'}\r\n                                    data-tip={\r\n                                        'Je neemt deel aan een project waarvan de deelnemingen op naam zijn uitgegeven.<br />' +\r\n                                        'Daarom kun je jouw naam niet zelf wijzigen.<br />' +\r\n                                        'Overige contactgegevens kun je wel zelf aanpassen.<br />' +\r\n                                        'Een wijziging van rekeningnummer wordt door ons gecontroleerd.<br />' +\r\n                                        'Heb je vragen of wil je jouw gegevens door de beheerder laten wijzigen?<br />' +\r\n                                        'Kijk in het menu onder \"Over ons\" voor contact gegevens.'\r\n                                    }\r\n                                    data-for={`contact-${initialContact.id}`}\r\n                                />\r\n                                <ReactTooltip\r\n                                    id={`contact-${initialContact.id}`}\r\n                                    effect=\"float\"\r\n                                    place=\"right\"\r\n                                    multiline={true}\r\n                                    aria-haspopup=\"true\"\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.chamberOfCommerceNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"chamber_of_commerce_number\"\r\n                                    placeholder={'KvK'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.vatNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"vat_number\"\r\n                                    placeholder={'BTW nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.website\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"website\"\r\n                                    placeholder={'Website'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Bezoekadres\r\n                    {initialContact.blockChangeAddressNumber ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode en huisnummer is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied met huisnummerreeks`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"visitAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                    disabled={initialContact.blockChangeAddressNumber}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                    disabled={initialContact.blockChangeAddressNumber}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={\r\n                                        initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Postadres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"postalAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Nota adres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"invoiceAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"primaryContactEnergySupplier.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            // disabled={\r\n                                            //     initialContact.primaryContactEnergySupplier &&\r\n                                            //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                            //     initialContact.isParticipant\r\n                                            // }\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.primaryContactEnergySupplier && values.primaryContactEnergySupplier.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.esNumber &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                    // readOnly={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.memberSince\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel\r\n                                    htmlFor=\"ean_electricity\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    EAN nummer electriciteit\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanElectricity\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_electricity\"\r\n                                                    placeholder={'EAN nummer electriciteit'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanElectricity &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                                    EAN nummer gas\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanGas\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_gas\"\r\n                                                    placeholder={'EAN nummer gas'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanGas\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactOrganisationEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        // TODO set more correct values for validation, only important fields are set now\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        organisation: Yup.object().shape({\r\n            name: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        postalAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        invoiceAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht')\r\n            .test('iban', 'Ongeldige IBAN of gebruik geen spaties.', value => ibantools.isValidIBAN(value)),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n        organisation: Yup.object().shape({\r\n            chamberOfCommerceNumber: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            energySupplierId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            esNumber: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPostalCodeAndNumber: Yup.object().shape({\r\n        visitAddress: Yup.object().shape({\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactOrganisationView from './default-form-organisation/View';\r\nimport DefaultContactOrganisationEdit from './default-form-organisation/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaOrganisation from './../../helpers/ValidationSchemaOrganisation';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsOrganisation({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic\r\n              .concat(ValidationSchemaOrganisation.validationSchemaAdditional)\r\n              .concat(ValidationSchemaOrganisation.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic.concat(\r\n              ValidationSchemaOrganisation.validationSchemaAdditional\r\n          )\r\n        : ValidationSchemaOrganisation.validationSchemaBasic;\r\n\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactOrganisationView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsOrganisation;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactDetailsPersonal from './Personal';\r\nimport ContactDetailsOrganisation from './Organisation';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst ContactDetails = function(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n    const [editForm, setEditForm] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const keys =\r\n            '?keys[]=portalName' +\r\n            '&keys[]=portalWebsite' +\r\n            '&keys[]=portalUrl' +\r\n            '&keys[]=responsibleUserId' +\r\n            '&keys[]=checkContactTaskResponsibleUserId' +\r\n            '&keys[]=linkPrivacyPolicy' +\r\n            '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n            '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n        PortalSettingsAPI.fetchPortalSettings(keys)\r\n            .then(payload => {\r\n                setPortalSettings({ ...payload.data });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ isLoading: false, hasError: true });\r\n            });\r\n\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n                props.updateNameSelectedContact(\r\n                    contactData.fullNameFnf,\r\n                    contactData.typeId,\r\n                    contactData.firstName,\r\n                    contactData.lastNamePrefix,\r\n                    contactData.lastName\r\n                );\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, switchToView) {\r\n        const updatedContact = { ...contact, ...values, projectId: null };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                callFetchContact();\r\n                actions.setSubmitting(false);\r\n                switchToView();\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    const editButtonGroup = (\r\n        <ButtonGroup aria-label=\"Steps\" className={'float-right'}>\r\n            <Button\r\n                className={'w-button'}\r\n                size=\"sm\"\r\n                onClick={function() {\r\n                    setEditForm(true);\r\n                }}\r\n            >\r\n                Wijzig\r\n            </Button>\r\n        </ButtonGroup>\r\n    );\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <div className=\"content-container w-container\">\r\n                    {editForm ? (\r\n                        <Row>\r\n                            <Col>\r\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : (\r\n                        <Row>\r\n                            <Col>\r\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                            </Col>\r\n                            <Col>{editButtonGroup}</Col>\r\n                        </Row>\r\n                    )}\r\n                    <div className=\"w-form\" />\r\n                    {/* If contact is person */}\r\n                    {contact.typeId === 'person' ? (\r\n                        <ContactDetailsPersonal\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                    {/* If contact is organisation */}\r\n                    {contact.typeId === 'organisation' ? (\r\n                        <ContactDetailsOrganisation\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default function ContactDetailsWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact, updateNameSelectedContact }) => (\r\n                <ContactDetails\r\n                    {...props}\r\n                    currentSelectedContact={currentSelectedContact}\r\n                    updateNameSelectedContact={updateNameSelectedContact}\r\n                />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Field, FieldArray, Form, Formik } from 'formik';\r\nimport ButtonText from '../../components/button/ButtonText';\r\n\r\nconst MyAreasOfInterestForm = function({ handleSubmit, initialValues }) {\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            enableReinitialize={true}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                console.log(values);\r\n            }}\r\n            render={({ errors, touched, setFieldValue, isSubmitting, values }) => {\r\n                return (\r\n                    <Form id=\"email-form\" name=\"email-form\">\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <h6 className=\"heading-content\">Mijn interessegebieden</h6>\r\n                                <FieldArray\r\n                                    name=\"myAreasOfInterest\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.myAreasOfInterest &&\r\n                                                values.myAreasOfInterest.map((myAreaOfInterest, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`myAreasOfInterest[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={myAreaOfInterest.name}\r\n                                                                        checked={myAreaOfInterest.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={myAreaOfInterest.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {myAreaOfInterest.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Deelname</h6>\r\n                                <FieldArray\r\n                                    name=\"participations\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.participations &&\r\n                                                values.participations.map((participation, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`participations[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={participation.name}\r\n                                                                        checked={participation.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={participation.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {participation.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Algemeen</h6>\r\n                                <FieldArray\r\n                                    name=\"generalOptions\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.generalOptions &&\r\n                                                values.generalOptions.map((generalOption, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`generalOptions[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={generalOption.name}\r\n                                                                        checked={generalOption.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={generalOption.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {generalOption.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <ButtonText\r\n                                    buttonText={'Opslaan'}\r\n                                    buttonClassName={'save-btn w-button'}\r\n                                    type={'submit'}\r\n                                    loading={isSubmitting}\r\n                                />\r\n                            </div>\r\n                            <div className=\"w-col w-col-6\" />\r\n                        </div>\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterestForm;\r\n","import React from 'react';\r\nimport MyAreasOfInterestForm from './Form';\r\n\r\nconst MyAreasOfInterest = function() {\r\n    // TODO Fetch values from API\r\n    const initialValues = {\r\n        myAreasOfInterest: [\r\n            { id: 4, name: 'Gevel isolatie', value: true },\r\n            { id: 5, name: 'Zonnepanelen', value: false },\r\n            { id: 6, name: 'Dak isolatie', value: false },\r\n            { id: 7, name: 'Zonneboiler', value: true },\r\n        ],\r\n        participations: [{ id: 2, name: 'Test groep', value: true }, { id: 3, name: 'De leuke mensen', value: false }],\r\n        generalOptions: [{ id: 1, name: 'Test algemeen groep', value: false }],\r\n    };\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            <div className=\"content-container w-container\">\r\n                <h1 className=\"content-heading\">Instellingen</h1>\r\n                <div className=\"w-form\" />\r\n                <MyAreasOfInterestForm initialValues={initialValues} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterest;\r\n","export default amount => {\r\n    if (!amount) amount = 0;\r\n    // if (isNaN(amount)) {\r\n    //     amount = amount.replace(',', '.');\r\n    // }\r\n    amount = parseFloat(amount * 100) / 100;\r\n\r\n    if (isNaN(amount)) return 'Ongeldig bedrag';\r\n\r\n    return `€ ${amount.toLocaleString('nl', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n    })}`;\r\n};\r\n","export default function(project, amountOptioned, participationsOptioned) {\r\n    let transactionCosts = 0;\r\n    let varAmountOptioned = amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\r\n    let varParticipationsOptioned = participationsOptioned ? parseFloat(participationsOptioned).toFixed(0) : 0;\r\n    switch (project.transactionCostsCodeRef) {\r\n        case 'amount-once':\r\n            transactionCosts = project.transactionCostsAmount;\r\n            break;\r\n        case 'amount':\r\n            if (project.projectType.codeRef === 'loan') {\r\n                transactionCosts = project.transactionCostsAmount;\r\n            } else {\r\n                transactionCosts = project.transactionCostsAmount * varParticipationsOptioned;\r\n            }\r\n            break;\r\n        case 'percentage':\r\n            let amount = 0;\r\n            if (project.projectType.codeRef === 'loan') {\r\n                amount = varAmountOptioned;\r\n            } else {\r\n                amount = varParticipationsOptioned * project.currentBookWorth;\r\n            }\r\n            if (amount != 0) {\r\n                if (project.transactionCostsAmount3 !== null && amount >= project.transactionCostsAmount3) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage3) / 100).toFixed(2));\r\n                } else if (project.transactionCostsAmount2 !== null && amount >= project.transactionCostsAmount2) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage2) / 100).toFixed(2));\r\n                } else if (project.transactionCostsAmount !== null && amount >= project.transactionCostsAmount) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage) / 100).toFixed(2));\r\n                } else {\r\n                    transactionCosts = 0;\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            transactionCosts = 0;\r\n    }\r\n    if (project.transactionCostsCodeRef !== 'none') {\r\n        if (project.transactionCostsAmountMin !== null && transactionCosts < project.transactionCostsAmountMin) {\r\n            transactionCosts = project.transactionCostsAmountMin;\r\n        }\r\n        if (project.transactionCostsAmountMax !== null && transactionCosts > project.transactionCostsAmountMax) {\r\n            transactionCosts = project.transactionCostsAmountMax;\r\n        }\r\n    }\r\n\r\n    return transactionCosts;\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst InputTextCurrency = ({\r\n    field,\r\n    type,\r\n    className,\r\n    id,\r\n    readOnly,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <input\r\n                type={type}\r\n                className={`text-input w-input ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                value={field.value.toString().replace('.', ',')}\r\n                readOnly={readOnly}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputTextCurrency.defaultProps = {\r\n    type: 'text',\r\n    className: 'content',\r\n    readOnly: false,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputTextCurrency.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputTextCurrency;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\nimport InputTextCurrency from '../../../components/form/InputTextCurrency';\r\n\r\nfunction StepOneLoan({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        amountOptioned: Yup.string()\r\n            .required('Verplicht')\r\n            .transform(function(value, originalvalue) {\r\n                return value ? value.replace(',', '.') : 0;\r\n            })\r\n            .test(\r\n                'amountOptioned',\r\n                'Minimum van ' + project.minAmountLoan + ' nodig',\r\n                value => value >= project.minAmountLoan\r\n            )\r\n            .test(\r\n                'amountOptioned',\r\n                'Maximum van ' + project.maxAmountLoan + ' bereikt',\r\n                value => value <= project.maxAmountLoan\r\n            )\r\n            .matches(/^\\s*(?=.*[1-9])\\d*(?:\\.\\d{1,2})?\\s*$/, 'Fout bedrag'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function setAmountOptioned(amountOptioned) {\r\n        return amountOptioned ? amountOptioned.toString().replace(',', '.') : '';\r\n    }\r\n    function calculateAmount(amountOptioned) {\r\n        return amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(amountOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, amountOptioned, null);\r\n    }\r\n    function calculateTotalAmount(amountOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(amountOptioned) + calculateTransactionCostsAmount(amountOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amountOptioned: setAmountOptioned(values.amountOptioned),\r\n                    amount: calculateAmount(values.amountOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.amountOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.amountOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimaal bedrag</FormLabel>\r\n                                <TextBlock>{project.minAmountLoan}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximaal bedrag</FormLabel>\r\n                                <TextBlock>{project.maxAmountLoan}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>In te leggen bedrag</Form.Label>\r\n                                <Field\r\n                                    name=\"amountOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputTextCurrency\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"amount_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.amountOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.amountOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(values.amountOptioned, values.choiceMembership)\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneLoan;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOneObligation({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Huidige hoofdsom per obligatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal obligaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneObligation;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOneCapital({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal participaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneCapital;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOnePcr({\r\n    portalSettings,\r\n    next,\r\n    project,\r\n    contactProjectData,\r\n    initialContact,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n}) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrYearlyPowerKwhConsumption: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrPostalCode: Yup.string()\r\n            .min(4, 'Minimum van ${min} postcode cijfers nodig')\r\n            .required('Verplicht')\r\n            .test(\r\n                'pcrPostalCode',\r\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                value =>\r\n                    value &&\r\n                    (!project.checkPostalcodeLink ||\r\n                        (project.postalcodeLink && project.postalcodeLink.includes(value.substring(0, 4))))\r\n            ),\r\n        pcrNumberOfSolarPanels: Yup.number().typeError('Alleen nummers'),\r\n        pcrInputGeneratedNumberOfKwh: Yup.number().typeError('Alleen nummers'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    // const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = 0.8;\r\n    const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = portalSettings['pcrPowerKwhConsumptionPercentage'];\r\n    // const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = 250;\r\n    const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = portalSettings['pcrGeneratingCapacityOneSolorPanel'];\r\n\r\n    function calculateEstimatedGeneratedNumberOfKwh(values) {\r\n        return values.pcrNumberOfSolarPanels\r\n            ? values.pcrNumberOfSolarPanels * PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n            : 0;\r\n    }\r\n    function calculateGeneratedNumberOfKwh(values) {\r\n        return values.pcrInputGeneratedNumberOfKwh && values.pcrInputGeneratedNumberOfKwh > 0\r\n            ? values.pcrInputGeneratedNumberOfKwh\r\n            : calculateEstimatedGeneratedNumberOfKwh(values)\r\n            ? calculateEstimatedGeneratedNumberOfKwh(values)\r\n            : 0;\r\n    }\r\n    function calculatePowerKwhConsumption(values) {\r\n        let extraPowerKwhConsumption =\r\n            values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values) > 0\r\n                ? values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values)\r\n                : 0;\r\n        return extraPowerKwhConsumption;\r\n    }\r\n    function calculateAdviseMaxNumberOfParticipations(values) {\r\n        let pcrAdviseMaxNumberOfParticipations =\r\n            calculatePowerKwhConsumption(values) > 0\r\n                ? Math.ceil(\r\n                      (calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE) /\r\n                          PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n                  )\r\n                : 0;\r\n\r\n        if (pcrAdviseMaxNumberOfParticipations < project.minParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.minParticipations;\r\n        } else if (pcrAdviseMaxNumberOfParticipations > project.maxParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.maxParticipations;\r\n        }\r\n        return pcrAdviseMaxNumberOfParticipations;\r\n    }\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    powerKwhConsumption: calculatePowerKwhConsumption(values),\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={{\r\n                ...initialRegisterValues,\r\n            }}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => {\r\n                let pcrEstimatedGeneratedNumberOfKwh = calculateEstimatedGeneratedNumberOfKwh(values);\r\n                let powerKwhConsumption = Math.ceil(\r\n                    calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE\r\n                );\r\n                let pcrAdviseMaxNumberOfParticipations = calculateAdviseMaxNumberOfParticipations(values);\r\n                return (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                                </Col>\r\n\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\r\n                                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>Je postcode</Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrPostalCode\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_postal_code\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>Deelnemende postcodes</Form.Label>\r\n                                    <TextBlock>{project.postalcodeLink}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Je (geschatte) jaarlijks verbruik (in kWh)\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrYearlyPowerKwhConsumption\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_yearly_power_kwh_consumption\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Heb je al zonnepanelen op je eigen dak of doe je mee in een ander project?\r\n                                    </Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrHasSolarPanels\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => setFieldValue('pcrHasSolarPanels', 'Y')}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrHasSolarPanels', 'N');\r\n                                                                setFieldValue('pcrNumberOfSolarPanels', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrHasSolarPanels === 'Y' ? (\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <Form.Label className={'field-label'}>\r\n                                            Hoeveel zonnepanelen wekken al stroom voor je op\r\n                                        </Form.Label>\r\n                                        <Field\r\n                                            name=\"pcrNumberOfSolarPanels\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"pcr_number_of_solar_panels\"\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Wij schatten in dat je panelen jaarlijks opwekken\r\n                                    </Form.Label>\r\n                                    <TextBlock id=\"pcr_input_estimated_generated_number_of_kwh\">\r\n                                        {pcrEstimatedGeneratedNumberOfKwh} kWh\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>Klopt het geschatte opbrengst?</Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrEstimatedRevenueOk\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrEstimatedRevenueOk', 'Y');\r\n                                                                setFieldValue('pcrInputGeneratedNumberOfKwh', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => setFieldValue('pcrEstimatedRevenueOk', 'N')}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrEstimatedRevenueOk === 'N' ? (\r\n                                <>\r\n                                    <Row>\r\n                                        <Col xs={12} md={6}>\r\n                                            <Form.Label className={'field-label'}>\r\n                                                Wat is de jaarlijkse opbrengst van jouw panelen (in kWh)\r\n                                            </Form.Label>\r\n                                            <Field\r\n                                                name=\"pcrInputGeneratedNumberOfKwh\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"pcr_input_generated_number_of_kwh\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <p>\r\n                                        We adviseren tot {PCR_POWER_KWH_CONSUMPTION_PERCENTAGE * 100}% van je jaarlijks\r\n                                        verbruik minus de jaarlijkse opbrengsten (in jouw geval {powerKwhConsumption}{' '}\r\n                                        kWh) te dekken met participaties. In het veld hier direct onder is voor je\r\n                                        uitgerekend hoeveel participaties dat zijn. Het is een advies, je mag er ook\r\n                                        meer kopen. Dit kan echter slecht zijn voor je rendement.\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Advies maximaal aantal participaties\r\n                                    </Form.Label>\r\n                                    <TextBlock>{pcrAdviseMaxNumberOfParticipations}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Gewenst aantal participaties\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"participationsOptioned\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"participations_optioned\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>\r\n                                        {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                    </FormLabel>\r\n                                    <TextBlock>\r\n                                        {MoneyPresenter(calculateAmount(values.participationsOptioned))}\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n                            {project.showQuestionAboutMembership ? (\r\n                                <>\r\n                                    <hr />\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <p>\r\n                                                {contactProjectData.belongsToMembershipGroup\r\n                                                    ? contactProjectData.textIsMemberMerged\r\n                                                    : contactProjectData.textIsNoMemberMerged}\r\n                                            </p>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {!contactProjectData.belongsToMembershipGroup ? (\r\n                                        <Row>\r\n                                            <Col xs={12} md={10}>\r\n                                                <Field\r\n                                                    name=\"choiceMembership\"\r\n                                                    render={({ field }) => (\r\n                                                        <>\r\n                                                            {get(errors, field.name, '') &&\r\n                                                                get(touched, field.name, '') && (\r\n                                                                    <small className=\"text-danger\">\r\n                                                                        {get(errors, field.name, '')}\r\n                                                                    </small>\r\n                                                                )}\r\n                                                            <div className=\"form-check\">\r\n                                                                <label className=\"radio-inline\">\r\n                                                                    <input\r\n                                                                        type=\"radio\"\r\n                                                                        {...field}\r\n                                                                        id=\"choice_membership_yes\"\r\n                                                                        checked={field.value === 1}\r\n                                                                        value={1}\r\n                                                                        onChange={() =>\r\n                                                                            setFieldValue('choiceMembership', 1)\r\n                                                                        }\r\n                                                                    />\r\n                                                                    &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                                </label>\r\n                                                                <label className=\"radio-inline\">\r\n                                                                    <input\r\n                                                                        type=\"radio\"\r\n                                                                        {...field}\r\n                                                                        id=\"choice_membership_no\"\r\n                                                                        checked={field.value === 2}\r\n                                                                        value={2}\r\n                                                                        onChange={() => {\r\n                                                                            setFieldValue('choiceMembership', 2);\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                                </label>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    ) : null}\r\n                                </>\r\n                            ) : null}\r\n\r\n                            {project.transactionCostsCodeRef !== 'none' ? (\r\n                                <>\r\n                                    <hr />\r\n                                    <Row>\r\n                                        <Col xs={12} md={6}>\r\n                                            <FormLabel className={'field-label'}>\r\n                                                {project.textTransactionCosts}\r\n                                            </FormLabel>\r\n                                            <TextBlock>\r\n                                                {MoneyPresenter(\r\n                                                    calculateTransactionCostsAmount(\r\n                                                        values.participationsOptioned,\r\n                                                        values.choiceMembership\r\n                                                    )\r\n                                                )}\r\n                                            </TextBlock>\r\n                                        </Col>\r\n                                        <Col xs={12} md={6}>\r\n                                            <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                            <TextBlock>\r\n                                                {MoneyPresenter(\r\n                                                    calculateTotalAmount(\r\n                                                        values.participationsOptioned,\r\n                                                        values.choiceMembership\r\n                                                    )\r\n                                                )}\r\n                                            </TextBlock>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            Ga naar gegevens\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOnePcr;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DefaultContactPersonalEdit from '../../contact-details/default-form-personal/Edit';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from '../../../helpers/ValidationSchemaPersonal';\r\nimport ValidationSchemaOrganisation from '../../../helpers/ValidationSchemaOrganisation';\r\nimport DefaultContactOrganisationEdit from '../../contact-details/default-form-organisation/Edit';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepTwo({ portalSettings, previous, next, project, initialContact, handleSubmitContactValues }) {\r\n    initialContact.isParticipant = true;\r\n    const typeContact = initialContact.typeId ? initialContact.typeId : null;\r\n\r\n    let validationSchema = null;\r\n    let validationSchemaBasic = null;\r\n    let validationSchemaAdditional = null;\r\n    let validationSchemaPcrAdditional = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            validationSchemaBasic = ValidationSchemaPersonal.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaPersonal.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n            }\r\n            break;\r\n        case 'organisation':\r\n            validationSchemaBasic = ValidationSchemaOrganisation.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaOrganisation.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n            }\r\n            break;\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactValues(values, actions, next);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    // console.log(errors);\r\n                    return (\r\n                        <Form>\r\n                            {/* If contact is person */}\r\n                            {initialContact.typeId === 'person' ? (\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            {/* If contact is organisation */}\r\n                            {initialContact.typeId === 'organisation' ? (\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan en doorgaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepTwo;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepThree({ project, contactProjectData, previous, next, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        didAcceptAgreement: Yup.bool().test(\r\n            'didAcceptAgreement',\r\n            'Je dient akkoord te gaan met de voorwaarden!',\r\n            value => value === true\r\n        ),\r\n        didUnderstandInfo: Yup.bool().test(\r\n            'didUnderstandInfo',\r\n            'Je dient te bevestigen, dat de project informatie gelezen en begrepen is!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                onSubmit={function(values, actions) {\r\n                    handleSubmitRegisterValues(values);\r\n                    next();\r\n                }}\r\n                initialValues={initialRegisterValues}\r\n            >\r\n                {({ handleSubmit, touched, errors }) => (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <p\r\n                                        dangerouslySetInnerHTML={{\r\n                                            __html: contactProjectData.textAgreeTermsMerged.replace(/\\n/g, '<br />'),\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didAcceptAgreement\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_accept_agreement\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_accept_agreement\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                    dangerouslySetInnerHTML={{\r\n                                                        __html: contactProjectData.textLinkAgreeTermsMerged.replace(\r\n                                                            /\\n/g,\r\n                                                            '<br />'\r\n                                                        ),\r\n                                                    }}\r\n                                                />\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didUnderstandInfo\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_understand_info\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_understand_info\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                    dangerouslySetInnerHTML={{\r\n                                                        __html: contactProjectData.textLinkUnderstandInfoMerged.replace(\r\n                                                            /\\n/g,\r\n                                                            '<br />'\r\n                                                        ),\r\n                                                    }}\r\n                                                />\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            {project.usesMollie ? (\r\n                                                <>Ga naar bevestigen en betalen</>\r\n                                            ) : (\r\n                                                <>Ga naar bevestigen</>\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepThree;\r\n","import React from 'react';\r\nimport Frame from 'react-frame-component';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ViewHtmlAsText = ({ id, value }) => {\r\n    const createMarkup = () => {\r\n        return { __html: value };\r\n    };\r\n\r\n    return (\r\n        <Frame>\r\n            <div id={id} dangerouslySetInnerHTML={createMarkup()} />\r\n        </Frame>\r\n    );\r\n};\r\n\r\nViewHtmlAsText.defaultProps = {\r\n    value: '',\r\n};\r\n\r\nViewHtmlAsText.propTypes = {\r\n    id: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default ViewHtmlAsText;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    createParticipantProject: registerValues => {\r\n        const requestUrl = `/project/participant/create`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n\r\n    show: id => {\r\n        const requestUrl = `/project/participant/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport ViewHtmlAsText from '../../../components/general/ViewHtmlAsText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction StepFour({ project, contactProjectData, previous, next, registerValues, setSucces }) {\r\n    const [contactDocument, setContactDocument] = useState('');\r\n    const [isLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        (function callFetchContact() {\r\n            setLoading(true);\r\n            ContactAPI.previewDocument(registerValues)\r\n                .then(payload => {\r\n                    setContactDocument(payload.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [registerValues]);\r\n\r\n    function handleSubmitRegisterValues(actions, next) {\r\n        ParticipantProjectAPI.createParticipantProject(registerValues)\r\n            .then(payload => {\r\n                // console.log(payload);\r\n                actions.setSubmitting(false);\r\n\r\n                /**\r\n                 * Als Mollie is ingeschakeld voor het project wordt er een betaallink gereturned.\r\n                 * In dat geval huidige scherm verlaten en door naar mollie.\r\n                 */\r\n                if (payload.data.econobisPaymentLink) {\r\n                    window.location.href = payload.data.econobisPaymentLink;\r\n                    return;\r\n                }\r\n\r\n                setSucces(true);\r\n                next();\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        didAgreeRegistration: Yup.bool().test(\r\n            'didAgreeRegistration',\r\n            'Je dient akkoord te gaan met het inschrijfformulier!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    let contactDocumentOk = false;\r\n    if (!isEmpty('' + contactDocument)) {\r\n        contactDocumentOk = true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : !contactDocumentOk ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>Er ging iets mis bij het maken van het bevestingsformulier voorbeeld.</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                    Terug\r\n                                </Button>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : (\r\n                <Formik\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={function(values, actions) {\r\n                        handleSubmitRegisterValues(actions, next);\r\n                    }}\r\n                    initialValues={{ didAgreeRegistration: false }}\r\n                >\r\n                    {({ handleSubmit, touched, errors, isSubmitting, status }) => (\r\n                        <>\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <FormLabel className={'field-label'}>Controleer de inschrijving</FormLabel>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ViewHtmlAsText value={contactDocument} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={3}>\r\n                                        <FormLabel className={'field-label-text'}>\r\n                                            {project.transactionCostsCodeRef === 'none'\r\n                                                ? 'Te betalen bedrag'\r\n                                                : 'Bedrag'}\r\n                                        </FormLabel>\r\n                                    </Col>\r\n                                    <Col xs={12} md={3}>\r\n                                        <TextBlock className={'float-right'}>\r\n                                            {MoneyPresenter(registerValues.amount)}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                                {project.transactionCostsCodeRef !== 'none' ? (\r\n                                    <>\r\n                                        <Row>\r\n                                            <Col xs={12} md={3}>\r\n                                                <FormLabel className={'field-label-text'}>\r\n                                                    {project.textTransactionCosts}\r\n                                                </FormLabel>\r\n                                            </Col>\r\n                                            <Col xs={12} md={3}>\r\n                                                <TextBlock className={'float-right'}>\r\n                                                    {MoneyPresenter(registerValues.transactionCostsAmount)}\r\n                                                </TextBlock>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col xs={12} md={3}>\r\n                                                <FormLabel className={'field-label-text'}>Totaal te betalen</FormLabel>\r\n                                            </Col>\r\n                                            <Col xs={12} md={3}>\r\n                                                <TextBlock className={'float-right'}>\r\n                                                    {MoneyPresenter(registerValues.totalAmount)}\r\n                                                </TextBlock>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </>\r\n                                ) : null}\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p\r\n                                            dangerouslySetInnerHTML={{\r\n                                                __html: contactProjectData.textAcceptAgreementMerged.replace(\r\n                                                    /\\n/g,\r\n                                                    '<br />'\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <Field\r\n                                            name=\"didAgreeRegistration\"\r\n                                            render={({ field }) => (\r\n                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                    <input\r\n                                                        type=\"checkbox\"\r\n                                                        {...field}\r\n                                                        id=\"did_agree_registration\"\r\n                                                        checked={field.value}\r\n                                                        className=\"w-checkbox-input checkbox\"\r\n                                                    />\r\n                                                    <span\r\n                                                        htmlFor=\"did_agree_registration\"\r\n                                                        className=\"checkbox-label w-form-label\"\r\n                                                    >\r\n                                                        {contactProjectData.textAcceptAgreementQuestionMerged}\r\n                                                    </span>\r\n                                                    {touched[field.name] && errors[field.name] ? (\r\n                                                        <div className={'error-message text-danger'}>\r\n                                                            {errors[field.name]}\r\n                                                        </div>\r\n                                                    ) : null}\r\n                                                </label>\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                                Terug\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met verwerken\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        {project.usesMollie ? (\r\n                                                            <>Betaal en bevestig de inschrijving</>\r\n                                                        ) : (\r\n                                                            <>Bevestig inschrijving</>\r\n                                                        )}\r\n                                                    </>\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                    volgende stap!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        </>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StepFour;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport { Form } from 'formik';\r\n\r\nfunction StepFive({ contactProjectData }) {\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    {contactProjectData.textRegistrationFinishedMerged.split('\\n').map((item, key) => {\r\n                        return (\r\n                            <span key={key}>\r\n                                {item}\r\n                                <br />\r\n                            </span>\r\n                        );\r\n                    })}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    <ButtonGroup className=\"float-right\">\r\n                        <Link to={`/inschrijvingen-projecten`}>\r\n                            <Button className={'w-button'} size=\"sm\">\r\n                                Naar mijn huidige deelnames\r\n                            </Button>\r\n                        </Link>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepFive;\r\n","import React from 'react';\r\nimport StepOneLoan from './StepOneLoan';\r\nimport StepOneObligation from './StepOneObligation';\r\nimport StepOneCapital from './StepOneCapital';\r\nimport StepOnePcr from './StepOnePcr';\r\nimport StepTwo from './StepTwo';\r\nimport StepThree from './StepThree';\r\nimport StepFour from './StepFour';\r\nimport StepFive from './StepFive';\r\nimport { isEmpty } from 'lodash';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction Steps({\r\n    portalSettings,\r\n    currentStep,\r\n    previous,\r\n    next,\r\n    project,\r\n    contactProjectData,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    if (isEmpty(project)) {\r\n        return (\r\n            <Container className={'content-section'}>\r\n                <Row>\r\n                    <Col>\r\n                        <p>Fout bij ophalen project. Inschrijving niet (meer) mogelijk op dit moment.</p>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    switch (currentStep) {\r\n        case 1:\r\n            switch (project.projectType.codeRef) {\r\n                case 'loan':\r\n                    return (\r\n                        <StepOneLoan\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'obligation':\r\n                    return (\r\n                        <StepOneObligation\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'capital':\r\n                    return (\r\n                        <StepOneCapital\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'postalcode_link_capital':\r\n                    return (\r\n                        <StepOnePcr\r\n                            portalSettings={portalSettings}\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialContact={initialContact}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                default:\r\n                    return null;\r\n            }\r\n\r\n        case 2:\r\n            return (\r\n                <StepTwo\r\n                    portalSettings={portalSettings}\r\n                    previous={previous}\r\n                    next={next}\r\n                    project={project}\r\n                    initialContact={initialContact}\r\n                    handleSubmitContactValues={handleSubmitContactValues}\r\n                />\r\n            );\r\n        case 3:\r\n            return (\r\n                <StepThree\r\n                    project={project}\r\n                    contactProjectData={contactProjectData}\r\n                    previous={previous}\r\n                    next={next}\r\n                    initialRegisterValues={initialRegisterValues}\r\n                    handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                />\r\n            );\r\n        case 4:\r\n            return (\r\n                <StepFour\r\n                    project={project}\r\n                    contactProjectData={contactProjectData}\r\n                    previous={previous}\r\n                    next={next}\r\n                    registerValues={initialRegisterValues}\r\n                    setSucces={setSucces}\r\n                />\r\n            );\r\n        case 5:\r\n            return <StepFive contactProjectData={contactProjectData} />;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default Steps;\r\n","import React from 'react';\r\nimport Steps from './steps';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction MasterForm({\r\n    portalSettings,\r\n    project,\r\n    contactProjectData,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    const [currentStep, setStep] = React.useState(1);\r\n\r\n    function previous() {\r\n        setStep(currentStep <= 2 ? 1 : currentStep - 1);\r\n    }\r\n\r\n    function next() {\r\n        setStep(currentStep >= 4 ? 5 : currentStep + 1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {currentStep <= 4 ? (\r\n                <Row className={'mb-4'}>\r\n                    <Col>\r\n                        <div className={'arrow-steps clearfix'}>\r\n                            <div className={`step ${currentStep === 1 ? 'current' : ''}`}>1. Inschrijven</div>\r\n                            <div className={`step ${currentStep === 2 ? 'current' : ''}`}>2. Gegevens</div>\r\n                            <div className={`step ${currentStep === 3 ? 'current' : ''}`}>3. Voorwaarden</div>\r\n                            <div className={`step ${currentStep === 4 ? 'current' : ''}`}>\r\n                                {\r\n                                    project.usesMollie ? (\r\n                                        <>4. Bevestigen en betalen</>\r\n                                    ) : (\r\n                                        <>4. Bevestigen</>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            ) : null}\r\n            <Steps\r\n                portalSettings={portalSettings}\r\n                currentStep={currentStep}\r\n                previous={previous}\r\n                next={next}\r\n                project={project}\r\n                contactProjectData={contactProjectData}\r\n                initialRegisterValues={initialRegisterValues}\r\n                handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                initialContact={initialContact}\r\n                handleSubmitContactValues={handleSubmitContactValues}\r\n                setSucces={setSucces}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MasterForm;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../api/project/ProjectAPI';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport MasterForm from './MasterForm';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport axios from 'axios';\r\nimport { ThemeSettingsContext } from '../../context/ThemeSettingsContext';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction RegisterProject({ match, currentSelectedContact }) {\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    const initialRegisterValues = {\r\n        contactId: null,\r\n        projectId: null,\r\n        participationsOptioned: 0,\r\n        powerKwhConsumption: 0,\r\n        amountOptioned: 0,\r\n        didAcceptAgreement: false,\r\n        didUnderstandInfo: false,\r\n        choiceMembership: 0,\r\n    };\r\n\r\n    const initialPcrValues = {\r\n        pcrYearlyPowerKwhConsumption: 0,\r\n        pcrPostalCode: '',\r\n        pcrHasSolarPanels: 'N',\r\n        pcrInputGeneratedNumberOfKwh: 0,\r\n        pcrEstimatedRevenueOk: 'Y',\r\n    };\r\n\r\n    const [registerValues, setRegisterValues] = useState(initialRegisterValues);\r\n\r\n    const [project, setProject] = useState({});\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isSucces, setSucces] = useState(false);\r\n    const [contactProjectData, setContactProjectData] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function fetchContactAndProject() {\r\n                setLoading(true);\r\n\r\n                axios\r\n                    .all([\r\n                        ProjectAPI.fetchProject(match.params.id),\r\n                        ContactAPI.fetchContact(currentSelectedContact.id),\r\n                        ContactAPI.fetchContactProjectData(currentSelectedContact.id, match.params.id),\r\n                    ])\r\n                    .then(\r\n                        axios.spread((payloadProject, payloadContact, payloadContactProjectData) => {\r\n                            const contact = payloadContact.data.data;\r\n                            const project = payloadProject.data.data;\r\n                            setProject(project);\r\n                            setCurrentThemeSettings(project.administration.portalSettingsLayoutAssigned);\r\n                            const contactData = rebaseContact(contact);\r\n                            setContact(contactData);\r\n\r\n                            setContactProjectData(payloadContactProjectData.data);\r\n\r\n                            if (\r\n                                project &&\r\n                                project.projectType &&\r\n                                project.projectType.codeRef === 'postalcode_link_capital'\r\n                            ) {\r\n                                let pcrPostalCode = '';\r\n                                if (contactData.typeId === 'organisation') {\r\n                                    pcrPostalCode = contactData.visitAddress ? contactData.visitAddress.postalCode : '';\r\n                                } else {\r\n                                    pcrPostalCode = contactData.primaryAddress\r\n                                        ? contactData.primaryAddress.postalCode\r\n                                        : '';\r\n                                }\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\r\n                                    ...initialPcrValues,\r\n                                    pcrPostalCode,\r\n                                });\r\n                            } else {\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\r\n                                });\r\n                            }\r\n\r\n                            if (\r\n                                payloadContactProjectData.data.projectRegisterIndicators.allowChangeParticipation &&\r\n                                payloadContactProjectData.data.projectRegisterIndicators.allowPayMollie\r\n                            ) {\r\n                                /**\r\n                                 * Er is wel ingeschreven maar nog niet betaald, dan mag het formulier\r\n                                 * wel geopend worden en stellen we de eerder ingevoerde gegevens in. projectRegisterIndicators\r\n                                 */\r\n                                setRegisterValues(current => {\r\n                                    return {\r\n                                        ...current,\r\n                                        participationsOptioned:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators\r\n                                                .participationsOptioned,\r\n                                        amountOptioned:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators.amountOptioned,\r\n                                        pcrYearlyPowerKwhConsumption:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators\r\n                                                .powerKwhConsumption,\r\n                                        didAcceptAgreement: true,\r\n                                        didUnderstandInfo: true,\r\n                                    };\r\n                                });\r\n                            }\r\n\r\n                            setLoading(false);\r\n                        })\r\n                    )\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n\r\n        (function callFetchPortalSettings() {\r\n            setLoading(true);\r\n            const keys =\r\n                '?keys[]=portalName' +\r\n                '&keys[]=portalWebsite' +\r\n                '&keys[]=portalUrl' +\r\n                '&keys[]=responsibleUserId' +\r\n                '&keys[]=checkContactTaskResponsibleUserId' +\r\n                '&keys[]=linkPrivacyPolicy' +\r\n                '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n                '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n            PortalSettingsAPI.fetchPortalSettings(keys)\r\n                .then(payload => {\r\n                    setPortalSettings({ ...payload.data });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ isLoading: false, hasError: true });\r\n                });\r\n        })();\r\n    }, [match, currentSelectedContact]);\r\n\r\n    function handleSubmitRegisterValues(values) {\r\n        setRegisterValues({ ...registerValues, ...values });\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, nextStep) {\r\n        const updatedContact = { ...contact, ...values, projectId: project.id };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                ContactAPI.fetchContact(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        const contactData = rebaseContact(payload.data.data);\r\n\r\n                        setContact(contactData);\r\n                        nextStep();\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : !contactProjectData.projectRegisterIndicators.hasParticipation &&\r\n              !contactProjectData.projectRegisterIndicators.allowRegisterToProject ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                Inschrijving voor project <strong>{project.name}</strong>\r\n                            </h1>\r\n                            <Row className={'mb-4'}>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            {contactProjectData.projectRegisterIndicators.textNotAllowedRegisterToProject\r\n                                                .split('<br />')\r\n                                                .map((item, key) => {\r\n                                                    return (\r\n                                                        <span key={key}>\r\n                                                            {item}\r\n                                                            <br />\r\n                                                        </span>\r\n                                                    );\r\n                                                })}\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : contactProjectData.projectRegisterIndicators.hasParticipation &&\r\n              !contactProjectData.projectRegisterIndicators.allowChangeParticipation ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                <strong>{contact.fullNameFnf}</strong> is al ingeschreven voor project{' '}\r\n                                <strong>{project.name}</strong>\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : (\r\n                <Row>\r\n                    <Col>\r\n                        {isSucces ? (\r\n                            <h1 className=\"content-heading\">\r\n                                Ingeschreven voor project <strong>{project.name}</strong>\r\n                            </h1>\r\n                        ) : (\r\n                            <>\r\n                                <Row>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"w-button-group-left\">\r\n                                        <Link to={`/inschrijven-projecten`}>\r\n                                            <Button className={'w-button'} size=\"sm\">\r\n                                                Inschrijven projecten\r\n                                            </Button>\r\n                                        </Link>\r\n                                    </ButtonGroup>\r\n                                </Row>\r\n                                <h1 className=\"content-heading\">\r\n                                    Schrijf <strong>{contact.fullNameFnf}</strong> in voor project{' '}\r\n                                    <strong>{project.name}</strong>\r\n                                </h1>\r\n                            </>\r\n                        )}\r\n                        <MasterForm\r\n                            portalSettings={portalSettings}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={registerValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            setSucces={setSucces}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegisterProjectWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegisterProject {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from './../../../../helpers/ValidationSchemaPersonal';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\nimport InputText from '../../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction PersonalAddressEdit({ initialContact, handleSubmitContactAddressValues }) {\r\n    const validationSchema = ValidationSchemaPersonal.validationSchemaPostalCodeAndNumber;\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactAddressValues(values, actions);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    return (\r\n                        <Form>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Op dit moment zijn je adresgegevens nog niet bij ons bekend.\r\n                                            <br />\r\n                                            Er zijn projecten waarop je kan inschrijven die afhankelijk van je adres\r\n                                            zijn.\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={12}>\r\n                                    <FormLabel className={'field-label'}>Postcode en huisnummer</FormLabel>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"primaryAddress.postalCode\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"postal_code\"\r\n                                                        placeholder={'Postcode'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"primaryAddress.number\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"street_number\"\r\n                                                        placeholder={'Nummer'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"primaryAddress.addition\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"addition\"\r\n                                                        placeholder={'Toevoeging'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Link to={`/`}>\r\n                                            <Button variant={'outline-dark'} size=\"sm\">\r\n                                                Annuleren\r\n                                            </Button>\r\n                                        </Link>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonalAddressEdit;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaOrganisation from '../../../../helpers/ValidationSchemaOrganisation';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\nimport InputText from '../../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction OrganisationAddressEdit({ initialContact, handleSubmitContactAddressValues }) {\r\n    const validationSchema = ValidationSchemaOrganisation.validationSchemaPostalCodeAndNumber;\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactAddressValues(values, actions);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    return (\r\n                        <Form>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Op dit moment zijn je adresgegevens nog niet bij ons bekend.\r\n                                            <br />\r\n                                            Er zijn projecten waarop je kan inschrijven die afhankelijk van je adres\r\n                                            zijn.\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={12}>\r\n                                    <FormLabel className={'field-label'}>Postcode en huisnummer</FormLabel>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"visitAddress.postalCode\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"postal_code\"\r\n                                                        placeholder={'Postcode'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"visitAddress.number\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"street_number\"\r\n                                                        placeholder={'Nummer'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"visitAddress.addition\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"addition\"\r\n                                                        placeholder={'Toevoeging'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Link to={`/`}>\r\n                                            <Button variant={'outline-dark'} size=\"sm\">\r\n                                                Annuleren\r\n                                            </Button>\r\n                                        </Link>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrganisationAddressEdit;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { FaInfoCircle } from 'react-icons/fa';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport rebaseContact from '../../../helpers/RebaseContact';\r\nimport PersonalAddressEdit from './address-person/Edit';\r\nimport OrganisationAddressEdit from './address-organisation/Edit';\r\n\r\nfunction ProjectList(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [contactProjectsArray, setContactProjectsArray] = useState([]);\r\n    const [sceOrPcrProjectsAvailable, setSceOrPcrProjectsAvailable] = useState(false);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        (function callFetchProjects() {\r\n            setLoading(true);\r\n            // Call Api if current selected contact id is filled\r\n            if (props.currentSelectedContact.id) {\r\n                // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n                if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                    callFetchContact();\r\n                    callFetchContactProjects();\r\n                }\r\n            }\r\n        })();\r\n    }, [props.currentSelectedContact]);\r\n\r\n    useEffect(() => {\r\n        (function determineSceOrPcrProjectsAvailable() {\r\n            if (contactProjectsArray.length > 0) {\r\n                contactProjectsArray.find(function(project) {\r\n                    return project.isSceOrPcrProject && setSceOrPcrProjectsAvailable(true);\r\n                });\r\n            }\r\n        })();\r\n    }, [contactProjectsArray.length > 0]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function callFetchContactProjects() {\r\n        ContactAPI.fetchContactProjects(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContactProjectsArray(payload.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function handleSubmitContactAddressValues(values, actions) {\r\n        const updatedContact = { ...contact, ...values, projectId: null };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                actions.setSubmitting(false);\r\n                callFetchContact();\r\n                callFetchContactProjects();\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        Overzicht projecten waarop <strong>{props.currentSelectedContact.fullNameFnf}</strong> kan\r\n                        inschrijven.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            {sceOrPcrProjectsAvailable && contact.noAddressesFound && contact.typeId === 'person' ? (\r\n                <PersonalAddressEdit\r\n                    initialContact={contact}\r\n                    handleSubmitContactAddressValues={handleSubmitContactAddressValues}\r\n                />\r\n            ) : sceOrPcrProjectsAvailable && contact.noAddressesFound && contact.typeId === 'organisation' ? (\r\n                <OrganisationAddressEdit\r\n                    initialContact={contact}\r\n                    handleSubmitContactAddressValues={handleSubmitContactAddressValues}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <p>Klik op het project voor meer details.</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isLoading ? (\r\n                                <LoadingView />\r\n                            ) : contactProjectsArray.length === 0 ? (\r\n                                'Geen projecten beschikbaar om op in te schrijven.'\r\n                            ) : (\r\n                                <Table responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Organisatie</th>\r\n                                            <th>Project</th>\r\n                                            <th>Ingeschreven</th>\r\n                                            <th>Start inschrijving</th>\r\n                                            <th>Einde inschrijving</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {contactProjectsArray.map(project => (\r\n                                            <tr key={project.id}>\r\n                                                <td>{project.administrationName}</td>\r\n                                                <td>\r\n                                                    {project.allowChangeParticipation ? (\r\n                                                        <>\r\n                                                            {project.name} (\r\n                                                            <Link to={`/project/${project.id}`}>\r\n                                                                wijzig inschrijving\r\n                                                            </Link>\r\n                                                            )\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            {!project.hasParticipation &&\r\n                                                            project.allowRegisterToProject ? (\r\n                                                                <Link to={`/project/${project.id}`}>\r\n                                                                    {project.name}\r\n                                                                </Link>\r\n                                                            ) : (\r\n                                                                <span className={'text-muted'}>{project.name}</span>\r\n                                                            )}\r\n                                                        </>\r\n                                                    )}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {project.hasParticipation ? (\r\n                                                        <>\r\n                                                            {project.allowPayMollie ? (\r\n                                                                <div className=\"text-center\">\r\n                                                                    Nog niet betaald,\r\n                                                                    <br />\r\n                                                                    <a href={project.econobisPaymentLink}>betaal nu</a>\r\n                                                                </div>\r\n                                                            ) : (\r\n                                                                <div className=\"text-success text-center\">✔</div>\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <div className=\"text-center\">\r\n                                                            {!project.allowRegisterToProject ? (\r\n                                                                <>\r\n                                                                    <FaInfoCircle\r\n                                                                        color={'blue'}\r\n                                                                        size={'15px'}\r\n                                                                        data-tip={`${project.textNotAllowedRegisterToProject}`}\r\n                                                                        data-for={`project-${project.id}`}\r\n                                                                    />\r\n                                                                    <ReactTooltip\r\n                                                                        id={`project-${project.id}`}\r\n                                                                        effect=\"float\"\r\n                                                                        place=\"bottom\"\r\n                                                                        multiline={true}\r\n                                                                        aria-haspopup=\"true\"\r\n                                                                    />\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {project.dateStartRegistrations\r\n                                                        ? moment(project.dateStartRegistrations).format('LL')\r\n                                                        : ''}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {project.dateEndRegistrations\r\n                                                        ? moment(project.dateEndRegistrations).format('LL')\r\n                                                        : ''}\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function ProjectListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => <ProjectList {...props} currentSelectedContact={currentSelectedContact} />}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction LoanDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                    <FormLabel>Lening nodig</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.amountOfLoanNeeded)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.minAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.maxAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoanDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction ObligationDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige hoofdsom per obligatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal obligaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ObligationDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction CapitalDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CapitalDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction PcrDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PcrDetails;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../../api/project/ProjectAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport LoanDetails from './LoanDetails';\r\nimport ObligationDetails from './ObligationDetails';\r\nimport CapitalDetails from './CapitalDetails';\r\nimport PcrDetails from './PcrDetails';\r\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction ProjectDetails({ match }) {\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n    const [project, setProject] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function callFetchProject() {\r\n                setLoading(true);\r\n                ProjectAPI.fetchProject(match.params.id)\r\n                    .then(payload => {\r\n                        setProject(payload.data.data);\r\n                        setCurrentThemeSettings(payload.data.data.administration.portalSettingsLayoutAssigned);\r\n                        setLoading(false);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [match, currentSelectedContact]);\r\n\r\n    function renderDetails() {\r\n        switch (project.projectType.codeRef) {\r\n            case 'loan':\r\n                return <LoanDetails project={project} />;\r\n            case 'obligation':\r\n                return <ObligationDetails project={project} />;\r\n            case 'capital':\r\n                return <CapitalDetails project={project} />;\r\n            case 'postalcode_link_capital':\r\n                return <PcrDetails project={project} />;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    if (isEmpty(project)) {\r\n        return (\r\n            <Container className={'content-section'}>\r\n                {isLoading ? (\r\n                    <LoadingView />\r\n                ) : (\r\n                    <Row>\r\n                        <Col>\r\n                            <p>Geen projectdetails bekend</p>\r\n                        </Col>\r\n                    </Row>\r\n                )}\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"w-button-group-left\">\r\n                            <Link to={`/inschrijven-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Inschrijven projecten\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">Inschrijven project</h1>\r\n                            <div className=\"content-subheading\">Organisatie {project.administration.name}</div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {renderDetails()}\r\n\r\n                    <Row className={'mt-5'}>\r\n                        <Col>\r\n                            <p>\r\n                                Meer informatie over dit project vind je{' '}\r\n                                <a href={`${project.linkProjectInfo}`} target=\"_blank\">\r\n                                    hier\r\n                                </a>\r\n                            </p>\r\n                            <p>Wil je inschrijven op dit project. Klik dan op \"Ga naar inschrijven\".</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijven/${project.id}`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Ga naar inschrijven\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ProjectDetails;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction RegistrationList(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContact(payload.data.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        De projecten waarin <strong>{contact.fullNameFnf}</strong> deelneemt.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {isLoading ? (\r\n                        <LoadingView />\r\n                    ) : contact.participations.length === 0 ? (\r\n                        'Geen huidige deelnames aanwezig.'\r\n                    ) : (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Organisatie</th>\r\n                                    <th>Project</th>\r\n                                    <th>Deelname</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {contact.participations.map(participation => {\r\n                                    if (\r\n                                        !participation.project.dateEnd ||\r\n                                        moment(participation.project.dateEnd).format('YYYY-MM-DD') >=\r\n                                            moment().format('YYYY-MM-DD')\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={participation.id}>\r\n                                                <td>{participation.project.administration.name}</td>\r\n                                                <td>\r\n                                                    <Link to={`/project-deelname/${participation.id}`}>\r\n                                                        {participation.project.name}\r\n                                                    </Link>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {participation.project.projectType.codeRef == 'loan' ? (\r\n                                                        <>\r\n                                                            {participation.amountInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountInteressed)}{' '}\r\n                                                                    <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountOptioned)}{' '}\r\n                                                                    <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening {MoneyPresenter(participation.amountGranted)}{' '}\r\n                                                                    <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountDefinitive)}{' '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'obligation' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' obligaties '} <em> (Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' obligaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' obligaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' obligaties '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef ==\r\n                                                    'postalcode_link_capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegistrationListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegistrationList {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormPersonal = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            personTitleId: '',\r\n            personFirstName: '',\r\n            personLastName: '',\r\n        }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor jezelf</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonGroup aria-label=\"create-account\" className=\"w-button-group\">\r\n                            <ButtonText\r\n                                buttonText={'Account aanmaken'}\r\n                                buttonClassName={'authorization-button'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                                loadingSpinnerColor={'#034b8c'}\r\n                                disabled={showSuccessMessage}\r\n                            />\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormPersonal;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    organisationName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormOrganisation = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '', organisationName: '', personTitleId: '', personFirstName: '', personLastName: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor je organisatie</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"organisationName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Naam Organisatie'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens contactpersoon</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonText\r\n                            buttonText={'Account aanmaken'}\r\n                            buttonClassName={'authorization-button'}\r\n                            size=\"sm\"\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                            disabled={showSuccessMessage}\r\n                        />\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormOrganisation;\r\n","import React, { useState } from 'react';\r\nimport { GoogleReCaptchaProvider, useGoogleReCaptcha } from 'react-google-recaptcha-v3';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport NewAccountFormPersonal from './NewAccountFormPersonal';\r\nimport NewAccountFormOrganisation from './NewAccountFormOrganisation';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, ButtonToolbar } from 'react-bootstrap';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n\r\nconst NewAccount = props => {\r\n    const { executeRecaptcha } = useGoogleReCaptcha();\r\n    const [contactType, setContactType] = useState('person');\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n\r\n    async function handleSubmit(values, actions) {\r\n        if (!executeRecaptcha) {\r\n            return;\r\n        }\r\n        const reCaptchaToken = await executeRecaptcha('signup_page');\r\n\r\n        AuthAPI.newAccount({ ...values, contactType: contactType, reCaptchaToken })\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If new account fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                if (error.response && error.response.status === 404) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres.'\r\n                    );\r\n                } else if (error.response && error.response.status === 405) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een contact met het e-mailadres, voornaam en achternaam dat je hebt ingevuld. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres, voornaam of achternaam.'\r\n                    );\r\n                } else {\r\n                    setErrorMessage('Fout bij aanmaken nieuw account!');\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect(from) {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer && !showSuccessMessage ? (\r\n                redirect('/dashboard')\r\n            ) : (\r\n                <div className=\"authorization-container\">\r\n                    <Container fluid className=\"authorization-text\">\r\n                        <Row className=\"justify-content-center align-content-start align-content-lg-center full-height p-2\">\r\n                            <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"4\" xl=\"4\">\r\n                                <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container-small\" />\r\n\r\n                                {showSuccessMessage ? (\r\n                                    redirect('nieuw-account-succes')\r\n                                ) : (\r\n                                    <>\r\n                                        <Row className=\"justify-content-center\">\r\n                                            <h3 className={'authorization-text'}>Nieuw account</h3>\r\n                                        </Row>\r\n                                        <Row className=\"justify-content-center\">\r\n                                            <p className={'authorization-text'}>\r\n                                                Maak binnen 2 minuten een account aan.\r\n                                            </p>\r\n                                        </Row>\r\n                                        <br />\r\n                                        <Row className=\"justify-content-center\">\r\n                                            <ButtonToolbar toggle>\r\n                                                <Col>\r\n                                                    <Button\r\n                                                        className={'authorization-button'}\r\n                                                        variant={\r\n                                                            contactType === 'person'\r\n                                                                ? 'primary fixed-height'\r\n                                                                : 'light fixed-height'\r\n                                                        }\r\n                                                        block\r\n                                                        onClick={() => setContactType('person')}\r\n                                                    >\r\n                                                        Voor jezelf\r\n                                                    </Button>\r\n                                                </Col>\r\n                                                <Col>\r\n                                                    <Button\r\n                                                        className={'authorization-button'}\r\n                                                        variant={contactType === 'organisation' ? 'primary' : 'light'}\r\n                                                        block\r\n                                                        onClick={() => setContactType('organisation')}\r\n                                                    >\r\n                                                        Voor je organisatie\r\n                                                    </Button>\r\n                                                </Col>\r\n                                            </ButtonToolbar>\r\n                                        </Row>\r\n                                        <br />\r\n\r\n                                        {contactType === 'person' ? (\r\n                                            <NewAccountFormPersonal\r\n                                                handleSubmit={handleSubmit}\r\n                                                showSuccessMessage={showSuccessMessage}\r\n                                            />\r\n                                        ) : (\r\n                                            <NewAccountFormOrganisation\r\n                                                handleSubmit={handleSubmit}\r\n                                                showSuccessMessage={showSuccessMessage}\r\n                                            />\r\n                                        )}\r\n                                        {showError ? (\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    {errorMessage}\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        ) : null}\r\n                                        <Row className=\"justify-content-center\">\r\n                                            <ButtonGroup aria-label=\"redirect-to-login\" className=\"w-button-group\">\r\n                                                <Col>\r\n                                                    <ButtonText\r\n                                                        buttonText={'Heb je al een account ?'}\r\n                                                        onClickAction={toggleRedirect}\r\n                                                        buttonClassName={'authorization-button'}\r\n                                                        size=\"sm\"\r\n                                                    />\r\n                                                </Col>\r\n                                            </ButtonGroup>\r\n                                        </Row>\r\n                                    </>\r\n                                )}\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nfunction NewAccountWithProvider() {\r\n    const RE_CAPTCHA_KEY = process.env.REACT_APP_RE_CAPTCHA_KEY;\r\n\r\n    return (\r\n        <GoogleReCaptchaProvider reCaptchaKey={RE_CAPTCHA_KEY} language={'nl'}>\r\n            <NewAccount />\r\n        </GoogleReCaptchaProvider>\r\n    );\r\n}\r\n\r\nexport default NewAccountWithProvider;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NewAccountSuccess = () => {\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                    <div>\r\n                        <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                        <p className={'authorization-text'}>\r\n                            Binnen enkele minuten ontvang je een e-mail met een persoonlijke link. Via deze link kun je\r\n                            je account activeren.\r\n                            <br />\r\n                            <br />\r\n                            <strong>Let op:</strong> Het kan zijn dat de mail door een spamfilter is geblokkeerd.\r\n                            Spamfilters van bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de\r\n                            Spam/Reclame of je onze mail daar terug vindt.\r\n                        </p>\r\n                        <a onClick={window.close} href=\"#\" className=\"authorization-link\">\r\n                            Sluit venster\r\n                        </a>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NewAccountSuccess;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email('Geen geldig e-mailadres')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountEmail() {\r\n    const [portalUserEmail, setPortalUserEmail] = useState('');\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (function callFetchUserEmail() {\r\n            PortalUserAPI.fetchPortalUserEmail()\r\n                .then(payload => {\r\n                    setPortalUserEmail(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n    function handleSubmitChangeEmail(values, actions) {\r\n        PortalUserAPI.changeEmail(values)\r\n            .then(payload => {\r\n                setPortalUserEmail(values.email);\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', changePrimaryEmailAddress: false }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangeEmail(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Inlog e-mail is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit\r\n                            e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan\r\n                            alsjeblieft een ander e-mailadres.\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12}>\r\n                            <FormLabel className={'field-label'}>Huidig e-mailadres</FormLabel>\r\n                            <TextBlock>{portalUserEmail}</TextBlock>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label pt-1'}>Nieuw e-mailadres</Form.Label>\r\n                            <Field\r\n                                name=\"email\"\r\n                                render={({ field }) => (\r\n                                    <InputText field={field} errors={errors} touched={touched} id=\"email\" />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Field\r\n                                name=\"changePrimaryEmailAddress\"\r\n                                render={({ field }) => (\r\n                                    <label className=\"w-checkbox checkbox-fld\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            {...field}\r\n                                            id=\"change-primary-email-address\"\r\n                                            checked={field.value}\r\n                                            className=\"w-checkbox-input checkbox\"\r\n                                        />\r\n                                        <span\r\n                                            htmlFor=\"change-primary-email-address\"\r\n                                            className=\"checkbox-label w-form-label\"\r\n                                        >\r\n                                            Wijziging ook doorvoeren op huidig correspondentie e-mailadres?\r\n                                        </span>\r\n                                    </label>\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig e-mailadres'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountEmail;\r\n","import React, { useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountPassword() {\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    function handleSubmitChangePassword(values, actions) {\r\n        PortalUserAPI.changePassword(values)\r\n            .then(payload => {\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ password: '', passwordConfirmation: '' }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangePassword(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Wachtwoord is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Fout bij wijzigen wachtwoord!\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label'}>Nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"password\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"password\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label mt-0'}>Herhaal nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"passwordConfirmation\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"passwordConfirmation\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Herhaal nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig wachtwoord'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountPassword;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ChangeAccountEmail from './Email';\r\nimport ChangeAccountPassword from './Password';\r\n\r\nfunction ChangeAccount() {\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">Wijzig inloggegevens</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={6} className={'mb-5'}>\r\n                    <h3 className={'h3'}>Wijzig inlog e-mailadres</h3>\r\n\r\n                    <ChangeAccountEmail />\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <h3 className={'h3'}>Wijzig wachtwoord</h3>\r\n\r\n                    <ChangeAccountPassword />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ChangeAccount;\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction AboutUs() {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentSelectedContact.id) {\r\n                ContactAPI.fetchContactRelatedAdministrations(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        },\r\n        [currentSelectedContact.id]\r\n    );\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        Overzicht organisaties waar <strong>{currentSelectedContact.fullNameFnf}</strong> een relatie\r\n                        mee heeft.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            {state.isLoading ? (\r\n                <Row>\r\n                    <Col>\r\n                        <LoadingView />\r\n                    </Col>\r\n                </Row>\r\n            ) : state.result.length === 0 ? (\r\n                <Row>\r\n                    <Col>Geen informatie organisaties beschikbaar waar contact een relatie mee heeft.</Col>\r\n                </Row>\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <p>Klik op de organisatie voor meer details.</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Naam</th>\r\n                                <th>Adres</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {state.result.map(item => (\r\n                                <tr key={item.id}>\r\n                                    <td>\r\n                                        <Link to={`/over-ons-organisatie/${item.id}`}>{item.name}</Link>\r\n                                    </td>\r\n                                    <td>\r\n                                        {item.address}, {item.city}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AboutUs;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nfunction RegistrationDetailsTitle({ contactName, projectName, administrationName }) {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <h1 className=\"content-heading\">\r\n                    Deelname van {contactName} in de {projectName}\r\n                </h1>\r\n                <span className=\"content-subheading\">Organisatie {administrationName}</span>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsTitle;\r\n","export default field => {\r\n    switch (field.type) {\r\n        case 'date':\r\n        case 'string':\r\n            return 'text-left';\r\n        case 'decimal':\r\n        case 'money':\r\n        case 'integer':\r\n            return 'text-right';\r\n        default:\r\n            return 'text-left';\r\n    }\r\n};\r\n","import moneyPresenter from './MoneyPresenter';\r\nimport moment from 'moment';\r\n\r\nexport default field => {\r\n    switch (field.type) {\r\n        case 'date':\r\n            return field.value ? moment(field.value).format('L') : '';\r\n        case 'decimal':\r\n            return field.value\r\n                ? field.value.toLocaleString('nl', {\r\n                      minimumFractionDigits: 2,\r\n                      maximumFractionDigits: 2,\r\n                  })\r\n                : '';\r\n        case 'money':\r\n            return moneyPresenter(field.value);\r\n        case 'string':\r\n        case 'integer':\r\n        default:\r\n            return field.value;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport classNameBasedOnTypePresenter from '../../../../helpers/classNameBasedOnTypePresenter';\r\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\r\n\r\nfunction RegistrationDetailsProjectTable({ fields }) {\r\n    if (!fields || fields.length === 0) return <p>Geen projectdetails bekend</p>;\r\n\r\n    return (\r\n        <Table className={'my-4'}>\r\n            <tbody>\r\n                {fields.map((field, index) => (\r\n                    <tr key={index}>\r\n                        <td>\r\n                            <strong>{field.label}</strong>\r\n                        </td>\r\n                        <td>{valueBasedOnTypePresenter(field)}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsProjectTable;\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\r\nimport classNameBasedOnTypePresenter from '../../../../helpers/classNameBasedOnTypePresenter';\r\n\r\nfunction RegistrationDetailsMutationTable({ participantMutations }) {\r\n    if (!participantMutations || participantMutations.length === 0) return <p>Geen mutaties bekend</p>;\r\n\r\n    return (\r\n        <Table responsive={true} className={'my-4'}>\r\n            <thead>\r\n                <tr>\r\n                    {participantMutations[0].fields.map((field, index) => (\r\n                        <th key={index}>{field.label}</th>\r\n                    ))}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {participantMutations.map((participantMutation, index) => (\r\n                    <tr key={index}>\r\n                        {participantMutation.fields.map((field, index) => (\r\n                            <td className={classNameBasedOnTypePresenter(field)} key={index}>\r\n                                {valueBasedOnTypePresenter(field)}\r\n                            </td>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsMutationTable;\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport RegistrationDetailsTitle from './Title';\r\nimport RegistrationDetailsProjectTable from './project-table';\r\nimport RegistrationDetailsMutationTable from './mutation-table';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction RegistrationDetails({ match: { params } }) {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function() {\r\n                ParticipantProjectAPI.show(params.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setCurrentThemeSettings(payload.data.data.basicInformation.portalSettingsLayoutAssigned);\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [params.id, currentSelectedContact]);\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {state.isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"w-button-group-left\">\r\n                            <Link to={`/inschrijvingen-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Huidige deelnames\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <RegistrationDetailsTitle {...state.result.basicInformation} />\r\n                    {state.result.length === 0 ? (\r\n                        <Row>\r\n                            <Col>Geen huidige deelname aanwezig.</Col>\r\n                        </Row>\r\n                    ) : (\r\n                        <>\r\n                            <RegistrationDetailsProjectTable fields={state.result.fields} />\r\n                            <RegistrationDetailsMutationTable\r\n                                participantMutations={state.result.participantMutations}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetails;\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { FaFileDownload } from 'react-icons/all';\r\nimport fileDownload from 'js-file-download';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction FinancialOverviewDocuments() {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentSelectedContact.id) {\r\n                ContactAPI.fetchContactFinancialOverviewDocuments(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        },\r\n        [currentSelectedContact.id]\r\n    );\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    function downloadFile(e, id) {\r\n        e.preventDefault();\r\n\r\n        ContactAPI.financialOverviewContactDownload(id)\r\n            .then(payload => {\r\n                fileDownload(payload.data, payload.headers['x-filename']);\r\n            })\r\n            .catch(() => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {state.isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading mt-0\">Waardestaat documenten</h1>\r\n                        </Col>\r\n                    </Row>\r\n                    {state.result.length === 0 ? (\r\n                        <Row>\r\n                            <Col>Geen waardestaat documenten aanwezig om te tonen.</Col>\r\n                        </Row>\r\n                    ) : (\r\n                        <Table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Naam</th>\r\n                                    <th>Omschrijving</th>\r\n                                    <th>Downloaden</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {state.result.map(item => (\r\n                                    <tr key={item.id}>\r\n                                        <td>{item.name}</td>\r\n                                        <td>{item.description}</td>\r\n                                        <td>\r\n                                            <a href=\"#\" onClick={e => downloadFile(e, item.id)}>\r\n                                                <FaFileDownload /> downloaden\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default FinancialOverviewDocuments;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n    fetchAdministration: function(id) {\r\n        const requestUrl = `/jory/administration/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'name',\r\n                        'address',\r\n                        'postalCode',\r\n                        'city',\r\n                        'kvkNumber',\r\n                        'iBAN',\r\n                        'ibanAttn',\r\n                        'btwNumber',\r\n                        'website',\r\n                    ],\r\n                    rlt: {\r\n                        country: { fld: ['name'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport { Card, Table } from 'react-bootstrap';\r\nimport AdministrationAPI from '../../../api/administration/AdministrationAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction AboutUsAdministration({ match }) {\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n    const [administration, setAdministration] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function callFetchAdministration() {\r\n                setLoading(true);\r\n                console.log(match);\r\n                AdministrationAPI.fetchAdministration(match.params.id)\r\n                    .then(payload => {\r\n                        setAdministration(payload.data.data);\r\n                        setLoading(false);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [match, currentSelectedContact]);\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"w-button-group-left\">\r\n                            <Link to={`/over-ons`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Over ons\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <Row className={'justify-content-center align-content-center flex-wrap'}>\r\n                        <Col xs={12} lg={6} className={'mb-3'}>\r\n                            <Card>\r\n                                <Card.Header className={'card-header_title'}>\r\n                                    Informatie over {administration.name}\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    <Table responsive>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Naam</strong>\r\n                                                </td>\r\n                                                <td>{administration.name}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Adres</strong>\r\n                                                </td>\r\n                                                <td>{administration.address}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Postcode / Plaats</strong>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {administration.postalCode} {administration.city}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Kvk</strong>\r\n                                                </td>\r\n                                                <td>{administration.kvkNumber}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Website</strong>\r\n                                                </td>\r\n                                                <td>{administration.website}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>IBAN</strong>\r\n                                                </td>\r\n                                                <td>{administration.iBAN}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>IBAN t.n.v.</strong>\r\n                                                </td>\r\n                                                <td>{administration.ibanAttn}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>BTW nummer</strong>\r\n                                                </td>\r\n                                                <td>{administration.btwNumber}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AboutUsAdministration;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchByCode: code => {\r\n        const requestUrl = `/jory/participant-mutation`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    flt: {\r\n                        f: 'code',\r\n                        d: code,\r\n                    },\r\n                    fld: ['econobisPaymentLink', 'isPaidByMollie'],\r\n                    rlt: {\r\n                        participation: {\r\n                            rlt: {\r\n                                project: {\r\n                                    fld: ['name', 'textRegistrationFinished'],\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ParticipantMutationAPI from '../../../api/participant-mutation/ParticipantMutationAPI';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport {PortalUserConsumer} from '../../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport {Link} from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\n\r\nfunction ProjectMollieRedirect({match, currentSelectedContact}) {\r\n    const [participantMutation, setParticipantMutation] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const handlePaymentRetry = () => {\r\n        window.location.href = participantMutation.econobisPaymentLink;\r\n    }\r\n\r\n    useEffect(() => {\r\n        (function fetchContactAndProject() {\r\n            setLoading(true);\r\n\r\n            axios\r\n                .all([\r\n                    ParticipantMutationAPI.fetchByCode(match.params.code),\r\n                ])\r\n                .then(\r\n                    axios.spread((payloadParticipantMutation) => {\r\n                        if(payloadParticipantMutation.data.data.length !== 1){\r\n                            alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                            setLoading(false);\r\n                            return;\r\n                        }\r\n\r\n                        setParticipantMutation(payloadParticipantMutation.data.data[0]);\r\n                        setLoading(false);\r\n                    })\r\n                )\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [match]);\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView/>\r\n            ) : (\r\n                <>\r\n                    <Row className={'mb-4'}>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                {\r\n                                    participantMutation.isPaidByMollie ? (\r\n                                        <>Ingeschreven voor\r\n                                            project <strong>{participantMutation.participation.project.name}</strong></>\r\n                                    ) : (\r\n                                        <>Betaling voor\r\n                                            project <strong>{participantMutation.participation.project.name}</strong> nog\r\n                                            niet gelukt.</>\r\n                                    )\r\n                                }\r\n\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            {participantMutation.isPaidByMollie ? (\r\n                                <>\r\n                                    <p>\r\n                                        { participantMutation.participation.project.textRegistrationFinished.split('\\n').map((item, key) => {\r\n                                            return <span key={key}>{item}<br/></span>\r\n                                        }) }\r\n                                    </p>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <p>\r\n                                        Uw inschrijving kon nog niet worden afgerond doordat de betaling niet is gelukt,\r\n                                        gebruik onderstaande betaal button om de betaling alsnog uit te voeren.</p>\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar mijn huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                                {!participantMutation.isPaidByMollie && (\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handlePaymentRetry}>\r\n                                        Betalen\r\n                                    </Button>\r\n                                )}\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function ProjectMollieRedirectWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({currentSelectedContact}) => (\r\n                <ProjectMollieRedirect {...props} currentSelectedContact={currentSelectedContact}/>\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch } from 'react-router-dom';\r\nimport ProtectedRoute from './route/ProtectedRoute';\r\nimport PublicRoute from './route/PublicRoute';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport { PortalUserProvider } from './context/PortalUserContext';\r\nimport Login from './container/authorization/login';\r\nimport Register from './container/authorization/register';\r\nimport Forgot from './container/authorization/forgot';\r\nimport Reset from './container/authorization/reset';\r\nimport Dashboard from './container/dashboard';\r\nimport ContactDetails from './container/contact-details';\r\nimport MyAreasOfInterest from './container/my-areas-of-interest';\r\nimport RegisterProject from './container/register';\r\nimport ProjectList from './container/project/list';\r\nimport ProjectDetails from './container/project/details';\r\nimport RegistrationList from './container/registration/list';\r\nimport NewAccount from './container/authorization/new-account';\r\nimport NewAccountSuccess from './container/authorization/new-account/NewAccountSuccess';\r\nimport ChangeAccount from './container/authorization/change-account';\r\nimport AboutUs from './container/about-us/list';\r\nimport RegistrationDetails from './container/registration/details';\r\nimport FinancialOverviewDocuments from './container/financial-overview-documents/list';\r\nimport { ThemeSettingsProvider } from './context/ThemeSettingsContext';\r\nimport AboutUsAdministration from './container/about-us/details';\r\nimport ProjectMollieRedirectWithContext from './container/register/mollie-redirect';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n                <PortalUserProvider>\r\n                    <ThemeSettingsProvider>\r\n                        <Switch>\r\n                            <ProtectedRoute exact path=\"/\" component={Dashboard} />\r\n                            <ProtectedRoute path=\"/dashboard\" component={Dashboard} />\r\n                            <ProtectedRoute path=\"/gegevens\" component={ContactDetails} />\r\n                            <ProtectedRoute path=\"/mijn-interessegebieden\" component={MyAreasOfInterest} />\r\n                            <ProtectedRoute\r\n                                path=\"/inschrijven/mollie-resultaat/:code\"\r\n                                component={ProjectMollieRedirectWithContext}\r\n                            />\r\n                            <ProtectedRoute path=\"/inschrijven/:id\" component={RegisterProject} />\r\n                            <ProtectedRoute path=\"/inschrijven-projecten\" component={ProjectList} />\r\n                            <ProtectedRoute path=\"/inschrijvingen-projecten\" component={RegistrationList} />\r\n                            <ProtectedRoute path=\"/project-deelname/:id\" component={RegistrationDetails} />\r\n                            <ProtectedRoute path=\"/project/:id\" component={ProjectDetails} />\r\n                            <ProtectedRoute path=\"/waardestaat-documenten\" component={FinancialOverviewDocuments} />\r\n                            <ProtectedRoute path=\"/wijzig-inloggegevens\" component={ChangeAccount} />\r\n                            <ProtectedRoute path=\"/over-ons\" component={AboutUs} />\r\n                            <ProtectedRoute path=\"/over-ons-organisatie/:id\" component={AboutUsAdministration} />\r\n                            <PublicRoute path=\"/login\" component={Login} />\r\n                            <PublicRoute path=\"/activeer-registratie/:registrationCode/:email\" component={Register} />\r\n                            <PublicRoute path=\"/wachtwoord-vergeten\" component={Forgot} />\r\n                            <PublicRoute path=\"/wachtwoord-wijzigen/:token/:email\" component={Reset} />\r\n                            <PublicRoute path=\"/nieuw-account\" component={NewAccount} />\r\n                            <PublicRoute path=\"/nieuw-account-succes\" component={NewAccountSuccess} />\r\n                        </Switch>\r\n                    </ThemeSettingsProvider>\r\n                </PortalUserProvider>\r\n            </AuthProvider>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/normalize.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-day-picker/lib/style.css';\r\nimport './css/webflow.css';\r\nimport './css/econobis.webflow.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'moment/locale/nl';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// Server data is set and can now removed\r\nvar serverDataScript = document.getElementById('server-data');\r\nserverDataScript.remove();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}