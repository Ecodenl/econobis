{"version":3,"sources":["context/AuthContext.js","context/PortalUserContext.js","context/ThemeSettingsContext.js","components/layout/Header.js","api/default-setup/AxiosInstance.js","api/portal-user/PortalUserAPI.js","route/ProtectedRoute.js","route/PublicRoute.js","components/form/InputText.js","components/button/ButtonText.js","container/authorization/login/Form.js","api/auth/AuthAPI.js","api/portal-settings/PortalSettingsAPI.js","container/authorization/login/index.js","container/authorization/register/Form.js","container/authorization/register/index.js","container/authorization/forgot/Form.js","container/authorization/forgot/index.js","container/authorization/reset/Form.js","container/authorization/reset/index.js","api/project/ProjectAPI.js","api/contact/ContactAPI.js","helpers/RebaseContact.js","components/general/LoadingView.js","components/general/TextBlock.js","container/contact-details/default-form-personal/View.js","components/form/Select.js","data/Countries.js","data/EnergySuppliers.js","data/Titles.js","data/LastNamePrefixes.js","components/form/InputDate.js","container/contact-details/default-form-personal/Edit.js","helpers/ValidationSchemaPersonal.js","container/contact-details/Personal.js","container/contact-details/default-form-organisation/View.js","container/contact-details/default-form-organisation/Edit.js","helpers/ValidationSchemaOrganisation.js","container/contact-details/Organisation.js","container/contact-details/index.js","container/my-areas-of-interest/Form.js","container/my-areas-of-interest/index.js","helpers/MoneyPresenter.js","helpers/CalculateTransactionCosts.js","components/form/InputTextCurrency.js","container/register/steps/StepOneLoan.js","container/register/steps/StepOneObligation.js","container/register/steps/StepOneCapital.js","container/register/steps/StepOnePcr.js","container/register/steps/StepTwo.js","container/register/steps/StepThree.js","components/general/ViewHtmlAsText.js","api/participant-project/ParticipantProjectAPI.js","container/register/steps/StepFour.js","container/register/steps/StepFive.js","container/register/steps/index.js","container/register/MasterForm.js","container/register/index.js","container/project/list/index.js","container/project/details/LoanDetails.js","container/project/details/ObligationDetails.js","container/project/details/CapitalDetails.js","container/project/details/PcrDetails.js","container/project/details/index.js","container/registration/list/index.js","container/authorization/new-account/NewAccountFormPersonal.js","container/authorization/new-account/NewAccountFormOrganisation.js","container/authorization/new-account/index.js","container/authorization/new-account/NewAccountSuccess.js","container/authorization/change-account/Email.js","container/authorization/change-account/Password.js","container/authorization/change-account/index.js","container/about-us/list/index.js","container/registration/details/Title.js","container/registration/details/project-table/index.js","helpers/classNameBasedOnTypePresenter.js","container/registration/details/mutation-table/index.js","helpers/ValueBasedOnTypePresenter.js","container/registration/details/index.js","container/financial-overview-documents/list/index.js","api/administration/AdministrationAPI.js","container/about-us/details/index.js","api/participant-mutation/ParticipantMutationAPI.js","container/register/mollie-redirect/index.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","localStorageToken","AuthProvider","props","useState","window","localStorage","getItem","checkIfAuth","isAuth","setAuth","Provider","value","login","payload","cbRedirect","token","access_token","removeItem","setItem","moment","format","logout","children","AuthConsumer","Consumer","PortalUserContext","user","setInitialUserData","PortalUserProvider","setUser","currentSelectedContact","setCurrentContact","selectedContactId","id","occupationUser","occupations","find","occupation","primaryContact","organisationUser","typeId","primary","switchCurrentContact","contact","resetCurrentUserToDefault","updateNameSelectedContact","fullName","updatedOccupations","map","occupationContact","PortalUserConsumer","ThemeSettingsContext","defaultThemeSettings","setInitialThemeSettings","setCurrentThemeSettings","switchToDefaultThemeSettings","ThemeSettingsProvider","setDefaultThemeSettings","currentThemeSettings","useEffect","document","documentElement","style","setProperty","portal_background_color","portal_background_text_color","login_header_background_color","login_header_background_text_color","header_icons_color","login_field_background_color","login_field_background_text_color","button_color","button_text_color","ThemeSettingsConsumer","withRouter","location","history","menuOpen","updateStateMenu","closeMenu","redirect","to","push","ref","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","useOutsideAlerter","useRef","className","ReactHtmlParser","search","replace","firstName","slice","lastName","formatProfilePicName","xs","undefined","portal_logo_file_name","src","onClick","alignRight","Toggle","Menu","Header","Item","disabled","Divider","active","occupationForPortal","key","right","width","isOpen","onStateChange","state","handleStateChange","customBurgerIcon","Fragment","pathname","BASE_URL","__SERVER_DATA__","base_url","axiosInstance","axios","create","baseURL","interceptors","request","use","config","lastActivity","add","hash","setTimeout","reload","checkTokenExpiration","AUTH_TOKEN","headers","Authorization","error","Promise","reject","get","params","jory","fld","rlt","values","post","ProtectedRoute","Component","component","rest","useLocation","useContext","PortalUserAPI","then","data","portalSettingsLayoutAssigned","catch","alert","includes","render","ProtectedRouteWithContext","PublicRoute","InputText","field","type","readOnly","placeholder","showErrorMessage","errors","touched","classNameErrorMessage","customOnChange","onChange","name","Boolean","defaultProps","ButtonText","buttonClassName","buttonText","onClickAction","loading","title","loadingSpinnerColor","size","color","validationSchema","Yup","shape","username","email","required","password","LoginForm","handleSubmit","initialValues","enableReinitialize","onSubmit","actions","setSubmitting","isSubmitting","AUTH_KEY","client_id","client_secret","client_key","grant_type","requestUrl","defaults","common","loginCredentials","keys","isLoading","setIsLoading","showError","toggleError","redirectToReferrer","toggleRedirect","from","portalActive","setPortalActive","showNewAtCooperativeLink","setShowNewAtCooperativeLink","newAtCooperativeLinkText","setNewAtCooperativeLinkText","AuthAPI","PortalSettingsAPI","fluid","sm","md","lg","xl","alt","variant","href","min","matches","passwordConfirmation","oneOf","RegisterForm","Register","match","showSuccessMessage","toggleSuccessMessage","registrationCode","decodeURIComponent","password_confirmation","RegisterWithContext","ForgotForm","Forgot","ResetForm","Reset","ResetWithContext","flt","and","f","o","d","projectType","administration","person","organisation","emailAddresses","phoneNumbers","addresses","country","primaryContactEnergySupplier","energySupplier","participations","project","registerValues","contactId","projectId","responseType","contactData","emptyAddress","street","number","addition","postalCode","city","countryId","primaryAddress","visitAddress","postalAddress","invoiceAddress","address","emptyEmail","emailCorrespondence","emailAddress","emailInvoice","emptyPhoneNumber","phoneNumberPrimary","phoneNumber","phoneNumberTwo","filter","energySupplierId","esNumber","eanElectricity","memberSince","eanGas","Loading","height","TextBlock","showPlaceholder","DefaultContactPersonalView","portalSettings","initialContact","iban","ibanAttn","didAgreeAvg","dateDidAgreeAvg","initials","lastNamePrefix","dateOfBirth","checked","htmlFor","Select","options","optionLabel","emptyOption","option","InputDate","onChangeAction","formattedDate","onDayChange","date","formatDate","parseDate","dayPickerProps","showWeekNumbers","locale","firstDayOfWeek","localeUtils","MomentLocaleUtils","inputProps","autoComplete","DefaultContactPersonalEdit","projectTypeCodeRef","setFieldValue","Titles","LastNamePrefixes","isParticipant","isParticipantSceProject","isParticipantPcrProject","Countries","e","toUpperCase","EnergySuppliers","validationSchemaBasic","test","trim","nullable","Number","isInteger","this","parent","validationSchemaAdditional","titleId","typeError","ibantools","validationSchemaPcrAdditional","ContactDetailsPersonal","handleSubmitContactValues","editButtonGroup","editForm","setEditForm","ValidationSchemaPersonal","concat","status","aria-label","isEmpty","message","DefaultContactOrganisationView","primaryOccupations","chamberOfCommerceNumber","vatNumber","website","DefaultContactOrganisationEdit","ContactDetailsOrganisation","ValidationSchemaOrganisation","ContactDetails","setContact","setPortalSettings","setLoading","prevCurrentSelectedContact","usePrevious","callFetchContact","ContactAPI","rebaseContact","switchToView","updatedContact","setStatus","response","setState","hasError","LoadingView","ContactDetailsWithContext","MyAreasOfInterestForm","console","log","arrayHelpers","myAreasOfInterest","myAreaOfInterest","index","participation","generalOptions","generalOption","MyAreasOfInterest","amount","parseFloat","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","amountOptioned","participationsOptioned","transactionCosts","varAmountOptioned","toString","varParticipationsOptioned","toFixed","transactionCostsCodeRef","transactionCostsAmount","codeRef","currentBookWorth","transactionCostsAmount3","transactionCostsPercentage3","transactionCostsAmount2","transactionCostsPercentage2","transactionCostsPercentage","transactionCostsAmountMin","transactionCostsAmountMax","InputTextCurrency","StepOneLoan","next","contactProjectData","initialRegisterValues","handleSubmitRegisterValues","transform","originalvalue","minAmountLoan","maxAmountLoan","choiceMembership","showQuestionAboutMembership","belongsToMembershipGroup","calculateAmount","calculateTransactionCostsAmount","useTransactionCostsWithMembership","calculateTransactionCosts","calculateTotalAmount","totalAmount","Label","MoneyPresenter","textIsMemberMerged","textIsNoMemberMerged","textBecomeMemberMerged","textBecomeNoMemberMerged","textTransactionCosts","StepOneObligation","integer","minParticipations","max","maxParticipations","positive","StepOneCapital","StepOnePcr","pcrYearlyPowerKwhConsumption","pcrPostalCode","checkPostalcodeLink","postalcodeLink","substring","pcrNumberOfSolarPanels","pcrInputGeneratedNumberOfKwh","PCR_POWER_KWH_CONSUMPTION_PERCENTAGE","PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL","calculateEstimatedGeneratedNumberOfKwh","calculateGeneratedNumberOfKwh","calculatePowerKwhConsumption","powerKwhConsumption","pcrEstimatedGeneratedNumberOfKwh","Math","ceil","pcrAdviseMaxNumberOfParticipations","calculateAdviseMaxNumberOfParticipations","pcrHasSolarPanels","pcrEstimatedRevenueOk","StepTwo","previous","typeContact","validationSchemaPcrPersonal","validationSchemaPcrOrganisation","isSceProject","StepThree","didAcceptAgreement","didUnderstandInfo","dangerouslySetInnerHTML","__html","textAgreeTermsMerged","textLinkAgreeTermsMerged","textLinkUnderstandInfoMerged","usesMollie","ViewHtmlAsText","StepFour","setSucces","contactDocument","setContactDocument","didAgreeRegistration","contactDocumentOk","ParticipantProjectAPI","econobisPaymentLink","textAcceptAgreementMerged","textAcceptAgreementQuestionMerged","StepFive","textRegistrationFinishedMerged","split","item","Steps","currentStep","MasterForm","setStep","RegisterProject","initialPcrValues","setRegisterValues","setProject","isSucces","setContactProjectData","formatFullName","all","ProjectAPI","spread","payloadProject","payloadContact","payloadContactProjectData","projectRegisterIndicators","allowChangeParticipation","allowPayMollie","hasParticipation","allowRegisterToProject","nextStep","textNotAllowedRegisterToProject","RegisterProjectWithContext","ProjectList","contactProjectsArray","setContactProjectsArray","sceOrPcrProjectsAvailable","setSceOrPcrProjectsAvailable","length","isSceOrPcrProject","noAddressesFound","responsive","administrationName","data-tip","data-for","effect","place","multiline","aria-haspopup","dateStartRegistrations","dateEndRegistrations","ProjectListWithContext","LoanDetails","amountOfLoanNeeded","description","ObligationDetails","totalParticipations","CapitalDetails","PcrDetails","ProjectDetails","renderDetails","linkProjectInfo","RegistrationList","dateEnd","amountInteressed","amountGranted","amountDefinitive","participationsInteressed","participationsGranted","participationsDefinitive","RegistrationListWithContext","personTitleId","personFirstName","personLastName","NewAccountFormPersonal","organisationName","NewAccountFormOrganisation","NewAccount","executeRecaptcha","useGoogleReCaptcha","contactType","setContactType","errorMessage","setErrorMessage","a","reCaptchaToken","ButtonToolbar","toggle","block","NewAccountWithProvider","reCaptchaKey","process","language","NewAccountSuccess","close","ChangeAccountEmail","portalUserEmail","setPortalUserEmail","changePrimaryEmailAddress","resetForm","handleSubmitChangeEmail","ChangeAccountPassword","handleSubmitChangePassword","ChangeAccount","INITIAL_STATE","result","reducer","action","AboutUs","useReducer","dispatch","RegistrationDetailsTitle","contactName","projectName","RegistrationDetailsProjectTable","fields","label","RegistrationDetailsMutationTable","participantMutations","participantMutation","class","classNameBasedOnTypePresenter","moneyPresenter","valueBasedOnTypePresenter","RegistrationDetails","basicInformation","FinancialOverviewDocuments","preventDefault","fileDownload","downloadFile","AboutUsAdministration","setAdministration","AdministrationAPI","Card","Body","kvkNumber","iBAN","btwNumber","code","ProjectMollieRedirect","setParticipantMutation","ParticipantMutationAPI","payloadParticipantMutation","isPaidByMollie","textRegistrationFinished","ProjectMollieRedirectWithContext","App","exact","path","Login","hostname","ReactDOM","getElementById","remove","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7eff81e9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst AuthProvider = function(props) {\r\n    const [isAuth, setAuth] = useState(checkIfAuth());\r\n\r\n    function login(payload, cbRedirect) {\r\n        const token = payload.access_token;\r\n        window.localStorage.removeItem(localStorageCurrentSelectedContact);\r\n        window.localStorage.setItem(localStorageToken, token);\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n        setAuth(true);\r\n        cbRedirect();\r\n    }\r\n\r\n    function logout() {\r\n        window.localStorage.removeItem(localStorageToken);\r\n        window.localStorage.removeItem(localStorageLastActivity);\r\n        setAuth(false);\r\n    }\r\n\r\n    function checkIfAuth() {\r\n        const token = getToken();\r\n        if (!token) {\r\n            // Redirect to login\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getToken() {\r\n        return window.localStorage.getItem(localStorageToken);\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                isAuth: isAuth,\r\n                login: login,\r\n                logout: logout,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nconst AuthConsumer = AuthContext.Consumer;\r\n\r\nexport { AuthProvider, AuthConsumer };\r\n","import React, { createContext, useState } from 'react';\r\n\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst PortalUserContext = createContext({\r\n    user: {},\r\n    setInitialUserData: () => {},\r\n});\r\n\r\nconst PortalUserProvider = function(props) {\r\n    const [user, setUser] = useState({});\r\n    const [currentSelectedContact, setCurrentContact] = useState({});\r\n\r\n    function setInitialUserData(user) {\r\n        setUser(user);\r\n\r\n        const selectedContactId = window.localStorage.getItem(localStorageCurrentSelectedContact);\r\n\r\n        // When there is already a selected contact id then lookup the contact\r\n        // Selected contact could be the user or one of the occupations\r\n        if (selectedContactId) {\r\n            if (user.id == selectedContactId) {\r\n                setCurrentContact(user);\r\n            } else {\r\n                const occupationUser = user.occupations.find(\r\n                    occupation => occupation.primaryContact.id == selectedContactId\r\n                );\r\n\r\n                setCurrentContact(occupationUser.primaryContact);\r\n            }\r\n        } else {\r\n            // If there is no selected contact then set default the login user as selected contact.\r\n            // Except if the user has an organisation as occupation that is primary\r\n            const organisationUser = user.occupations.find(\r\n                occupation => occupation.primaryContact.typeId === 'organisation' && occupation.primary\r\n            );\r\n\r\n            if (organisationUser) {\r\n                setCurrentContact(organisationUser.primaryContact);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, organisationUser.primaryContact.id);\r\n            } else {\r\n                setCurrentContact(user);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, user.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    function switchCurrentContact(contact) {\r\n        setCurrentContact(contact);\r\n        window.localStorage.setItem(localStorageCurrentSelectedContact, contact.id);\r\n    }\r\n\r\n    function resetCurrentUserToDefault() {\r\n        setUser({});\r\n        setCurrentContact({});\r\n    }\r\n\r\n    function updateNameSelectedContact(fullName) {\r\n        setCurrentContact({ ...currentSelectedContact, fullName });\r\n\r\n        if (user.id === currentSelectedContact.id) {\r\n            user.fullName = fullName;\r\n        }\r\n\r\n        const updatedOccupations = user.occupations.map(occupationContact => {\r\n            if (occupationContact.primaryContact.id === currentSelectedContact.id) {\r\n                occupationContact.primaryContact.fullName = fullName;\r\n            }\r\n            return occupationContact;\r\n        });\r\n\r\n        setUser({ ...user, occupations: updatedOccupations });\r\n    }\r\n\r\n    return (\r\n        <PortalUserContext.Provider\r\n            value={{\r\n                user: user,\r\n                setInitialUserData,\r\n                currentSelectedContact,\r\n                switchCurrentContact,\r\n                resetCurrentUserToDefault,\r\n                updateNameSelectedContact,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </PortalUserContext.Provider>\r\n    );\r\n};\r\n\r\nconst PortalUserConsumer = PortalUserContext.Consumer;\r\n\r\nexport { PortalUserProvider, PortalUserConsumer, PortalUserContext };\r\n","import React, { createContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeSettingsContext = createContext({\r\n    defaultThemeSettings: {},\r\n    setInitialThemeSettings: () => {},\r\n    setCurrentThemeSettings: () => {},\r\n    switchToDefaultThemeSettings: () => {},\r\n});\r\n\r\nconst ThemeSettingsProvider = function(props) {\r\n    const [defaultThemeSettings, setDefaultThemeSettings] = useState({});\r\n    const [currentThemeSettings, setCurrentThemeSettings] = useState({});\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentThemeSettings.id) {\r\n                handleChangeCurrentThemeSettings();\r\n            }\r\n        },\r\n        [currentThemeSettings.id]\r\n    );\r\n\r\n    function setInitialThemeSettings(payload) {\r\n        setDefaultThemeSettings(payload);\r\n        setCurrentThemeSettings(payload);\r\n    }\r\n\r\n    function switchToDefaultThemeSettings() {\r\n        setCurrentThemeSettings(defaultThemeSettings);\r\n    }\r\n\r\n    function handleChangeCurrentThemeSettings() {\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-color',\r\n            currentThemeSettings.portal_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-text-color',\r\n            currentThemeSettings.portal_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-rgba',\r\n            currentThemeSettings.login_header_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-rgba-text-color',\r\n            currentThemeSettings.login_header_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-header-portal-icon-color',\r\n            currentThemeSettings.header_icons_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-secondary-color',\r\n            currentThemeSettings.login_field_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-secondary-text-color',\r\n            currentThemeSettings.login_field_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty('--button-primary-color', currentThemeSettings.button_color);\r\n        document.documentElement.style.setProperty(\r\n            '--button-primary-text-color',\r\n            currentThemeSettings.button_text_color\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ThemeSettingsContext.Provider\r\n            value={{\r\n                defaultThemeSettings,\r\n                setInitialThemeSettings,\r\n                setCurrentThemeSettings,\r\n                switchToDefaultThemeSettings,\r\n                currentThemeSettings,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ThemeSettingsContext.Provider>\r\n    );\r\n};\r\n\r\nconst ThemeSettingsConsumer = ThemeSettingsContext.Consumer;\r\n\r\nexport { ThemeSettingsProvider, ThemeSettingsConsumer, ThemeSettingsContext };\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { AuthConsumer } from '../../context/AuthContext';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport { ThemeSettingsConsumer } from '../../context/ThemeSettingsContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { FaUser } from 'react-icons/fa';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nfunction Header({ location, history }) {\r\n    const [menuOpen, updateStateMenu] = useState(false);\r\n\r\n    // This keeps your state in sync with the opening/closing of the menu\r\n    // via the default means, e.g. clicking the X, pressing the ESC key etc.\r\n    function handleStateChange(state) {\r\n        updateStateMenu(state.isOpen);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function openMenu() {\r\n        updateStateMenu(true);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function closeMenu() {\r\n        updateStateMenu(false);\r\n    }\r\n\r\n    // This can be used to toggle the menu, e.g. when using a custom icon\r\n    // Tip: You probably want to hide either/both default icons if using a custom icon\r\n    // See https://github.com/negomi/react-burger-menu#custom-icons\r\n    function toggleMenu() {\r\n        updateStateMenu(!menuOpen);\r\n    }\r\n\r\n    function formatProfilePicName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName.replace(/\\s(?=\\S*$)/, '<br>');\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                let lastName = fullName.slice(0, fullName.search(','));\r\n                lastName = lastName.replace(/\\s(?=\\S*$)/, '<br>');\r\n                return firstName + '<br>' + lastName;\r\n            }\r\n        } else {\r\n            return '?';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hook that alerts clicks outside of the passed ref\r\n     */\r\n    function useOutsideAlerter(ref) {\r\n        /**\r\n         * Alert if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                updateStateMenu(false);\r\n            }\r\n        }\r\n\r\n        useEffect(() => {\r\n            // Bind the event listener\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n            return () => {\r\n                // Unbind the event listener on clean up\r\n                document.removeEventListener('mousedown', handleClickOutside);\r\n            };\r\n        });\r\n    }\r\n\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef);\r\n\r\n    function redirect(to) {\r\n        history.push(`/${to}`);\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"header-portal\">\r\n                <div className=\"profile-pic\">\r\n                    <PortalUserConsumer>\r\n                        {({ currentSelectedContact }) => (\r\n                            <p className=\"profile-title\">\r\n                                {ReactHtmlParser(formatProfilePicName(currentSelectedContact.fullName))}\r\n                            </p>\r\n                        )}\r\n                    </PortalUserConsumer>\r\n                </div>\r\n\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs={6}>\r\n                            <ThemeSettingsConsumer>\r\n                                {({ currentThemeSettings }) => (\r\n                                    <div className=\"header-logo\">\r\n                                        {currentThemeSettings.portal_logo_file_name !== undefined && (\r\n                                            <Image src={`images/${currentThemeSettings.portal_logo_file_name}`} />\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </ThemeSettingsConsumer>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                {/* Hambuger menu */}\r\n                                <div className=\"bm-burger-button\" onClick={openMenu}>\r\n                                    <span>\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-1\" />\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-2\" />\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-3\" />\r\n                                    </span>\r\n                                </div>\r\n                                {/* User switch menu */}\r\n                                <AuthConsumer>\r\n                                    {({ logout }) => {\r\n                                        return (\r\n                                            <PortalUserConsumer>\r\n                                                {({\r\n                                                    user,\r\n                                                    currentSelectedContact,\r\n                                                    switchCurrentContact,\r\n                                                    resetCurrentUserToDefault,\r\n                                                }) => {\r\n                                                    return (\r\n                                                        <Dropdown alignRight>\r\n                                                            <Dropdown.Toggle>\r\n                                                                <FaUser />\r\n                                                            </Dropdown.Toggle>\r\n                                                            <Dropdown.Menu>\r\n                                                                <Dropdown.Header>Ingelogd als</Dropdown.Header>\r\n                                                                <Dropdown.Item disabled>{user.fullName}</Dropdown.Item>\r\n                                                                <Dropdown.Item>\r\n                                                                    <Link\r\n                                                                        to={'/wijzig-inloggegevens'}\r\n                                                                        className={'dropdown-link'}\r\n                                                                    >\r\n                                                                        Wijzig inloggegevens\r\n                                                                    </Link>\r\n                                                                </Dropdown.Item>\r\n                                                                {/*<Dropdown.Item*/}\r\n                                                                {/*href={'#/wijzig-inloggegevens'}*/}\r\n                                                                {/*className={'dropdown-link'}*/}\r\n                                                                {/*>*/}\r\n                                                                {/*Wijzig inloggegevens*/}\r\n                                                                {/*</Dropdown.Item>*/}\r\n                                                                <Dropdown.Divider />\r\n                                                                <Dropdown.Header>Beheren van</Dropdown.Header>\r\n                                                                <Dropdown.Item\r\n                                                                    onClick={() => {\r\n                                                                        switchCurrentContact(user);\r\n                                                                        redirect('gegevens');\r\n                                                                    }}\r\n                                                                    active={\r\n                                                                        currentSelectedContact.id === user.id\r\n                                                                            ? true\r\n                                                                            : false\r\n                                                                    }\r\n                                                                >\r\n                                                                    {user.fullName}\r\n                                                                </Dropdown.Item>\r\n                                                                {user.occupations\r\n                                                                    ? user.occupations.map(occupationContact =>\r\n                                                                          (occupationContact.primaryContact.typeId ===\r\n                                                                              'organisation' &&\r\n                                                                              occupationContact.primary) ||\r\n                                                                          (occupationContact.primaryContact.typeId ===\r\n                                                                              'person' &&\r\n                                                                              occupationContact.occupation\r\n                                                                                  .occupationForPortal) ? (\r\n                                                                              <Dropdown.Item\r\n                                                                                  key={occupationContact.id}\r\n                                                                                  onClick={() => {\r\n                                                                                      switchCurrentContact(\r\n                                                                                          occupationContact.primaryContact\r\n                                                                                      );\r\n                                                                                      redirect('gegevens');\r\n                                                                                  }}\r\n                                                                                  active={\r\n                                                                                      currentSelectedContact.id ===\r\n                                                                                      occupationContact.primaryContact\r\n                                                                                          .id\r\n                                                                                          ? true\r\n                                                                                          : false\r\n                                                                                  }\r\n                                                                              >\r\n                                                                                  {\r\n                                                                                      occupationContact.primaryContact\r\n                                                                                          .fullName\r\n                                                                                  }\r\n                                                                              </Dropdown.Item>\r\n                                                                          ) : null\r\n                                                                      )\r\n                                                                    : null}\r\n                                                                <Dropdown.Divider />\r\n                                                                <Dropdown.Item\r\n                                                                    onClick={() => {\r\n                                                                        logout();\r\n                                                                        resetCurrentUserToDefault();\r\n                                                                    }}\r\n                                                                >\r\n                                                                    Log uit\r\n                                                                </Dropdown.Item>\r\n                                                            </Dropdown.Menu>\r\n                                                        </Dropdown>\r\n                                                    );\r\n                                                }}\r\n                                            </PortalUserConsumer>\r\n                                        );\r\n                                    }}\r\n                                </AuthConsumer>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            {/* Sidebar menu */}\r\n            <Menu\r\n                right\r\n                width={'300px'}\r\n                // noOverlay\r\n                isOpen={menuOpen}\r\n                onStateChange={state => handleStateChange(state)}\r\n                customBurgerIcon={false}\r\n            >\r\n                <div className={'sidebar-menu'}>\r\n                    <React.Fragment>\r\n                        <h6 className=\"heading in-menu\">MENU</h6>\r\n                        <Link\r\n                            to={'/inschrijvingen-projecten'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/inschrijvingen-projecten' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Huidige deelnames\r\n                        </Link>\r\n                        <Link\r\n                            to={'/gegevens'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/gegevens' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Gegevens\r\n                        </Link>\r\n                        {/* later */}\r\n                        {/*<Link*/}\r\n                        {/*to={'/deelname-projecten'}*/}\r\n                        {/*className={`nav-link w-nav-link w--nav-link-open ${*/}\r\n                        {/*location.pathname === '/' ? 'w--current' : ''*/}\r\n                        {/*}`}*/}\r\n                        {/*onClick={closeMenu}*/}\r\n                        {/*>*/}\r\n                        {/*Deelnames*/}\r\n                        {/*</Link>*/}\r\n                        <Link\r\n                            to={'/inschrijven-projecten'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/inschrijven-projecten' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Inschrijven projecten\r\n                        </Link>\r\n                        <Link\r\n                            to={'/waardestaat-documenten'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/waardestaat-documenten' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Waardestaat documenten\r\n                        </Link>\r\n                        <Link\r\n                            to={'/over-ons'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/over-ons' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Over ons\r\n                        </Link>\r\n                    </React.Fragment>\r\n                </div>\r\n            </Menu>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `${BASE_URL}`,\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function(config) {\r\n        // First check if token is expired or not\r\n        checkTokenExpiration();\r\n        // Do something before request is sent\r\n        const AUTH_TOKEN = 'Bearer ' + localStorage.getItem(localStorageToken);\r\n        config.headers.Authorization = AUTH_TOKEN;\r\n        return config;\r\n    },\r\n    function(error) {\r\n        // Do something with request error\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Check token expiration and redirect if token is expired\r\nfunction checkTokenExpiration() {\r\n    const lastActivity = moment(localStorage.getItem(localStorageLastActivity));\r\n\r\n    if (\r\n        !localStorage.getItem(localStorageLastActivity) ||\r\n        lastActivity.add('30', 'minutes').format() < moment().format()\r\n    ) {\r\n        if (window.location.hash !== '#/login' && window.location.hash !== '#/loguit') {\r\n            setTimeout(() => {\r\n                localStorage.removeItem(localStorageToken);\r\n                localStorage.removeItem(localStorageLastActivity);\r\n                window.location.reload();\r\n            }, 100);\r\n        }\r\n    } else {\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n    }\r\n}\r\n\r\nexport default axiosInstance;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchPortalUserDetails: function() {\r\n        const requestUrl = `/me`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'portalSettingsLayoutAssigned',\r\n                    ],\r\n                    rlt: {\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: { fld: ['id', 'fullName', 'typeId'] },\r\n                                contact: { fld: ['id', 'fullName'] },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchPortalUserEmail: function() {\r\n        return axiosInstance.get(`/portal-user-email`);\r\n    },\r\n\r\n    changeEmail: values => {\r\n        const requestUrl = `/portal-user/change-email`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n\r\n    changePassword: values => {\r\n        const requestUrl = `/portal-user/change-password`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n};\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { Route, Redirect, useLocation } from 'react-router-dom';\r\nimport { AuthConsumer } from '../context/AuthContext';\r\nimport Header from '../components/layout/Header';\r\nimport PortalUserAPI from '../api/portal-user/PortalUserAPI';\r\nimport { PortalUserConsumer } from '../context/PortalUserContext';\r\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\r\n\r\nconst ProtectedRoute = ({ component: Component, setInitialUserData, isAuth, ...rest }) => {\r\n    const location = useLocation();\r\n    const { setInitialThemeSettings, switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            (function callFetchPortalUserDetails() {\r\n                PortalUserAPI.fetchPortalUserDetails()\r\n                    .then(payload => {\r\n                        setInitialUserData(payload.data.data);\r\n                        setInitialThemeSettings(payload.data.data.portalSettingsLayoutAssigned);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    });\r\n            })();\r\n        }\r\n    }, [isAuth]);\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            if (\r\n                !location.pathname.includes('/project/') &&\r\n                !location.pathname.includes('/project-deelname/') &&\r\n                !location.pathname.includes('/inschrijven/')\r\n            ) {\r\n                switchToDefaultThemeSettings();\r\n            }\r\n        }\r\n    }, [location.pathname]);\r\n\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <div className=\"body-2\" id=\"body-2\">\r\n                    <Header />\r\n                    <Route render={props => (isAuth ? <Component {...props} /> : <Redirect to=\"/login\" />)} {...rest} />\r\n                </div>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n};\r\n\r\nexport default function ProtectedRouteWithContext(props) {\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <PortalUserConsumer>\r\n                    {({ setInitialUserData }) => (\r\n                        <ProtectedRoute {...props} setInitialUserData={setInitialUserData} isAuth={isAuth} />\r\n                    )}\r\n                </PortalUserConsumer>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Route, useLocation } from 'react-router-dom';\r\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => {\r\n    const location = useLocation();\r\n    const { switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    useEffect(() => {\r\n        switchToDefaultThemeSettings();\r\n    }, [location.pathname]);\r\n\r\n    return <Route render={props => <Component {...props} />} {...rest} />;\r\n};\r\n\r\nexport default PublicRoute;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst InputText = ({\r\n    field,\r\n    type,\r\n    className,\r\n    id,\r\n    readOnly,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <input\r\n                type={type}\r\n                className={`text-input w-input ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                readOnly={readOnly}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputText.defaultProps = {\r\n    type: 'text',\r\n    className: 'content',\r\n    readOnly: false,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputText.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputText;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ButtonText = ({\r\n    buttonClassName,\r\n    buttonText,\r\n    onClickAction,\r\n    type,\r\n    loading,\r\n    title,\r\n    loadingSpinnerColor,\r\n    disabled,\r\n}) => (\r\n    <Button\r\n        type={type}\r\n        className={`${buttonClassName}`}\r\n        onClick={onClickAction}\r\n        disabled={loading || disabled}\r\n        title={title}\r\n        size=\"sm\"\r\n    >\r\n        {loading ? <ClipLoader color={loadingSpinnerColor} size={17} /> : <span>{buttonText}</span>}\r\n    </Button>\r\n);\r\n\r\nButtonText.defaultProps = {\r\n    buttonClassName: '',\r\n    type: 'button',\r\n    title: '',\r\n    loading: false,\r\n    loadingSpinnerColor: 'white',\r\n    disabled: false,\r\n};\r\n\r\nButtonText.propTypes = {\r\n    buttonClassName: PropTypes.string,\r\n    buttonText: PropTypes.string.isRequired,\r\n    onClickAction: PropTypes.func,\r\n    type: PropTypes.string,\r\n    title: PropTypes.string,\r\n    loading: PropTypes.bool,\r\n    loadingSpinnerColor: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n};\r\n\r\nexport default ButtonText;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    password: Yup.string().required('Verplicht'),\r\n});\r\n\r\nconst LoginForm = function({ handleSubmit, login }) {\r\n    return (\r\n        <Formik\r\n            initialValues={{ username: '', password: '' }}\r\n            enableReinitialize={true}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                handleSubmit(values, actions, login);\r\n            }}\r\n            render={({ isSubmitting, errors, touched }) => {\r\n                return (\r\n                    <Form>\r\n                        <Field\r\n                            name=\"username\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"username\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={''}\r\n                                    placeholder={'Wachtwoord'}\r\n                                    type={'password'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <ButtonText\r\n                            buttonText={'Log in'}\r\n                            buttonClassName={'authorization-button'}\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                        />\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import axios from 'axios';\r\n\r\nconst AUTH_KEY = {\r\n    client_id: window.__SERVER_DATA__.client_id,\r\n    client_secret: window.__SERVER_DATA__.client_key,\r\n    grant_type: 'password',\r\n};\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\n\r\nexport default {\r\n    newAccount: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n    newAccountSuccess: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account-success`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    login: loginCredentials => {\r\n        const requestUrl = `${BASE_URL}/oauth/token`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, { ...AUTH_KEY, ...loginCredentials });\r\n    },\r\n\r\n    register: payload => {\r\n        const requestUrl = `${BASE_URL}/register`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    forgot: email => {\r\n        const requestUrl = `${BASE_URL}/password/email`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, email);\r\n    },\r\n\r\n    reset: payload => {\r\n        const requestUrl = `${BASE_URL}/password/reset`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nconst URL_PORTAL_SETTINGS = `setting`;\r\n\r\nexport default {\r\n    fetchPortalSettings: keys => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/multiple${keys}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchPortalActive: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/portal-active`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchCooperativeName: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/cooperative-name`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchShowNewAtCooperativeLink: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/show-new-at-cooperative-link`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchNewAtCooperativeLinkText: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/new-at-cooperative-link-text`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport LoginForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport PortalSettingsAPI from '../../../api/portal-settings/PortalSettingsAPI';\r\n\r\nexport default props => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = props.location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    const [portalActive, setPortalActive] = useState(false);\r\n    const [showNewAtCooperativeLink, setShowNewAtCooperativeLink] = useState(false);\r\n    const [newAtCooperativeLinkText, setNewAtCooperativeLinkText] = useState('');\r\n\r\n    useEffect(() => {\r\n        (function callFetchPortalActive() {\r\n            PortalSettingsAPI.fetchPortalActive()\r\n                .then(payload => {\r\n                    setPortalActive(payload.data);\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setIsLoading(false);\r\n                });\r\n        })();\r\n\r\n        (function callFetchShowNewAtCooperativeLink() {\r\n            PortalSettingsAPI.fetchShowNewAtCooperativeLink()\r\n                .then(payload => {\r\n                    setShowNewAtCooperativeLink(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n\r\n        (function callFetchNewAtCooperativeLinkText() {\r\n            PortalSettingsAPI.fetchNewAtCooperativeLinkText()\r\n                .then(payload => {\r\n                    setNewAtCooperativeLinkText(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n\r\n    function handleSubmit(values, actions, login) {\r\n        AuthAPI.login(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                login(payload.data, () => toggleRedirect(true));\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <AuthConsumer>\r\n                    {({ isAuth, login }) => (\r\n                        <Container fluid className=\"authorization-container\">\r\n                            <Row className=\"justify-content-center align-content-center full-height\">\r\n                                <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\r\n                                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                                    {isLoading ? (\r\n                                        <React.Fragment>\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    Applicatie wordt geladen...\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    ) : !portalActive ? (\r\n                                        <React.Fragment>\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    Deze applicatie kan op dit moment niet gebruikt worden.\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    ) : !isLoading ? (\r\n                                        <React.Fragment>\r\n                                            <LoginForm handleSubmit={handleSubmit} login={login} />\r\n                                            {showError ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                        Gebruikte logingegevens zijn onjuist!\r\n                                                    </Alert>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Link to={'/wachtwoord-vergeten'} className=\"authorization-link\">\r\n                                                    Wachtwoord vergeten?\r\n                                                </Link>\r\n                                            </Row>\r\n                                            {showNewAtCooperativeLink ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <a\r\n                                                        href={'/#/nieuw-account'}\r\n                                                        className=\"authorization-link\"\r\n                                                        target=\"_blank\"\r\n                                                    >\r\n                                                        {newAtCooperativeLinkText}\r\n                                                    </a>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                        </React.Fragment>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    )}\r\n                </AuthConsumer>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { GoogleReCaptchaProvider, GoogleReCaptcha } from 'react-google-recaptcha-v3';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst RegisterForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <div className=\"mb-3\">\r\n                    <p className={'authorization-text'}>\r\n                        Stel je wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </div>\r\n                <Row>\r\n                    <Col>\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'authorization-text'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-2\">\r\n                        <Field\r\n                            name=\"passwordConfirmation\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"passwordConfirmation\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Herhaal nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'authorization-text mb-3'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"my-3\">\r\n                        <small className={'authorization-text'}>\r\n                            Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1\r\n                            hoofdletter bevatten.\r\n                        </small>\r\n                    </Col>\r\n                </Row>\r\n                <ButtonText\r\n                    buttonText={'Verzenden'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport RegisterForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst Register = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const registrationCode = decodeURIComponent(match.params.registrationCode);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.register({\r\n            registrationCode,\r\n            email,\r\n            password: values.password,\r\n            password_confirmation: values.passwordConfirmation,\r\n        })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <h3 className={'authorization-text'}>Je account is geactiveerd</h3>\r\n                                    <p className={'authorization-text'}>Je bent nu ingelogd</p>\r\n                                    <ButtonText\r\n                                        buttonText={'Ga verder'}\r\n                                        onClickAction={toggleRedirect}\r\n                                        buttonClassName={'authorization-button'}\r\n                                        size=\"sm\"\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <h3 className={'authorization-text'}>Account activeren</h3>\r\n                                    <RegisterForm handleSubmit={handleSubmit} email={email} />\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function RegisterWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Register {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ForgotForm = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Field\r\n                    name=\"email\"\r\n                    render={({ field }) => (\r\n                        <InputText\r\n                            field={field}\r\n                            id=\"email\"\r\n                            className={''}\r\n                            placeholder={'E-mailadres'}\r\n                            errors={errors}\r\n                            touched={touched}\r\n                            // todo check waarom dit erin stond ?!\r\n                            // showErrorMessage={false}\r\n                        />\r\n                    )}\r\n                />\r\n                <ButtonText\r\n                    buttonText={showSuccessMessage ? 'E-mail is verstuurd!' : 'Verstuur wachtwoord reset link'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                    disabled={showSuccessMessage}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ForgotForm;\r\n","import React, { useState } from 'react';\r\n\r\nimport ForgotForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Forgot = props => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.forgot(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If forgot API fails show error and then set submitting back to false\r\n                // toggleError(true);\r\n                // If forgot API fails show succesmessage anyway\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                    {showSuccessMessage ? (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Als het e-mailadres bij ons bekend is, dan ontvang je binnen enkele minuten een\r\n                                    e-mail met een persoonlijke link. Via deze link kun je een nieuw wachtwoord\r\n                                    instellen.\r\n                                    <br />\r\n                                    Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van\r\n                                    bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of\r\n                                    je onze mail daar terug vindt.\r\n                                </p>\r\n                            </Row>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Wachtwoord vergeten</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Vul het e-mailadres in waarmee je inlogt en die bij ons bekend is. Je ontvangt van\r\n                                    ons een e-mail waarmee je een nieuw wachtwoord kunt instellen.\r\n                                </p>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <Col xs={12} md={6}>\r\n                                    <ForgotForm handleSubmit={handleSubmit} showSuccessMessage={showSuccessMessage} />\r\n                                    {showError ? (\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            E-mailadres is niet bekend!\r\n                                        </Alert>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    )}\r\n                    <Row className={'justify-content-center '}>\r\n                        <Link to={'/login'} className=\"authorization-link\">\r\n                            Terug naar inloggen\r\n                        </Link>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Forgot;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ResetForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Row className=\"justify-content-center\">\r\n                    <p className={'authorization-text'}>\r\n                        Stel een nieuw wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"password\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"password\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'authorization-text'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"passwordConfirmation\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"passwordConfirmation\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Herhaal nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'authorization-text mb-3'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <small className={'authorization-text'}>\r\n                        Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1 hoofdletter\r\n                        bevatten.\r\n                    </small>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <ButtonText\r\n                        buttonText={'Verzenden'}\r\n                        buttonClassName={'authorization-button'}\r\n                        size=\"sm\"\r\n                        type={'submit'}\r\n                        loading={isSubmitting}\r\n                        loadingSpinnerColor={'#034b8c'}\r\n                    />\r\n                </Row>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ResetForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport ResetForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst Reset = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const token = decodeURIComponent(match.params.token);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.reset({ token, email, password: values.password, password_confirmation: values.passwordConfirmation })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'authorization-text'}>Je wachtwoord is ingesteld</h3>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <p className={'authorization-text'}>Je bent nu ingelogd</p>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <ButtonText\r\n                                            buttonText={'Ga verder'}\r\n                                            onClickAction={toggleRedirect}\r\n                                            buttonClassName={'authorization-button'}\r\n                                            size=\"sm\"\r\n                                        />\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'authorization-text'}>Wachtwoord wijzigen</h3>\r\n                                    </Row>\r\n                                    <ResetForm handleSubmit={handleSubmit} email={email} />\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function ResetWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Reset {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n    fetchProjects: function() {\r\n        const requestUrl = `/jory/project`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: ['id', 'name', 'dateStartRegistrations', 'dateEndRegistrations'],\r\n                    flt: {\r\n                        and: [\r\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\r\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\r\n                        ],\r\n                    },\r\n                    rlt: {\r\n                        administration: { fld: ['id', 'name'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchProject: function(id) {\r\n        const requestUrl = `/jory/project/${id}`;\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'name',\r\n                        'description',\r\n                        'dateStartRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'minParticipations',\r\n                        'maxParticipations',\r\n                        'totalParticipations',\r\n                        'participationWorth',\r\n                        'currentBookWorth',\r\n                        'amountOfLoanNeeded',\r\n                        'minAmountLoan',\r\n                        'maxAmountLoan',\r\n                        'isSceProject',\r\n                        'checkPostalcodeLink',\r\n                        'postalcodeLink',\r\n                        'linkAgreeTerms',\r\n                        'linkProjectInfo',\r\n                        'linkUnderstandInfo',\r\n                        'showQuestionAboutMembership',\r\n                        'useTransactionCostsWithMembership',\r\n                        'usesMollie',\r\n                        'textTransactionCosts',\r\n                        'transactionCostsCodeRef',\r\n                        'transactionCostsAmountMin',\r\n                        'transactionCostsAmountMax',\r\n                        'transactionCostsAmount',\r\n                        'transactionCostsPercentage',\r\n                        'transactionCostsAmount2',\r\n                        'transactionCostsPercentage2',\r\n                        'transactionCostsAmount3',\r\n                        'transactionCostsPercentage3',\r\n                    ],\r\n                    flt: {\r\n                        and: [\r\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\r\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\r\n                        ],\r\n                    },\r\n                    rlt: {\r\n                        projectType: { fld: ['id', 'codeRef'] },\r\n                        administration: { fld: ['id', 'name', 'portalSettingsLayoutAssigned'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from '../project/ProjectAPI';\r\n\r\nexport default {\r\n    fetchContact: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'isParticipant',\r\n                        'noAddressesFound',\r\n                        'isParticipantPcrProject',\r\n                        'isParticipantSceProject',\r\n                    ],\r\n                    rlt: {\r\n                        person: {\r\n                            fld: [\r\n                                'id',\r\n                                'firstName',\r\n                                'lastName',\r\n                                'initials',\r\n                                'titleId',\r\n                                'lastNamePrefix',\r\n                                'lastNamePrefixId',\r\n                                'dateOfBirth',\r\n                            ],\r\n                            rlt: {\r\n                                title: { fld: ['id', 'name'] },\r\n                            },\r\n                        },\r\n                        organisation: {\r\n                            fld: ['id', 'name', 'website', 'chamberOfCommerceNumber', 'vatNumber'],\r\n                        },\r\n                        emailAddresses: { fld: ['id', 'email', 'primary', 'typeId'] },\r\n                        phoneNumbers: { fld: ['id', 'number', 'primary', 'typeId'] },\r\n                        addresses: {\r\n                            fld: [\r\n                                'id',\r\n                                'street',\r\n                                'number',\r\n                                'addition',\r\n                                'postalCode',\r\n                                'city',\r\n                                'countryId',\r\n                                'primary',\r\n                                'typeId',\r\n                            ],\r\n                            rlt: {\r\n                                country: { fld: ['id', 'name'] },\r\n                            },\r\n                        },\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: {\r\n                                    fld: ['id', 'fullName'],\r\n                                },\r\n                            },\r\n                        },\r\n                        primaryContactEnergySupplier: {\r\n                            fld: [\r\n                                'id',\r\n                                'energySupplierId',\r\n                                'esNumber',\r\n                                'eanElectricity',\r\n                                'eanGas',\r\n                                'memberSince',\r\n                                'isCurrentSupplier',\r\n                            ],\r\n                            rlt: { energySupplier: [] },\r\n                            flt: {\r\n                                f: 'isCurrentSupplier',\r\n                                d: true,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchContactWithParticipants: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                    ],\r\n                    rlt: {\r\n                        participations: {\r\n                            fld: [\r\n                                'id',\r\n                                'dateRegister',\r\n                                'didAcceptAgreement',\r\n                                'dateDidAcceptAgreement',\r\n                                'didUnderstandInfo',\r\n                                'dateDidUnderstandInfo',\r\n                                'participationsDefinitive',\r\n                                'participationsGranted',\r\n                                'participationsOptioned',\r\n                                'participationsInteressed',\r\n                                'amountDefinitive',\r\n                                'amountGranted',\r\n                                'amountOptioned',\r\n                                'amountInteressed',\r\n                                'powerKwhConsumption',\r\n                            ],\r\n                            rlt: {\r\n                                project: {\r\n                                    fld: [\r\n                                        'id',\r\n                                        'name',\r\n                                        'dateEnd',\r\n                                        'linkProjectInfo',\r\n                                        'linkUnderstandInfo',\r\n                                        'showQuestionAboutMembership',\r\n                                        'usesMollie',\r\n                                    ],\r\n                                    rlt: {\r\n                                        projectType: { fld: ['id', 'codeRef'] },\r\n                                        administration: { fld: ['name'] },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    updateContact: contact => {\r\n        const requestUrl = `/contact/${contact.id}`;\r\n\r\n        return axiosInstance.post(requestUrl, contact);\r\n    },\r\n\r\n    previewDocument: registerValues => {\r\n        const requestUrl = `/contact/${registerValues.contactId}/${registerValues.projectId}/preview-document`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n\r\n    fetchContactProjects: function(contactId, projectId) {\r\n        const requestUrl = `/contact/${contactId}/contact-projects`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    fetchContactProjectData: function(contactId, projectId) {\r\n        const requestUrl = `/contact/${contactId}/${projectId}/contact-project-data`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    fetchContactFinancialOverviewDocuments: function(contactId) {\r\n        const requestUrl = `/contact/${contactId}/financial-overview-documents`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    financialOverviewContactDownload: function(id) {\r\n        const requestUrl = `/financial-overview-contact/${id}/download`;\r\n\r\n        return axiosInstance(requestUrl, { responseType: 'blob' });\r\n    },\r\n\r\n    fetchContactRelatedAdministrations: function(contactId) {\r\n        const requestUrl = `/contact/${contactId}/related-administrations`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","export default function(contactData) {\r\n    const typeContact = contactData.typeId ? contactData.typeId : null;\r\n\r\n    let emptyAddress = { street: '', number: '', addition: '', postalCode: '', city: '', countryId: null };\r\n    let primaryAddress = null;\r\n    let visitAddress = null;\r\n    let postalAddress = null;\r\n    let invoiceAddress = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            // Set primary address\r\n            primaryAddress = contactData.addresses.find(address => address.primary);\r\n            contactData.primaryAddress = primaryAddress ? { ...emptyAddress, ...primaryAddress } : emptyAddress;\r\n            break;\r\n        case 'organisation':\r\n            // Set visit, postal, invoice addresses\r\n            visitAddress = contactData.addresses.find(address => address.typeId === 'visit');\r\n            contactData.visitAddress = visitAddress ? { ...emptyAddress, ...visitAddress } : emptyAddress;\r\n            postalAddress = contactData.addresses.find(address => address.typeId === 'postal');\r\n            contactData.postalAddress = postalAddress ? { ...emptyAddress, ...postalAddress } : emptyAddress;\r\n            invoiceAddress = contactData.addresses.find(address => address.typeId === 'invoice');\r\n            contactData.invoiceAddress = invoiceAddress ? { ...emptyAddress, ...invoiceAddress } : emptyAddress;\r\n            break;\r\n    }\r\n\r\n    // Set correspondence email address\r\n    let emptyEmail = { email: '' };\r\n    const emailCorrespondence = contactData.emailAddresses.find(emailAddress => emailAddress.primary);\r\n    contactData.emailCorrespondence = emailCorrespondence ? { ...emptyEmail, ...emailCorrespondence } : emptyEmail;\r\n\r\n    // Set invoice email address\r\n    const emailInvoice = contactData.emailAddresses.find(\r\n        emailAddress => emailAddress.typeId === 'invoice' && !emailAddress.primary\r\n    );\r\n    contactData.emailInvoice = emailInvoice ? { ...emptyEmail, ...emailInvoice } : emptyEmail;\r\n\r\n    // Set primary phone number\r\n    let emptyPhoneNumber = { number: '' };\r\n    const phoneNumberPrimary = contactData.phoneNumbers.find(phoneNumber => phoneNumber.primary);\r\n    contactData.phoneNumberPrimary = phoneNumberPrimary\r\n        ? { ...emptyPhoneNumber, ...phoneNumberPrimary }\r\n        : emptyPhoneNumber;\r\n\r\n    // Set first phone number which is not primary\r\n    const phoneNumberTwo = contactData.phoneNumbers.filter(phoneNumber => !phoneNumber.primary)[0];\r\n    contactData.phoneNumberTwo = phoneNumberTwo ? { ...emptyPhoneNumber, ...phoneNumberTwo } : emptyPhoneNumber;\r\n\r\n    // Set primary contact energy supplier\r\n    let emptyPrimaryContactEnergySupplier = {\r\n        energySupplierId: null,\r\n        esNumber: '',\r\n        eanElectricity: '',\r\n        memberSince: '',\r\n        eanGas: '',\r\n    };\r\n    if (!contactData.primaryContactEnergySupplier) {\r\n        contactData.primaryContactEnergySupplier = emptyPrimaryContactEnergySupplier;\r\n    }\r\n    return contactData;\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nfunction Loading() {\r\n    return (\r\n        <Row className=\"justify-content-center align-content-center flex-wrap\" style={{ height: '40vh' }}>\r\n            <ClipLoader color={'#3898EC'} size={48} />\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TextBlock = ({ children, className, id, placeholder }) => {\r\n    const showPlaceholder = children === '' || children === null || children === undefined;\r\n\r\n    return (\r\n        <div className={`text-block ${className} ${showPlaceholder ? 'placeholder' : ''}`} id={id}>\r\n            {showPlaceholder ? <div className={'placeholder-message'}>{placeholder}</div> : children}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextBlock.defaultProps = {\r\n    className: 'text-block',\r\n    id: '',\r\n    children: '',\r\n    placeholder: '',\r\n};\r\n\r\nTextBlock.propTypes = {\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    placeholder: PropTypes.string,\r\n};\r\n\r\nexport default TextBlock;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactPersonalView({ portalSettings, initialContact }) {\r\n    const {\r\n        person = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        primaryAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n        primaryContactEnergySupplier,\r\n    } = initialContact;\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Naam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Aanhef'}>\r\n                        {person.title ? person.title.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Initialen'}>\r\n                        {person.initials}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Voornaam'}>\r\n                        {person.firstName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Tussenvoegsel'}>\r\n                        {person.lastNamePrefix}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Achternaam'}>\r\n                        {person.lastName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Geboortedatum</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6 col-md-4'} placeholder={'Geboortedatum'}>\r\n                        {person.dateOfBirth ? moment(person.dateOfBirth).format('L') : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {primaryAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {primaryAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {primaryAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {primaryAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {primaryAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {primaryAddress.country ? primaryAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? (\r\n                                <em>({dateDidAgreeAvg ? ' ' + moment(dateDidAgreeAvg).format('L') : ''})</em>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {primaryContactEnergySupplier.energySupplier\r\n                            ? primaryContactEnergySupplier.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                {primaryContactEnergySupplier && primaryContactEnergySupplier.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {primaryContactEnergySupplier.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {primaryContactEnergySupplier.memberSince\r\n                                    ? moment(primaryContactEnergySupplier.memberSince).format('L')\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                                {primaryContactEnergySupplier.eanElectricity}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                                {primaryContactEnergySupplier.eanGas}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactPersonalView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst Select = ({\r\n    field,\r\n    className,\r\n    id,\r\n    options,\r\n    optionLabel,\r\n    emptyOption,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n}) => {\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <select\r\n                className={`select-field w-select content ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                disabled={disabled}\r\n            >\r\n                {emptyOption ? <option value=\"\">{placeholder ? `-- ${placeholder} --` : ''}</option> : null}\r\n                {options.map(option => {\r\n                    return (\r\n                        <option key={option.id} value={option.id}>\r\n                            {option[optionLabel]}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </>\r\n    );\r\n};\r\n\r\nSelect.defaultProps = {\r\n    className: '',\r\n    readOnly: false,\r\n    required: '',\r\n    optionLabel: 'name',\r\n    emptyOption: true,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nSelect.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    options: PropTypes.array.isRequired,\r\n    optionLabel: PropTypes.string,\r\n    emptyOption: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default Select;\r\n","export default [\r\n    { id: 'AU', name: 'Australië' },\r\n    { id: 'BE', name: 'België' },\r\n    { id: 'CA', name: 'Canade' },\r\n    { id: 'DK', name: 'Denemarken' },\r\n    { id: 'DE', name: 'Duitsland' },\r\n    { id: 'FI', name: 'Finland' },\r\n    { id: 'FR', name: 'Frankrijk' },\r\n    { id: 'IE', name: 'Ierland' },\r\n    { id: 'IT', name: 'Italië' },\r\n    { id: 'LU', name: 'Luxemburg' },\r\n    { id: 'NL', name: 'Nederland' },\r\n    { id: 'NZ', name: 'Nieuw-Zeeland' },\r\n    { id: 'NO', name: 'Noorwegen' },\r\n    { id: 'AT', name: 'Oostenrijk' },\r\n    { id: 'PL', name: 'Polen' },\r\n    { id: 'PT', name: 'Portugal' },\r\n    { id: 'ES', name: 'Spanje' },\r\n    { id: 'CZ', name: 'Tsjechië' },\r\n    { id: 'GB', name: 'Verenigd Koninkrijk' },\r\n    { id: 'VS', name: 'Verenigde Staten' },\r\n    { id: 'SE', name: 'Zweden' },\r\n    { id: 'CH', name: 'Zwitserland' },\r\n];\r\n","export default [\r\n    { id: 26, name: 'Agem' },\r\n    { id: 27, name: 'Anode Energie' },\r\n    { id: 24, name: 'Betuwe stroom' },\r\n    { id: 2, name: 'Budget Energie' },\r\n    { id: 28, name: 'De Groene Stroomfabriek' },\r\n    { id: 25, name: 'Delta Energie' },\r\n    { id: 50, name: 'DGB Energie' },\r\n    { id: 46, name: 'Dorpstroom' },\r\n    { id: 3, name: 'E.on' },\r\n    { id: 45, name: 'Easyenergy' },\r\n    { id: 4, name: 'Eneco' },\r\n    { id: 19, name: 'Energie VanOns' },\r\n    { id: 49, name: 'Energie Zero' },\r\n    { id: 42, name: 'Energiebesteding' },\r\n    { id: 5, name: 'Energiedirect' },\r\n    { id: 21, name: 'Energieflex' },\r\n    { id: 37, name: 'Energyhouse' },\r\n    { id: 6, name: 'Engie' },\r\n    { id: 7, name: 'Essent' },\r\n    { id: 35, name: 'Fenor energie' },\r\n    { id: 8, name: 'Greenchoice' },\r\n    { id: 43, name: 'GreenNL' },\r\n    { id: 40, name: 'Groenpand' },\r\n    { id: 44, name: 'Hezelaer' },\r\n    { id: 9, name: 'Holland Wind' },\r\n    { id: 33, name: 'Holthausen Clean Energy (HCE)' },\r\n    { id: 20, name: 'Huismerk Energie' },\r\n    { id: 30, name: 'HVC Kringloop Energie' },\r\n    { id: 23, name: 'Innova Energie' },\r\n    { id: 10, name: 'Main energie' },\r\n    { id: 38, name: 'NieuweStroom' },\r\n    { id: 12, name: 'NL Energie' },\r\n    { id: 1, name: 'OM' },\r\n    { id: 18, name: 'Overig' },\r\n    { id: 14, name: 'Oxxio' },\r\n    { id: 39, name: 'ParkStroom' },\r\n    { id: 36, name: 'Power peers' },\r\n    { id: 15, name: 'Pure energy' },\r\n    { id: 16, name: 'Qurrent' },\r\n    { id: 48, name: 'Qwint' },\r\n    { id: 31, name: 'Sepa Green' },\r\n    { id: 32, name: 'Servicehouse' },\r\n    { id: 34, name: 'Total' },\r\n    { id: 22, name: 'United Consumers' },\r\n    { id: 17, name: 'VanDeBron' },\r\n    { id: 13, name: 'Vattenfall' },\r\n    { id: 47, name: 'Welkom Energie' },\r\n    { id: 41, name: 'Windcentrale' },\r\n];\r\n","export default [\r\n    { id: 1, name: 'Dhr' },\r\n    { id: 2, name: 'Mevr' },\r\n    { id: 3, name: 'De heer, Mevrouw' },\r\n    { id: 4, name: 'Familie' },\r\n    { id: 5, name: 'De heer of mevrouw' },\r\n    { id: 6, name: 'De heren' },\r\n    { id: 7, name: 'De dames' },\r\n    { id: 8, name: 'Erven' },\r\n];\r\n","export default [\r\n    { id: 0, name: '' },\r\n    { id: 1, name: 'van' },\r\n    { id: 2, name: 'de' },\r\n    { id: 3, name: 'van der' },\r\n    { id: 4, name: 'van de' },\r\n    { id: 5, name: 'van den' },\r\n    { id: 6, name: 'den' },\r\n    { id: 7, name: 'ten' },\r\n    { id: 8, name: 'ter' },\r\n    { id: 9, name: 'te' },\r\n    { id: 10, name: \"van 't\" },\r\n    { id: 11, name: 'el' },\r\n    { id: 12, name: 'le' },\r\n    { id: 13, name: 'van het' },\r\n    { id: 14, name: \"in 't\" },\r\n    { id: 15, name: \"'t\" },\r\n    { id: 16, name: 'von' },\r\n    { id: 17, name: 'du' },\r\n    { id: 18, name: 'da' },\r\n    { id: 19, name: 'de la' },\r\n    { id: 20, name: 'la' },\r\n    { id: 21, name: 'der' },\r\n    { id: 22, name: 'van ter' },\r\n    { id: 23, name: \"op 't\" },\r\n    { id: 24, name: 'op den' },\r\n    { id: 25, name: 'op ten' },\r\n    { id: 26, name: 'op de' },\r\n];\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport MomentLocaleUtils, { formatDate, parseDate } from 'react-day-picker/moment';\r\nimport moment from 'moment';\r\nimport { get } from 'lodash';\r\n\r\nconst InputDate = ({\r\n    className,\r\n    id,\r\n    value,\r\n    required,\r\n    readOnly,\r\n    name,\r\n    onChangeAction,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n}) => {\r\n    const handleDayChange = date => {\r\n        // Convert date in correct value for database\r\n        const formattedDate = date ? moment(date).format('Y-MM-DD') : '';\r\n\r\n        onChangeAction(name, formattedDate);\r\n    };\r\n\r\n    const formattedDate = value ? moment(value).format('L') : '';\r\n\r\n    return (\r\n        <>\r\n            {get(errors, name, '') && get(touched, name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, name, '')}</small>\r\n            ) : null}\r\n            <DayPickerInput\r\n                id={id}\r\n                value={formattedDate}\r\n                onDayChange={handleDayChange}\r\n                formatDate={formatDate}\r\n                parseDate={parseDate}\r\n                dayPickerProps={{\r\n                    showWeekNumbers: true,\r\n                    locale: 'nl',\r\n                    firstDayOfWeek: 1,\r\n                    localeUtils: MomentLocaleUtils,\r\n                }}\r\n                inputProps={{\r\n                    className: `text-input content w-input ${className} ${\r\n                        Boolean(get(errors, name, '') && get(touched, name, '')) ? 'has-error mb-0' : ''\r\n                    } `,\r\n                    name: name,\r\n                    autoComplete: 'off',\r\n                    readOnly: readOnly,\r\n                    disabled: readOnly,\r\n                    placeholder: placeholder,\r\n                }}\r\n                required={required}\r\n                readOnly={readOnly}\r\n                placeholder={''}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputDate.defaultProps = {\r\n    className: '',\r\n    required: '',\r\n    readOnly: false,\r\n    value: null,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputDate.propTypes = {\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    onChangeAction: PropTypes.func,\r\n    required: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputDate;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport InputDate from '../../../components/form/InputDate';\r\n\r\nconst DefaultContactPersonalEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.titleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.initials\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"initials\"\r\n                                    placeholder={'Initialen'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.firstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name\"\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.lastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.lastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name\"\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel\r\n                    htmlFor=\"date_of_birth\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Geboortedatum\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.dateOfBirth\"\r\n                            render={({ field }) => (\r\n                                <InputDate\r\n                                    {...field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    onChangeAction={setFieldValue}\r\n                                    id=\"date_of_birth\"\r\n                                    placeholder={'Geboortedatum'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Adres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"primaryAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={\r\n                                        initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"primaryContactEnergySupplier.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            // disabled={\r\n                                            //     initialContact.primaryContactEnergySupplier &&\r\n                                            //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                            //     initialContact.isParticipant\r\n                                            // }\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.primaryContactEnergySupplier && values.primaryContactEnergySupplier.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.esNumber &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                    // readOnly={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.memberSince\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel\r\n                                    htmlFor=\"ean_electricity\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    EAN nummer electriciteit\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanElectricity\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_electricity\"\r\n                                                    placeholder={'EAN nummer electriciteit'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanElectricity &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                                    EAN nummer gas\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanGas\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_gas\"\r\n                                                    placeholder={'EAN nummer gas'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanGas\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactPersonalEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        // TODO set more correct values for validation, only important fields are set now\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        person: Yup.object().shape({\r\n            lastName: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        person: Yup.object().shape({\r\n            titleId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            firstName: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            dateOfBirth: Yup.date()\r\n                .typeError('Verplicht of ongeldige datum')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht')\r\n            .test('iban', 'Ongeldige IBAN !', value => ibantools.isValidIBAN(value)),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            energySupplierId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            esNumber: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactPersonalView from './default-form-personal/View';\r\nimport DefaultContactPersonalEdit from './default-form-personal/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from './../../helpers/ValidationSchemaPersonal';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsPersonal({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaPersonal.validationSchemaBasic\r\n              .concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n              .concat(ValidationSchemaPersonal.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaPersonal.validationSchemaBasic.concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n        : ValidationSchemaPersonal.validationSchemaBasic;\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactPersonalView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsPersonal;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactOrganisationView({ portalSettings, initialContact }) {\r\n    const {\r\n        organisation = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        visitAddress,\r\n        postalAddress,\r\n        invoiceAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n        primaryContactEnergySupplier,\r\n        primaryOccupations,\r\n    } = initialContact;\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Bedrijfsnaam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Bedrijfsnaam'}>\r\n                        {organisation.name}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'KvK'}>\r\n                        {organisation.chamberOfCommerceNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'BTW nummer'}>\r\n                        {organisation.vatNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Website'}>\r\n                        {organisation.website}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? <em>({dateDidAgreeAvg ? moment(dateDidAgreeAvg).format('L') : ''})</em> : ''}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Bezoekadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {visitAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {visitAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {visitAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {visitAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {visitAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {visitAddress.country ? visitAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Postadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {postalAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {postalAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {postalAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {postalAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {postalAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {postalAddress.country ? postalAddress.country.name : ''}\r\n                    </TextBlock>{' '}\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Nota adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {invoiceAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {invoiceAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {invoiceAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {invoiceAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {invoiceAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {invoiceAddress.country ? invoiceAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {primaryContactEnergySupplier.energySupplier\r\n                            ? primaryContactEnergySupplier.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                {primaryContactEnergySupplier && primaryContactEnergySupplier.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {primaryContactEnergySupplier.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {primaryContactEnergySupplier.memberSince\r\n                                    ? moment(primaryContactEnergySupplier.memberSince).format('L')\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                                {primaryContactEnergySupplier.eanElectricity}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                                {primaryContactEnergySupplier.eanGas}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n\r\n                {/*<FormLabel className={'field-label'}>Contacten</FormLabel>*/}\r\n                {/*{primaryOccupations ? (*/}\r\n                {/*primaryOccupations.map(primaryOccupation => (*/}\r\n                {/*<Row>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-4'} placeholder={'Contact naam'}>*/}\r\n                {/*{primaryOccupation.contact.fullName}*/}\r\n                {/*</TextBlock>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-4'} placeholder={'Contact verbinding'}>*/}\r\n                {/*{primaryOccupation.occupation.primaryOccupation}*/}\r\n                {/*</TextBlock>*/}\r\n                {/*</Row>*/}\r\n                {/*))*/}\r\n                {/*) : (*/}\r\n                {/*<Row>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-8'} />*/}\r\n                {/*</Row>*/}\r\n                {/*)}*/}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactOrganisationView;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport InputDate from '../../../components/form/InputDate';\r\n\r\nconst DefaultContactOrganisationEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.name\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"name\"\r\n                                    placeholder={'Naam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.chamberOfCommerceNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"chamber_of_commerce_number\"\r\n                                    placeholder={'KvK'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.vatNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"vat_number\"\r\n                                    placeholder={'BTW nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.website\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"website\"\r\n                                    placeholder={'Website'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Bezoekadres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"visitAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={\r\n                                        initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Postadres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"postalAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Nota adres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"invoiceAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"primaryContactEnergySupplier.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            // disabled={\r\n                                            //     initialContact.primaryContactEnergySupplier &&\r\n                                            //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                            //     initialContact.isParticipant\r\n                                            // }\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.primaryContactEnergySupplier && values.primaryContactEnergySupplier.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.esNumber &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                    // readOnly={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.memberSince\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel\r\n                                    htmlFor=\"ean_electricity\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    EAN nummer electriciteit\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanElectricity\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_electricity\"\r\n                                                    placeholder={'EAN nummer electriciteit'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanElectricity &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                                    EAN nummer gas\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanGas\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_gas\"\r\n                                                    placeholder={'EAN nummer gas'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanGas\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactOrganisationEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        // TODO set more correct values for validation, only important fields are set now\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        organisation: Yup.object().shape({\r\n            name: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        postalAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        invoiceAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            energySupplierId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            esNumber: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactOrganisationView from './default-form-organisation/View';\r\nimport DefaultContactOrganisationEdit from './default-form-organisation/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaOrganisation from './../../helpers/ValidationSchemaOrganisation';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsOrganisation({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic\r\n              .concat(ValidationSchemaOrganisation.validationSchemaAdditional)\r\n              .concat(ValidationSchemaOrganisation.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic.concat(\r\n              ValidationSchemaOrganisation.validationSchemaAdditional\r\n          )\r\n        : ValidationSchemaOrganisation.validationSchemaBasic;\r\n\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactOrganisationView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsOrganisation;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactDetailsPersonal from './Personal';\r\nimport ContactDetailsOrganisation from './Organisation';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst ContactDetails = function(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n    const [editForm, setEditForm] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const keys =\r\n            '?keys[]=portalName' +\r\n            '&keys[]=portalWebsite' +\r\n            '&keys[]=portalUrl' +\r\n            '&keys[]=responsibleUserId' +\r\n            '&keys[]=checkContactTaskResponsibleUserId' +\r\n            '&keys[]=linkPrivacyPolicy' +\r\n            '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n            '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n        PortalSettingsAPI.fetchPortalSettings(keys)\r\n            .then(payload => {\r\n                setPortalSettings({ ...payload.data });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ isLoading: false, hasError: true });\r\n            });\r\n\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n                props.updateNameSelectedContact(contactData.fullName);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, switchToView) {\r\n        const updatedContact = { ...contact, ...values, projectId: null };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                callFetchContact();\r\n                actions.setSubmitting(false);\r\n                switchToView();\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    const editButtonGroup = (\r\n        <ButtonGroup aria-label=\"Steps\" className={'float-right'}>\r\n            <Button\r\n                className={'w-button'}\r\n                size=\"sm\"\r\n                onClick={function() {\r\n                    setEditForm(true);\r\n                }}\r\n            >\r\n                Wijzig\r\n            </Button>\r\n        </ButtonGroup>\r\n    );\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <div className=\"content-container w-container\">\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                            <Link to={`/inschrijven-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Inschrijven projecten\r\n                                </Button>\r\n                            </Link>\r\n                            &nbsp;\r\n                            <Link to={`/inschrijvingen-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Huidige deelnames\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    {editForm ? (\r\n                        <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                    ) : (\r\n                        <Row>\r\n                            <Col>\r\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                            </Col>\r\n                            <Col>{editButtonGroup}</Col>\r\n                        </Row>\r\n                    )}\r\n                    <div className=\"w-form\" />\r\n                    {/* If contact is person */}\r\n                    {contact.typeId === 'person' ? (\r\n                        <ContactDetailsPersonal\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                    {/* If contact is organisation */}\r\n                    {contact.typeId === 'organisation' ? (\r\n                        <ContactDetailsOrganisation\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default function ContactDetailsWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact, updateNameSelectedContact }) => (\r\n                <ContactDetails\r\n                    {...props}\r\n                    currentSelectedContact={currentSelectedContact}\r\n                    updateNameSelectedContact={updateNameSelectedContact}\r\n                />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Field, FieldArray, Form, Formik } from 'formik';\r\nimport ButtonText from '../../components/button/ButtonText';\r\n\r\nconst MyAreasOfInterestForm = function({ handleSubmit, initialValues }) {\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            enableReinitialize={true}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                console.log(values);\r\n            }}\r\n            render={({ errors, touched, setFieldValue, isSubmitting, values }) => {\r\n                return (\r\n                    <Form id=\"email-form\" name=\"email-form\">\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <h6 className=\"heading-content\">Mijn interessegebieden</h6>\r\n                                <FieldArray\r\n                                    name=\"myAreasOfInterest\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.myAreasOfInterest &&\r\n                                                values.myAreasOfInterest.map((myAreaOfInterest, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`myAreasOfInterest[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={myAreaOfInterest.name}\r\n                                                                        checked={myAreaOfInterest.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={myAreaOfInterest.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {myAreaOfInterest.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Deelname</h6>\r\n                                <FieldArray\r\n                                    name=\"participations\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.participations &&\r\n                                                values.participations.map((participation, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`participations[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={participation.name}\r\n                                                                        checked={participation.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={participation.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {participation.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Algemeen</h6>\r\n                                <FieldArray\r\n                                    name=\"generalOptions\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.generalOptions &&\r\n                                                values.generalOptions.map((generalOption, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`generalOptions[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={generalOption.name}\r\n                                                                        checked={generalOption.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={generalOption.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {generalOption.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <ButtonText\r\n                                    buttonText={'Opslaan'}\r\n                                    buttonClassName={'save-btn w-button'}\r\n                                    type={'submit'}\r\n                                    loading={isSubmitting}\r\n                                />\r\n                            </div>\r\n                            <div className=\"w-col w-col-6\" />\r\n                        </div>\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterestForm;\r\n","import React from 'react';\r\nimport MyAreasOfInterestForm from './Form';\r\n\r\nconst MyAreasOfInterest = function() {\r\n    // TODO Fetch values from API\r\n    const initialValues = {\r\n        myAreasOfInterest: [\r\n            { id: 4, name: 'Gevel isolatie', value: true },\r\n            { id: 5, name: 'Zonnepanelen', value: false },\r\n            { id: 6, name: 'Dak isolatie', value: false },\r\n            { id: 7, name: 'Zonneboiler', value: true },\r\n        ],\r\n        participations: [{ id: 2, name: 'Test groep', value: true }, { id: 3, name: 'De leuke mensen', value: false }],\r\n        generalOptions: [{ id: 1, name: 'Test algemeen groep', value: false }],\r\n    };\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            <div className=\"content-container w-container\">\r\n                <h1 className=\"content-heading\">Instellingen</h1>\r\n                <div className=\"w-form\" />\r\n                <MyAreasOfInterestForm initialValues={initialValues} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterest;\r\n","export default amount => {\r\n    if (!amount) amount = 0;\r\n    // if (isNaN(amount)) {\r\n    //     amount = amount.replace(',', '.');\r\n    // }\r\n    amount = parseFloat(amount * 100) / 100;\r\n\r\n    if (isNaN(amount)) return 'Ongeldig bedrag';\r\n\r\n    return `€ ${amount.toLocaleString('nl', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n    })}`;\r\n};\r\n","export default function(project, amountOptioned, participationsOptioned) {\r\n    let transactionCosts = 0;\r\n    let varAmountOptioned = amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\r\n    let varParticipationsOptioned = participationsOptioned ? parseFloat(participationsOptioned).toFixed(0) : 0;\r\n    switch (project.transactionCostsCodeRef) {\r\n        case 'amount-once':\r\n            transactionCosts = project.transactionCostsAmount;\r\n            break;\r\n        case 'amount':\r\n            if (project.projectType.codeRef === 'loan') {\r\n                transactionCosts = project.transactionCostsAmount;\r\n            } else {\r\n                transactionCosts = project.transactionCostsAmount * varParticipationsOptioned;\r\n            }\r\n            break;\r\n        case 'percentage':\r\n            let amount = 0;\r\n            if (project.projectType.codeRef === 'loan') {\r\n                amount = varAmountOptioned;\r\n            } else {\r\n                amount = varParticipationsOptioned * project.currentBookWorth;\r\n            }\r\n            if (amount != 0) {\r\n                if (project.transactionCostsAmount3 !== null && amount >= project.transactionCostsAmount3) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage3) / 100).toFixed(2));\r\n                } else if (project.transactionCostsAmount2 !== null && amount >= project.transactionCostsAmount2) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage2) / 100).toFixed(2));\r\n                } else if (project.transactionCostsAmount !== null && amount >= project.transactionCostsAmount) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage) / 100).toFixed(2));\r\n                } else {\r\n                    transactionCosts = 0;\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            transactionCosts = 0;\r\n    }\r\n    if (project.transactionCostsCodeRef !== 'none') {\r\n        if (project.transactionCostsAmountMin !== null && transactionCosts < project.transactionCostsAmountMin) {\r\n            transactionCosts = project.transactionCostsAmountMin;\r\n        }\r\n        if (project.transactionCostsAmountMax !== null && transactionCosts > project.transactionCostsAmountMax) {\r\n            transactionCosts = project.transactionCostsAmountMax;\r\n        }\r\n    }\r\n\r\n    return transactionCosts;\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst InputTextCurrency = ({\r\n    field,\r\n    type,\r\n    className,\r\n    id,\r\n    readOnly,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <input\r\n                type={type}\r\n                className={`text-input w-input ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                value={field.value.toString().replace('.', ',')}\r\n                readOnly={readOnly}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputTextCurrency.defaultProps = {\r\n    type: 'text',\r\n    className: 'content',\r\n    readOnly: false,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputTextCurrency.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputTextCurrency;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\nimport InputTextCurrency from '../../../components/form/InputTextCurrency';\r\n\r\nfunction StepOneLoan({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        amountOptioned: Yup.string()\r\n            .required('Verplicht')\r\n            .transform(function(value, originalvalue) {\r\n                return value ? value.replace(',', '.') : 0;\r\n            })\r\n            .test(\r\n                'amountOptioned',\r\n                'Minimum van ' + project.minAmountLoan + ' nodig',\r\n                value => value >= project.minAmountLoan\r\n            )\r\n            .test(\r\n                'amountOptioned',\r\n                'Maximum van ' + project.maxAmountLoan + ' bereikt',\r\n                value => value <= project.maxAmountLoan\r\n            )\r\n            .matches(/^\\s*(?=.*[1-9])\\d*(?:\\.\\d{1,2})?\\s*$/, 'Fout bedrag'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function setAmountOptioned(amountOptioned) {\r\n        return amountOptioned ? amountOptioned.toString().replace(',', '.') : '';\r\n    }\r\n    function calculateAmount(amountOptioned) {\r\n        return amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(amountOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, amountOptioned, null);\r\n    }\r\n    function calculateTotalAmount(amountOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(amountOptioned) + calculateTransactionCostsAmount(amountOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amountOptioned: setAmountOptioned(values.amountOptioned),\r\n                    amount: calculateAmount(values.amountOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.amountOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.amountOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimaal bedrag</FormLabel>\r\n                                <TextBlock>{project.minAmountLoan}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximaal bedrag</FormLabel>\r\n                                <TextBlock>{project.maxAmountLoan}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>In te leggen bedrag</Form.Label>\r\n                                <Field\r\n                                    name=\"amountOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputTextCurrency\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"amount_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.amountOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.amountOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(values.amountOptioned, values.choiceMembership)\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneLoan;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOneObligation({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Huidige hoofdsom per obligatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal obligaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneObligation;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOneCapital({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal participaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneCapital;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOnePcr({\r\n    portalSettings,\r\n    next,\r\n    project,\r\n    contactProjectData,\r\n    initialContact,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n}) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrYearlyPowerKwhConsumption: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrPostalCode: Yup.string()\r\n            .min(4, 'Minimum van ${min} postcode cijfers nodig')\r\n            .required('Verplicht')\r\n            .test(\r\n                'pcrPostalCode',\r\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                value =>\r\n                    value &&\r\n                    (!project.checkPostalcodeLink ||\r\n                        (project.postalcodeLink && project.postalcodeLink.includes(value.substring(0, 4))))\r\n            ),\r\n        pcrNumberOfSolarPanels: Yup.number().typeError('Alleen nummers'),\r\n        pcrInputGeneratedNumberOfKwh: Yup.number().typeError('Alleen nummers'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    // const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = 0.8;\r\n    const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = portalSettings['pcrPowerKwhConsumptionPercentage'];\r\n    // const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = 250;\r\n    const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = portalSettings['pcrGeneratingCapacityOneSolorPanel'];\r\n\r\n    function calculateEstimatedGeneratedNumberOfKwh(values) {\r\n        return values.pcrNumberOfSolarPanels\r\n            ? values.pcrNumberOfSolarPanels * PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n            : 0;\r\n    }\r\n    function calculateGeneratedNumberOfKwh(values) {\r\n        return values.pcrInputGeneratedNumberOfKwh && values.pcrInputGeneratedNumberOfKwh > 0\r\n            ? values.pcrInputGeneratedNumberOfKwh\r\n            : calculateEstimatedGeneratedNumberOfKwh(values)\r\n            ? calculateEstimatedGeneratedNumberOfKwh(values)\r\n            : 0;\r\n    }\r\n    function calculatePowerKwhConsumption(values) {\r\n        let extraPowerKwhConsumption =\r\n            values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values) > 0\r\n                ? values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values)\r\n                : 0;\r\n        return extraPowerKwhConsumption;\r\n    }\r\n    function calculateAdviseMaxNumberOfParticipations(values) {\r\n        let pcrAdviseMaxNumberOfParticipations =\r\n            calculatePowerKwhConsumption(values) > 0\r\n                ? Math.ceil(\r\n                      (calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE) /\r\n                          PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n                  )\r\n                : 0;\r\n\r\n        if (pcrAdviseMaxNumberOfParticipations < project.minParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.minParticipations;\r\n        } else if (pcrAdviseMaxNumberOfParticipations > project.maxParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.maxParticipations;\r\n        }\r\n        return pcrAdviseMaxNumberOfParticipations;\r\n    }\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    powerKwhConsumption: calculatePowerKwhConsumption(values),\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={{\r\n                ...initialRegisterValues,\r\n            }}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => {\r\n                let pcrEstimatedGeneratedNumberOfKwh = calculateEstimatedGeneratedNumberOfKwh(values);\r\n                let powerKwhConsumption = Math.ceil(\r\n                    calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE\r\n                );\r\n                let pcrAdviseMaxNumberOfParticipations = calculateAdviseMaxNumberOfParticipations(values);\r\n                return (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                                </Col>\r\n\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\r\n                                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>Je postcode</Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrPostalCode\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_postal_code\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>Deelnemende postcodes</Form.Label>\r\n                                    <TextBlock>{project.postalcodeLink}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Je (geschatte) jaarlijks verbruik (in kWh)\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrYearlyPowerKwhConsumption\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_yearly_power_kwh_consumption\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Heb je al zonnepanelen op je eigen dak of doe je mee in een ander project?\r\n                                    </Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrHasSolarPanels\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => setFieldValue('pcrHasSolarPanels', 'Y')}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrHasSolarPanels', 'N');\r\n                                                                setFieldValue('pcrNumberOfSolarPanels', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrHasSolarPanels === 'Y' ? (\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <Form.Label className={'field-label'}>\r\n                                            Hoeveel zonnepanelen wekken al stroom voor je op\r\n                                        </Form.Label>\r\n                                        <Field\r\n                                            name=\"pcrNumberOfSolarPanels\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"pcr_number_of_solar_panels\"\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Wij schatten in dat je panelen jaarlijks opwekken\r\n                                    </Form.Label>\r\n                                    <TextBlock id=\"pcr_input_estimated_generated_number_of_kwh\">\r\n                                        {pcrEstimatedGeneratedNumberOfKwh} kWh\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>Klopt het geschatte opbrengst?</Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrEstimatedRevenueOk\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrEstimatedRevenueOk', 'Y');\r\n                                                                setFieldValue('pcrInputGeneratedNumberOfKwh', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => setFieldValue('pcrEstimatedRevenueOk', 'N')}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrEstimatedRevenueOk === 'N' ? (\r\n                                <>\r\n                                    <Row>\r\n                                        <Col xs={12} md={6}>\r\n                                            <Form.Label className={'field-label'}>\r\n                                                Wat is de jaarlijkse opbrengst van jouw panelen (in kWh)\r\n                                            </Form.Label>\r\n                                            <Field\r\n                                                name=\"pcrInputGeneratedNumberOfKwh\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"pcr_input_generated_number_of_kwh\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <p>\r\n                                        We adviseren tot {PCR_POWER_KWH_CONSUMPTION_PERCENTAGE * 100}% van je jaarlijks\r\n                                        verbruik minus de jaarlijkse opbrengsten (in jouw geval {powerKwhConsumption}{' '}\r\n                                        kWh) te dekken met participaties. In het veld hier direct onder is voor je\r\n                                        uitgerekend hoeveel participaties dat zijn. Het is een advies, je mag er ook\r\n                                        meer kopen. Dit kan echter slecht zijn voor je rendement.\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Advies maximaal aantal participaties\r\n                                    </Form.Label>\r\n                                    <TextBlock>{pcrAdviseMaxNumberOfParticipations}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Gewenst aantal participaties\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"participationsOptioned\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"participations_optioned\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>\r\n                                        {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                    </FormLabel>\r\n                                    <TextBlock>\r\n                                        {MoneyPresenter(calculateAmount(values.participationsOptioned))}\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n                            {project.showQuestionAboutMembership ? (\r\n                                <>\r\n                                    <hr />\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <p>\r\n                                                {contactProjectData.belongsToMembershipGroup\r\n                                                    ? contactProjectData.textIsMemberMerged\r\n                                                    : contactProjectData.textIsNoMemberMerged}\r\n                                            </p>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {!contactProjectData.belongsToMembershipGroup ? (\r\n                                        <Row>\r\n                                            <Col xs={12} md={10}>\r\n                                                <Field\r\n                                                    name=\"choiceMembership\"\r\n                                                    render={({ field }) => (\r\n                                                        <>\r\n                                                            {get(errors, field.name, '') &&\r\n                                                                get(touched, field.name, '') && (\r\n                                                                    <small className=\"text-danger\">\r\n                                                                        {get(errors, field.name, '')}\r\n                                                                    </small>\r\n                                                                )}\r\n                                                            <div className=\"form-check\">\r\n                                                                <label className=\"radio-inline\">\r\n                                                                    <input\r\n                                                                        type=\"radio\"\r\n                                                                        {...field}\r\n                                                                        id=\"choice_membership_yes\"\r\n                                                                        checked={field.value === 1}\r\n                                                                        value={1}\r\n                                                                        onChange={() =>\r\n                                                                            setFieldValue('choiceMembership', 1)\r\n                                                                        }\r\n                                                                    />\r\n                                                                    &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                                </label>\r\n                                                                <label className=\"radio-inline\">\r\n                                                                    <input\r\n                                                                        type=\"radio\"\r\n                                                                        {...field}\r\n                                                                        id=\"choice_membership_no\"\r\n                                                                        checked={field.value === 2}\r\n                                                                        value={2}\r\n                                                                        onChange={() => {\r\n                                                                            setFieldValue('choiceMembership', 2);\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                                </label>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    ) : null}\r\n                                </>\r\n                            ) : null}\r\n\r\n                            {project.transactionCostsCodeRef !== 'none' ? (\r\n                                <>\r\n                                    <hr />\r\n                                    <Row>\r\n                                        <Col xs={12} md={6}>\r\n                                            <FormLabel className={'field-label'}>\r\n                                                {project.textTransactionCosts}\r\n                                            </FormLabel>\r\n                                            <TextBlock>\r\n                                                {MoneyPresenter(\r\n                                                    calculateTransactionCostsAmount(\r\n                                                        values.participationsOptioned,\r\n                                                        values.choiceMembership\r\n                                                    )\r\n                                                )}\r\n                                            </TextBlock>\r\n                                        </Col>\r\n                                        <Col xs={12} md={6}>\r\n                                            <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                            <TextBlock>\r\n                                                {MoneyPresenter(\r\n                                                    calculateTotalAmount(\r\n                                                        values.participationsOptioned,\r\n                                                        values.choiceMembership\r\n                                                    )\r\n                                                )}\r\n                                            </TextBlock>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            Ga naar gegevens\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOnePcr;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DefaultContactPersonalEdit from '../../contact-details/default-form-personal/Edit';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from '../../../helpers/ValidationSchemaPersonal';\r\nimport ValidationSchemaOrganisation from '../../../helpers/ValidationSchemaOrganisation';\r\nimport * as Yup from 'yup';\r\nimport DefaultContactOrganisationEdit from '../../contact-details/default-form-organisation/Edit';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepTwo({ portalSettings, previous, next, project, initialContact, handleSubmitContactValues }) {\r\n    initialContact.isParticipant = true;\r\n    const typeContact = initialContact.typeId ? initialContact.typeId : null;\r\n    const validationSchemaPcrPersonal = Yup.object().shape({\r\n        primaryAddress: Yup.object().shape({\r\n            postalCode: Yup.string().test(\r\n                'postal-code-primary-address-in-pcr-area',\r\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                function(value) {\r\n                    return !project.checkPostalcodeLink || project.postalcodeLink.includes(value.substring(0, 4));\r\n                }\r\n            ),\r\n        }),\r\n    });\r\n    const validationSchemaPcrOrganisation = Yup.object().shape({\r\n        visitAddress: Yup.object().shape({\r\n            postalCode: Yup.string()\r\n                .test(\r\n                    'postal-code-visit-address-in-pcr-area',\r\n                    'xxHelaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                    function(value) {\r\n                        return !project.checkPostalcodeLink || project.postalcodeLink.includes(value.substring(0, 4));\r\n                    }\r\n                )\r\n                .required('Verplicht'),\r\n        }),\r\n    });\r\n\r\n    let validationSchema = null;\r\n    let validationSchemaBasic = null;\r\n    let validationSchemaAdditional = null;\r\n    let validationSchemaPcrAdditional = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            validationSchemaBasic = ValidationSchemaPersonal.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaPersonal.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n            }\r\n            if (project.isSceProject) {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrPersonal);\r\n            }\r\n            break;\r\n        case 'organisation':\r\n            validationSchemaBasic = ValidationSchemaOrganisation.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaOrganisation.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n            }\r\n            if (project.isSceProject) {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrOrganisation);\r\n            }\r\n            break;\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactValues(values, actions, next);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    // console.log(errors);\r\n                    return (\r\n                        <Form>\r\n                            {/* If contact is person */}\r\n                            {initialContact.typeId === 'person' ? (\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            {/* If contact is organisation */}\r\n                            {initialContact.typeId === 'organisation' ? (\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan en doorgaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepTwo;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepThree({ project, contactProjectData, previous, next, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        didAcceptAgreement: Yup.bool().test(\r\n            'didAcceptAgreement',\r\n            'Je dient akkoord te gaan met de voorwaarden!',\r\n            value => value === true\r\n        ),\r\n        didUnderstandInfo: Yup.bool().test(\r\n            'didUnderstandInfo',\r\n            'Je dient te bevestigen, dat de project informatie gelezen en begrepen is!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                onSubmit={function(values, actions) {\r\n                    handleSubmitRegisterValues(values);\r\n                    next();\r\n                }}\r\n                initialValues={initialRegisterValues}\r\n            >\r\n                {({ handleSubmit, touched, errors }) => (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <p\r\n                                        dangerouslySetInnerHTML={{\r\n                                            __html: contactProjectData.textAgreeTermsMerged,\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didAcceptAgreement\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_accept_agreement\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_accept_agreement\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                    dangerouslySetInnerHTML={{\r\n                                                        __html: contactProjectData.textLinkAgreeTermsMerged,\r\n                                                    }}\r\n                                                />\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didUnderstandInfo\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_understand_info\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_understand_info\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                    dangerouslySetInnerHTML={{\r\n                                                        __html: contactProjectData.textLinkUnderstandInfoMerged,\r\n                                                    }}\r\n                                                />\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            {project.usesMollie ? (\r\n                                                <>Ga naar bevestigen en betalen</>\r\n                                            ) : (\r\n                                                <>Ga naar bevestigen</>\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepThree;\r\n","import React from 'react';\r\nimport Frame from 'react-frame-component';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ViewHtmlAsText = ({ id, value }) => {\r\n    const createMarkup = () => {\r\n        return { __html: value };\r\n    };\r\n\r\n    return (\r\n        <Frame>\r\n            <div id={id} dangerouslySetInnerHTML={createMarkup()} />\r\n        </Frame>\r\n    );\r\n};\r\n\r\nViewHtmlAsText.defaultProps = {\r\n    value: '',\r\n};\r\n\r\nViewHtmlAsText.propTypes = {\r\n    id: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default ViewHtmlAsText;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    createParticipantProject: registerValues => {\r\n        const requestUrl = `/project/participant/create`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n\r\n    show: id => {\r\n        const requestUrl = `/project/participant/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport ViewHtmlAsText from '../../../components/general/ViewHtmlAsText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction StepFour({ project, contactProjectData, previous, next, registerValues, setSucces }) {\r\n    const [contactDocument, setContactDocument] = useState('');\r\n    const [isLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        (function callFetchContact() {\r\n            setLoading(true);\r\n            ContactAPI.previewDocument(registerValues)\r\n                .then(payload => {\r\n                    setContactDocument(payload.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [registerValues]);\r\n\r\n    function handleSubmitRegisterValues(actions, next) {\r\n        ParticipantProjectAPI.createParticipantProject(registerValues)\r\n            .then(payload => {\r\n                // console.log(payload);\r\n                actions.setSubmitting(false);\r\n\r\n                /**\r\n                 * Als Mollie is ingeschakeld voor het project wordt er een betaallink gereturned.\r\n                 * In dat geval huidige scherm verlaten en door naar mollie.\r\n                 */\r\n                if (payload.data.econobisPaymentLink) {\r\n                    window.location.href = payload.data.econobisPaymentLink;\r\n                    return;\r\n                }\r\n\r\n                setSucces(true);\r\n                next();\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        didAgreeRegistration: Yup.bool().test(\r\n            'didAgreeRegistration',\r\n            'Je dient akkoord te gaan met het inschrijfformulier!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    let contactDocumentOk = false;\r\n    if (!isEmpty('' + contactDocument)) {\r\n        contactDocumentOk = true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : !contactDocumentOk ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>Er ging iets mis bij het maken van het bevestingsformulier voorbeeld.</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                    Terug\r\n                                </Button>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : (\r\n                <Formik\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={function(values, actions) {\r\n                        handleSubmitRegisterValues(actions, next);\r\n                    }}\r\n                    initialValues={{ didAgreeRegistration: false }}\r\n                >\r\n                    {({ handleSubmit, touched, errors, isSubmitting, status }) => (\r\n                        <>\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <FormLabel className={'field-label'}>Controleer de inschrijving</FormLabel>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ViewHtmlAsText value={contactDocument} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={3}>\r\n                                        <FormLabel className={'field-label-text'}>\r\n                                            {project.transactionCostsCodeRef === 'none'\r\n                                                ? 'Te betalen bedrag'\r\n                                                : 'Bedrag'}\r\n                                        </FormLabel>\r\n                                    </Col>\r\n                                    <Col xs={12} md={3}>\r\n                                        <TextBlock className={'float-right'}>\r\n                                            {MoneyPresenter(registerValues.amount)}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                                {project.transactionCostsCodeRef !== 'none' ? (\r\n                                    <>\r\n                                        <Row>\r\n                                            <Col xs={12} md={3}>\r\n                                                <FormLabel className={'field-label-text'}>\r\n                                                    {project.textTransactionCosts}\r\n                                                </FormLabel>\r\n                                            </Col>\r\n                                            <Col xs={12} md={3}>\r\n                                                <TextBlock className={'float-right'}>\r\n                                                    {MoneyPresenter(registerValues.transactionCostsAmount)}\r\n                                                </TextBlock>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col xs={12} md={3}>\r\n                                                <FormLabel className={'field-label-text'}>Totaal te betalen</FormLabel>\r\n                                            </Col>\r\n                                            <Col xs={12} md={3}>\r\n                                                <TextBlock className={'float-right'}>\r\n                                                    {MoneyPresenter(registerValues.totalAmount)}\r\n                                                </TextBlock>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </>\r\n                                ) : null}\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>{contactProjectData.textAcceptAgreementMerged}</p>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <Field\r\n                                            name=\"didAgreeRegistration\"\r\n                                            render={({ field }) => (\r\n                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                    <input\r\n                                                        type=\"checkbox\"\r\n                                                        {...field}\r\n                                                        id=\"did_agree_registration\"\r\n                                                        checked={field.value}\r\n                                                        className=\"w-checkbox-input checkbox\"\r\n                                                    />\r\n                                                    <span\r\n                                                        htmlFor=\"did_agree_registration\"\r\n                                                        className=\"checkbox-label w-form-label\"\r\n                                                    >\r\n                                                        {contactProjectData.textAcceptAgreementQuestionMerged}\r\n                                                    </span>\r\n                                                    {touched[field.name] && errors[field.name] ? (\r\n                                                        <div className={'error-message text-danger'}>\r\n                                                            {errors[field.name]}\r\n                                                        </div>\r\n                                                    ) : null}\r\n                                                </label>\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                                Terug\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met verwerken\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        {project.usesMollie ? (\r\n                                                            <>Betaal en bevestig de inschrijving</>\r\n                                                        ) : (\r\n                                                            <>Bevestig inschrijving</>\r\n                                                        )}\r\n                                                    </>\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                    volgende stap!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        </>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StepFour;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport { Form } from 'formik';\r\n\r\nfunction StepFive({ contactProjectData }) {\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    {contactProjectData.textRegistrationFinishedMerged.split('\\n').map((item, key) => {\r\n                        return (\r\n                            <span key={key}>\r\n                                {item}\r\n                                <br />\r\n                            </span>\r\n                        );\r\n                    })}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    <ButtonGroup className=\"float-right\">\r\n                        <Link to={`/inschrijvingen-projecten`}>\r\n                            <Button className={'w-button'} size=\"sm\">\r\n                                Naar mijn huidige deelnames\r\n                            </Button>\r\n                        </Link>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepFive;\r\n","import React from 'react';\r\nimport StepOneLoan from './StepOneLoan';\r\nimport StepOneObligation from './StepOneObligation';\r\nimport StepOneCapital from './StepOneCapital';\r\nimport StepOnePcr from './StepOnePcr';\r\nimport StepTwo from './StepTwo';\r\nimport StepThree from './StepThree';\r\nimport StepFour from './StepFour';\r\nimport StepFive from './StepFive';\r\nimport { isEmpty } from 'lodash';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction Steps({\r\n    portalSettings,\r\n    currentStep,\r\n    previous,\r\n    next,\r\n    project,\r\n    contactProjectData,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    if (isEmpty(project)) {\r\n        return (\r\n            <Container className={'content-section'}>\r\n                <>\r\n                    <p>Fout bij ophalen project. Inschrijving niet (meer) mogelijk op dit moment.</p>\r\n                </>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    switch (currentStep) {\r\n        case 1:\r\n            switch (project.projectType.codeRef) {\r\n                case 'loan':\r\n                    return (\r\n                        <StepOneLoan\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'obligation':\r\n                    return (\r\n                        <StepOneObligation\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'capital':\r\n                    return (\r\n                        <StepOneCapital\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'postalcode_link_capital':\r\n                    return (\r\n                        <StepOnePcr\r\n                            portalSettings={portalSettings}\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialContact={initialContact}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                default:\r\n                    return null;\r\n            }\r\n\r\n        case 2:\r\n            return (\r\n                <StepTwo\r\n                    portalSettings={portalSettings}\r\n                    previous={previous}\r\n                    next={next}\r\n                    project={project}\r\n                    initialContact={initialContact}\r\n                    handleSubmitContactValues={handleSubmitContactValues}\r\n                />\r\n            );\r\n        case 3:\r\n            return (\r\n                <StepThree\r\n                    project={project}\r\n                    contactProjectData={contactProjectData}\r\n                    previous={previous}\r\n                    next={next}\r\n                    initialRegisterValues={initialRegisterValues}\r\n                    handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                />\r\n            );\r\n        case 4:\r\n            return (\r\n                <StepFour\r\n                    project={project}\r\n                    contactProjectData={contactProjectData}\r\n                    previous={previous}\r\n                    next={next}\r\n                    registerValues={initialRegisterValues}\r\n                    setSucces={setSucces}\r\n                />\r\n            );\r\n        case 5:\r\n            return <StepFive contactProjectData={contactProjectData} />;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default Steps;\r\n","import React from 'react';\r\nimport Steps from './steps';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction MasterForm({\r\n    portalSettings,\r\n    project,\r\n    contactProjectData,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    const [currentStep, setStep] = React.useState(1);\r\n\r\n    function previous() {\r\n        setStep(currentStep <= 2 ? 1 : currentStep - 1);\r\n    }\r\n\r\n    function next() {\r\n        setStep(currentStep >= 4 ? 5 : currentStep + 1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {currentStep <= 4 ? (\r\n                <Row className={'mb-4'}>\r\n                    <Col>\r\n                        <div className={'arrow-steps clearfix'}>\r\n                            <div className={`step ${currentStep === 1 ? 'current' : ''}`}>1. Inschrijven</div>\r\n                            <div className={`step ${currentStep === 2 ? 'current' : ''}`}>2. Gegevens</div>\r\n                            <div className={`step ${currentStep === 3 ? 'current' : ''}`}>3. Voorwaarden</div>\r\n                            <div className={`step ${currentStep === 4 ? 'current' : ''}`}>\r\n                                {\r\n                                    project.usesMollie ? (\r\n                                        <>4. Bevestigen en betalen</>\r\n                                    ) : (\r\n                                        <>4. Bevestigen</>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            ) : null}\r\n            <Steps\r\n                portalSettings={portalSettings}\r\n                currentStep={currentStep}\r\n                previous={previous}\r\n                next={next}\r\n                project={project}\r\n                contactProjectData={contactProjectData}\r\n                initialRegisterValues={initialRegisterValues}\r\n                handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                initialContact={initialContact}\r\n                handleSubmitContactValues={handleSubmitContactValues}\r\n                setSucces={setSucces}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MasterForm;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../api/project/ProjectAPI';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport MasterForm from './MasterForm';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport axios from 'axios';\r\nimport { ThemeSettingsContext } from '../../context/ThemeSettingsContext';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction RegisterProject({ match, currentSelectedContact }) {\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    const initialRegisterValues = {\r\n        contactId: null,\r\n        projectId: null,\r\n        participationsOptioned: 0,\r\n        powerKwhConsumption: 0,\r\n        amountOptioned: 0,\r\n        didAcceptAgreement: false,\r\n        didUnderstandInfo: false,\r\n        choiceMembership: 0,\r\n    };\r\n\r\n    const initialPcrValues = {\r\n        pcrYearlyPowerKwhConsumption: 0,\r\n        pcrPostalCode: '',\r\n        pcrHasSolarPanels: 'N',\r\n        pcrInputGeneratedNumberOfKwh: 0,\r\n        pcrEstimatedRevenueOk: 'Y',\r\n    };\r\n\r\n    const [registerValues, setRegisterValues] = useState(initialRegisterValues);\r\n\r\n    const [project, setProject] = useState({});\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isSucces, setSucces] = useState(false);\r\n    const [contactProjectData, setContactProjectData] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function fetchContactAndProject() {\r\n                setLoading(true);\r\n\r\n                axios\r\n                    .all([\r\n                        ProjectAPI.fetchProject(match.params.id),\r\n                        ContactAPI.fetchContact(currentSelectedContact.id),\r\n                        ContactAPI.fetchContactProjectData(currentSelectedContact.id, match.params.id),\r\n                    ])\r\n                    .then(\r\n                        axios.spread((payloadProject, payloadContact, payloadContactProjectData) => {\r\n                            const contact = payloadContact.data.data;\r\n                            const project = payloadProject.data.data;\r\n                            setProject(project);\r\n                            setCurrentThemeSettings(project.administration.portalSettingsLayoutAssigned);\r\n                            const contactData = rebaseContact(contact);\r\n                            setContact(contactData);\r\n\r\n                            setContactProjectData(payloadContactProjectData.data);\r\n\r\n                            if (\r\n                                project &&\r\n                                project.projectType &&\r\n                                project.projectType.codeRef === 'postalcode_link_capital'\r\n                            ) {\r\n                                let pcrPostalCode = '';\r\n                                if (contactData.typeId === 'organisation') {\r\n                                    pcrPostalCode = contactData.visitAddress ? contactData.visitAddress.postalCode : '';\r\n                                } else {\r\n                                    pcrPostalCode = contactData.primaryAddress\r\n                                        ? contactData.primaryAddress.postalCode\r\n                                        : '';\r\n                                }\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\r\n                                    ...initialPcrValues,\r\n                                    pcrPostalCode,\r\n                                });\r\n                            } else {\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\r\n                                });\r\n                            }\r\n\r\n                            if (\r\n                                payloadContactProjectData.data.projectRegisterIndicators.allowChangeParticipation &&\r\n                                payloadContactProjectData.data.projectRegisterIndicators.allowPayMollie\r\n                            ) {\r\n                                /**\r\n                                 * Er is wel ingeschreven maar nog niet betaald, dan mag het formulier\r\n                                 * wel geopend worden en stellen we de eerder ingevoerde gegevens in. projectRegisterIndicators\r\n                                 */\r\n                                setRegisterValues(current => {\r\n                                    return {\r\n                                        ...current,\r\n                                        participationsOptioned:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators\r\n                                                .participationsOptioned,\r\n                                        amountOptioned:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators.amountOptioned,\r\n                                        pcrYearlyPowerKwhConsumption:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators\r\n                                                .powerKwhConsumption,\r\n                                        didAcceptAgreement: true,\r\n                                        didUnderstandInfo: true,\r\n                                    };\r\n                                });\r\n                            }\r\n\r\n                            setLoading(false);\r\n                        })\r\n                    )\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n\r\n        (function callFetchPortalSettings() {\r\n            setLoading(true);\r\n            const keys =\r\n                '?keys[]=portalName' +\r\n                '&keys[]=portalWebsite' +\r\n                '&keys[]=portalUrl' +\r\n                '&keys[]=responsibleUserId' +\r\n                '&keys[]=checkContactTaskResponsibleUserId' +\r\n                '&keys[]=linkPrivacyPolicy' +\r\n                '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n                '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n            PortalSettingsAPI.fetchPortalSettings(keys)\r\n                .then(payload => {\r\n                    setPortalSettings({ ...payload.data });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ isLoading: false, hasError: true });\r\n                });\r\n        })();\r\n    }, [match, currentSelectedContact]);\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    function handleSubmitRegisterValues(values) {\r\n        setRegisterValues({ ...registerValues, ...values });\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, nextStep) {\r\n        const updatedContact = { ...contact, ...values, projectId: project.id };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                ContactAPI.fetchContact(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        const contactData = rebaseContact(payload.data.data);\r\n\r\n                        setContact(contactData);\r\n                        nextStep();\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : !contactProjectData.projectRegisterIndicators.hasParticipation &&\r\n              !contactProjectData.projectRegisterIndicators.allowRegisterToProject ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                Inschrijving voor project <strong>{project.name}</strong>\r\n                            </h1>\r\n                            <Row className={'mb-4'}>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            {contactProjectData.projectRegisterIndicators.textNotAllowedRegisterToProject\r\n                                                .split('<br />')\r\n                                                .map((item, key) => {\r\n                                                    return (\r\n                                                        <span key={key}>\r\n                                                            {item}\r\n                                                            <br />\r\n                                                        </span>\r\n                                                    );\r\n                                                })}\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : contactProjectData.projectRegisterIndicators.hasParticipation &&\r\n              !contactProjectData.projectRegisterIndicators.allowChangeParticipation ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                <strong>{formatFullName(contact.fullName)}</strong> is al ingeschreven voor project{' '}\r\n                                <strong>{project.name}</strong>\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : (\r\n                <Row>\r\n                    <Col>\r\n                        {isSucces ? (\r\n                            <h1 className=\"content-heading\">\r\n                                Ingeschreven voor project <strong>{project.name}</strong>\r\n                            </h1>\r\n                        ) : (\r\n                            <>\r\n                                <Row>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                                        <Link to={`/inschrijven-projecten`}>\r\n                                            <Button className={'w-button'} size=\"sm\">\r\n                                                Inschrijven projecten\r\n                                            </Button>\r\n                                        </Link>\r\n                                    </ButtonGroup>\r\n                                </Row>\r\n                                <h1 className=\"content-heading\">\r\n                                    Schrijf <strong>{formatFullName(contact.fullName)}</strong> in voor project{' '}\r\n                                    <strong>{project.name}</strong>\r\n                                </h1>\r\n                            </>\r\n                        )}\r\n                        <MasterForm\r\n                            portalSettings={portalSettings}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={registerValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            setSucces={setSucces}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegisterProjectWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegisterProject {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { FaInfoCircle } from 'react-icons/fa';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport rebaseContact from '../../../helpers/RebaseContact';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ProjectList(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [contactProjectsArray, setContactProjectsArray] = useState([]);\r\n    const [sceOrPcrProjectsAvailable, setSceOrPcrProjectsAvailable] = useState(false);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        (function callFetchProjects() {\r\n            setLoading(true);\r\n            // Call Api if current selected contact id is filled\r\n            if (props.currentSelectedContact.id) {\r\n                // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n                if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                    callFetchContact();\r\n                    callFetchContactProjects();\r\n                }\r\n            }\r\n        })();\r\n    }, [props.currentSelectedContact]);\r\n\r\n    useEffect(() => {\r\n        (function determineSceOrPcrProjectsAvailable() {\r\n            if (contactProjectsArray.length > 0) {\r\n                contactProjectsArray.find(function(project) {\r\n                    return project.isSceOrPcrProject && setSceOrPcrProjectsAvailable(true);\r\n                });\r\n            }\r\n        })();\r\n    }, [contactProjectsArray.length > 0]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function callFetchContactProjects() {\r\n        ContactAPI.fetchContactProjects(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContactProjectsArray(payload.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                    <Link to={`/gegevens`}>\r\n                        <Button className={'w-button'} size=\"sm\">\r\n                            Gegevens\r\n                        </Button>\r\n                    </Link>\r\n                    &nbsp;\r\n                    <Link to={`/inschrijvingen-projecten`}>\r\n                        <Button className={'w-button'} size=\"sm\">\r\n                            Huidige deelnames\r\n                        </Button>\r\n                    </Link>\r\n                </ButtonGroup>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        Overzicht projecten waarop{' '}\r\n                        <strong>{formatFullName(props.currentSelectedContact.fullName)}</strong> kan inschrijven.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n\r\n            {sceOrPcrProjectsAvailable && contact.noAddressesFound && (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <div className=\"alert-wrapper\">\r\n                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                    Op dit moment zijn je adresgegevens nog niet bij ons bekend.\r\n                                    <br />\r\n                                    Er zijn projecten waarop je kan inschrijven die afhankelijk van je adres zijn.\r\n                                </Alert>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                <Link to={`/gegevens`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Adresgegevens toevoegen\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <p>Klik op het project voor meer details.</p>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isLoading ? (\r\n                            <LoadingView />\r\n                        ) : contactProjectsArray.length === 0 ? (\r\n                            'Geen projecten beschikbaar om op in te schrijven.'\r\n                        ) : (\r\n                            <Table responsive>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Uitgevende instantie</th>\r\n                                        <th>Project</th>\r\n                                        <th>Ingeschreven</th>\r\n                                        <th>Start inschrijving</th>\r\n                                        <th>Einde inschrijving</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {contactProjectsArray.map(project => (\r\n                                        <tr key={project.id}>\r\n                                            <td>{project.administrationName}</td>\r\n                                            <td>\r\n                                                {project.allowChangeParticipation ? (\r\n                                                    <>\r\n                                                        {project.name} (\r\n                                                        <Link to={`/project/${project.id}`}>wijzig inschrijving</Link>)\r\n                                                    </>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        {!project.hasParticipation && project.allowRegisterToProject ? (\r\n                                                            <Link to={`/project/${project.id}`}>{project.name}</Link>\r\n                                                        ) : (\r\n                                                            <span className={'text-muted'}>{project.name}</span>\r\n                                                        )}\r\n                                                    </>\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {project.hasParticipation ? (\r\n                                                    <>\r\n                                                        {project.allowPayMollie ? (\r\n                                                            <div className=\"text-center\">\r\n                                                                Nog niet betaald,\r\n                                                                <br />\r\n                                                                <a href={project.econobisPaymentLink}>betaal nu</a>\r\n                                                            </div>\r\n                                                        ) : (\r\n                                                            <div className=\"text-success text-center\">✔</div>\r\n                                                        )}\r\n                                                    </>\r\n                                                ) : (\r\n                                                    <div className=\"text-center\">\r\n                                                        {!project.allowRegisterToProject ? (\r\n                                                            <>\r\n                                                                <FaInfoCircle\r\n                                                                    color={'blue'}\r\n                                                                    size={'15px'}\r\n                                                                    data-tip={`${project.textNotAllowedRegisterToProject}`}\r\n                                                                    data-for={`project-${project.id}`}\r\n                                                                />\r\n                                                                <ReactTooltip\r\n                                                                    id={`project-${project.id}`}\r\n                                                                    effect=\"float\"\r\n                                                                    place=\"bottom\"\r\n                                                                    multiline={true}\r\n                                                                    aria-haspopup=\"true\"\r\n                                                                />\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            ''\r\n                                                        )}\r\n                                                    </div>\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {project.dateStartRegistrations\r\n                                                    ? moment(project.dateStartRegistrations).format('LL')\r\n                                                    : ''}\r\n                                            </td>\r\n                                            <td>\r\n                                                {project.dateEndRegistrations\r\n                                                    ? moment(project.dateEndRegistrations).format('LL')\r\n                                                    : ''}\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function ProjectListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => <ProjectList {...props} currentSelectedContact={currentSelectedContact} />}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction LoanDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                    <FormLabel>Lening nodig</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.amountOfLoanNeeded)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.minAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.maxAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoanDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction ObligationDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige hoofdsom per obligatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal obligaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ObligationDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction CapitalDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CapitalDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction PcrDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PcrDetails;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../../api/project/ProjectAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport LoanDetails from './LoanDetails';\r\nimport ObligationDetails from './ObligationDetails';\r\nimport CapitalDetails from './CapitalDetails';\r\nimport PcrDetails from './PcrDetails';\r\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction ProjectDetails({ match }) {\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n    const [project, setProject] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function callFetchProject() {\r\n                setLoading(true);\r\n                ProjectAPI.fetchProject(match.params.id)\r\n                    .then(payload => {\r\n                        setProject(payload.data.data);\r\n                        setCurrentThemeSettings(payload.data.data.administration.portalSettingsLayoutAssigned);\r\n                        setLoading(false);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [match, currentSelectedContact]);\r\n\r\n    function renderDetails() {\r\n        switch (project.projectType.codeRef) {\r\n            case 'loan':\r\n                return <LoanDetails project={project} />;\r\n            case 'obligation':\r\n                return <ObligationDetails project={project} />;\r\n            case 'capital':\r\n                return <CapitalDetails project={project} />;\r\n            case 'postalcode_link_capital':\r\n                return <PcrDetails project={project} />;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    if (isEmpty(project)) {\r\n        return (\r\n            <Container className={'content-section'}>\r\n                {isLoading ? (\r\n                    <LoadingView />\r\n                ) : (\r\n                    <>\r\n                        <p>Geen projectdetails bekend</p>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                            <Link to={`/inschrijven-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Inschrijven projecten\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">Inschrijven project</h1>\r\n                            <div className=\"content-subheading\">Uitgevende instantie {project.administration.name}</div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {renderDetails()}\r\n\r\n                    <Row className={'mt-5'}>\r\n                        <Col>\r\n                            <p>\r\n                                Meer informatie over dit project vind je{' '}\r\n                                <a href={`${project.linkProjectInfo}`} target=\"_blank\">\r\n                                    hier\r\n                                </a>\r\n                            </p>\r\n                            <p>Wil je inschrijven op dit project. Klik dan op \"Ga naar inschrijven\".</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijven/${project.id}`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Ga naar inschrijven\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ProjectDetails;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction RegistrationList(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContact(payload.data.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                    <Link to={`/gegevens`}>\r\n                        <Button className={'w-button'} size=\"sm\">\r\n                            Gegevens\r\n                        </Button>\r\n                    </Link>\r\n                    &nbsp;\r\n                    <Link to={`/inschrijven-projecten`}>\r\n                        <Button className={'w-button'} size=\"sm\">\r\n                            Inschrijven projecten\r\n                        </Button>\r\n                    </Link>\r\n                </ButtonGroup>\r\n            </Row>{' '}\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        De projecten waarin <strong>{formatFullName(contact.fullName)}</strong> deelneemt.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {isLoading ? (\r\n                        <LoadingView />\r\n                    ) : contact.length === 0 ? (\r\n                        'Nog geen inschrijvingen.'\r\n                    ) : (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Uitgevende instantie</th>\r\n                                    <th>Project</th>\r\n                                    <th>Deelname</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {contact.participations.map(participation => {\r\n                                    if (\r\n                                        !participation.project.dateEnd ||\r\n                                        moment(participation.project.dateEnd).format('YYYY-MM-DD') >=\r\n                                            moment().format('YYYY-MM-DD')\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={participation.id}>\r\n                                                <td>{participation.project.administration.name}</td>\r\n                                                <td>\r\n                                                    <Link to={`/project-deelname/${participation.id}`}>\r\n                                                        {participation.project.name}\r\n                                                    </Link>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {participation.project.projectType.codeRef == 'loan' ? (\r\n                                                        <>\r\n                                                            {participation.amountInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountInteressed)}{' '}\r\n                                                                    <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountOptioned)}{' '}\r\n                                                                    <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening {MoneyPresenter(participation.amountGranted)}{' '}\r\n                                                                    <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountDefinitive)}{' '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'obligation' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' obligaties '} <em> (Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' obligaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' obligaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' obligaties '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef ==\r\n                                                    'postalcode_link_capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegistrationListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegistrationList {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    personTitleId: Yup.string()\r\n        .nullable()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormPersonal = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            personTitleId: '',\r\n            personFirstName: '',\r\n            personLastName: '',\r\n        }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor jezelf</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonText\r\n                            buttonText={'Account aanmaken'}\r\n                            buttonClassName={'authorization-button'}\r\n                            size=\"sm\"\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                            disabled={showSuccessMessage}\r\n                        />\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormPersonal;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    organisationName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personTitleId: Yup.string()\r\n        .nullable()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormOrganisation = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '', organisationName: '', personTitleId: '', personFirstName: '', personLastName: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor je organisatie</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"organisationName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Naam Organisatie'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens contactpersoon</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonText\r\n                            buttonText={'Account aanmaken'}\r\n                            buttonClassName={'authorization-button'}\r\n                            size=\"sm\"\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                            disabled={showSuccessMessage}\r\n                        />\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormOrganisation;\r\n","import React, { useState } from 'react';\r\nimport { GoogleReCaptchaProvider, useGoogleReCaptcha } from 'react-google-recaptcha-v3';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport NewAccountFormPersonal from './NewAccountFormPersonal';\r\nimport NewAccountFormOrganisation from './NewAccountFormOrganisation';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, ButtonToolbar } from 'react-bootstrap';\r\n\r\nconst NewAccount = props => {\r\n    const { executeRecaptcha } = useGoogleReCaptcha();\r\n    const [contactType, setContactType] = useState('person');\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    async function handleSubmit(values, actions) {\r\n        if (!executeRecaptcha) {\r\n            return;\r\n        }\r\n        const reCaptchaToken = await executeRecaptcha('signup_page');\r\n\r\n        AuthAPI.newAccount({ ...values, contactType: contactType, reCaptchaToken })\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If new account fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                if (error.response && error.response.status === 404) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres.'\r\n                    );\r\n                } else if (error.response && error.response.status === 405) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een contact met het e-mailadres, voornaam en achternaam dat je hebt ingevuld. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres, voornaam of achternaam.'\r\n                    );\r\n                } else {\r\n                    setErrorMessage('Fout bij aanmaken nieuw account!');\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={'nieuw-account-succes'} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"authorization-container\">\r\n            <Container fluid className=\"authorization-text\">\r\n                <Row className=\"justify-content-center align-content-start align-content-lg-center full-height p-2\">\r\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"4\" xl=\"4\">\r\n                        <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container-small\" />\r\n\r\n                        {showSuccessMessage ? (\r\n                            redirect()\r\n                        ) : (\r\n                            <>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <h3 className={'authorization-text'}>Nieuw account</h3>\r\n                                </Row>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <p className={'authorization-text'}>Maak binnen 2 minuten een account aan.</p>\r\n                                </Row>\r\n                                <br />\r\n                                <Row className=\"justify-content-center\">\r\n                                    <ButtonToolbar toggle>\r\n                                        <Col>\r\n                                            <Button\r\n                                                className={'authorization-button'}\r\n                                                variant={\r\n                                                    contactType === 'person'\r\n                                                        ? 'primary fixed-height'\r\n                                                        : 'light fixed-height'\r\n                                                }\r\n                                                block\r\n                                                onClick={() => setContactType('person')}\r\n                                            >\r\n                                                Voor jezelf\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                className={'authorization-button'}\r\n                                                variant={contactType === 'organisation' ? 'primary' : 'light'}\r\n                                                block\r\n                                                onClick={() => setContactType('organisation')}\r\n                                            >\r\n                                                Voor je organisatie\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </ButtonToolbar>\r\n                                </Row>\r\n                                <br />\r\n\r\n                                {contactType === 'person' ? (\r\n                                    <NewAccountFormPersonal\r\n                                        handleSubmit={handleSubmit}\r\n                                        showSuccessMessage={showSuccessMessage}\r\n                                    />\r\n                                ) : (\r\n                                    <NewAccountFormOrganisation\r\n                                        handleSubmit={handleSubmit}\r\n                                        showSuccessMessage={showSuccessMessage}\r\n                                    />\r\n                                )}\r\n                                <br />\r\n\r\n                                {showError ? (\r\n                                    <Row>\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            {errorMessage}\r\n                                        </Alert>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction NewAccountWithProvider() {\r\n    const RE_CAPTCHA_KEY = process.env.REACT_APP_RE_CAPTCHA_KEY;\r\n\r\n    return (\r\n        <GoogleReCaptchaProvider reCaptchaKey={RE_CAPTCHA_KEY} language={'nl'}>\r\n            <NewAccount />\r\n        </GoogleReCaptchaProvider>\r\n    );\r\n}\r\n\r\nexport default NewAccountWithProvider;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NewAccountSuccess = () => {\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                    <div>\r\n                        <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                        <p className={'authorization-text'}>\r\n                            Binnen enkele minuten ontvang je een e-mail met een persoonlijke link. Via deze link kun je\r\n                            je account activeren.\r\n                            <br />\r\n                            <br />\r\n                            <strong>Let op:</strong> Het kan zijn dat de mail door een spamfilter is geblokkeerd.\r\n                            Spamfilters van bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de\r\n                            Spam/Reclame of je onze mail daar terug vindt.\r\n                        </p>\r\n                        <a onClick={window.close} href=\"#\" className=\"authorization-link\">\r\n                            Sluit venster\r\n                        </a>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NewAccountSuccess;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email('Geen geldig e-mailadres')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountEmail() {\r\n    const [portalUserEmail, setPortalUserEmail] = useState('');\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (function callFetchUserEmail() {\r\n            PortalUserAPI.fetchPortalUserEmail()\r\n                .then(payload => {\r\n                    setPortalUserEmail(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n    function handleSubmitChangeEmail(values, actions) {\r\n        PortalUserAPI.changeEmail(values)\r\n            .then(payload => {\r\n                setPortalUserEmail(values.email);\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', changePrimaryEmailAddress: false }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangeEmail(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Inlog e-mail is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit\r\n                            e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan\r\n                            alsjeblieft een ander e-mailadres.\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12}>\r\n                            <FormLabel className={'field-label'}>Huidig e-mailadres</FormLabel>\r\n                            <TextBlock>{portalUserEmail}</TextBlock>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label pt-1'}>Nieuw e-mailadres</Form.Label>\r\n                            <Field\r\n                                name=\"email\"\r\n                                render={({ field }) => (\r\n                                    <InputText field={field} errors={errors} touched={touched} id=\"email\" />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Field\r\n                                name=\"changePrimaryEmailAddress\"\r\n                                render={({ field }) => (\r\n                                    <label className=\"w-checkbox checkbox-fld\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            {...field}\r\n                                            id=\"change-primary-email-address\"\r\n                                            checked={field.value}\r\n                                            className=\"w-checkbox-input checkbox\"\r\n                                        />\r\n                                        <span\r\n                                            htmlFor=\"change-primary-email-address\"\r\n                                            className=\"checkbox-label w-form-label\"\r\n                                        >\r\n                                            Wijziging ook doorvoeren op huidig correspondentie e-mailadres?\r\n                                        </span>\r\n                                    </label>\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig e-mailadres'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountEmail;\r\n","import React, { useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountPassword() {\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    function handleSubmitChangePassword(values, actions) {\r\n        PortalUserAPI.changePassword(values)\r\n            .then(payload => {\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ password: '', passwordConfirmation: '' }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangePassword(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Wachtwoord is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Fout bij wijzigen wachtwoord!\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label'}>Nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"password\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"password\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label mt-0'}>Herhaal nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"passwordConfirmation\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"passwordConfirmation\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Herhaal nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig wachtwoord'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountPassword;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ChangeAccountEmail from './Email';\r\nimport ChangeAccountPassword from './Password';\r\n\r\nfunction ChangeAccount() {\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">Wijzig inloggegevens</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={6} className={'mb-5'}>\r\n                    <h3 className={'h3'}>Wijzig inlog e-mailadres</h3>\r\n\r\n                    <ChangeAccountEmail />\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <h3 className={'h3'}>Wijzig wachtwoord</h3>\r\n\r\n                    <ChangeAccountPassword />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ChangeAccount;\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction AboutUs() {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentSelectedContact.id) {\r\n                ContactAPI.fetchContactRelatedAdministrations(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        },\r\n        [currentSelectedContact.id]\r\n    );\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        Overzicht organisaties waar <strong>{formatFullName(currentSelectedContact.fullName)}</strong>{' '}\r\n                        een relatie mee heeft.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            {state.isLoading ? (\r\n                <Row>\r\n                    <Col>\r\n                        <LoadingView />\r\n                    </Col>\r\n                </Row>\r\n            ) : state.result.length === 0 ? (\r\n                <Row>\r\n                    <Col>Geen informatie organisaties beschikbaar waar contact een relatie mee heeft.</Col>\r\n                </Row>\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <p>Klik op de organisatie voor meer details.</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Naam</th>\r\n                                <th>Adres</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {state.result.map(item => (\r\n                                <tr key={item.id}>\r\n                                    <td>\r\n                                        <Link to={`/over-ons-organisatie/${item.id}`}>{item.name}</Link>\r\n                                    </td>\r\n                                    <td>\r\n                                        {item.address}, {item.city}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AboutUs;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nfunction RegistrationDetailsTitle({ contactName, projectName, administrationName }) {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <h1 className=\"content-heading\">\r\n                    Deelname van {contactName} in de {projectName}\r\n                </h1>\r\n                <span className=\"content-subheading\">Uitgevende instantie {administrationName}</span>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsTitle;\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nfunction RegistrationDetailsProjectTable({ fields }) {\r\n    if (!fields || fields.length === 0) return <p>Geen projectdetails bekend</p>;\r\n\r\n    return (\r\n        <Table className={'my-4'}>\r\n            <tbody>\r\n                {fields.map((field, index) => (\r\n                    <tr key={index}>\r\n                        <td>\r\n                            <strong>{field.label}</strong>\r\n                        </td>\r\n                        <td>{field.value}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsProjectTable;\r\n","export default field => {\r\n    switch (field.type) {\r\n        case 'date':\r\n        case 'string':\r\n            return 'text-left';\r\n        case 'decimal':\r\n        case 'money':\r\n        case 'integer':\r\n            return 'text-right';\r\n        default:\r\n            return 'text-left';\r\n    }\r\n};\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\r\nimport classNameBasedOnTypePresenter from '../../../../helpers/classNameBasedOnTypePresenter';\r\n\r\nfunction RegistrationDetailsMutationTable({ participantMutations }) {\r\n    if (!participantMutations || participantMutations.length === 0) return <p>Geen mutaties bekend</p>;\r\n\r\n    return (\r\n        <Table responsive={true} className={'my-4'}>\r\n            <thead>\r\n                <tr>\r\n                    {participantMutations[0].fields.map((field, index) => (\r\n                        <th key={index}>{field.label}</th>\r\n                    ))}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {participantMutations.map((participantMutation, index) => (\r\n                    <tr key={index}>\r\n                        {participantMutation.fields.map((field, index) => (\r\n                            <td class={classNameBasedOnTypePresenter(field)} key={index}>\r\n                                {valueBasedOnTypePresenter(field)}\r\n                            </td>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsMutationTable;\r\n","import moneyPresenter from './MoneyPresenter';\r\nimport moment from 'moment';\r\n\r\nexport default field => {\r\n    switch (field.type) {\r\n        case 'date':\r\n            return field.value ? moment(field.value).format('L') : '';\r\n        case 'decimal':\r\n            return field.value\r\n                ? field.value.toLocaleString('nl', {\r\n                      minimumFractionDigits: 2,\r\n                      maximumFractionDigits: 2,\r\n                  })\r\n                : '';\r\n        case 'money':\r\n            return moneyPresenter(field.value);\r\n        case 'string':\r\n        case 'integer':\r\n        default:\r\n            return field.value;\r\n    }\r\n};\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport RegistrationDetailsTitle from './Title';\r\nimport RegistrationDetailsProjectTable from './project-table';\r\nimport RegistrationDetailsMutationTable from './mutation-table';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction RegistrationDetails({ match: { params } }) {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function() {\r\n                ParticipantProjectAPI.show(params.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setCurrentThemeSettings(payload.data.data.basicInformation.portalSettingsLayoutAssigned);\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [params.id, currentSelectedContact]);\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {state.isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                            <Link to={`/inschrijvingen-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Huidige deelnames\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <RegistrationDetailsTitle {...state.result.basicInformation} />\r\n                    <RegistrationDetailsProjectTable fields={state.result.fields} />\r\n                    <RegistrationDetailsMutationTable participantMutations={state.result.participantMutations} />\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetails;\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { FaFileDownload } from 'react-icons/all';\r\nimport fileDownload from 'js-file-download';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction FinancialOverviewDocuments() {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentSelectedContact.id) {\r\n                ContactAPI.fetchContactFinancialOverviewDocuments(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        },\r\n        [currentSelectedContact.id]\r\n    );\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    function downloadFile(e, id) {\r\n        e.preventDefault();\r\n\r\n        ContactAPI.financialOverviewContactDownload(id)\r\n            .then(payload => {\r\n                fileDownload(payload.data, payload.headers['x-filename']);\r\n            })\r\n            .catch(() => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {state.isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading mt-0\">Waardestaat documenten</h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Naam</th>\r\n                                <th>Omschrijving</th>\r\n                                <th>Downloaden</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {state.result.map(item => (\r\n                                <tr key={item.id}>\r\n                                    <td>{item.name}</td>\r\n                                    <td>{item.description}</td>\r\n                                    <td>\r\n                                        <a href=\"#\" onClick={e => downloadFile(e, item.id)}>\r\n                                            <FaFileDownload /> downloaden\r\n                                        </a>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default FinancialOverviewDocuments;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n    fetchAdministration: function(id) {\r\n        const requestUrl = `/jory/administration/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'name',\r\n                        'address',\r\n                        'postalCode',\r\n                        'city',\r\n                        'kvkNumber',\r\n                        'iBAN',\r\n                        'ibanAttn',\r\n                        'btwNumber',\r\n                        'website',\r\n                    ],\r\n                    rlt: {\r\n                        country: { fld: ['name'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport { Card, Table } from 'react-bootstrap';\r\nimport AdministrationAPI from '../../../api/administration/AdministrationAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction AboutUsAdministration({ match }) {\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n    const [administration, setAdministration] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function callFetchAdministration() {\r\n                setLoading(true);\r\n                console.log(match);\r\n                AdministrationAPI.fetchAdministration(match.params.id)\r\n                    .then(payload => {\r\n                        setAdministration(payload.data.data);\r\n                        setLoading(false);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [match, currentSelectedContact]);\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                            <Link to={`/over-ons`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Over ons\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <Row className={'justify-content-center align-content-center flex-wrap'}>\r\n                        <Col xs={12} lg={6} className={'mb-3'}>\r\n                            <Card>\r\n                                <Card.Header className={'card-header_title'}>\r\n                                    Informatie over {administration.name}\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    <Table responsive>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Naam</strong>\r\n                                                </td>\r\n                                                <td>{administration.name}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Adres</strong>\r\n                                                </td>\r\n                                                <td>{administration.address}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Postcode / Plaats</strong>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {administration.postalCode} {administration.city}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Kvk</strong>\r\n                                                </td>\r\n                                                <td>{administration.kvkNumber}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Website</strong>\r\n                                                </td>\r\n                                                <td>{administration.website}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>IBAN</strong>\r\n                                                </td>\r\n                                                <td>{administration.iBAN}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>IBAN t.n.v.</strong>\r\n                                                </td>\r\n                                                <td>{administration.ibanAttn}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>BTW nummer</strong>\r\n                                                </td>\r\n                                                <td>{administration.btwNumber}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AboutUsAdministration;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchByCode: code => {\r\n        const requestUrl = `/jory/participant-mutation`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    flt: {\r\n                        f: 'code',\r\n                        d: code,\r\n                    },\r\n                    fld: ['econobisPaymentLink', 'isPaidByMollie'],\r\n                    rlt: {\r\n                        participation: {\r\n                            rlt: {\r\n                                project: {\r\n                                    fld: ['name', 'textRegistrationFinished'],\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ParticipantMutationAPI from '../../../api/participant-mutation/ParticipantMutationAPI';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport {PortalUserConsumer} from '../../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport {Link} from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\n\r\nfunction ProjectMollieRedirect({match, currentSelectedContact}) {\r\n    const [participantMutation, setParticipantMutation] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const handlePaymentRetry = () => {\r\n        window.location.href = participantMutation.econobisPaymentLink;\r\n    }\r\n\r\n    useEffect(() => {\r\n        (function fetchContactAndProject() {\r\n            setLoading(true);\r\n\r\n            axios\r\n                .all([\r\n                    ParticipantMutationAPI.fetchByCode(match.params.code),\r\n                ])\r\n                .then(\r\n                    axios.spread((payloadParticipantMutation) => {\r\n                        if(payloadParticipantMutation.data.data.length !== 1){\r\n                            alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                            setLoading(false);\r\n                            return;\r\n                        }\r\n\r\n                        setParticipantMutation(payloadParticipantMutation.data.data[0]);\r\n                        setLoading(false);\r\n                    })\r\n                )\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [match]);\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView/>\r\n            ) : (\r\n                <>\r\n                    <Row className={'mb-4'}>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                {\r\n                                    participantMutation.isPaidByMollie ? (\r\n                                        <>Ingeschreven voor\r\n                                            project <strong>{participantMutation.participation.project.name}</strong></>\r\n                                    ) : (\r\n                                        <>Betaling voor\r\n                                            project <strong>{participantMutation.participation.project.name}</strong> nog\r\n                                            niet gelukt.</>\r\n                                    )\r\n                                }\r\n\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            {participantMutation.isPaidByMollie ? (\r\n                                <>\r\n                                    <p>\r\n                                        { participantMutation.participation.project.textRegistrationFinished.split('\\n').map((item, key) => {\r\n                                            return <span key={key}>{item}<br/></span>\r\n                                        }) }\r\n                                    </p>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <p>\r\n                                        Uw inschrijving kon nog niet worden afgerond doordat de betaling niet is gelukt,\r\n                                        gebruik onderstaande betaal button om de betaling alsnog uit te voeren.</p>\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar mijn huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                                {!participantMutation.isPaidByMollie && (\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handlePaymentRetry}>\r\n                                        Betalen\r\n                                    </Button>\r\n                                )}\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function ProjectMollieRedirectWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({currentSelectedContact}) => (\r\n                <ProjectMollieRedirect {...props} currentSelectedContact={currentSelectedContact}/>\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch } from 'react-router-dom';\r\nimport ProtectedRoute from './route/ProtectedRoute';\r\nimport PublicRoute from './route/PublicRoute';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport { PortalUserProvider } from './context/PortalUserContext';\r\nimport Login from './container/authorization/login';\r\nimport Register from './container/authorization/register';\r\nimport Forgot from './container/authorization/forgot';\r\nimport Reset from './container/authorization/reset';\r\nimport ContactDetails from './container/contact-details';\r\nimport MyAreasOfInterest from './container/my-areas-of-interest';\r\nimport RegisterProject from './container/register';\r\nimport ProjectList from './container/project/list';\r\nimport ProjectDetails from './container/project/details';\r\nimport RegistrationList from './container/registration/list';\r\nimport NewAccount from './container/authorization/new-account';\r\nimport NewAccountSuccess from './container/authorization/new-account/NewAccountSuccess';\r\nimport ChangeAccount from './container/authorization/change-account';\r\nimport AboutUs from './container/about-us/list';\r\nimport RegistrationDetails from './container/registration/details';\r\nimport FinancialOverviewDocuments from './container/financial-overview-documents/list';\r\nimport { ThemeSettingsProvider } from './context/ThemeSettingsContext';\r\nimport AboutUsAdministration from './container/about-us/details';\r\nimport ProjectMollieRedirectWithContext from \"./container/register/mollie-redirect\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n                <PortalUserProvider>\r\n                    <ThemeSettingsProvider>\r\n                        <Switch>\r\n                            <ProtectedRoute exact path=\"/\" component={ContactDetails} />\r\n                            <ProtectedRoute path=\"/gegevens\" component={ContactDetails} />\r\n                            <ProtectedRoute path=\"/mijn-interessegebieden\" component={MyAreasOfInterest} />\r\n                            <ProtectedRoute path=\"/inschrijven/mollie-resultaat/:code\" component={ProjectMollieRedirectWithContext} />\r\n                            <ProtectedRoute path=\"/inschrijven/:id\" component={RegisterProject} />\r\n                            <ProtectedRoute path=\"/inschrijven-projecten\" component={ProjectList} />\r\n                            <ProtectedRoute path=\"/inschrijvingen-projecten\" component={RegistrationList} />\r\n                            <ProtectedRoute path=\"/project-deelname/:id\" component={RegistrationDetails} />\r\n                            <ProtectedRoute path=\"/project/:id\" component={ProjectDetails} />\r\n                            <ProtectedRoute path=\"/waardestaat-documenten\" component={FinancialOverviewDocuments} />\r\n                            <ProtectedRoute path=\"/wijzig-inloggegevens\" component={ChangeAccount} />\r\n                            <ProtectedRoute path=\"/over-ons\" component={AboutUs} />\r\n                            <ProtectedRoute path=\"/over-ons-organisatie/:id\" component={AboutUsAdministration} />\r\n                            <PublicRoute path=\"/login\" component={Login} />\r\n                            <PublicRoute path=\"/activeer-registratie/:registrationCode/:email\" component={Register} />\r\n                            <PublicRoute path=\"/wachtwoord-vergeten\" component={Forgot} />\r\n                            <PublicRoute path=\"/wachtwoord-wijzigen/:token/:email\" component={Reset} />\r\n                            <PublicRoute path=\"/nieuw-account\" component={NewAccount} />\r\n                            <PublicRoute path=\"/nieuw-account-succes\" component={NewAccountSuccess} />\r\n                        </Switch>\r\n                    </ThemeSettingsProvider>\r\n                </PortalUserProvider>\r\n            </AuthProvider>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/normalize.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-day-picker/lib/style.css';\r\nimport './css/webflow.css';\r\nimport './css/econobis.webflow.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'moment/locale/nl';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// Server data is set and can now removed\r\nvar serverDataScript = document.getElementById('server-data');\r\nserverDataScript.remove();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}