{"version":3,"sources":["context/AuthContext.js","context/PortalUserContext.js","context/ThemeSettingsContext.js","components/layout/Header.js","api/default-setup/AxiosInstance.js","api/portal-user/PortalUserAPI.js","route/ProtectedRoute.js","route/PublicRoute.js","components/form/InputText.js","components/button/ButtonText.js","container/authorization/login/Form.js","api/auth/AuthAPI.js","api/portal-settings/PortalSettingsAPI.js","container/authorization/login/index.js","container/authorization/register/Form.js","container/authorization/register/index.js","container/authorization/forgot/Form.js","container/authorization/forgot/index.js","container/authorization/reset/Form.js","container/authorization/reset/index.js","api/project/ProjectAPI.js","api/contact/ContactAPI.js","helpers/RebaseContact.js","components/general/LoadingView.js","components/general/TextBlock.js","container/contact-details/default-form-personal/View.js","components/form/Select.js","data/Countries.js","data/EnergySuppliers.js","data/Titles.js","data/LastNamePrefixes.js","components/form/InputDate.js","container/contact-details/default-form-personal/Edit.js","helpers/ValidationSchemaPersonal.js","container/contact-details/Personal.js","container/contact-details/default-form-organisation/View.js","container/contact-details/default-form-organisation/Edit.js","helpers/ValidationSchemaOrganisation.js","container/contact-details/Organisation.js","container/contact-details/index.js","container/my-areas-of-interest/Form.js","container/my-areas-of-interest/index.js","helpers/MoneyPresenter.js","helpers/CalculateTransactionCosts.js","components/form/InputTextCurrency.js","container/register/steps/StepOneLoan.js","container/register/steps/StepOneObligation.js","container/register/steps/StepOneCapital.js","container/register/steps/StepOnePcr.js","container/register/steps/StepTwo.js","container/register/steps/StepThree.js","components/general/ViewHtmlAsText.js","api/participant-project/ParticipantProjectAPI.js","container/register/steps/StepFour.js","container/register/steps/StepFive.js","container/register/steps/index.js","container/register/MasterForm.js","container/register/index.js","container/project/list/address-person/Edit.js","container/project/list/address-organisation/Edit.js","container/project/list/index.js","container/project/details/LoanDetails.js","container/project/details/ObligationDetails.js","container/project/details/CapitalDetails.js","container/project/details/PcrDetails.js","container/project/details/index.js","container/registration/list/index.js","container/authorization/new-account/NewAccountFormPersonal.js","container/authorization/new-account/NewAccountFormOrganisation.js","container/authorization/new-account/index.js","container/authorization/new-account/NewAccountSuccess.js","container/authorization/change-account/Email.js","container/authorization/change-account/Password.js","container/authorization/change-account/index.js","container/about-us/list/index.js","container/registration/details/Title.js","helpers/classNameBasedOnTypePresenter.js","helpers/ValueBasedOnTypePresenter.js","container/registration/details/project-table/index.js","container/registration/details/mutation-table/index.js","container/registration/details/index.js","container/financial-overview-documents/list/index.js","api/administration/AdministrationAPI.js","container/about-us/details/index.js","api/participant-mutation/ParticipantMutationAPI.js","container/register/mollie-redirect/index.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","localStorageToken","AuthProvider","props","useState","window","localStorage","getItem","checkIfAuth","isAuth","setAuth","Provider","value","login","payload","cbRedirect","token","access_token","removeItem","setItem","moment","format","logout","children","AuthConsumer","Consumer","PortalUserContext","user","setInitialUserData","PortalUserProvider","setUser","currentSelectedContact","setCurrentContact","selectedContactId","id","occupationUser","occupations","find","occupation","primaryContact","organisationUser","typeId","primary","switchCurrentContact","contact","resetCurrentUserToDefault","updateNameSelectedContact","fullName","updatedOccupations","map","occupationContact","PortalUserConsumer","ThemeSettingsContext","defaultThemeSettings","setInitialThemeSettings","setCurrentThemeSettings","switchToDefaultThemeSettings","ThemeSettingsProvider","setDefaultThemeSettings","currentThemeSettings","useEffect","document","documentElement","style","setProperty","portal_background_color","portal_background_text_color","login_header_background_color","login_header_background_text_color","header_icons_color","login_field_background_color","login_field_background_text_color","button_color","button_text_color","ThemeSettingsConsumer","withRouter","location","history","menuOpen","updateStateMenu","closeMenu","redirect","to","push","ref","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","useOutsideAlerter","useRef","className","ReactHtmlParser","search","replace","firstName","slice","lastName","formatProfilePicName","xs","undefined","portal_logo_file_name","src","onClick","alignRight","Toggle","Menu","Header","Item","disabled","Divider","active","occupationForPortal","key","right","width","isOpen","onStateChange","state","handleStateChange","customBurgerIcon","Fragment","pathname","BASE_URL","__SERVER_DATA__","base_url","axiosInstance","axios","create","baseURL","interceptors","request","use","config","lastActivity","add","hash","setTimeout","reload","checkTokenExpiration","AUTH_TOKEN","headers","Authorization","error","Promise","reject","get","params","jory","fld","rlt","values","post","ProtectedRoute","Component","component","rest","useLocation","useContext","PortalUserAPI","then","data","portalSettingsLayoutAssigned","catch","alert","includes","render","ProtectedRouteWithContext","PublicRoute","InputText","field","type","readOnly","placeholder","showErrorMessage","errors","touched","classNameErrorMessage","customOnChange","onChange","name","Boolean","defaultProps","ButtonText","buttonClassName","buttonText","onClickAction","loading","title","loadingSpinnerColor","size","color","validationSchema","Yup","shape","username","email","required","password","LoginForm","handleSubmit","initialValues","enableReinitialize","onSubmit","actions","setSubmitting","isSubmitting","AUTH_KEY","client_id","client_secret","client_key","grant_type","requestUrl","defaults","common","loginCredentials","keys","isLoading","setIsLoading","showError","toggleError","redirectToReferrer","toggleRedirect","from","portalActive","setPortalActive","showNewAtCooperativeLink","setShowNewAtCooperativeLink","newAtCooperativeLinkText","setNewAtCooperativeLinkText","AuthAPI","PortalSettingsAPI","fluid","sm","md","lg","xl","alt","variant","href","min","matches","passwordConfirmation","oneOf","RegisterForm","Register","match","showLoginLink","setLoginLink","errorMessage","setErrorMessage","showSuccessMessage","toggleSuccessMessage","registrationCode","decodeURIComponent","password_confirmation","console","log","response","status","message","RegisterWithContext","ForgotForm","Forgot","ResetForm","Reset","ResetWithContext","flt","and","f","o","d","projectType","administration","person","organisation","emailAddresses","phoneNumbers","addresses","country","primaryAddressEnergySupplier","energySupplier","participations","project","registerValues","contactId","projectId","responseType","contactData","emptyPrimaryAddressEnergySupplier","energySupplierId","esNumber","memberSince","emptyAddress","street","number","addition","postalCode","city","countryId","eanElectricity","eanGas","primaryAddress","visitAddress","postalAddress","invoiceAddress","address","emptyEmail","emailCorrespondence","emailAddress","emailInvoice","emptyPhoneNumber","phoneNumberPrimary","phoneNumber","phoneNumberTwo","filter","Loading","height","TextBlock","showPlaceholder","DefaultContactPersonalView","portalSettings","initialContact","iban","ibanAttn","didAgreeAvg","dateDidAgreeAvg","initials","lastNamePrefix","dateOfBirth","checked","htmlFor","Select","options","optionLabel","emptyOption","option","InputDate","manualInput","disabledBefore","disabledAfter","onChangeAction","formattedDate","disabledDays","before","Date","after","onDayChange","date","formatDate","parseDate","dayPickerProps","showWeekNumbers","locale","firstDayOfWeek","localeUtils","MomentLocaleUtils","inputProps","autoComplete","DefaultContactPersonalEdit","projectTypeCodeRef","setFieldValue","memberSinceDisabledBefore","memberSinceDisabledAfter","endDatePrevious","memberSinceNext","subtract","Titles","disableChangeContactNameOnPortal","data-tip","data-for","effect","place","multiline","aria-haspopup","LastNamePrefixes","isParticipant","blockChangeAddress","blockChangeAddressNumber","isParticipantSceProject","isParticipantPcrProject","isNaN","trim","Countries","e","toUpperCase","EnergySuppliers","validationSchemaBasic","test","nullable","Number","isInteger","this","parent","ibantools","isEmpty","validationSchemaAdditional","typeError","validationSchemaPcrAdditional","validationSchemaPostalCodeAndNumber","ContactDetailsPersonal","handleSubmitContactValues","editButtonGroup","editForm","setEditForm","ValidationSchemaPersonal","concat","aria-label","DefaultContactOrganisationView","primaryOccupations","chamberOfCommerceNumber","vatNumber","website","DefaultContactOrganisationEdit","ContactDetailsOrganisation","ValidationSchemaOrganisation","ContactDetails","setContact","setPortalSettings","setLoading","prevCurrentSelectedContact","usePrevious","callFetchContact","ContactAPI","rebaseContact","switchToView","updatedContact","setStatus","setState","hasError","LoadingView","ContactDetailsWithContext","MyAreasOfInterestForm","arrayHelpers","myAreasOfInterest","myAreaOfInterest","index","participation","generalOptions","generalOption","MyAreasOfInterest","amount","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","amountOptioned","participationsOptioned","transactionCosts","varAmountOptioned","toString","varParticipationsOptioned","toFixed","transactionCostsCodeRef","transactionCostsAmount","codeRef","currentBookWorth","transactionCostsAmount3","transactionCostsPercentage3","transactionCostsAmount2","transactionCostsPercentage2","transactionCostsPercentage","transactionCostsAmountMin","transactionCostsAmountMax","InputTextCurrency","StepOneLoan","next","contactProjectData","initialRegisterValues","handleSubmitRegisterValues","transform","originalvalue","minAmountLoan","maxAmountLoan","choiceMembership","showQuestionAboutMembership","belongsToMembershipGroup","calculateAmount","calculateTransactionCostsAmount","useTransactionCostsWithMembership","calculateTransactionCosts","calculateTotalAmount","totalAmount","Label","MoneyPresenter","textIsMemberMerged","textIsNoMemberMerged","textBecomeMemberMerged","textBecomeNoMemberMerged","textTransactionCosts","StepOneObligation","integer","minParticipations","max","maxParticipations","positive","StepOneCapital","StepOnePcr","pcrYearlyPowerKwhConsumption","pcrPostalCode","checkPostalcodeLink","postalcodeLink","substring","pcrNumberOfSolarPanels","pcrInputGeneratedNumberOfKwh","PCR_POWER_KWH_CONSUMPTION_PERCENTAGE","PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL","calculateEstimatedGeneratedNumberOfKwh","calculateGeneratedNumberOfKwh","calculatePowerKwhConsumption","powerKwhConsumption","pcrEstimatedGeneratedNumberOfKwh","Math","ceil","pcrAdviseMaxNumberOfParticipations","calculateAdviseMaxNumberOfParticipations","pcrHasSolarPanels","pcrEstimatedRevenueOk","StepTwo","previous","StepThree","didAcceptAgreement","didUnderstandInfo","dangerouslySetInnerHTML","__html","textAgreeTermsMerged","textLinkAgreeTermsMerged","textLinkUnderstandInfoMerged","usesMollie","ViewHtmlAsText","StepFour","setSucces","contactDocument","setContactDocument","didAgreeRegistration","contactDocumentOk","ParticipantProjectAPI","econobisPaymentLink","textAcceptAgreementMerged","textAcceptAgreementQuestionMerged","StepFive","textRegistrationFinishedMerged","split","item","Steps","currentStep","MasterForm","setStep","RegisterProject","initialPcrValues","setRegisterValues","setProject","isSucces","setContactProjectData","formatFullName","all","ProjectAPI","spread","payloadProject","payloadContact","payloadContactProjectData","projectRegisterIndicators","allowChangeParticipation","allowPayMollie","hasParticipation","allowRegisterToProject","nextStep","textNotAllowedRegisterToProject","RegisterProjectWithContext","PersonalAddressEdit","handleSubmitContactAddressValues","OrganisationAddressEdit","ProjectList","contactProjectsArray","setContactProjectsArray","sceOrPcrProjectsAvailable","setSceOrPcrProjectsAvailable","callFetchContactProjects","length","isSceOrPcrProject","noAddressesFound","responsive","administrationName","dateStartRegistrations","dateEndRegistrations","ProjectListWithContext","LoanDetails","amountOfLoanNeeded","description","ObligationDetails","totalParticipations","CapitalDetails","PcrDetails","ProjectDetails","renderDetails","linkProjectInfo","RegistrationList","dateEnd","amountInteressed","amountGranted","amountDefinitive","participationsInteressed","participationsGranted","participationsDefinitive","RegistrationListWithContext","personFirstName","personLastName","NewAccountFormPersonal","personTitleId","organisationName","NewAccountFormOrganisation","NewAccount","executeRecaptcha","useGoogleReCaptcha","contactType","setContactType","a","reCaptchaToken","ButtonToolbar","toggle","block","NewAccountWithProvider","reCaptchaKey","process","language","NewAccountSuccess","close","ChangeAccountEmail","portalUserEmail","setPortalUserEmail","changePrimaryEmailAddress","resetForm","handleSubmitChangeEmail","ChangeAccountPassword","handleSubmitChangePassword","ChangeAccount","INITIAL_STATE","result","reducer","action","AboutUs","useReducer","dispatch","RegistrationDetailsTitle","contactName","projectName","moneyPresenter","RegistrationDetailsProjectTable","fields","label","valueBasedOnTypePresenter","RegistrationDetailsMutationTable","participantMutations","participantMutation","class","classNameBasedOnTypePresenter","RegistrationDetails","basicInformation","FinancialOverviewDocuments","preventDefault","fileDownload","downloadFile","AboutUsAdministration","setAdministration","AdministrationAPI","Card","Body","kvkNumber","iBAN","btwNumber","code","ProjectMollieRedirect","setParticipantMutation","ParticipantMutationAPI","payloadParticipantMutation","isPaidByMollie","textRegistrationFinished","ProjectMollieRedirectWithContext","App","exact","path","Login","hostname","ReactDOM","getElementById","remove","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8de82260.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst AuthProvider = function(props) {\r\n    const [isAuth, setAuth] = useState(checkIfAuth());\r\n\r\n    function login(payload, cbRedirect) {\r\n        const token = payload.access_token;\r\n        window.localStorage.removeItem(localStorageCurrentSelectedContact);\r\n        window.localStorage.setItem(localStorageToken, token);\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n        setAuth(true);\r\n        cbRedirect();\r\n    }\r\n\r\n    function logout() {\r\n        window.localStorage.removeItem(localStorageToken);\r\n        window.localStorage.removeItem(localStorageLastActivity);\r\n        setAuth(false);\r\n    }\r\n\r\n    function checkIfAuth() {\r\n        const token = getToken();\r\n        if (!token) {\r\n            // Redirect to login\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getToken() {\r\n        return window.localStorage.getItem(localStorageToken);\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                isAuth: isAuth,\r\n                login: login,\r\n                logout: logout,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nconst AuthConsumer = AuthContext.Consumer;\r\n\r\nexport { AuthProvider, AuthConsumer };\r\n","import React, { createContext, useState } from 'react';\r\n\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst PortalUserContext = createContext({\r\n    user: {},\r\n    setInitialUserData: () => {},\r\n});\r\n\r\nconst PortalUserProvider = function(props) {\r\n    const [user, setUser] = useState({});\r\n    const [currentSelectedContact, setCurrentContact] = useState({});\r\n\r\n    function setInitialUserData(user) {\r\n        setUser(user);\r\n\r\n        const selectedContactId = window.localStorage.getItem(localStorageCurrentSelectedContact);\r\n\r\n        // When there is already a selected contact id then lookup the contact\r\n        // Selected contact could be the user or one of the occupations\r\n        if (selectedContactId) {\r\n            if (user.id == selectedContactId) {\r\n                setCurrentContact(user);\r\n            } else {\r\n                const occupationUser = user.occupations.find(\r\n                    occupation => occupation.primaryContact.id == selectedContactId\r\n                );\r\n\r\n                setCurrentContact(occupationUser.primaryContact);\r\n            }\r\n        } else {\r\n            // If there is no selected contact then set default the login user as selected contact.\r\n            // Except if the user has an organisation as occupation that is primary\r\n            const organisationUser = user.occupations.find(\r\n                occupation => occupation.primaryContact.typeId === 'organisation' && occupation.primary\r\n            );\r\n\r\n            if (organisationUser) {\r\n                setCurrentContact(organisationUser.primaryContact);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, organisationUser.primaryContact.id);\r\n            } else {\r\n                setCurrentContact(user);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, user.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    function switchCurrentContact(contact) {\r\n        setCurrentContact(contact);\r\n        window.localStorage.setItem(localStorageCurrentSelectedContact, contact.id);\r\n    }\r\n\r\n    function resetCurrentUserToDefault() {\r\n        setUser({});\r\n        setCurrentContact({});\r\n    }\r\n\r\n    function updateNameSelectedContact(fullName) {\r\n        setCurrentContact({ ...currentSelectedContact, fullName });\r\n\r\n        if (user.id === currentSelectedContact.id) {\r\n            user.fullName = fullName;\r\n        }\r\n\r\n        const updatedOccupations = user.occupations.map(occupationContact => {\r\n            if (occupationContact.primaryContact.id === currentSelectedContact.id) {\r\n                occupationContact.primaryContact.fullName = fullName;\r\n            }\r\n            return occupationContact;\r\n        });\r\n\r\n        setUser({ ...user, occupations: updatedOccupations });\r\n    }\r\n\r\n    return (\r\n        <PortalUserContext.Provider\r\n            value={{\r\n                user: user,\r\n                setInitialUserData,\r\n                currentSelectedContact,\r\n                switchCurrentContact,\r\n                resetCurrentUserToDefault,\r\n                updateNameSelectedContact,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </PortalUserContext.Provider>\r\n    );\r\n};\r\n\r\nconst PortalUserConsumer = PortalUserContext.Consumer;\r\n\r\nexport { PortalUserProvider, PortalUserConsumer, PortalUserContext };\r\n","import React, { createContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeSettingsContext = createContext({\r\n    defaultThemeSettings: {},\r\n    setInitialThemeSettings: () => {},\r\n    setCurrentThemeSettings: () => {},\r\n    switchToDefaultThemeSettings: () => {},\r\n});\r\n\r\nconst ThemeSettingsProvider = function(props) {\r\n    const [defaultThemeSettings, setDefaultThemeSettings] = useState({});\r\n    const [currentThemeSettings, setCurrentThemeSettings] = useState({});\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentThemeSettings.id) {\r\n                handleChangeCurrentThemeSettings();\r\n            }\r\n        },\r\n        [currentThemeSettings.id]\r\n    );\r\n\r\n    function setInitialThemeSettings(payload) {\r\n        setDefaultThemeSettings(payload);\r\n        setCurrentThemeSettings(payload);\r\n    }\r\n\r\n    function switchToDefaultThemeSettings() {\r\n        setCurrentThemeSettings(defaultThemeSettings);\r\n    }\r\n\r\n    function handleChangeCurrentThemeSettings() {\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-color',\r\n            currentThemeSettings.portal_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-text-color',\r\n            currentThemeSettings.portal_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-rgba',\r\n            currentThemeSettings.login_header_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-primary-rgba-text-color',\r\n            currentThemeSettings.login_header_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-header-portal-icon-color',\r\n            currentThemeSettings.header_icons_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-secondary-color',\r\n            currentThemeSettings.login_field_background_color\r\n        );\r\n        document.documentElement.style.setProperty(\r\n            '--main-secondary-text-color',\r\n            currentThemeSettings.login_field_background_text_color\r\n        );\r\n        document.documentElement.style.setProperty('--button-primary-color', currentThemeSettings.button_color);\r\n        document.documentElement.style.setProperty(\r\n            '--button-primary-text-color',\r\n            currentThemeSettings.button_text_color\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ThemeSettingsContext.Provider\r\n            value={{\r\n                defaultThemeSettings,\r\n                setInitialThemeSettings,\r\n                setCurrentThemeSettings,\r\n                switchToDefaultThemeSettings,\r\n                currentThemeSettings,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ThemeSettingsContext.Provider>\r\n    );\r\n};\r\n\r\nconst ThemeSettingsConsumer = ThemeSettingsContext.Consumer;\r\n\r\nexport { ThemeSettingsProvider, ThemeSettingsConsumer, ThemeSettingsContext };\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { AuthConsumer } from '../../context/AuthContext';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport { ThemeSettingsConsumer } from '../../context/ThemeSettingsContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { FaUser } from 'react-icons/fa';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nfunction Header({ location, history }) {\r\n    const [menuOpen, updateStateMenu] = useState(false);\r\n\r\n    // This keeps your state in sync with the opening/closing of the menu\r\n    // via the default means, e.g. clicking the X, pressing the ESC key etc.\r\n    function handleStateChange(state) {\r\n        updateStateMenu(state.isOpen);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function openMenu() {\r\n        updateStateMenu(true);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function closeMenu() {\r\n        updateStateMenu(false);\r\n    }\r\n\r\n    // This can be used to toggle the menu, e.g. when using a custom icon\r\n    // Tip: You probably want to hide either/both default icons if using a custom icon\r\n    // See https://github.com/negomi/react-burger-menu#custom-icons\r\n    function toggleMenu() {\r\n        updateStateMenu(!menuOpen);\r\n    }\r\n\r\n    function formatProfilePicName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName.replace(/\\s(?=\\S*$)/, '<br>');\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                let lastName = fullName.slice(0, fullName.search(','));\r\n                lastName = lastName.replace(/\\s(?=\\S*$)/, '<br>');\r\n                return firstName + '<br>' + lastName;\r\n            }\r\n        } else {\r\n            return '?';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hook that alerts clicks outside of the passed ref\r\n     */\r\n    function useOutsideAlerter(ref) {\r\n        /**\r\n         * Alert if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                updateStateMenu(false);\r\n            }\r\n        }\r\n\r\n        useEffect(() => {\r\n            // Bind the event listener\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n            return () => {\r\n                // Unbind the event listener on clean up\r\n                document.removeEventListener('mousedown', handleClickOutside);\r\n            };\r\n        });\r\n    }\r\n\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef);\r\n\r\n    function redirect(to) {\r\n        history.push(`/${to}`);\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"header-portal\">\r\n                <div className=\"profile-pic\">\r\n                    <PortalUserConsumer>\r\n                        {({ currentSelectedContact }) => (\r\n                            <p className=\"profile-title\">\r\n                                {ReactHtmlParser(formatProfilePicName(currentSelectedContact.fullName))}\r\n                            </p>\r\n                        )}\r\n                    </PortalUserConsumer>\r\n                </div>\r\n\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs={6}>\r\n                            <ThemeSettingsConsumer>\r\n                                {({ currentThemeSettings }) => (\r\n                                    <div className=\"header-logo\">\r\n                                        {currentThemeSettings.portal_logo_file_name !== undefined && (\r\n                                            <Image src={`images/${currentThemeSettings.portal_logo_file_name}`} />\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </ThemeSettingsConsumer>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                {/* Hambuger menu */}\r\n                                <div className=\"bm-burger-button\" onClick={openMenu}>\r\n                                    <span>\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-1\" />\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-2\" />\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-3\" />\r\n                                    </span>\r\n                                </div>\r\n                                {/* User switch menu */}\r\n                                <AuthConsumer>\r\n                                    {({ logout }) => {\r\n                                        return (\r\n                                            <PortalUserConsumer>\r\n                                                {({\r\n                                                    user,\r\n                                                    currentSelectedContact,\r\n                                                    switchCurrentContact,\r\n                                                    resetCurrentUserToDefault,\r\n                                                }) => {\r\n                                                    return (\r\n                                                        <Dropdown alignRight>\r\n                                                            <Dropdown.Toggle>\r\n                                                                <FaUser />\r\n                                                            </Dropdown.Toggle>\r\n                                                            <Dropdown.Menu>\r\n                                                                <Dropdown.Header>Ingelogd als</Dropdown.Header>\r\n                                                                <Dropdown.Item disabled>{user.fullName}</Dropdown.Item>\r\n                                                                <Dropdown.Item>\r\n                                                                    <Link\r\n                                                                        to={'/wijzig-inloggegevens'}\r\n                                                                        className={'dropdown-link'}\r\n                                                                    >\r\n                                                                        Wijzig inloggegevens\r\n                                                                    </Link>\r\n                                                                </Dropdown.Item>\r\n                                                                {/*<Dropdown.Item*/}\r\n                                                                {/*href={'#/wijzig-inloggegevens'}*/}\r\n                                                                {/*className={'dropdown-link'}*/}\r\n                                                                {/*>*/}\r\n                                                                {/*Wijzig inloggegevens*/}\r\n                                                                {/*</Dropdown.Item>*/}\r\n                                                                <Dropdown.Divider />\r\n                                                                <Dropdown.Header>Beheren van</Dropdown.Header>\r\n                                                                <Dropdown.Item\r\n                                                                    onClick={() => {\r\n                                                                        switchCurrentContact(user);\r\n                                                                        redirect('gegevens');\r\n                                                                    }}\r\n                                                                    active={\r\n                                                                        currentSelectedContact.id === user.id\r\n                                                                            ? true\r\n                                                                            : false\r\n                                                                    }\r\n                                                                >\r\n                                                                    {user.fullName}\r\n                                                                </Dropdown.Item>\r\n                                                                {user.occupations\r\n                                                                    ? user.occupations.map(occupationContact =>\r\n                                                                          (occupationContact.primaryContact.typeId ===\r\n                                                                              'organisation' &&\r\n                                                                              occupationContact.primary) ||\r\n                                                                          (occupationContact.primaryContact.typeId ===\r\n                                                                              'person' &&\r\n                                                                              occupationContact.occupation\r\n                                                                                  .occupationForPortal) ? (\r\n                                                                              <Dropdown.Item\r\n                                                                                  key={occupationContact.id}\r\n                                                                                  onClick={() => {\r\n                                                                                      switchCurrentContact(\r\n                                                                                          occupationContact.primaryContact\r\n                                                                                      );\r\n                                                                                      redirect('gegevens');\r\n                                                                                  }}\r\n                                                                                  active={\r\n                                                                                      currentSelectedContact.id ===\r\n                                                                                      occupationContact.primaryContact\r\n                                                                                          .id\r\n                                                                                          ? true\r\n                                                                                          : false\r\n                                                                                  }\r\n                                                                              >\r\n                                                                                  {\r\n                                                                                      occupationContact.primaryContact\r\n                                                                                          .fullName\r\n                                                                                  }\r\n                                                                              </Dropdown.Item>\r\n                                                                          ) : null\r\n                                                                      )\r\n                                                                    : null}\r\n                                                                <Dropdown.Divider />\r\n                                                                <Dropdown.Item\r\n                                                                    onClick={() => {\r\n                                                                        logout();\r\n                                                                        resetCurrentUserToDefault();\r\n                                                                    }}\r\n                                                                >\r\n                                                                    Log uit\r\n                                                                </Dropdown.Item>\r\n                                                            </Dropdown.Menu>\r\n                                                        </Dropdown>\r\n                                                    );\r\n                                                }}\r\n                                            </PortalUserConsumer>\r\n                                        );\r\n                                    }}\r\n                                </AuthConsumer>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            {/* Sidebar menu */}\r\n            <Menu\r\n                right\r\n                width={'300px'}\r\n                // noOverlay\r\n                isOpen={menuOpen}\r\n                onStateChange={state => handleStateChange(state)}\r\n                customBurgerIcon={false}\r\n            >\r\n                <div className={'sidebar-menu'}>\r\n                    <React.Fragment>\r\n                        <h6 className=\"heading in-menu\">MENU</h6>\r\n                        <Link\r\n                            to={'/inschrijvingen-projecten'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/inschrijvingen-projecten' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Huidige deelnames\r\n                        </Link>\r\n                        <Link\r\n                            to={'/gegevens'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/gegevens' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Gegevens\r\n                        </Link>\r\n                        {/* later */}\r\n                        {/*<Link*/}\r\n                        {/*to={'/deelname-projecten'}*/}\r\n                        {/*className={`nav-link w-nav-link w--nav-link-open ${*/}\r\n                        {/*location.pathname === '/' ? 'w--current' : ''*/}\r\n                        {/*}`}*/}\r\n                        {/*onClick={closeMenu}*/}\r\n                        {/*>*/}\r\n                        {/*Deelnames*/}\r\n                        {/*</Link>*/}\r\n                        <Link\r\n                            to={'/inschrijven-projecten'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/inschrijven-projecten' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Inschrijven projecten\r\n                        </Link>\r\n                        <Link\r\n                            to={'/waardestaat-documenten'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/waardestaat-documenten' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Waardestaat documenten\r\n                        </Link>\r\n                        <Link\r\n                            to={'/over-ons'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/over-ons' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Over ons\r\n                        </Link>\r\n                    </React.Fragment>\r\n                </div>\r\n            </Menu>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `${BASE_URL}`,\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function(config) {\r\n        // First check if token is expired or not\r\n        checkTokenExpiration();\r\n        // Do something before request is sent\r\n        const AUTH_TOKEN = 'Bearer ' + localStorage.getItem(localStorageToken);\r\n        config.headers.Authorization = AUTH_TOKEN;\r\n        return config;\r\n    },\r\n    function(error) {\r\n        // Do something with request error\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Check token expiration and redirect if token is expired\r\nfunction checkTokenExpiration() {\r\n    const lastActivity = moment(localStorage.getItem(localStorageLastActivity));\r\n\r\n    if (\r\n        !localStorage.getItem(localStorageLastActivity) ||\r\n        lastActivity.add('30', 'minutes').format() < moment().format()\r\n    ) {\r\n        if (window.location.hash !== '#/login' && window.location.hash !== '#/loguit') {\r\n            setTimeout(() => {\r\n                localStorage.removeItem(localStorageToken);\r\n                localStorage.removeItem(localStorageLastActivity);\r\n                window.location.reload();\r\n            }, 100);\r\n        }\r\n    } else {\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n    }\r\n}\r\n\r\nexport default axiosInstance;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchPortalUserDetails: function() {\r\n        const requestUrl = `/me`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'portalSettingsLayoutAssigned',\r\n                    ],\r\n                    rlt: {\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: { fld: ['id', 'fullName', 'typeId'] },\r\n                                contact: { fld: ['id', 'fullName'] },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchPortalUserEmail: function() {\r\n        return axiosInstance.get(`/portal-user-email`);\r\n    },\r\n\r\n    changeEmail: values => {\r\n        const requestUrl = `/portal-user/change-email`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n\r\n    changePassword: values => {\r\n        const requestUrl = `/portal-user/change-password`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n};\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { Route, Redirect, useLocation } from 'react-router-dom';\r\nimport { AuthConsumer } from '../context/AuthContext';\r\nimport Header from '../components/layout/Header';\r\nimport PortalUserAPI from '../api/portal-user/PortalUserAPI';\r\nimport { PortalUserConsumer } from '../context/PortalUserContext';\r\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\r\n\r\nconst ProtectedRoute = ({ component: Component, setInitialUserData, isAuth, ...rest }) => {\r\n    const location = useLocation();\r\n    const { setInitialThemeSettings, switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            (function callFetchPortalUserDetails() {\r\n                PortalUserAPI.fetchPortalUserDetails()\r\n                    .then(payload => {\r\n                        setInitialUserData(payload.data.data);\r\n                        setInitialThemeSettings(payload.data.data.portalSettingsLayoutAssigned);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    });\r\n            })();\r\n        }\r\n    }, [isAuth]);\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            if (\r\n                !location.pathname.includes('/project/') &&\r\n                !location.pathname.includes('/project-deelname/') &&\r\n                !location.pathname.includes('/inschrijven/')\r\n            ) {\r\n                switchToDefaultThemeSettings();\r\n            }\r\n        }\r\n    }, [location.pathname]);\r\n\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <div className=\"body-2\" id=\"body-2\">\r\n                    <Header />\r\n                    <Route render={props => (isAuth ? <Component {...props} /> : <Redirect to=\"/login\" />)} {...rest} />\r\n                </div>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n};\r\n\r\nexport default function ProtectedRouteWithContext(props) {\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <PortalUserConsumer>\r\n                    {({ setInitialUserData }) => (\r\n                        <ProtectedRoute {...props} setInitialUserData={setInitialUserData} isAuth={isAuth} />\r\n                    )}\r\n                </PortalUserConsumer>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Route, useLocation } from 'react-router-dom';\r\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => {\r\n    const location = useLocation();\r\n    const { switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    useEffect(() => {\r\n        switchToDefaultThemeSettings();\r\n    }, [location.pathname]);\r\n\r\n    return <Route render={props => <Component {...props} />} {...rest} />;\r\n};\r\n\r\nexport default PublicRoute;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst InputText = ({\r\n    field,\r\n    type,\r\n    className,\r\n    id,\r\n    readOnly,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <input\r\n                type={type}\r\n                className={`text-input w-input ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                readOnly={readOnly}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputText.defaultProps = {\r\n    type: 'text',\r\n    className: 'content',\r\n    readOnly: false,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputText.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputText;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ButtonText = ({\r\n    buttonClassName,\r\n    buttonText,\r\n    onClickAction,\r\n    type,\r\n    loading,\r\n    title,\r\n    loadingSpinnerColor,\r\n    disabled,\r\n}) => (\r\n    <Button\r\n        type={type}\r\n        className={`${buttonClassName}`}\r\n        onClick={onClickAction}\r\n        disabled={loading || disabled}\r\n        title={title}\r\n        size=\"sm\"\r\n    >\r\n        {loading ? <ClipLoader color={loadingSpinnerColor} size={17} /> : <span>{buttonText}</span>}\r\n    </Button>\r\n);\r\n\r\nButtonText.defaultProps = {\r\n    buttonClassName: '',\r\n    type: 'button',\r\n    title: '',\r\n    loading: false,\r\n    loadingSpinnerColor: 'white',\r\n    disabled: false,\r\n};\r\n\r\nButtonText.propTypes = {\r\n    buttonClassName: PropTypes.string,\r\n    buttonText: PropTypes.string.isRequired,\r\n    onClickAction: PropTypes.func,\r\n    type: PropTypes.string,\r\n    title: PropTypes.string,\r\n    loading: PropTypes.bool,\r\n    loadingSpinnerColor: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n};\r\n\r\nexport default ButtonText;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    password: Yup.string().required('Verplicht'),\r\n});\r\n\r\nconst LoginForm = function({ handleSubmit, login }) {\r\n    return (\r\n        <Formik\r\n            initialValues={{ username: '', password: '' }}\r\n            enableReinitialize={true}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                handleSubmit(values, actions, login);\r\n            }}\r\n            render={({ isSubmitting, errors, touched }) => {\r\n                return (\r\n                    <Form>\r\n                        <Field\r\n                            name=\"username\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"username\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={''}\r\n                                    placeholder={'Wachtwoord'}\r\n                                    type={'password'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <ButtonText\r\n                            buttonText={'Log in'}\r\n                            buttonClassName={'authorization-button'}\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                        />\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import axios from 'axios';\r\n\r\nconst AUTH_KEY = {\r\n    client_id: window.__SERVER_DATA__.client_id,\r\n    client_secret: window.__SERVER_DATA__.client_key,\r\n    grant_type: 'password',\r\n};\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\n\r\nexport default {\r\n    newAccount: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n    newAccountSuccess: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account-success`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    login: loginCredentials => {\r\n        const requestUrl = `${BASE_URL}/oauth/token`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, { ...AUTH_KEY, ...loginCredentials });\r\n    },\r\n\r\n    register: payload => {\r\n        const requestUrl = `${BASE_URL}/register`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    forgot: email => {\r\n        const requestUrl = `${BASE_URL}/password/email`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, email);\r\n    },\r\n\r\n    reset: payload => {\r\n        const requestUrl = `${BASE_URL}/password/reset`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nconst URL_PORTAL_SETTINGS = `setting`;\r\n\r\nexport default {\r\n    fetchPortalSettings: keys => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/multiple${keys}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchPortalActive: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/portal-active`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchCooperativeName: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/cooperative-name`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchShowNewAtCooperativeLink: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/show-new-at-cooperative-link`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchNewAtCooperativeLinkText: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/new-at-cooperative-link-text`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport LoginForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport PortalSettingsAPI from '../../../api/portal-settings/PortalSettingsAPI';\r\n\r\nexport default props => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = props.location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    const [portalActive, setPortalActive] = useState(false);\r\n    const [showNewAtCooperativeLink, setShowNewAtCooperativeLink] = useState(false);\r\n    const [newAtCooperativeLinkText, setNewAtCooperativeLinkText] = useState('');\r\n\r\n    useEffect(() => {\r\n        (function callFetchPortalActive() {\r\n            PortalSettingsAPI.fetchPortalActive()\r\n                .then(payload => {\r\n                    setPortalActive(payload.data);\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setIsLoading(false);\r\n                });\r\n        })();\r\n\r\n        (function callFetchShowNewAtCooperativeLink() {\r\n            PortalSettingsAPI.fetchShowNewAtCooperativeLink()\r\n                .then(payload => {\r\n                    setShowNewAtCooperativeLink(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n\r\n        (function callFetchNewAtCooperativeLinkText() {\r\n            PortalSettingsAPI.fetchNewAtCooperativeLinkText()\r\n                .then(payload => {\r\n                    setNewAtCooperativeLinkText(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n\r\n    function handleSubmit(values, actions, login) {\r\n        AuthAPI.login(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                login(payload.data, () => toggleRedirect(true));\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <AuthConsumer>\r\n                    {({ isAuth, login }) => (\r\n                        <Container fluid className=\"authorization-container\">\r\n                            <Row className=\"justify-content-center align-content-center full-height\">\r\n                                <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\r\n                                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                                    {isLoading ? (\r\n                                        <React.Fragment>\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    Applicatie wordt geladen...\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    ) : !portalActive ? (\r\n                                        <React.Fragment>\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    Deze applicatie kan op dit moment niet gebruikt worden.\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    ) : !isLoading ? (\r\n                                        <React.Fragment>\r\n                                            <LoginForm handleSubmit={handleSubmit} login={login} />\r\n                                            {showError ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                        Gebruikte logingegevens zijn onjuist!\r\n                                                    </Alert>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Link to={'/wachtwoord-vergeten'} className=\"authorization-link\">\r\n                                                    Wachtwoord vergeten?\r\n                                                </Link>\r\n                                            </Row>\r\n                                            {showNewAtCooperativeLink ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <a\r\n                                                        href={'/#/nieuw-account'}\r\n                                                        className=\"authorization-link\"\r\n                                                        target=\"_blank\"\r\n                                                    >\r\n                                                        {newAtCooperativeLinkText}\r\n                                                    </a>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                        </React.Fragment>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    )}\r\n                </AuthConsumer>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { GoogleReCaptchaProvider, GoogleReCaptcha } from 'react-google-recaptcha-v3';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst RegisterForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <div className=\"mb-3\">\r\n                    <p className={'authorization-text'}>\r\n                        Stel je wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </div>\r\n                <Row>\r\n                    <Col>\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'authorization-text'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-2\">\r\n                        <Field\r\n                            name=\"passwordConfirmation\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"passwordConfirmation\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Herhaal nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'authorization-text mb-3'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"my-3\">\r\n                        <small className={'authorization-text'}>\r\n                            Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1\r\n                            hoofdletter bevatten.\r\n                        </small>\r\n                    </Col>\r\n                </Row>\r\n                <ButtonText\r\n                    buttonText={'Verzenden'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport RegisterForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst Register = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showLoginLink, setLoginLink] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const registrationCode = decodeURIComponent(match.params.registrationCode);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.register({\r\n            registrationCode,\r\n            email,\r\n            password: values.password,\r\n            password_confirmation: values.passwordConfirmation,\r\n        })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        setLoginLink(false);\r\n                        setErrorMessage('');\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        setLoginLink(true);\r\n                        setErrorMessage('Er is iets fout gegaan bij automatisch inloggen na activeren.');\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                console.log(error.response.status);\r\n                console.log(error.response.data.message);\r\n                toggleError(true);\r\n                if (\r\n                    error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message &&\r\n                    error.response.status === 423\r\n                ) {\r\n                    setLoginLink(true);\r\n                    setErrorMessage(error.response.data.message);\r\n                } else {\r\n                    setLoginLink(false);\r\n                    setErrorMessage(\r\n                        'Er is iets fout gegaan bij activeren. Controleer of de activatie link juist en volledig is.'\r\n                    );\r\n                }\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <h3 className={'authorization-text'}>Je account is geactiveerd</h3>\r\n                                    <p className={'authorization-text'}>Je bent nu ingelogd</p>\r\n                                    <ButtonText\r\n                                        buttonText={'Ga verder'}\r\n                                        onClickAction={toggleRedirect}\r\n                                        buttonClassName={'authorization-button'}\r\n                                        size=\"sm\"\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <h3 className={'authorization-text'}>Account activeren</h3>\r\n                                    {!showLoginLink ? <RegisterForm handleSubmit={handleSubmit} email={email} /> : null}\r\n                                    {showError ? (\r\n                                        <Row className={'justify-content-center align-content-center '}>\r\n                                            <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                {errorMessage}\r\n                                            </Alert>\r\n                                        </Row>\r\n                                    ) : null}\r\n                                </>\r\n                            )}\r\n                            {showLoginLink ? (\r\n                                <ButtonText\r\n                                    buttonText={'Ga naar loginscherm'}\r\n                                    onClickAction={toggleRedirect}\r\n                                    buttonClassName={'authorization-button'}\r\n                                    size=\"sm\"\r\n                                />\r\n                            ) : null}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function RegisterWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Register {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ForgotForm = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Field\r\n                    name=\"email\"\r\n                    render={({ field }) => (\r\n                        <InputText\r\n                            field={field}\r\n                            id=\"email\"\r\n                            className={''}\r\n                            placeholder={'E-mailadres'}\r\n                            errors={errors}\r\n                            touched={touched}\r\n                            // todo check waarom dit erin stond ?!\r\n                            // showErrorMessage={false}\r\n                        />\r\n                    )}\r\n                />\r\n                <ButtonText\r\n                    buttonText={showSuccessMessage ? 'E-mail is verstuurd!' : 'Verstuur wachtwoord reset link'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                    disabled={showSuccessMessage}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ForgotForm;\r\n","import React, { useState } from 'react';\r\n\r\nimport ForgotForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Forgot = props => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.forgot(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If forgot API fails show error and then set submitting back to false\r\n                // toggleError(true);\r\n                // If forgot API fails show succesmessage anyway\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                    {showSuccessMessage ? (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Als het e-mailadres bij ons bekend is, dan ontvang je binnen enkele minuten een\r\n                                    e-mail met een persoonlijke link. Via deze link kun je een nieuw wachtwoord\r\n                                    instellen.\r\n                                    <br />\r\n                                    Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van\r\n                                    bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of\r\n                                    je onze mail daar terug vindt.\r\n                                </p>\r\n                            </Row>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Wachtwoord vergeten</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Vul het e-mailadres in waarmee je inlogt en dat bij ons bekend is. Je ontvangt van\r\n                                    ons een e-mail waarmee je een nieuw wachtwoord kunt instellen.\r\n                                </p>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <Col xs={12} md={6}>\r\n                                    <ForgotForm handleSubmit={handleSubmit} showSuccessMessage={showSuccessMessage} />\r\n                                    {showError ? (\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            E-mailadres is niet bekend!\r\n                                        </Alert>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    )}\r\n                    <Row className={'justify-content-center '}>\r\n                        <Link to={'/login'} className=\"authorization-link\">\r\n                            Terug naar inloggen\r\n                        </Link>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Forgot;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ResetForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Row className=\"justify-content-center\">\r\n                    <p className={'authorization-text'}>\r\n                        Stel een nieuw wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"password\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"password\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'authorization-text'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"passwordConfirmation\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"passwordConfirmation\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Herhaal nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'authorization-text mb-3'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <small className={'authorization-text'}>\r\n                        Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1 hoofdletter\r\n                        bevatten.\r\n                    </small>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <ButtonText\r\n                        buttonText={'Verzenden'}\r\n                        buttonClassName={'authorization-button'}\r\n                        size=\"sm\"\r\n                        type={'submit'}\r\n                        loading={isSubmitting}\r\n                        loadingSpinnerColor={'#034b8c'}\r\n                    />\r\n                </Row>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ResetForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport ResetForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst Reset = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const token = decodeURIComponent(match.params.token);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.reset({ token, email, password: values.password, password_confirmation: values.passwordConfirmation })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'authorization-text'}>Je wachtwoord is ingesteld</h3>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <p className={'authorization-text'}>Je bent nu ingelogd</p>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <ButtonText\r\n                                            buttonText={'Ga verder'}\r\n                                            onClickAction={toggleRedirect}\r\n                                            buttonClassName={'authorization-button'}\r\n                                            size=\"sm\"\r\n                                        />\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'authorization-text'}>Wachtwoord wijzigen</h3>\r\n                                    </Row>\r\n                                    <ResetForm handleSubmit={handleSubmit} email={email} />\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function ResetWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Reset {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n    fetchProjects: function() {\r\n        const requestUrl = `/jory/project`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: ['id', 'name', 'dateStartRegistrations', 'dateEndRegistrations'],\r\n                    flt: {\r\n                        and: [\r\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\r\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\r\n                        ],\r\n                    },\r\n                    rlt: {\r\n                        administration: { fld: ['id', 'name'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchProject: function(id) {\r\n        const requestUrl = `/jory/project/${id}`;\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'name',\r\n                        'description',\r\n                        'dateStartRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'minParticipations',\r\n                        'maxParticipations',\r\n                        'totalParticipations',\r\n                        'participationWorth',\r\n                        'currentBookWorth',\r\n                        'amountOfLoanNeeded',\r\n                        'minAmountLoan',\r\n                        'maxAmountLoan',\r\n                        'isSceProject',\r\n                        'checkPostalcodeLink',\r\n                        'postalcodeLink',\r\n                        'linkAgreeTerms',\r\n                        'linkProjectInfo',\r\n                        'linkUnderstandInfo',\r\n                        'showQuestionAboutMembership',\r\n                        'useTransactionCostsWithMembership',\r\n                        'usesMollie',\r\n                        'textTransactionCosts',\r\n                        'transactionCostsCodeRef',\r\n                        'transactionCostsAmountMin',\r\n                        'transactionCostsAmountMax',\r\n                        'transactionCostsAmount',\r\n                        'transactionCostsPercentage',\r\n                        'transactionCostsAmount2',\r\n                        'transactionCostsPercentage2',\r\n                        'transactionCostsAmount3',\r\n                        'transactionCostsPercentage3',\r\n                    ],\r\n                    flt: {\r\n                        and: [\r\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\r\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\r\n                        ],\r\n                    },\r\n                    rlt: {\r\n                        projectType: { fld: ['id', 'codeRef'] },\r\n                        administration: { fld: ['id', 'name', 'portalSettingsLayoutAssigned'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from '../project/ProjectAPI';\r\n\r\nexport default {\r\n    fetchContact: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'isParticipant',\r\n                        'disableChangeContactNameOnPortal',\r\n                        'noAddressesFound',\r\n                        'isParticipantPcrProject',\r\n                        'isParticipantSceProject',\r\n                        'blockChangeAddress',\r\n                        'blockChangeAddressNumber',\r\n                    ],\r\n                    rlt: {\r\n                        person: {\r\n                            fld: [\r\n                                'id',\r\n                                'firstName',\r\n                                'lastName',\r\n                                'initials',\r\n                                'titleId',\r\n                                'lastNamePrefix',\r\n                                'lastNamePrefixId',\r\n                                'dateOfBirth',\r\n                            ],\r\n                            rlt: {\r\n                                title: { fld: ['id', 'name'] },\r\n                            },\r\n                        },\r\n                        organisation: {\r\n                            fld: ['id', 'name', 'website', 'chamberOfCommerceNumber', 'vatNumber'],\r\n                        },\r\n                        emailAddresses: { fld: ['id', 'email', 'primary', 'typeId'] },\r\n                        phoneNumbers: { fld: ['id', 'number', 'primary', 'typeId'] },\r\n                        addresses: {\r\n                            fld: [\r\n                                'id',\r\n                                'street',\r\n                                'number',\r\n                                'addition',\r\n                                'postalCode',\r\n                                'city',\r\n                                'countryId',\r\n                                'primary',\r\n                                'typeId',\r\n                                'eanElectricity',\r\n                                'eanGas',\r\n                            ],\r\n                            rlt: {\r\n                                country: { fld: ['id', 'name'] },\r\n                                primaryAddressEnergySupplier: {\r\n                                    fld: [\r\n                                        'id',\r\n                                        'energySupplierId',\r\n                                        'esNumber',\r\n                                        'memberSince',\r\n                                        'isCurrentSupplier',\r\n                                        'endDatePrevious',\r\n                                        'memberSinceNext',\r\n                                    ],\r\n                                    rlt: { energySupplier: [] },\r\n                                    flt: {\r\n                                        f: 'isCurrentSupplier',\r\n                                        d: true,\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: {\r\n                                    fld: ['id', 'fullName'],\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchContactWithParticipants: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                    ],\r\n                    rlt: {\r\n                        participations: {\r\n                            fld: [\r\n                                'id',\r\n                                'dateRegister',\r\n                                'didAcceptAgreement',\r\n                                'dateDidAcceptAgreement',\r\n                                'didUnderstandInfo',\r\n                                'dateDidUnderstandInfo',\r\n                                'participationsDefinitive',\r\n                                'participationsGranted',\r\n                                'participationsOptioned',\r\n                                'participationsInteressed',\r\n                                'amountDefinitive',\r\n                                'amountGranted',\r\n                                'amountOptioned',\r\n                                'amountInteressed',\r\n                                'powerKwhConsumption',\r\n                            ],\r\n                            rlt: {\r\n                                project: {\r\n                                    fld: [\r\n                                        'id',\r\n                                        'name',\r\n                                        'dateEnd',\r\n                                        'linkProjectInfo',\r\n                                        'linkUnderstandInfo',\r\n                                        'showQuestionAboutMembership',\r\n                                        'usesMollie',\r\n                                    ],\r\n                                    rlt: {\r\n                                        projectType: { fld: ['id', 'codeRef'] },\r\n                                        administration: { fld: ['name'] },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    updateContact: contact => {\r\n        const requestUrl = `/contact/${contact.id}`;\r\n\r\n        return axiosInstance.post(requestUrl, contact);\r\n    },\r\n\r\n    previewDocument: registerValues => {\r\n        const requestUrl = `/contact/${registerValues.contactId}/${registerValues.projectId}/preview-document`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n\r\n    fetchContactProjects: function(contactId, projectId) {\r\n        const requestUrl = `/contact/${contactId}/contact-projects`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    fetchContactProjectData: function(contactId, projectId) {\r\n        const requestUrl = `/contact/${contactId}/${projectId}/contact-project-data`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    fetchContactFinancialOverviewDocuments: function(contactId) {\r\n        const requestUrl = `/contact/${contactId}/financial-overview-documents`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n\r\n    financialOverviewContactDownload: function(id) {\r\n        const requestUrl = `/financial-overview-contact/${id}/download`;\r\n\r\n        return axiosInstance(requestUrl, { responseType: 'blob' });\r\n    },\r\n\r\n    fetchContactRelatedAdministrations: function(contactId) {\r\n        const requestUrl = `/contact/${contactId}/related-administrations`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","export default function(contactData) {\r\n    const typeContact = contactData.typeId ? contactData.typeId : null;\r\n\r\n    let emptyPrimaryAddressEnergySupplier = {\r\n        energySupplierId: null,\r\n        esNumber: '',\r\n        memberSince: '',\r\n    };\r\n    let emptyAddress = {\r\n        street: '',\r\n        number: '',\r\n        addition: '',\r\n        postalCode: '',\r\n        city: '',\r\n        countryId: null,\r\n        eanElectricity: '',\r\n        eanGas: '',\r\n        primaryAddressEnergySupplier: emptyPrimaryAddressEnergySupplier,\r\n    };\r\n    let primaryAddress = null;\r\n    let visitAddress = null;\r\n    let postalAddress = null;\r\n    let invoiceAddress = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            // Set primary address\r\n            primaryAddress = contactData.addresses.find(address => address.primary);\r\n            contactData.primaryAddress = primaryAddress ? { ...emptyAddress, ...primaryAddress } : emptyAddress;\r\n            if (!contactData.primaryAddress.primaryAddressEnergySupplier) {\r\n                contactData.primaryAddress.primaryAddressEnergySupplier = {\r\n                    ...contactData.primaryAddress,\r\n                    emptyPrimaryAddressEnergySupplier,\r\n                };\r\n            }\r\n            break;\r\n        case 'organisation':\r\n            // Set visit, postal, invoice addresses\r\n            visitAddress = contactData.addresses.find(address => address.typeId === 'visit');\r\n            contactData.visitAddress = visitAddress ? { ...emptyAddress, ...visitAddress } : emptyAddress;\r\n            if (!contactData.visitAddress.primaryAddressEnergySupplier) {\r\n                contactData.visitAddress.primaryAddressEnergySupplier = {\r\n                    ...contactData.visitAddress,\r\n                    emptyPrimaryAddressEnergySupplier,\r\n                };\r\n            }\r\n            postalAddress = contactData.addresses.find(address => address.typeId === 'postal');\r\n            contactData.postalAddress = postalAddress ? { ...emptyAddress, ...postalAddress } : emptyAddress;\r\n            invoiceAddress = contactData.addresses.find(address => address.typeId === 'invoice');\r\n            contactData.invoiceAddress = invoiceAddress ? { ...emptyAddress, ...invoiceAddress } : emptyAddress;\r\n            break;\r\n    }\r\n\r\n    // Set correspondence email address\r\n    let emptyEmail = { email: '' };\r\n    const emailCorrespondence = contactData.emailAddresses.find(emailAddress => emailAddress.primary);\r\n    contactData.emailCorrespondence = emailCorrespondence ? { ...emptyEmail, ...emailCorrespondence } : emptyEmail;\r\n\r\n    // Set invoice email address\r\n    const emailInvoice = contactData.emailAddresses.find(\r\n        emailAddress => emailAddress.typeId === 'invoice' && !emailAddress.primary\r\n    );\r\n    contactData.emailInvoice = emailInvoice ? { ...emptyEmail, ...emailInvoice } : emptyEmail;\r\n\r\n    // Set primary phone number\r\n    let emptyPhoneNumber = { number: '' };\r\n    const phoneNumberPrimary = contactData.phoneNumbers.find(phoneNumber => phoneNumber.primary);\r\n    contactData.phoneNumberPrimary = phoneNumberPrimary\r\n        ? { ...emptyPhoneNumber, ...phoneNumberPrimary }\r\n        : emptyPhoneNumber;\r\n\r\n    // Set first phone number which is not primary\r\n    const phoneNumberTwo = contactData.phoneNumbers.filter(phoneNumber => !phoneNumber.primary)[0];\r\n    contactData.phoneNumberTwo = phoneNumberTwo ? { ...emptyPhoneNumber, ...phoneNumberTwo } : emptyPhoneNumber;\r\n\r\n    return contactData;\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nfunction Loading() {\r\n    return (\r\n        <Row className=\"justify-content-center align-content-center flex-wrap\" style={{ height: '40vh' }}>\r\n            <ClipLoader color={'#3898EC'} size={48} />\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TextBlock = ({ children, className, id, placeholder }) => {\r\n    const showPlaceholder = children === '' || children === null || children === undefined;\r\n\r\n    return (\r\n        <div className={`text-block ${className} ${showPlaceholder ? 'placeholder' : ''}`} id={id}>\r\n            {showPlaceholder ? <div className={'placeholder-message'}>{placeholder}</div> : children}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextBlock.defaultProps = {\r\n    className: 'text-block',\r\n    id: '',\r\n    children: '',\r\n    placeholder: '',\r\n};\r\n\r\nTextBlock.propTypes = {\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    placeholder: PropTypes.string,\r\n};\r\n\r\nexport default TextBlock;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactPersonalView({ portalSettings, initialContact }) {\r\n    const {\r\n        person = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        primaryAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n    } = initialContact;\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Naam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Aanhef'}>\r\n                        {person.title ? person.title.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Initialen'}>\r\n                        {person.initials}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Voornaam'}>\r\n                        {person.firstName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Tussenvoegsel'}>\r\n                        {person.lastNamePrefix}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Achternaam'}>\r\n                        {person.lastName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Geboortedatum</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6 col-md-4'} placeholder={'Geboortedatum'}>\r\n                        {person.dateOfBirth ? moment(person.dateOfBirth).format('L') : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {primaryAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {primaryAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {primaryAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {primaryAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {primaryAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {primaryAddress.country ? primaryAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                        {primaryAddress.eanElectricity}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                        {primaryAddress.eanGas}\r\n                    </TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? (\r\n                                <em>({dateDidAgreeAvg ? ' ' + moment(dateDidAgreeAvg).format('L') : ''})</em>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {primaryAddress.primaryAddressEnergySupplier.energySupplier\r\n                            ? primaryAddress.primaryAddressEnergySupplier.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                {primaryAddress.primaryAddressEnergySupplier &&\r\n                primaryAddress.primaryAddressEnergySupplier.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {primaryAddress.primaryAddressEnergySupplier.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {primaryAddress.primaryAddressEnergySupplier.memberSince\r\n                                    ? moment(primaryAddress.primaryAddressEnergySupplier.memberSince).format('L')\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactPersonalView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst Select = ({\r\n    field,\r\n    className,\r\n    id,\r\n    options,\r\n    optionLabel,\r\n    emptyOption,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <select\r\n                className={`select-field w-select content ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                disabled={disabled}\r\n            >\r\n                {emptyOption ? <option value=\"\">{placeholder ? `-- ${placeholder} --` : ''}</option> : null}\r\n                {options.map(option => {\r\n                    return (\r\n                        <option key={option.id} value={option.id}>\r\n                            {option[optionLabel]}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </>\r\n    );\r\n};\r\n\r\nSelect.defaultProps = {\r\n    className: '',\r\n    readOnly: false,\r\n    required: '',\r\n    optionLabel: 'name',\r\n    emptyOption: true,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nSelect.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    options: PropTypes.array.isRequired,\r\n    optionLabel: PropTypes.string,\r\n    emptyOption: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default Select;\r\n","export default [\r\n    { id: 'AU', name: 'Australië' },\r\n    { id: 'BE', name: 'België' },\r\n    { id: 'CA', name: 'Canade' },\r\n    { id: 'DK', name: 'Denemarken' },\r\n    { id: 'DE', name: 'Duitsland' },\r\n    { id: 'FI', name: 'Finland' },\r\n    { id: 'FR', name: 'Frankrijk' },\r\n    { id: 'IE', name: 'Ierland' },\r\n    { id: 'IT', name: 'Italië' },\r\n    { id: 'LU', name: 'Luxemburg' },\r\n    { id: 'NL', name: 'Nederland' },\r\n    { id: 'NZ', name: 'Nieuw-Zeeland' },\r\n    { id: 'NO', name: 'Noorwegen' },\r\n    { id: 'AT', name: 'Oostenrijk' },\r\n    { id: 'PL', name: 'Polen' },\r\n    { id: 'PT', name: 'Portugal' },\r\n    { id: 'ES', name: 'Spanje' },\r\n    { id: 'CZ', name: 'Tsjechië' },\r\n    { id: 'GB', name: 'Verenigd Koninkrijk' },\r\n    { id: 'VS', name: 'Verenigde Staten' },\r\n    { id: 'SE', name: 'Zweden' },\r\n    { id: 'CH', name: 'Zwitserland' },\r\n];\r\n","export default [\r\n    { id: 26, name: 'Agem' },\r\n    { id: 27, name: 'Anode Energie' },\r\n    { id: 66, name: 'ANWB Energie' },\r\n    { id: 24, name: 'Betuwe stroom' },\r\n    { id: 2, name: 'Budget Energie' },\r\n    { id: 58, name: 'CEN / WoonEnergie' },\r\n    { id: 54, name: 'Clean Energy' },\r\n    { id: 28, name: 'De Groene Stroomfabriek' },\r\n    { id: 59, name: 'De Vrije Energie Producent' },\r\n    { id: 25, name: 'Delta Energie' },\r\n    { id: 50, name: 'DGB Energie' },\r\n    { id: 51, name: 'Discount Energie' },\r\n    { id: 46, name: 'Dorpstroom' },\r\n    { id: 53, name: 'DVEP Energie' },\r\n    { id: 3, name: 'E.on' },\r\n    { id: 45, name: 'Easyenergy' },\r\n    { id: 4, name: 'Eneco' },\r\n    { id: 19, name: 'Energie VanOns' },\r\n    { id: 42, name: 'Energiebesteding' },\r\n    { id: 5, name: 'Energiedirect' },\r\n    { id: 21, name: 'Energieflex' },\r\n    { id: 37, name: 'Energyhouse' },\r\n    { id: 49, name: 'EnergyZero' },\r\n    { id: 52, name: 'EnerZie' },\r\n    { id: 6, name: 'Engie' },\r\n    { id: 7, name: 'Essent' },\r\n    { id: 35, name: 'Fenor energie' },\r\n    { id: 60, name: 'Gazprom' },\r\n    { id: 56, name: 'Gezinsenergie' },\r\n    { id: 8, name: 'Greenchoice' },\r\n    { id: 43, name: 'GreenNL' },\r\n    { id: 40, name: 'Groenpand' },\r\n    { id: 44, name: 'Hezelaer' },\r\n    { id: 9, name: 'Holland Wind' },\r\n    { id: 33, name: 'Holthausen Clean Energy (HCE)' },\r\n    { id: 20, name: 'Huismerk Energie' },\r\n    { id: 30, name: 'HVC Kringloop Energie' },\r\n    { id: 23, name: 'Innova Energie' },\r\n    { id: 10, name: 'Main energie' },\r\n    { id: 65, name: 'Mijn Domein Energie' },\r\n    { id: 61, name: 'Nieuw Hollands Energiebedrijf' },\r\n    { id: 38, name: 'NieuweStroom' },\r\n    { id: 12, name: 'NL Energie' },\r\n    { id: 1, name: 'OM' },\r\n    { id: 18, name: 'Overig' },\r\n    { id: 14, name: 'Oxxio' },\r\n    { id: 39, name: 'ParkStroom' },\r\n    { id: 62, name: 'PostcodeStroom' },\r\n    { id: 36, name: 'Power peers' },\r\n    { id: 15, name: 'Pure energy' },\r\n    { id: 63, name: 'PZEM' },\r\n    { id: 16, name: 'Qurrent' },\r\n    { id: 48, name: 'Qwint' },\r\n    { id: 55, name: 'Samsam' },\r\n    { id: 31, name: 'Sepa Green' },\r\n    { id: 32, name: 'Servicehouse' },\r\n    { id: 67, name: 'Shell Energie' },\r\n    { id: 34, name: 'Total' },\r\n    { id: 22, name: 'United Consumers' },\r\n    { id: 17, name: 'VanDeBron' },\r\n    { id: 13, name: 'Vattenfall' },\r\n    { id: 64, name: 'Vrij Op Naam' },\r\n    { id: 47, name: 'Welkom Energie' },\r\n    { id: 41, name: 'Windcentrale' },\r\n    { id: 57, name: 'Onbekend' },\r\n];\r\n","export default [\r\n    { id: 0, name: '' },\r\n    { id: 1, name: 'Dhr' },\r\n    { id: 2, name: 'Mevr' },\r\n    { id: 3, name: 'De heer, Mevrouw' },\r\n    { id: 4, name: 'Familie' },\r\n    { id: 5, name: 'De heer of mevrouw' },\r\n    { id: 6, name: 'De heren' },\r\n    { id: 7, name: 'De dames' },\r\n    { id: 8, name: 'Erven' },\r\n];\r\n","export default [\r\n    { id: 0, name: '' },\r\n    { id: 1, name: 'van' },\r\n    { id: 2, name: 'de' },\r\n    { id: 3, name: 'van der' },\r\n    { id: 4, name: 'van de' },\r\n    { id: 5, name: 'van den' },\r\n    { id: 6, name: 'den' },\r\n    { id: 7, name: 'ten' },\r\n    { id: 8, name: 'ter' },\r\n    { id: 9, name: 'te' },\r\n    { id: 10, name: \"van 't\" },\r\n    { id: 11, name: 'el' },\r\n    { id: 12, name: 'le' },\r\n    { id: 13, name: 'van het' },\r\n    { id: 14, name: \"in 't\" },\r\n    { id: 15, name: \"'t\" },\r\n    { id: 16, name: 'von' },\r\n    { id: 17, name: 'du' },\r\n    { id: 18, name: 'da' },\r\n    { id: 19, name: 'de la' },\r\n    { id: 20, name: 'la' },\r\n    { id: 21, name: 'der' },\r\n    { id: 22, name: 'van ter' },\r\n    { id: 23, name: \"op 't\" },\r\n    { id: 24, name: 'op den' },\r\n    { id: 25, name: 'op ten' },\r\n    { id: 26, name: 'op de' },\r\n];\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport MomentLocaleUtils, { formatDate, parseDate } from 'react-day-picker/moment';\r\nimport moment from 'moment';\r\nimport { get } from 'lodash';\r\n\r\nconst InputDate = ({\r\n    className,\r\n    id,\r\n    value,\r\n    required,\r\n    readOnly,\r\n    manualInput,\r\n    name,\r\n    disabledBefore,\r\n    disabledAfter,\r\n    onChangeAction,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n}) => {\r\n    const handleDayChange = date => {\r\n        // Convert date in correct value for database\r\n        const formattedDate = date ? moment(date).format('Y-MM-DD') : '';\r\n\r\n        onChangeAction(name, formattedDate);\r\n    };\r\n\r\n    const formattedDate = value ? moment(value).format('L') : '';\r\n    let disabledDays = {};\r\n    if (disabledBefore) disabledDays.before = new Date(disabledBefore);\r\n    if (disabledAfter) disabledDays.after = new Date(disabledAfter);\r\n\r\n    return (\r\n        <>\r\n            {/*{get(errors, name, '') && get(touched, name, '') && showErrorMessage ? (*/}\r\n            {get(errors, name, '') && showErrorMessage ? (\r\n                <>\r\n                    <small className={`${classNameErrorMessage}`}>{get(errors, name, '')}</small>\r\n                    <br />\r\n                </>\r\n            ) : null}\r\n            <DayPickerInput\r\n                id={id}\r\n                value={formattedDate}\r\n                onDayChange={handleDayChange}\r\n                formatDate={formatDate}\r\n                parseDate={parseDate}\r\n                dayPickerProps={{\r\n                    showWeekNumbers: true,\r\n                    locale: 'nl',\r\n                    firstDayOfWeek: 1,\r\n                    localeUtils: MomentLocaleUtils,\r\n                    disabledDays: disabledDays,\r\n                }}\r\n                inputProps={{\r\n                    className: `text-input content ${className}\r\n                     ${Boolean(manualInput) ? ' w-input' : ' w-input-date'}\r\n                     ${\r\n                         // Boolean(get(errors, name, '') && get(touched, name, '')) ? 'has-error mb-0' : ''\r\n                         Boolean(get(errors, name, '')) ? ' has-error mb-0' : ''\r\n                     } `,\r\n                    name: name,\r\n                    autoComplete: 'off',\r\n                    readOnly: Boolean(manualInput) ? readOnly : true,\r\n                    disabled: readOnly,\r\n                    placeholder: placeholder,\r\n                }}\r\n                required={required}\r\n                readOnly={readOnly}\r\n                placeholder={''}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputDate.defaultProps = {\r\n    className: '',\r\n    required: '',\r\n    readOnly: false,\r\n    manualInput: true,\r\n    value: null,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputDate.propTypes = {\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    onChangeAction: PropTypes.func,\r\n    required: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputDate;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport InputDate from '../../../components/form/InputDate';\r\nimport { FaInfoCircle } from 'react-icons/fa';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst DefaultContactPersonalEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // determine memberSince disabledBefore and after\r\n    let memberSinceDisabledBefore = '';\r\n    let memberSinceDisabledAfter = '';\r\n    if (initialContact.primaryAddress.primaryAddressEnergySupplier.energySupplierId) {\r\n        if (\r\n            initialContact.primaryAddress.primaryAddressEnergySupplier.memberSince &&\r\n            initialContact.primaryAddress.primaryAddressEnergySupplier.energySupplierId !==\r\n                values.primaryAddress.primaryAddressEnergySupplier.energySupplierId\r\n        ) {\r\n            memberSinceDisabledBefore = moment(initialContact.primaryAddress.primaryAddressEnergySupplier.memberSince)\r\n                .add(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        } else if (initialContact.primaryAddress.primaryAddressEnergySupplier.endDatePrevious) {\r\n            memberSinceDisabledBefore = moment(\r\n                initialContact.primaryAddress.primaryAddressEnergySupplier.endDatePrevious\r\n            )\r\n                .add(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        }\r\n        if (initialContact.primaryAddress.primaryAddressEnergySupplier.memberSinceNext) {\r\n            memberSinceDisabledAfter = moment(\r\n                initialContact.primaryAddress.primaryAddressEnergySupplier.memberSinceNext\r\n            )\r\n                .subtract(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        }\r\n    }\r\n\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.titleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={6}>\r\n                        {initialContact.disableChangeContactNameOnPortal ? (\r\n                            <>\r\n                                <FaInfoCircle\r\n                                    color={'blue'}\r\n                                    size={'15px'}\r\n                                    data-tip={\r\n                                        'Je neemt deel aan een project waarvan de deelnemingen op naam zijn uitgegeven.<br />' +\r\n                                        'Daarom kun je jouw naam niet zelf wijzigen.<br />' +\r\n                                        'Overige contactgegevens kun je wel zelf aanpassen.<br />' +\r\n                                        'Een wijziging van rekeningnummer wordt door ons gecontroleerd.<br />' +\r\n                                        'Heb je vragen of wil je jouw gegevens door de beheerder laten wijzigen?<br />' +\r\n                                        'Kijk in het menu onder \"Over ons\" voor contact gegevens.'\r\n                                    }\r\n                                    data-for={`contact-${initialContact.id}`}\r\n                                />\r\n                                <ReactTooltip\r\n                                    id={`contact-${initialContact.id}`}\r\n                                    effect=\"float\"\r\n                                    place=\"right\"\r\n                                    multiline={true}\r\n                                    aria-haspopup=\"true\"\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.initials\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"initials\"\r\n                                    placeholder={'Initialen'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.firstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name\"\r\n                                    placeholder={'Voornaam'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.lastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.lastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name\"\r\n                                    placeholder={'Achternaam'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel\r\n                    htmlFor=\"date_of_birth\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Geboortedatum\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.dateOfBirth\"\r\n                            render={({ field }) => (\r\n                                <InputDate\r\n                                    {...field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    onChangeAction={setFieldValue}\r\n                                    id=\"date_of_birth\"\r\n                                    placeholder={'Geboortedatum'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Adres\r\n                    {initialContact.blockChangeAddress ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Adres kan momenteel niet worden aangepast. Geef jouw adreswijziging per e-mail aan ons door.`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : initialContact.blockChangeAddressNumber ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode en huisnummer is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied met huisnummerreeks`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </FormLabel>\r\n                {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\r\n                    (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\r\n                    values.primaryAddress.postalCode.trim() == '') &&\r\n                (values.primaryAddress.street.trim() != '' ||\r\n                    values.primaryAddress.number.trim() != '' ||\r\n                    values.primaryAddress.addition.trim() != '' ||\r\n                    values.primaryAddress.postalCode.trim() != '' ||\r\n                    values.primaryAddress.city.trim() != '') ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"primaryAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress ||\r\n                                        initialContact.isParticipantSceProject ||\r\n                                        initialContact.isParticipantPcrProject\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel\r\n                    htmlFor=\"ean_electricity\"\r\n                    className={\r\n                        projectTypeCodeRef === 'postalcode_link_capital' ? 'field-label required' : 'field-label'\r\n                    }\r\n                >\r\n                    EAN nummer electriciteit\r\n                </FormLabel>\r\n                {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\r\n                    (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\r\n                    values.primaryAddress.postalCode.trim() == '') &&\r\n                values.primaryAddress.eanElectricity != null &&\r\n                values.primaryAddress.eanElectricity.trim() != '' ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                EAN nummer electriciteit wordt alleen opgeslagen als minimaal nummer en postcode zijn\r\n                                ingevuld bij adres.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"primaryAddress.eanElectricity\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"eanElectricity\"\r\n                                    placeholder={'EAN nummer electriciteit'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                    EAN nummer gas\r\n                </FormLabel>\r\n                {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\r\n                    (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\r\n                    values.primaryAddress.postalCode.trim() == '') &&\r\n                values.primaryAddress.eanGas != null &&\r\n                values.primaryAddress.eanGas.trim() != '' ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                EAN nummer gas wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld bij\r\n                                adres.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"primaryAddress.eanGas\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"eanGas\"\r\n                                    placeholder={'EAN nummer gas'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\r\n                            (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\r\n                            values.primaryAddress.postalCode.trim() == '') &&\r\n                        (values.primaryAddress.primaryAddressEnergySupplier.energySupplierId != null ||\r\n                            (values.primaryAddress.primaryAddressEnergySupplier.esNumber &&\r\n                                values.primaryAddress.primaryAddressEnergySupplier.esNumber.trim() != '') ||\r\n                            (values.primaryAddress.primaryAddressEnergySupplier.memberSince &&\r\n                                values.primaryAddress.primaryAddressEnergySupplier.memberSince.trim() != '')) ? (\r\n                            <Row>\r\n                                <Col xs={12} sm={12}>\r\n                                    <small className={'text-danger'}>\r\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als minimaal nummer\r\n                                        en postcode zijn ingevuld bij adres.\r\n                                    </small>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        {(!values.primaryAddress.primaryAddressEnergySupplier.memberSince ||\r\n                            values.primaryAddress.primaryAddressEnergySupplier.memberSince.trim() == '') &&\r\n                        ((values.primaryAddress.primaryAddressEnergySupplier.energySupplierId != null &&\r\n                            values.primaryAddress.primaryAddressEnergySupplier.energySupplierId.trim() != '') ||\r\n                            (values.primaryAddress.primaryAddressEnergySupplier.esNumber &&\r\n                                values.primaryAddress.primaryAddressEnergySupplier.esNumber.trim() != '') ||\r\n                            (values.primaryAddress.primaryAddressEnergySupplier.memberSince &&\r\n                                values.primaryAddress.primaryAddressEnergySupplier.memberSince.trim() != '')) ? (\r\n                            <Row>\r\n                                <Col xs={12} sm={12}>\r\n                                    <small className={'text-danger'}>\r\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als Klant bij\r\n                                        leverancier sinds is ingevuld.\r\n                                    </small>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"primaryAddress.primaryAddressEnergySupplier.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            customOnChange={e => {\r\n                                                setFieldValue(\r\n                                                    'primaryAddress.primaryAddressEnergySupplier.energySupplierId',\r\n                                                    e.target.value\r\n                                                );\r\n                                                setFieldValue(\r\n                                                    'primaryAddress.primaryAddressEnergySupplier.esNumber',\r\n                                                    ''\r\n                                                );\r\n                                                setFieldValue(\r\n                                                    'primaryAddress.primaryAddressEnergySupplier.memberSince',\r\n                                                    ''\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.primaryAddress.primaryAddressEnergySupplier &&\r\n                        values.primaryAddress.primaryAddressEnergySupplier.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryAddress.primaryAddressEnergySupplier.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryAddress.primaryAddressEnergySupplier.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    disabledBefore={memberSinceDisabledBefore}\r\n                                                    disabledAfter={memberSinceDisabledAfter}\r\n                                                    manualInput={false}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactPersonalEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\nimport { isEmpty } from 'lodash';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        person: Yup.object().shape({\r\n            lastName: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        iban: Yup.string()\r\n            .nullable()\r\n            .trim()\r\n            .test(\r\n                'iban',\r\n                'Ongeldige IBAN of gebruik geen spaties.',\r\n                value => ibantools.isValidIBAN(value) || isEmpty(value)\r\n            ),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        person: Yup.object().shape({\r\n            firstName: Yup.string()\r\n                .trim()\r\n                // .required('Verplicht'),\r\n                .test('initials-and-first-name-check', 'Voornaam of initialen verplicht', function(value) {\r\n                    if (value.trim() != '' || this.parent.initials.trim() != '') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }),\r\n            dateOfBirth: Yup.date()\r\n                .typeError('Verplicht of ongeldige datum')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht')\r\n            .test('iban', 'Ongeldige IBAN of gebruik geen spaties.', value => ibantools.isValidIBAN(value)),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        primaryAddress: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            primaryAddressEnergySupplier: Yup.object().shape({\r\n                energySupplierId: Yup.string()\r\n                    .nullable()\r\n                    .required('Verplicht'),\r\n                esNumber: Yup.string()\r\n                    .nullable()\r\n                    .trim()\r\n                    .required('Verplicht'),\r\n            }),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPostalCodeAndNumber: Yup.object().shape({\r\n        primaryAddress: Yup.object().shape({\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactPersonalView from './default-form-personal/View';\r\nimport DefaultContactPersonalEdit from './default-form-personal/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from './../../helpers/ValidationSchemaPersonal';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsPersonal({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaPersonal.validationSchemaBasic\r\n              .concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n              .concat(ValidationSchemaPersonal.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaPersonal.validationSchemaBasic.concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n        : ValidationSchemaPersonal.validationSchemaBasic;\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactPersonalView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsPersonal;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactOrganisationView({ portalSettings, initialContact }) {\r\n    const {\r\n        organisation = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        visitAddress,\r\n        postalAddress,\r\n        invoiceAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n        primaryOccupations,\r\n    } = initialContact;\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Bedrijfsnaam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Bedrijfsnaam'}>\r\n                        {organisation.name}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'KvK'}>\r\n                        {organisation.chamberOfCommerceNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'BTW nummer'}>\r\n                        {organisation.vatNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Website'}>\r\n                        {organisation.website}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? <em>({dateDidAgreeAvg ? moment(dateDidAgreeAvg).format('L') : ''})</em> : ''}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Bezoekadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {visitAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {visitAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {visitAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {visitAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {visitAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {visitAddress.country ? visitAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                        {visitAddress.eanElectricity}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                        {visitAddress.eanGas}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {visitAddress.primaryAddressEnergySupplier.energySupplier\r\n                            ? visitAddress.primaryAddressEnergySupplier.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                {visitAddress.primaryAddressEnergySupplier &&\r\n                visitAddress.primaryAddressEnergySupplier.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {visitAddress.primaryAddressEnergySupplier.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {visitAddress.primaryAddressEnergySupplier.memberSince\r\n                                    ? moment(visitAddress.primaryAddressEnergySupplier.memberSince).format('L')\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n\r\n                <FormLabel className={'field-label'}>Postadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {postalAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {postalAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {postalAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {postalAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {postalAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {postalAddress.country ? postalAddress.country.name : ''}\r\n                    </TextBlock>{' '}\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Nota adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {invoiceAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {invoiceAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {invoiceAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {invoiceAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {invoiceAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {invoiceAddress.country ? invoiceAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactOrganisationView;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport InputDate from '../../../components/form/InputDate';\r\nimport { FaInfoCircle } from 'react-icons/fa';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst DefaultContactOrganisationEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // determine memberSince disabledBefore and after\r\n    let memberSinceDisabledBefore = '';\r\n    let memberSinceDisabledAfter = '';\r\n    if (initialContact.visitAddress.primaryAddressEnergySupplier.energySupplierId) {\r\n        if (\r\n            initialContact.visitAddress.primaryAddressEnergySupplier.memberSince &&\r\n            initialContact.visitAddress.primaryAddressEnergySupplier.energySupplierId !==\r\n                values.visitAddress.primaryAddressEnergySupplier.energySupplierId\r\n        ) {\r\n            memberSinceDisabledBefore = moment(initialContact.visitAddress.primaryAddressEnergySupplier.memberSince)\r\n                .add(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        } else if (initialContact.visitAddress.primaryAddressEnergySupplier.endDatePrevious) {\r\n            memberSinceDisabledBefore = moment(initialContact.visitAddress.primaryAddressEnergySupplier.endDatePrevious)\r\n                .add(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        }\r\n        if (initialContact.visitAddress.primaryAddressEnergySupplier.memberSinceNext) {\r\n            memberSinceDisabledAfter = moment(initialContact.visitAddress.primaryAddressEnergySupplier.memberSinceNext)\r\n                .subtract(1, 'day')\r\n                .format('YYYY-MM-DD');\r\n        }\r\n    }\r\n\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.name\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"name\"\r\n                                    placeholder={'Naam'}\r\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        {initialContact.disableChangeContactNameOnPortal ? (\r\n                            <>\r\n                                <FaInfoCircle\r\n                                    color={'blue'}\r\n                                    size={'15px'}\r\n                                    data-tip={\r\n                                        'Je neemt deel aan een project waarvan de deelnemingen op naam zijn uitgegeven.<br />' +\r\n                                        'Daarom kun je jouw naam niet zelf wijzigen.<br />' +\r\n                                        'Overige contactgegevens kun je wel zelf aanpassen.<br />' +\r\n                                        'Een wijziging van rekeningnummer wordt door ons gecontroleerd.<br />' +\r\n                                        'Heb je vragen of wil je jouw gegevens door de beheerder laten wijzigen?<br />' +\r\n                                        'Kijk in het menu onder \"Over ons\" voor contact gegevens.'\r\n                                    }\r\n                                    data-for={`contact-${initialContact.id}`}\r\n                                />\r\n                                <ReactTooltip\r\n                                    id={`contact-${initialContact.id}`}\r\n                                    effect=\"float\"\r\n                                    place=\"right\"\r\n                                    multiline={true}\r\n                                    aria-haspopup=\"true\"\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.chamberOfCommerceNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"chamber_of_commerce_number\"\r\n                                    placeholder={'KvK'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.vatNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"vat_number\"\r\n                                    placeholder={'BTW nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.website\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"website\"\r\n                                    placeholder={'Website'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Bezoekadres\r\n                    {initialContact.blockChangeAddress ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Adres kan momenteel niet worden aangepast. Geef jouw adreswijziging per e-mail aan ons door.`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : initialContact.blockChangeAddressNumber ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode en huisnummer is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied met huisnummerreeks`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject ? (\r\n                        <>\r\n                            {' '}\r\n                            <FaInfoCircle\r\n                                color={'blue'}\r\n                                size={'15px'}\r\n                                data-tip={`Postcode is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied`}\r\n                                data-for={`participant-${initialContact.id}`}\r\n                            />\r\n                            <ReactTooltip\r\n                                id={`participant-${initialContact.id}`}\r\n                                effect=\"float\"\r\n                                place=\"bottom\"\r\n                                multiline={true}\r\n                                aria-haspopup=\"true\"\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </FormLabel>\r\n                {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\r\n                    (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\r\n                    values.visitAddress.postalCode.trim() == '') &&\r\n                (values.visitAddress.street.trim() != '' ||\r\n                    values.visitAddress.number.trim() != '' ||\r\n                    values.visitAddress.addition.trim() != '' ||\r\n                    values.visitAddress.postalCode.trim() != '' ||\r\n                    values.visitAddress.city.trim() != '') ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"visitAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={\r\n                                        initialContact.blockChangeAddress ||\r\n                                        initialContact.isParticipantSceProject ||\r\n                                        initialContact.isParticipantPcrProject\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                    disabled={initialContact.blockChangeAddress}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel\r\n                    htmlFor=\"ean_electricity\"\r\n                    className={\r\n                        projectTypeCodeRef === 'postalcode_link_capital' ? 'field-label required' : 'field-label'\r\n                    }\r\n                >\r\n                    EAN nummer electriciteit\r\n                </FormLabel>\r\n                {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\r\n                    (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\r\n                    values.visitAddress.postalCode.trim() == '') &&\r\n                values.visitAddress.eanElectricity != null &&\r\n                values.visitAddress.eanElectricity.trim() != '' ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                EAN nummer electriciteit wordt alleen opgeslagen als minimaal nummer en postcode zijn\r\n                                ingevuld bij bezoekadres.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"visitAddress.eanElectricity\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"ean_electricity\"\r\n                                    placeholder={'EAN nummer electriciteit'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                    EAN nummer gas\r\n                </FormLabel>\r\n                {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\r\n                    (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\r\n                    values.visitAddress.postalCode.trim() == '') &&\r\n                values.visitAddress.eanGas != null &&\r\n                values.visitAddress.eanGas.trim() != '' ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                EAN nummer gas wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld bij\r\n                                bezoekadres.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"visitAddress.eanGas\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"ean_gas\"\r\n                                    placeholder={'EAN nummer gas'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\r\n                            (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\r\n                            values.visitAddress.postalCode.trim() == '') &&\r\n                        (values.visitAddress.primaryAddressEnergySupplier.energySupplierId != null ||\r\n                            (values.visitAddress.primaryAddressEnergySupplier.esNumber &&\r\n                                values.visitAddress.primaryAddressEnergySupplier.esNumber.trim() != '') ||\r\n                            (values.visitAddress.primaryAddressEnergySupplier.memberSince &&\r\n                                values.visitAddress.primaryAddressEnergySupplier.memberSince.trim() != '')) ? (\r\n                            <Row>\r\n                                <Col xs={12} sm={12}>\r\n                                    <small className={'text-danger'}>\r\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als minimaal nummer\r\n                                        en postcode zijn ingevuld bij bezoekadres.\r\n                                    </small>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        {(!values.visitAddress.primaryAddressEnergySupplier.memberSince ||\r\n                            values.visitAddress.primaryAddressEnergySupplier.memberSince.trim() == '') &&\r\n                        ((values.visitAddress.primaryAddressEnergySupplier.energySupplierId != null &&\r\n                            values.visitAddress.primaryAddressEnergySupplier.energySupplierId.trim() != '') ||\r\n                            (values.visitAddress.primaryAddressEnergySupplier.esNumber &&\r\n                                values.visitAddress.primaryAddressEnergySupplier.esNumber.trim() != '') ||\r\n                            (values.visitAddress.primaryAddressEnergySupplier.memberSince &&\r\n                                values.visitAddress.primaryAddressEnergySupplier.memberSince.trim() != '')) ? (\r\n                            <Row>\r\n                                <Col xs={12} sm={12}>\r\n                                    <small className={'text-danger'}>\r\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als Klant bij\r\n                                        leverancier sinds is ingevuld.\r\n                                    </small>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"visitAddress.primaryAddressEnergySupplier.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            customOnChange={e => {\r\n                                                setFieldValue(\r\n                                                    'visitAddress.primaryAddressEnergySupplier.energySupplierId',\r\n                                                    e.target.value\r\n                                                );\r\n                                                setFieldValue('visitAddress.primaryAddressEnergySupplier.esNumber', '');\r\n                                                setFieldValue(\r\n                                                    'visitAddress.primaryAddressEnergySupplier.memberSince',\r\n                                                    ''\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.visitAddress.primaryAddressEnergySupplier &&\r\n                        values.visitAddress.primaryAddressEnergySupplier.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"visitAddress.primaryAddressEnergySupplier.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"visitAddress.primaryAddressEnergySupplier.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    disabledBefore={memberSinceDisabledBefore}\r\n                                                    disabledAfter={memberSinceDisabledAfter}\r\n                                                    manualInput={false}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Postadres\r\n                </FormLabel>\r\n                {((!isNaN(values.postalAddress.number) && values.postalAddress.number == 0) ||\r\n                    (isNaN(values.postalAddress.number) && values.postalAddress.number.trim() == '') ||\r\n                    values.postalAddress.postalCode.trim() == '') &&\r\n                (values.postalAddress.street.trim() != '' ||\r\n                    values.postalAddress.number.trim() != '' ||\r\n                    values.postalAddress.addition.trim() != '' ||\r\n                    values.postalAddress.postalCode.trim() != '' ||\r\n                    values.postalAddress.city.trim() != '') ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"postalAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Nota adres\r\n                </FormLabel>\r\n                {((!isNaN(values.invoiceAddress.number) && values.invoiceAddress.number == 0) ||\r\n                    (isNaN(values.invoiceAddress.number) && values.invoiceAddress.number.trim() == '') ||\r\n                    values.invoiceAddress.postalCode.trim() == '') &&\r\n                (values.invoiceAddress.street.trim() != '' ||\r\n                    values.invoiceAddress.number.trim() != '' ||\r\n                    values.invoiceAddress.addition.trim() != '' ||\r\n                    values.invoiceAddress.postalCode.trim() != '' ||\r\n                    values.invoiceAddress.city.trim() != '') ? (\r\n                    <Row>\r\n                        <Col xs={12} sm={12}>\r\n                            <small className={'text-danger'}>\r\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\r\n                            </small>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"invoiceAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactOrganisationEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\nimport { isEmpty } from 'lodash';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        organisation: Yup.object().shape({\r\n            name: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        postalAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n        invoiceAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        iban: Yup.string()\r\n            .nullable()\r\n            .trim()\r\n            .test(\r\n                'iban',\r\n                'Ongeldige IBAN of gebruik geen spaties.',\r\n                value => ibantools.isValidIBAN(value) || isEmpty(value)\r\n            ),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht')\r\n            .test('iban', 'Ongeldige IBAN of gebruik geen spaties.', value => ibantools.isValidIBAN(value)),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n        organisation: Yup.object().shape({\r\n            chamberOfCommerceNumber: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        visitAddress: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            primaryAddressEnergySupplier: Yup.object().shape({\r\n                energySupplierId: Yup.string()\r\n                    .nullable()\r\n                    .required('Verplicht'),\r\n                esNumber: Yup.string()\r\n                    .nullable()\r\n                    .trim()\r\n                    .required('Verplicht'),\r\n            }),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPostalCodeAndNumber: Yup.object().shape({\r\n        visitAddress: Yup.object().shape({\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .required('Verplicht')\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactOrganisationView from './default-form-organisation/View';\r\nimport DefaultContactOrganisationEdit from './default-form-organisation/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaOrganisation from './../../helpers/ValidationSchemaOrganisation';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsOrganisation({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic\r\n              .concat(ValidationSchemaOrganisation.validationSchemaAdditional)\r\n              .concat(ValidationSchemaOrganisation.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic.concat(\r\n              ValidationSchemaOrganisation.validationSchemaAdditional\r\n          )\r\n        : ValidationSchemaOrganisation.validationSchemaBasic;\r\n\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactOrganisationView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsOrganisation;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactDetailsPersonal from './Personal';\r\nimport ContactDetailsOrganisation from './Organisation';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst ContactDetails = function(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n    const [editForm, setEditForm] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const keys =\r\n            '?keys[]=portalName' +\r\n            '&keys[]=portalWebsite' +\r\n            '&keys[]=portalUrl' +\r\n            '&keys[]=responsibleUserId' +\r\n            '&keys[]=checkContactTaskResponsibleUserId' +\r\n            '&keys[]=linkPrivacyPolicy' +\r\n            '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n            '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n        PortalSettingsAPI.fetchPortalSettings(keys)\r\n            .then(payload => {\r\n                setPortalSettings({ ...payload.data });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ isLoading: false, hasError: true });\r\n            });\r\n\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n                props.updateNameSelectedContact(contactData.fullName);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, switchToView) {\r\n        const updatedContact = { ...contact, ...values, projectId: null };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                callFetchContact();\r\n                actions.setSubmitting(false);\r\n                switchToView();\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    const editButtonGroup = (\r\n        <ButtonGroup aria-label=\"Steps\" className={'float-right'}>\r\n            <Button\r\n                className={'w-button'}\r\n                size=\"sm\"\r\n                onClick={function() {\r\n                    setEditForm(true);\r\n                }}\r\n            >\r\n                Wijzig\r\n            </Button>\r\n        </ButtonGroup>\r\n    );\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <div className=\"content-container w-container\">\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                            <Link to={`/inschrijven-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Inschrijven projecten\r\n                                </Button>\r\n                            </Link>\r\n                            &nbsp;\r\n                            <Link to={`/inschrijvingen-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Huidige deelnames\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    {editForm ? (\r\n                        <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                    ) : (\r\n                        <Row>\r\n                            <Col>\r\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                            </Col>\r\n                            <Col>{editButtonGroup}</Col>\r\n                        </Row>\r\n                    )}\r\n                    <div className=\"w-form\" />\r\n                    {/* If contact is person */}\r\n                    {contact.typeId === 'person' ? (\r\n                        <ContactDetailsPersonal\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                    {/* If contact is organisation */}\r\n                    {contact.typeId === 'organisation' ? (\r\n                        <ContactDetailsOrganisation\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default function ContactDetailsWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact, updateNameSelectedContact }) => (\r\n                <ContactDetails\r\n                    {...props}\r\n                    currentSelectedContact={currentSelectedContact}\r\n                    updateNameSelectedContact={updateNameSelectedContact}\r\n                />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Field, FieldArray, Form, Formik } from 'formik';\r\nimport ButtonText from '../../components/button/ButtonText';\r\n\r\nconst MyAreasOfInterestForm = function({ handleSubmit, initialValues }) {\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            enableReinitialize={true}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                console.log(values);\r\n            }}\r\n            render={({ errors, touched, setFieldValue, isSubmitting, values }) => {\r\n                return (\r\n                    <Form id=\"email-form\" name=\"email-form\">\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <h6 className=\"heading-content\">Mijn interessegebieden</h6>\r\n                                <FieldArray\r\n                                    name=\"myAreasOfInterest\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.myAreasOfInterest &&\r\n                                                values.myAreasOfInterest.map((myAreaOfInterest, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`myAreasOfInterest[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={myAreaOfInterest.name}\r\n                                                                        checked={myAreaOfInterest.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={myAreaOfInterest.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {myAreaOfInterest.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Deelname</h6>\r\n                                <FieldArray\r\n                                    name=\"participations\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.participations &&\r\n                                                values.participations.map((participation, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`participations[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={participation.name}\r\n                                                                        checked={participation.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={participation.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {participation.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Algemeen</h6>\r\n                                <FieldArray\r\n                                    name=\"generalOptions\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.generalOptions &&\r\n                                                values.generalOptions.map((generalOption, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`generalOptions[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={generalOption.name}\r\n                                                                        checked={generalOption.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={generalOption.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {generalOption.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <ButtonText\r\n                                    buttonText={'Opslaan'}\r\n                                    buttonClassName={'save-btn w-button'}\r\n                                    type={'submit'}\r\n                                    loading={isSubmitting}\r\n                                />\r\n                            </div>\r\n                            <div className=\"w-col w-col-6\" />\r\n                        </div>\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterestForm;\r\n","import React from 'react';\r\nimport MyAreasOfInterestForm from './Form';\r\n\r\nconst MyAreasOfInterest = function() {\r\n    // TODO Fetch values from API\r\n    const initialValues = {\r\n        myAreasOfInterest: [\r\n            { id: 4, name: 'Gevel isolatie', value: true },\r\n            { id: 5, name: 'Zonnepanelen', value: false },\r\n            { id: 6, name: 'Dak isolatie', value: false },\r\n            { id: 7, name: 'Zonneboiler', value: true },\r\n        ],\r\n        participations: [{ id: 2, name: 'Test groep', value: true }, { id: 3, name: 'De leuke mensen', value: false }],\r\n        generalOptions: [{ id: 1, name: 'Test algemeen groep', value: false }],\r\n    };\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            <div className=\"content-container w-container\">\r\n                <h1 className=\"content-heading\">Instellingen</h1>\r\n                <div className=\"w-form\" />\r\n                <MyAreasOfInterestForm initialValues={initialValues} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterest;\r\n","export default amount => {\r\n    if (!amount) amount = 0;\r\n    // if (isNaN(amount)) {\r\n    //     amount = amount.replace(',', '.');\r\n    // }\r\n    amount = parseFloat(amount * 100) / 100;\r\n\r\n    if (isNaN(amount)) return 'Ongeldig bedrag';\r\n\r\n    return `€ ${amount.toLocaleString('nl', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n    })}`;\r\n};\r\n","export default function(project, amountOptioned, participationsOptioned) {\r\n    let transactionCosts = 0;\r\n    let varAmountOptioned = amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\r\n    let varParticipationsOptioned = participationsOptioned ? parseFloat(participationsOptioned).toFixed(0) : 0;\r\n    switch (project.transactionCostsCodeRef) {\r\n        case 'amount-once':\r\n            transactionCosts = project.transactionCostsAmount;\r\n            break;\r\n        case 'amount':\r\n            if (project.projectType.codeRef === 'loan') {\r\n                transactionCosts = project.transactionCostsAmount;\r\n            } else {\r\n                transactionCosts = project.transactionCostsAmount * varParticipationsOptioned;\r\n            }\r\n            break;\r\n        case 'percentage':\r\n            let amount = 0;\r\n            if (project.projectType.codeRef === 'loan') {\r\n                amount = varAmountOptioned;\r\n            } else {\r\n                amount = varParticipationsOptioned * project.currentBookWorth;\r\n            }\r\n            if (amount != 0) {\r\n                if (project.transactionCostsAmount3 !== null && amount >= project.transactionCostsAmount3) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage3) / 100).toFixed(2));\r\n                } else if (project.transactionCostsAmount2 !== null && amount >= project.transactionCostsAmount2) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage2) / 100).toFixed(2));\r\n                } else if (project.transactionCostsAmount !== null && amount >= project.transactionCostsAmount) {\r\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage) / 100).toFixed(2));\r\n                } else {\r\n                    transactionCosts = 0;\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            transactionCosts = 0;\r\n    }\r\n    if (project.transactionCostsCodeRef !== 'none') {\r\n        if (project.transactionCostsAmountMin !== null && transactionCosts < project.transactionCostsAmountMin) {\r\n            transactionCosts = project.transactionCostsAmountMin;\r\n        }\r\n        if (project.transactionCostsAmountMax !== null && transactionCosts > project.transactionCostsAmountMax) {\r\n            transactionCosts = project.transactionCostsAmountMax;\r\n        }\r\n    }\r\n\r\n    return transactionCosts;\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst InputTextCurrency = ({\r\n    field,\r\n    type,\r\n    className,\r\n    id,\r\n    readOnly,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <input\r\n                type={type}\r\n                className={`text-input w-input ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                value={field.value.toString().replace('.', ',')}\r\n                readOnly={readOnly}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputTextCurrency.defaultProps = {\r\n    type: 'text',\r\n    className: 'content',\r\n    readOnly: false,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputTextCurrency.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputTextCurrency;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\nimport InputTextCurrency from '../../../components/form/InputTextCurrency';\r\n\r\nfunction StepOneLoan({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        amountOptioned: Yup.string()\r\n            .required('Verplicht')\r\n            .transform(function(value, originalvalue) {\r\n                return value ? value.replace(',', '.') : 0;\r\n            })\r\n            .test(\r\n                'amountOptioned',\r\n                'Minimum van ' + project.minAmountLoan + ' nodig',\r\n                value => value >= project.minAmountLoan\r\n            )\r\n            .test(\r\n                'amountOptioned',\r\n                'Maximum van ' + project.maxAmountLoan + ' bereikt',\r\n                value => value <= project.maxAmountLoan\r\n            )\r\n            .matches(/^\\s*(?=.*[1-9])\\d*(?:\\.\\d{1,2})?\\s*$/, 'Fout bedrag'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function setAmountOptioned(amountOptioned) {\r\n        return amountOptioned ? amountOptioned.toString().replace(',', '.') : '';\r\n    }\r\n    function calculateAmount(amountOptioned) {\r\n        return amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(amountOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, amountOptioned, null);\r\n    }\r\n    function calculateTotalAmount(amountOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(amountOptioned) + calculateTransactionCostsAmount(amountOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amountOptioned: setAmountOptioned(values.amountOptioned),\r\n                    amount: calculateAmount(values.amountOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.amountOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.amountOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimaal bedrag</FormLabel>\r\n                                <TextBlock>{project.minAmountLoan}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximaal bedrag</FormLabel>\r\n                                <TextBlock>{project.maxAmountLoan}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>In te leggen bedrag</Form.Label>\r\n                                <Field\r\n                                    name=\"amountOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputTextCurrency\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"amount_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.amountOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.amountOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(values.amountOptioned, values.choiceMembership)\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneLoan;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOneObligation({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Huidige hoofdsom per obligatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal obligaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneObligation;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOneCapital({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal participaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>\r\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                </FormLabel>\r\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n                        {project.showQuestionAboutMembership ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            {contactProjectData.belongsToMembershipGroup\r\n                                                ? contactProjectData.textIsMemberMerged\r\n                                                : contactProjectData.textIsNoMemberMerged}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!contactProjectData.belongsToMembershipGroup ? (\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <Field\r\n                                                name=\"choiceMembership\"\r\n                                                render={({ field }) => (\r\n                                                    <>\r\n                                                        {get(errors, field.name, '') &&\r\n                                                            get(touched, field.name, '') && (\r\n                                                                <small className=\"text-danger\">\r\n                                                                    {get(errors, field.name, '')}\r\n                                                                </small>\r\n                                                            )}\r\n                                                        <div className=\"form-check\">\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_yes\"\r\n                                                                    checked={field.value === 1}\r\n                                                                    value={1}\r\n                                                                    onChange={() =>\r\n                                                                        setFieldValue('choiceMembership', 1)\r\n                                                                    }\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                            </label>\r\n                                                            <label className=\"radio-inline\">\r\n                                                                <input\r\n                                                                    type=\"radio\"\r\n                                                                    {...field}\r\n                                                                    id=\"choice_membership_no\"\r\n                                                                    checked={field.value === 2}\r\n                                                                    value={2}\r\n                                                                    onChange={() => {\r\n                                                                        setFieldValue('choiceMembership', 2);\r\n                                                                    }}\r\n                                                                />\r\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </>\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {project.transactionCostsCodeRef !== 'none' ? (\r\n                            <>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTransactionCostsAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                    <Col xs={12} md={6}>\r\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                        <TextBlock>\r\n                                            {MoneyPresenter(\r\n                                                calculateTotalAmount(\r\n                                                    values.participationsOptioned,\r\n                                                    values.choiceMembership\r\n                                                )\r\n                                            )}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\r\n                                            stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneCapital;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { get, isEmpty } from 'lodash';\r\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\r\n\r\nfunction StepOnePcr({\r\n    portalSettings,\r\n    next,\r\n    project,\r\n    contactProjectData,\r\n    initialContact,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n}) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .integer('Alleen gehele aantallen')\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrYearlyPowerKwhConsumption: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrPostalCode: Yup.string()\r\n            .min(4, 'Minimum van ${min} postcode cijfers nodig')\r\n            .required('Verplicht')\r\n            .test(\r\n                'pcrPostalCode',\r\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                value =>\r\n                    value &&\r\n                    (!project.checkPostalcodeLink ||\r\n                        (project.postalcodeLink && project.postalcodeLink.includes(value.substring(0, 4))))\r\n            ),\r\n        pcrNumberOfSolarPanels: Yup.number().typeError('Alleen nummers'),\r\n        pcrInputGeneratedNumberOfKwh: Yup.number().typeError('Alleen nummers'),\r\n        choiceMembership: Yup.number().test(\r\n            'choiceMembership',\r\n            'Verplicht',\r\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\r\n        ),\r\n    });\r\n\r\n    // const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = 0.8;\r\n    const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = portalSettings['pcrPowerKwhConsumptionPercentage'];\r\n    // const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = 250;\r\n    const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = portalSettings['pcrGeneratingCapacityOneSolorPanel'];\r\n\r\n    function calculateEstimatedGeneratedNumberOfKwh(values) {\r\n        return values.pcrNumberOfSolarPanels\r\n            ? values.pcrNumberOfSolarPanels * PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n            : 0;\r\n    }\r\n    function calculateGeneratedNumberOfKwh(values) {\r\n        return values.pcrInputGeneratedNumberOfKwh && values.pcrInputGeneratedNumberOfKwh > 0\r\n            ? values.pcrInputGeneratedNumberOfKwh\r\n            : calculateEstimatedGeneratedNumberOfKwh(values)\r\n            ? calculateEstimatedGeneratedNumberOfKwh(values)\r\n            : 0;\r\n    }\r\n    function calculatePowerKwhConsumption(values) {\r\n        let extraPowerKwhConsumption =\r\n            values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values) > 0\r\n                ? values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values)\r\n                : 0;\r\n        return extraPowerKwhConsumption;\r\n    }\r\n    function calculateAdviseMaxNumberOfParticipations(values) {\r\n        let pcrAdviseMaxNumberOfParticipations =\r\n            calculatePowerKwhConsumption(values) > 0\r\n                ? Math.ceil(\r\n                      (calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE) /\r\n                          PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n                  )\r\n                : 0;\r\n\r\n        if (pcrAdviseMaxNumberOfParticipations < project.minParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.minParticipations;\r\n        } else if (pcrAdviseMaxNumberOfParticipations > project.maxParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.maxParticipations;\r\n        }\r\n        return pcrAdviseMaxNumberOfParticipations;\r\n    }\r\n\r\n    function calculateAmount(participationsOptioned) {\r\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\r\n    }\r\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\r\n        if (!project.useTransactionCostsWithMembership) {\r\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\r\n                return 0;\r\n            }\r\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\r\n                return 0;\r\n            }\r\n        }\r\n        return calculateTransactionCosts(project, null, participationsOptioned);\r\n    }\r\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\r\n        return (\r\n            calculateAmount(participationsOptioned) +\r\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\r\n        ).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({\r\n                    ...values,\r\n                    powerKwhConsumption: calculatePowerKwhConsumption(values),\r\n                    amount: calculateAmount(values.participationsOptioned),\r\n                    transactionCostsAmount: calculateTransactionCostsAmount(\r\n                        values.participationsOptioned,\r\n                        values.choiceMembership\r\n                    ),\r\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\r\n                });\r\n                next();\r\n            }}\r\n            initialValues={{\r\n                ...initialRegisterValues,\r\n            }}\r\n            enableReinitialize={true}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => {\r\n                let pcrEstimatedGeneratedNumberOfKwh = calculateEstimatedGeneratedNumberOfKwh(values);\r\n                let powerKwhConsumption = Math.ceil(\r\n                    calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE\r\n                );\r\n                let pcrAdviseMaxNumberOfParticipations = calculateAdviseMaxNumberOfParticipations(values);\r\n                return (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                                </Col>\r\n\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\r\n                                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>Je postcode</Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrPostalCode\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_postal_code\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>Deelnemende postcodes</Form.Label>\r\n                                    <TextBlock>{project.postalcodeLink}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Je (geschatte) jaarlijks verbruik (in kWh)\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrYearlyPowerKwhConsumption\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_yearly_power_kwh_consumption\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Heb je al zonnepanelen op je eigen dak of doe je mee in een ander project?\r\n                                    </Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrHasSolarPanels\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => setFieldValue('pcrHasSolarPanels', 'Y')}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrHasSolarPanels', 'N');\r\n                                                                setFieldValue('pcrNumberOfSolarPanels', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrHasSolarPanels === 'Y' ? (\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <Form.Label className={'field-label'}>\r\n                                            Hoeveel zonnepanelen wekken al stroom voor je op\r\n                                        </Form.Label>\r\n                                        <Field\r\n                                            name=\"pcrNumberOfSolarPanels\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"pcr_number_of_solar_panels\"\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Wij schatten in dat je panelen jaarlijks opwekken\r\n                                    </Form.Label>\r\n                                    <TextBlock id=\"pcr_input_estimated_generated_number_of_kwh\">\r\n                                        {pcrEstimatedGeneratedNumberOfKwh} kWh\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>Klopt het geschatte opbrengst?</Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrEstimatedRevenueOk\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrEstimatedRevenueOk', 'Y');\r\n                                                                setFieldValue('pcrInputGeneratedNumberOfKwh', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => setFieldValue('pcrEstimatedRevenueOk', 'N')}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrEstimatedRevenueOk === 'N' ? (\r\n                                <>\r\n                                    <Row>\r\n                                        <Col xs={12} md={6}>\r\n                                            <Form.Label className={'field-label'}>\r\n                                                Wat is de jaarlijkse opbrengst van jouw panelen (in kWh)\r\n                                            </Form.Label>\r\n                                            <Field\r\n                                                name=\"pcrInputGeneratedNumberOfKwh\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"pcr_input_generated_number_of_kwh\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <p>\r\n                                        We adviseren tot {PCR_POWER_KWH_CONSUMPTION_PERCENTAGE * 100}% van je jaarlijks\r\n                                        verbruik minus de jaarlijkse opbrengsten (in jouw geval {powerKwhConsumption}{' '}\r\n                                        kWh) te dekken met participaties. In het veld hier direct onder is voor je\r\n                                        uitgerekend hoeveel participaties dat zijn. Het is een advies, je mag er ook\r\n                                        meer kopen. Dit kan echter slecht zijn voor je rendement.\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Advies maximaal aantal participaties\r\n                                    </Form.Label>\r\n                                    <TextBlock>{pcrAdviseMaxNumberOfParticipations}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Gewenst aantal participaties\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"participationsOptioned\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"participations_optioned\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>\r\n                                        {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\r\n                                    </FormLabel>\r\n                                    <TextBlock>\r\n                                        {MoneyPresenter(calculateAmount(values.participationsOptioned))}\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n                            {project.showQuestionAboutMembership ? (\r\n                                <>\r\n                                    <hr />\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <p>\r\n                                                {contactProjectData.belongsToMembershipGroup\r\n                                                    ? contactProjectData.textIsMemberMerged\r\n                                                    : contactProjectData.textIsNoMemberMerged}\r\n                                            </p>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {!contactProjectData.belongsToMembershipGroup ? (\r\n                                        <Row>\r\n                                            <Col xs={12} md={10}>\r\n                                                <Field\r\n                                                    name=\"choiceMembership\"\r\n                                                    render={({ field }) => (\r\n                                                        <>\r\n                                                            {get(errors, field.name, '') &&\r\n                                                                get(touched, field.name, '') && (\r\n                                                                    <small className=\"text-danger\">\r\n                                                                        {get(errors, field.name, '')}\r\n                                                                    </small>\r\n                                                                )}\r\n                                                            <div className=\"form-check\">\r\n                                                                <label className=\"radio-inline\">\r\n                                                                    <input\r\n                                                                        type=\"radio\"\r\n                                                                        {...field}\r\n                                                                        id=\"choice_membership_yes\"\r\n                                                                        checked={field.value === 1}\r\n                                                                        value={1}\r\n                                                                        onChange={() =>\r\n                                                                            setFieldValue('choiceMembership', 1)\r\n                                                                        }\r\n                                                                    />\r\n                                                                    &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                                </label>\r\n                                                                <label className=\"radio-inline\">\r\n                                                                    <input\r\n                                                                        type=\"radio\"\r\n                                                                        {...field}\r\n                                                                        id=\"choice_membership_no\"\r\n                                                                        checked={field.value === 2}\r\n                                                                        value={2}\r\n                                                                        onChange={() => {\r\n                                                                            setFieldValue('choiceMembership', 2);\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                                </label>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    ) : null}\r\n                                </>\r\n                            ) : null}\r\n\r\n                            {project.transactionCostsCodeRef !== 'none' ? (\r\n                                <>\r\n                                    <hr />\r\n                                    <Row>\r\n                                        <Col xs={12} md={6}>\r\n                                            <FormLabel className={'field-label'}>\r\n                                                {project.textTransactionCosts}\r\n                                            </FormLabel>\r\n                                            <TextBlock>\r\n                                                {MoneyPresenter(\r\n                                                    calculateTransactionCostsAmount(\r\n                                                        values.participationsOptioned,\r\n                                                        values.choiceMembership\r\n                                                    )\r\n                                                )}\r\n                                            </TextBlock>\r\n                                        </Col>\r\n                                        <Col xs={12} md={6}>\r\n                                            <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\r\n                                            <TextBlock>\r\n                                                {MoneyPresenter(\r\n                                                    calculateTotalAmount(\r\n                                                        values.participationsOptioned,\r\n                                                        values.choiceMembership\r\n                                                    )\r\n                                                )}\r\n                                            </TextBlock>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            Ga naar gegevens\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOnePcr;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DefaultContactPersonalEdit from '../../contact-details/default-form-personal/Edit';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from '../../../helpers/ValidationSchemaPersonal';\r\nimport ValidationSchemaOrganisation from '../../../helpers/ValidationSchemaOrganisation';\r\nimport DefaultContactOrganisationEdit from '../../contact-details/default-form-organisation/Edit';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepTwo({ portalSettings, previous, next, project, initialContact, handleSubmitContactValues }) {\r\n    initialContact.isParticipant = true;\r\n    const typeContact = initialContact.typeId ? initialContact.typeId : null;\r\n\r\n    let validationSchema = null;\r\n    let validationSchemaBasic = null;\r\n    let validationSchemaAdditional = null;\r\n    let validationSchemaPcrAdditional = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            validationSchemaBasic = ValidationSchemaPersonal.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaPersonal.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n            }\r\n            break;\r\n        case 'organisation':\r\n            validationSchemaBasic = ValidationSchemaOrganisation.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaOrganisation.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n            }\r\n            break;\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactValues(values, actions, next);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    // console.log(errors);\r\n                    return (\r\n                        <Form>\r\n                            {/* If contact is person */}\r\n                            {initialContact.typeId === 'person' ? (\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            {/* If contact is organisation */}\r\n                            {initialContact.typeId === 'organisation' ? (\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan en doorgaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepTwo;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepThree({ project, contactProjectData, previous, next, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        didAcceptAgreement: Yup.bool().test(\r\n            'didAcceptAgreement',\r\n            'Je dient akkoord te gaan met de voorwaarden!',\r\n            value => value === true\r\n        ),\r\n        didUnderstandInfo: Yup.bool().test(\r\n            'didUnderstandInfo',\r\n            'Je dient te bevestigen, dat de project informatie gelezen en begrepen is!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                onSubmit={function(values, actions) {\r\n                    handleSubmitRegisterValues(values);\r\n                    next();\r\n                }}\r\n                initialValues={initialRegisterValues}\r\n            >\r\n                {({ handleSubmit, touched, errors }) => (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <p\r\n                                        dangerouslySetInnerHTML={{\r\n                                            __html: contactProjectData.textAgreeTermsMerged.replace(/\\n/g, '<br />'),\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didAcceptAgreement\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_accept_agreement\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_accept_agreement\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                    dangerouslySetInnerHTML={{\r\n                                                        __html: contactProjectData.textLinkAgreeTermsMerged.replace(\r\n                                                            /\\n/g,\r\n                                                            '<br />'\r\n                                                        ),\r\n                                                    }}\r\n                                                />\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didUnderstandInfo\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_understand_info\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_understand_info\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                    dangerouslySetInnerHTML={{\r\n                                                        __html: contactProjectData.textLinkUnderstandInfoMerged.replace(\r\n                                                            /\\n/g,\r\n                                                            '<br />'\r\n                                                        ),\r\n                                                    }}\r\n                                                />\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            {project.usesMollie ? (\r\n                                                <>Ga naar bevestigen en betalen</>\r\n                                            ) : (\r\n                                                <>Ga naar bevestigen</>\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepThree;\r\n","import React from 'react';\r\nimport Frame from 'react-frame-component';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ViewHtmlAsText = ({ id, value }) => {\r\n    const createMarkup = () => {\r\n        return { __html: value };\r\n    };\r\n\r\n    return (\r\n        <Frame>\r\n            <div id={id} dangerouslySetInnerHTML={createMarkup()} />\r\n        </Frame>\r\n    );\r\n};\r\n\r\nViewHtmlAsText.defaultProps = {\r\n    value: '',\r\n};\r\n\r\nViewHtmlAsText.propTypes = {\r\n    id: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default ViewHtmlAsText;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    createParticipantProject: registerValues => {\r\n        const requestUrl = `/project/participant/create`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n\r\n    show: id => {\r\n        const requestUrl = `/project/participant/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport ViewHtmlAsText from '../../../components/general/ViewHtmlAsText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction StepFour({ project, contactProjectData, previous, next, registerValues, setSucces }) {\r\n    const [contactDocument, setContactDocument] = useState('');\r\n    const [isLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        (function callFetchContact() {\r\n            setLoading(true);\r\n            ContactAPI.previewDocument(registerValues)\r\n                .then(payload => {\r\n                    setContactDocument(payload.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [registerValues]);\r\n\r\n    function handleSubmitRegisterValues(actions, next) {\r\n        ParticipantProjectAPI.createParticipantProject(registerValues)\r\n            .then(payload => {\r\n                // console.log(payload);\r\n                actions.setSubmitting(false);\r\n\r\n                /**\r\n                 * Als Mollie is ingeschakeld voor het project wordt er een betaallink gereturned.\r\n                 * In dat geval huidige scherm verlaten en door naar mollie.\r\n                 */\r\n                if (payload.data.econobisPaymentLink) {\r\n                    window.location.href = payload.data.econobisPaymentLink;\r\n                    return;\r\n                }\r\n\r\n                setSucces(true);\r\n                next();\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        didAgreeRegistration: Yup.bool().test(\r\n            'didAgreeRegistration',\r\n            'Je dient akkoord te gaan met het inschrijfformulier!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    let contactDocumentOk = false;\r\n    if (!isEmpty('' + contactDocument)) {\r\n        contactDocumentOk = true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : !contactDocumentOk ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>Er ging iets mis bij het maken van het bevestingsformulier voorbeeld.</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                    Terug\r\n                                </Button>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : (\r\n                <Formik\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={function(values, actions) {\r\n                        handleSubmitRegisterValues(actions, next);\r\n                    }}\r\n                    initialValues={{ didAgreeRegistration: false }}\r\n                >\r\n                    {({ handleSubmit, touched, errors, isSubmitting, status }) => (\r\n                        <>\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <FormLabel className={'field-label'}>Controleer de inschrijving</FormLabel>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ViewHtmlAsText value={contactDocument} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={3}>\r\n                                        <FormLabel className={'field-label-text'}>\r\n                                            {project.transactionCostsCodeRef === 'none'\r\n                                                ? 'Te betalen bedrag'\r\n                                                : 'Bedrag'}\r\n                                        </FormLabel>\r\n                                    </Col>\r\n                                    <Col xs={12} md={3}>\r\n                                        <TextBlock className={'float-right'}>\r\n                                            {MoneyPresenter(registerValues.amount)}\r\n                                        </TextBlock>\r\n                                    </Col>\r\n                                </Row>\r\n                                {project.transactionCostsCodeRef !== 'none' ? (\r\n                                    <>\r\n                                        <Row>\r\n                                            <Col xs={12} md={3}>\r\n                                                <FormLabel className={'field-label-text'}>\r\n                                                    {project.textTransactionCosts}\r\n                                                </FormLabel>\r\n                                            </Col>\r\n                                            <Col xs={12} md={3}>\r\n                                                <TextBlock className={'float-right'}>\r\n                                                    {MoneyPresenter(registerValues.transactionCostsAmount)}\r\n                                                </TextBlock>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col xs={12} md={3}>\r\n                                                <FormLabel className={'field-label-text'}>Totaal te betalen</FormLabel>\r\n                                            </Col>\r\n                                            <Col xs={12} md={3}>\r\n                                                <TextBlock className={'float-right'}>\r\n                                                    {MoneyPresenter(registerValues.totalAmount)}\r\n                                                </TextBlock>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </>\r\n                                ) : null}\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p\r\n                                            dangerouslySetInnerHTML={{\r\n                                                __html: contactProjectData.textAcceptAgreementMerged.replace(\r\n                                                    /\\n/g,\r\n                                                    '<br />'\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <Field\r\n                                            name=\"didAgreeRegistration\"\r\n                                            render={({ field }) => (\r\n                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                    <input\r\n                                                        type=\"checkbox\"\r\n                                                        {...field}\r\n                                                        id=\"did_agree_registration\"\r\n                                                        checked={field.value}\r\n                                                        className=\"w-checkbox-input checkbox\"\r\n                                                    />\r\n                                                    <span\r\n                                                        htmlFor=\"did_agree_registration\"\r\n                                                        className=\"checkbox-label w-form-label\"\r\n                                                    >\r\n                                                        {contactProjectData.textAcceptAgreementQuestionMerged}\r\n                                                    </span>\r\n                                                    {touched[field.name] && errors[field.name] ? (\r\n                                                        <div className={'error-message text-danger'}>\r\n                                                            {errors[field.name]}\r\n                                                        </div>\r\n                                                    ) : null}\r\n                                                </label>\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                                Terug\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met verwerken\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        {project.usesMollie ? (\r\n                                                            <>Betaal en bevestig de inschrijving</>\r\n                                                        ) : (\r\n                                                            <>Bevestig inschrijving</>\r\n                                                        )}\r\n                                                    </>\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                    volgende stap!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                                {status && status.message ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                    {status.message}\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        </>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StepFour;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport { Form } from 'formik';\r\n\r\nfunction StepFive({ contactProjectData }) {\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    {contactProjectData.textRegistrationFinishedMerged.split('\\n').map((item, key) => {\r\n                        return (\r\n                            <span key={key}>\r\n                                {item}\r\n                                <br />\r\n                            </span>\r\n                        );\r\n                    })}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    <ButtonGroup className=\"float-right\">\r\n                        <Link to={`/inschrijvingen-projecten`}>\r\n                            <Button className={'w-button'} size=\"sm\">\r\n                                Naar mijn huidige deelnames\r\n                            </Button>\r\n                        </Link>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepFive;\r\n","import React from 'react';\r\nimport StepOneLoan from './StepOneLoan';\r\nimport StepOneObligation from './StepOneObligation';\r\nimport StepOneCapital from './StepOneCapital';\r\nimport StepOnePcr from './StepOnePcr';\r\nimport StepTwo from './StepTwo';\r\nimport StepThree from './StepThree';\r\nimport StepFour from './StepFour';\r\nimport StepFive from './StepFive';\r\nimport { isEmpty } from 'lodash';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction Steps({\r\n    portalSettings,\r\n    currentStep,\r\n    previous,\r\n    next,\r\n    project,\r\n    contactProjectData,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    if (isEmpty(project)) {\r\n        return (\r\n            <Container className={'content-section'}>\r\n                <>\r\n                    <p>Fout bij ophalen project. Inschrijving niet (meer) mogelijk op dit moment.</p>\r\n                </>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    switch (currentStep) {\r\n        case 1:\r\n            switch (project.projectType.codeRef) {\r\n                case 'loan':\r\n                    return (\r\n                        <StepOneLoan\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'obligation':\r\n                    return (\r\n                        <StepOneObligation\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'capital':\r\n                    return (\r\n                        <StepOneCapital\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'postalcode_link_capital':\r\n                    return (\r\n                        <StepOnePcr\r\n                            portalSettings={portalSettings}\r\n                            next={next}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialContact={initialContact}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                default:\r\n                    return null;\r\n            }\r\n\r\n        case 2:\r\n            return (\r\n                <StepTwo\r\n                    portalSettings={portalSettings}\r\n                    previous={previous}\r\n                    next={next}\r\n                    project={project}\r\n                    initialContact={initialContact}\r\n                    handleSubmitContactValues={handleSubmitContactValues}\r\n                />\r\n            );\r\n        case 3:\r\n            return (\r\n                <StepThree\r\n                    project={project}\r\n                    contactProjectData={contactProjectData}\r\n                    previous={previous}\r\n                    next={next}\r\n                    initialRegisterValues={initialRegisterValues}\r\n                    handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                />\r\n            );\r\n        case 4:\r\n            return (\r\n                <StepFour\r\n                    project={project}\r\n                    contactProjectData={contactProjectData}\r\n                    previous={previous}\r\n                    next={next}\r\n                    registerValues={initialRegisterValues}\r\n                    setSucces={setSucces}\r\n                />\r\n            );\r\n        case 5:\r\n            return <StepFive contactProjectData={contactProjectData} />;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default Steps;\r\n","import React from 'react';\r\nimport Steps from './steps';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction MasterForm({\r\n    portalSettings,\r\n    project,\r\n    contactProjectData,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    const [currentStep, setStep] = React.useState(1);\r\n\r\n    function previous() {\r\n        setStep(currentStep <= 2 ? 1 : currentStep - 1);\r\n    }\r\n\r\n    function next() {\r\n        setStep(currentStep >= 4 ? 5 : currentStep + 1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {currentStep <= 4 ? (\r\n                <Row className={'mb-4'}>\r\n                    <Col>\r\n                        <div className={'arrow-steps clearfix'}>\r\n                            <div className={`step ${currentStep === 1 ? 'current' : ''}`}>1. Inschrijven</div>\r\n                            <div className={`step ${currentStep === 2 ? 'current' : ''}`}>2. Gegevens</div>\r\n                            <div className={`step ${currentStep === 3 ? 'current' : ''}`}>3. Voorwaarden</div>\r\n                            <div className={`step ${currentStep === 4 ? 'current' : ''}`}>\r\n                                {\r\n                                    project.usesMollie ? (\r\n                                        <>4. Bevestigen en betalen</>\r\n                                    ) : (\r\n                                        <>4. Bevestigen</>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            ) : null}\r\n            <Steps\r\n                portalSettings={portalSettings}\r\n                currentStep={currentStep}\r\n                previous={previous}\r\n                next={next}\r\n                project={project}\r\n                contactProjectData={contactProjectData}\r\n                initialRegisterValues={initialRegisterValues}\r\n                handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                initialContact={initialContact}\r\n                handleSubmitContactValues={handleSubmitContactValues}\r\n                setSucces={setSucces}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MasterForm;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../api/project/ProjectAPI';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport MasterForm from './MasterForm';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport axios from 'axios';\r\nimport { ThemeSettingsContext } from '../../context/ThemeSettingsContext';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction RegisterProject({ match, currentSelectedContact }) {\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n\r\n    const initialRegisterValues = {\r\n        contactId: null,\r\n        projectId: null,\r\n        participationsOptioned: 0,\r\n        powerKwhConsumption: 0,\r\n        amountOptioned: 0,\r\n        didAcceptAgreement: false,\r\n        didUnderstandInfo: false,\r\n        choiceMembership: 0,\r\n    };\r\n\r\n    const initialPcrValues = {\r\n        pcrYearlyPowerKwhConsumption: 0,\r\n        pcrPostalCode: '',\r\n        pcrHasSolarPanels: 'N',\r\n        pcrInputGeneratedNumberOfKwh: 0,\r\n        pcrEstimatedRevenueOk: 'Y',\r\n    };\r\n\r\n    const [registerValues, setRegisterValues] = useState(initialRegisterValues);\r\n\r\n    const [project, setProject] = useState({});\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isSucces, setSucces] = useState(false);\r\n    const [contactProjectData, setContactProjectData] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function fetchContactAndProject() {\r\n                setLoading(true);\r\n\r\n                axios\r\n                    .all([\r\n                        ProjectAPI.fetchProject(match.params.id),\r\n                        ContactAPI.fetchContact(currentSelectedContact.id),\r\n                        ContactAPI.fetchContactProjectData(currentSelectedContact.id, match.params.id),\r\n                    ])\r\n                    .then(\r\n                        axios.spread((payloadProject, payloadContact, payloadContactProjectData) => {\r\n                            const contact = payloadContact.data.data;\r\n                            const project = payloadProject.data.data;\r\n                            setProject(project);\r\n                            setCurrentThemeSettings(project.administration.portalSettingsLayoutAssigned);\r\n                            const contactData = rebaseContact(contact);\r\n                            setContact(contactData);\r\n\r\n                            setContactProjectData(payloadContactProjectData.data);\r\n\r\n                            if (\r\n                                project &&\r\n                                project.projectType &&\r\n                                project.projectType.codeRef === 'postalcode_link_capital'\r\n                            ) {\r\n                                let pcrPostalCode = '';\r\n                                if (contactData.typeId === 'organisation') {\r\n                                    pcrPostalCode = contactData.visitAddress ? contactData.visitAddress.postalCode : '';\r\n                                } else {\r\n                                    pcrPostalCode = contactData.primaryAddress\r\n                                        ? contactData.primaryAddress.postalCode\r\n                                        : '';\r\n                                }\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\r\n                                    ...initialPcrValues,\r\n                                    pcrPostalCode,\r\n                                });\r\n                            } else {\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\r\n                                });\r\n                            }\r\n\r\n                            if (\r\n                                payloadContactProjectData.data.projectRegisterIndicators.allowChangeParticipation &&\r\n                                payloadContactProjectData.data.projectRegisterIndicators.allowPayMollie\r\n                            ) {\r\n                                /**\r\n                                 * Er is wel ingeschreven maar nog niet betaald, dan mag het formulier\r\n                                 * wel geopend worden en stellen we de eerder ingevoerde gegevens in. projectRegisterIndicators\r\n                                 */\r\n                                setRegisterValues(current => {\r\n                                    return {\r\n                                        ...current,\r\n                                        participationsOptioned:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators\r\n                                                .participationsOptioned,\r\n                                        amountOptioned:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators.amountOptioned,\r\n                                        pcrYearlyPowerKwhConsumption:\r\n                                            payloadContactProjectData.data.projectRegisterIndicators\r\n                                                .powerKwhConsumption,\r\n                                        didAcceptAgreement: true,\r\n                                        didUnderstandInfo: true,\r\n                                    };\r\n                                });\r\n                            }\r\n\r\n                            setLoading(false);\r\n                        })\r\n                    )\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n\r\n        (function callFetchPortalSettings() {\r\n            setLoading(true);\r\n            const keys =\r\n                '?keys[]=portalName' +\r\n                '&keys[]=portalWebsite' +\r\n                '&keys[]=portalUrl' +\r\n                '&keys[]=responsibleUserId' +\r\n                '&keys[]=checkContactTaskResponsibleUserId' +\r\n                '&keys[]=linkPrivacyPolicy' +\r\n                '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n                '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n            PortalSettingsAPI.fetchPortalSettings(keys)\r\n                .then(payload => {\r\n                    setPortalSettings({ ...payload.data });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ isLoading: false, hasError: true });\r\n                });\r\n        })();\r\n    }, [match, currentSelectedContact]);\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    function handleSubmitRegisterValues(values) {\r\n        setRegisterValues({ ...registerValues, ...values });\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, nextStep) {\r\n        const updatedContact = { ...contact, ...values, projectId: project.id };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                ContactAPI.fetchContact(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        const contactData = rebaseContact(payload.data.data);\r\n\r\n                        setContact(contactData);\r\n                        nextStep();\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : !contactProjectData.projectRegisterIndicators.hasParticipation &&\r\n              !contactProjectData.projectRegisterIndicators.allowRegisterToProject ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                Inschrijving voor project <strong>{project.name}</strong>\r\n                            </h1>\r\n                            <Row className={'mb-4'}>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            {contactProjectData.projectRegisterIndicators.textNotAllowedRegisterToProject\r\n                                                .split('<br />')\r\n                                                .map((item, key) => {\r\n                                                    return (\r\n                                                        <span key={key}>\r\n                                                            {item}\r\n                                                            <br />\r\n                                                        </span>\r\n                                                    );\r\n                                                })}\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : contactProjectData.projectRegisterIndicators.hasParticipation &&\r\n              !contactProjectData.projectRegisterIndicators.allowChangeParticipation ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                <strong>{formatFullName(contact.fullName)}</strong> is al ingeschreven voor project{' '}\r\n                                <strong>{project.name}</strong>\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : (\r\n                <Row>\r\n                    <Col>\r\n                        {isSucces ? (\r\n                            <h1 className=\"content-heading\">\r\n                                Ingeschreven voor project <strong>{project.name}</strong>\r\n                            </h1>\r\n                        ) : (\r\n                            <>\r\n                                <Row>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                                        <Link to={`/inschrijven-projecten`}>\r\n                                            <Button className={'w-button'} size=\"sm\">\r\n                                                Inschrijven projecten\r\n                                            </Button>\r\n                                        </Link>\r\n                                    </ButtonGroup>\r\n                                </Row>\r\n                                <h1 className=\"content-heading\">\r\n                                    Schrijf <strong>{formatFullName(contact.fullName)}</strong> in voor project{' '}\r\n                                    <strong>{project.name}</strong>\r\n                                </h1>\r\n                            </>\r\n                        )}\r\n                        <MasterForm\r\n                            portalSettings={portalSettings}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={registerValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            setSucces={setSucces}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegisterProjectWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegisterProject {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from './../../../../helpers/ValidationSchemaPersonal';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\nimport InputText from '../../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction PersonalAddressEdit({ initialContact, handleSubmitContactAddressValues }) {\r\n    const validationSchema = ValidationSchemaPersonal.validationSchemaPostalCodeAndNumber;\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactAddressValues(values, actions);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    return (\r\n                        <Form>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Op dit moment zijn je adresgegevens nog niet bij ons bekend.\r\n                                            <br />\r\n                                            Er zijn projecten waarop je kan inschrijven die afhankelijk van je adres\r\n                                            zijn.\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={12}>\r\n                                    <FormLabel className={'field-label'}>Postcode en huisnummer</FormLabel>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"primaryAddress.postalCode\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"postal_code\"\r\n                                                        placeholder={'Postcode'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"primaryAddress.number\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"street_number\"\r\n                                                        placeholder={'Nummer'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"primaryAddress.addition\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"addition\"\r\n                                                        placeholder={'Toevoeging'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Link to={`/`}>\r\n                                            <Button variant={'outline-dark'} size=\"sm\">\r\n                                                Annuleren\r\n                                            </Button>\r\n                                        </Link>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonalAddressEdit;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaOrganisation from '../../../../helpers/ValidationSchemaOrganisation';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\nimport InputText from '../../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction OrganisationAddressEdit({ initialContact, handleSubmitContactAddressValues }) {\r\n    const validationSchema = ValidationSchemaOrganisation.validationSchemaPostalCodeAndNumber;\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactAddressValues(values, actions);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    return (\r\n                        <Form>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Op dit moment zijn je adresgegevens nog niet bij ons bekend.\r\n                                            <br />\r\n                                            Er zijn projecten waarop je kan inschrijven die afhankelijk van je adres\r\n                                            zijn.\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={12}>\r\n                                    <FormLabel className={'field-label'}>Postcode en huisnummer</FormLabel>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"visitAddress.postalCode\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"postal_code\"\r\n                                                        placeholder={'Postcode'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"visitAddress.number\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"street_number\"\r\n                                                        placeholder={'Nummer'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col xs={12} sm={4}>\r\n                                            <Field\r\n                                                name=\"visitAddress.addition\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"addition\"\r\n                                                        placeholder={'Toevoeging'}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Link to={`/`}>\r\n                                            <Button variant={'outline-dark'} size=\"sm\">\r\n                                                Annuleren\r\n                                            </Button>\r\n                                        </Link>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn (juist) ingevuld!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrganisationAddressEdit;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { FaInfoCircle } from 'react-icons/fa';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport rebaseContact from '../../../helpers/RebaseContact';\r\nimport PersonalAddressEdit from './address-person/Edit';\r\nimport OrganisationAddressEdit from './address-organisation/Edit';\r\n\r\nfunction ProjectList(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [contactProjectsArray, setContactProjectsArray] = useState([]);\r\n    const [sceOrPcrProjectsAvailable, setSceOrPcrProjectsAvailable] = useState(false);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        (function callFetchProjects() {\r\n            setLoading(true);\r\n            // Call Api if current selected contact id is filled\r\n            if (props.currentSelectedContact.id) {\r\n                // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n                if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                    callFetchContact();\r\n                    callFetchContactProjects();\r\n                }\r\n            }\r\n        })();\r\n    }, [props.currentSelectedContact]);\r\n\r\n    useEffect(() => {\r\n        (function determineSceOrPcrProjectsAvailable() {\r\n            if (contactProjectsArray.length > 0) {\r\n                contactProjectsArray.find(function(project) {\r\n                    return project.isSceOrPcrProject && setSceOrPcrProjectsAvailable(true);\r\n                });\r\n            }\r\n        })();\r\n    }, [contactProjectsArray.length > 0]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function callFetchContactProjects() {\r\n        ContactAPI.fetchContactProjects(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContactProjectsArray(payload.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function handleSubmitContactAddressValues(values, actions) {\r\n        const updatedContact = { ...contact, ...values, projectId: null };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                actions.setSubmitting(false);\r\n                callFetchContact();\r\n                callFetchContactProjects();\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                actions.setStatus({\r\n                    message: error.response.data.message,\r\n                });\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                    <Link to={`/gegevens`}>\r\n                        <Button className={'w-button'} size=\"sm\">\r\n                            Gegevens\r\n                        </Button>\r\n                    </Link>\r\n                    &nbsp;\r\n                    <Link to={`/inschrijvingen-projecten`}>\r\n                        <Button className={'w-button'} size=\"sm\">\r\n                            Huidige deelnames\r\n                        </Button>\r\n                    </Link>\r\n                </ButtonGroup>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        Overzicht projecten waarop{' '}\r\n                        <strong>{formatFullName(props.currentSelectedContact.fullName)}</strong> kan inschrijven.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            {sceOrPcrProjectsAvailable && contact.noAddressesFound && contact.typeId === 'person' ? (\r\n                <PersonalAddressEdit\r\n                    initialContact={contact}\r\n                    handleSubmitContactAddressValues={handleSubmitContactAddressValues}\r\n                />\r\n            ) : sceOrPcrProjectsAvailable && contact.noAddressesFound && contact.typeId === 'organisation' ? (\r\n                <OrganisationAddressEdit\r\n                    initialContact={contact}\r\n                    handleSubmitContactAddressValues={handleSubmitContactAddressValues}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <p>Klik op het project voor meer details.</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isLoading ? (\r\n                                <LoadingView />\r\n                            ) : contactProjectsArray.length === 0 ? (\r\n                                'Geen projecten beschikbaar om op in te schrijven.'\r\n                            ) : (\r\n                                <Table responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Uitgevende instantie</th>\r\n                                            <th>Project</th>\r\n                                            <th>Ingeschreven</th>\r\n                                            <th>Start inschrijving</th>\r\n                                            <th>Einde inschrijving</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {contactProjectsArray.map(project => (\r\n                                            <tr key={project.id}>\r\n                                                <td>{project.administrationName}</td>\r\n                                                <td>\r\n                                                    {project.allowChangeParticipation ? (\r\n                                                        <>\r\n                                                            {project.name} (\r\n                                                            <Link to={`/project/${project.id}`}>\r\n                                                                wijzig inschrijving\r\n                                                            </Link>\r\n                                                            )\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            {!project.hasParticipation &&\r\n                                                            project.allowRegisterToProject ? (\r\n                                                                <Link to={`/project/${project.id}`}>\r\n                                                                    {project.name}\r\n                                                                </Link>\r\n                                                            ) : (\r\n                                                                <span className={'text-muted'}>{project.name}</span>\r\n                                                            )}\r\n                                                        </>\r\n                                                    )}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {project.hasParticipation ? (\r\n                                                        <>\r\n                                                            {project.allowPayMollie ? (\r\n                                                                <div className=\"text-center\">\r\n                                                                    Nog niet betaald,\r\n                                                                    <br />\r\n                                                                    <a href={project.econobisPaymentLink}>betaal nu</a>\r\n                                                                </div>\r\n                                                            ) : (\r\n                                                                <div className=\"text-success text-center\">✔</div>\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <div className=\"text-center\">\r\n                                                            {!project.allowRegisterToProject ? (\r\n                                                                <>\r\n                                                                    <FaInfoCircle\r\n                                                                        color={'blue'}\r\n                                                                        size={'15px'}\r\n                                                                        data-tip={`${project.textNotAllowedRegisterToProject}`}\r\n                                                                        data-for={`project-${project.id}`}\r\n                                                                    />\r\n                                                                    <ReactTooltip\r\n                                                                        id={`project-${project.id}`}\r\n                                                                        effect=\"float\"\r\n                                                                        place=\"bottom\"\r\n                                                                        multiline={true}\r\n                                                                        aria-haspopup=\"true\"\r\n                                                                    />\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {project.dateStartRegistrations\r\n                                                        ? moment(project.dateStartRegistrations).format('LL')\r\n                                                        : ''}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {project.dateEndRegistrations\r\n                                                        ? moment(project.dateEndRegistrations).format('LL')\r\n                                                        : ''}\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function ProjectListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => <ProjectList {...props} currentSelectedContact={currentSelectedContact} />}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction LoanDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                    <FormLabel>Lening nodig</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.amountOfLoanNeeded)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.minAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.maxAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoanDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction ObligationDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige hoofdsom per obligatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal obligaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ObligationDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction CapitalDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CapitalDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction PcrDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PcrDetails;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../../api/project/ProjectAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport LoanDetails from './LoanDetails';\r\nimport ObligationDetails from './ObligationDetails';\r\nimport CapitalDetails from './CapitalDetails';\r\nimport PcrDetails from './PcrDetails';\r\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction ProjectDetails({ match }) {\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n    const [project, setProject] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function callFetchProject() {\r\n                setLoading(true);\r\n                ProjectAPI.fetchProject(match.params.id)\r\n                    .then(payload => {\r\n                        setProject(payload.data.data);\r\n                        setCurrentThemeSettings(payload.data.data.administration.portalSettingsLayoutAssigned);\r\n                        setLoading(false);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [match, currentSelectedContact]);\r\n\r\n    function renderDetails() {\r\n        switch (project.projectType.codeRef) {\r\n            case 'loan':\r\n                return <LoanDetails project={project} />;\r\n            case 'obligation':\r\n                return <ObligationDetails project={project} />;\r\n            case 'capital':\r\n                return <CapitalDetails project={project} />;\r\n            case 'postalcode_link_capital':\r\n                return <PcrDetails project={project} />;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    if (isEmpty(project)) {\r\n        return (\r\n            <Container className={'content-section'}>\r\n                {isLoading ? (\r\n                    <LoadingView />\r\n                ) : (\r\n                    <>\r\n                        <p>Geen projectdetails bekend</p>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                            <Link to={`/inschrijven-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Inschrijven projecten\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">Inschrijven project</h1>\r\n                            <div className=\"content-subheading\">Uitgevende instantie {project.administration.name}</div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {renderDetails()}\r\n\r\n                    <Row className={'mt-5'}>\r\n                        <Col>\r\n                            <p>\r\n                                Meer informatie over dit project vind je{' '}\r\n                                <a href={`${project.linkProjectInfo}`} target=\"_blank\">\r\n                                    hier\r\n                                </a>\r\n                            </p>\r\n                            <p>Wil je inschrijven op dit project. Klik dan op \"Ga naar inschrijven\".</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijven/${project.id}`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Ga naar inschrijven\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ProjectDetails;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction RegistrationList(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContact(payload.data.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                    <Link to={`/gegevens`}>\r\n                        <Button className={'w-button'} size=\"sm\">\r\n                            Gegevens\r\n                        </Button>\r\n                    </Link>\r\n                    &nbsp;\r\n                    <Link to={`/inschrijven-projecten`}>\r\n                        <Button className={'w-button'} size=\"sm\">\r\n                            Inschrijven projecten\r\n                        </Button>\r\n                    </Link>\r\n                </ButtonGroup>\r\n            </Row>{' '}\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        De projecten waarin <strong>{formatFullName(contact.fullName)}</strong> deelneemt.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {isLoading ? (\r\n                        <LoadingView />\r\n                    ) : contact.length === 0 ? (\r\n                        'Nog geen inschrijvingen.'\r\n                    ) : (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Uitgevende instantie</th>\r\n                                    <th>Project</th>\r\n                                    <th>Deelname</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {contact.participations.map(participation => {\r\n                                    if (\r\n                                        !participation.project.dateEnd ||\r\n                                        moment(participation.project.dateEnd).format('YYYY-MM-DD') >=\r\n                                            moment().format('YYYY-MM-DD')\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={participation.id}>\r\n                                                <td>{participation.project.administration.name}</td>\r\n                                                <td>\r\n                                                    <Link to={`/project-deelname/${participation.id}`}>\r\n                                                        {participation.project.name}\r\n                                                    </Link>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {participation.project.projectType.codeRef == 'loan' ? (\r\n                                                        <>\r\n                                                            {participation.amountInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountInteressed)}{' '}\r\n                                                                    <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountOptioned)}{' '}\r\n                                                                    <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening {MoneyPresenter(participation.amountGranted)}{' '}\r\n                                                                    <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountDefinitive)}{' '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'obligation' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' obligaties '} <em> (Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' obligaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' obligaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' obligaties '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef ==\r\n                                                    'postalcode_link_capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegistrationListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegistrationList {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormPersonal = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            personTitleId: '',\r\n            personFirstName: '',\r\n            personLastName: '',\r\n        }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor jezelf</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonText\r\n                            buttonText={'Account aanmaken'}\r\n                            buttonClassName={'authorization-button'}\r\n                            size=\"sm\"\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                            disabled={showSuccessMessage}\r\n                        />\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormPersonal;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    organisationName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormOrganisation = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '', organisationName: '', personTitleId: '', personFirstName: '', personLastName: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor je organisatie</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"organisationName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Naam Organisatie'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens contactpersoon</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonText\r\n                            buttonText={'Account aanmaken'}\r\n                            buttonClassName={'authorization-button'}\r\n                            size=\"sm\"\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                            disabled={showSuccessMessage}\r\n                        />\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormOrganisation;\r\n","import React, { useState } from 'react';\r\nimport { GoogleReCaptchaProvider, useGoogleReCaptcha } from 'react-google-recaptcha-v3';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport NewAccountFormPersonal from './NewAccountFormPersonal';\r\nimport NewAccountFormOrganisation from './NewAccountFormOrganisation';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, ButtonToolbar } from 'react-bootstrap';\r\n\r\nconst NewAccount = props => {\r\n    const { executeRecaptcha } = useGoogleReCaptcha();\r\n    const [contactType, setContactType] = useState('person');\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    async function handleSubmit(values, actions) {\r\n        if (!executeRecaptcha) {\r\n            return;\r\n        }\r\n        const reCaptchaToken = await executeRecaptcha('signup_page');\r\n\r\n        AuthAPI.newAccount({ ...values, contactType: contactType, reCaptchaToken })\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If new account fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                if (error.response && error.response.status === 404) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres.'\r\n                    );\r\n                } else if (error.response && error.response.status === 405) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een contact met het e-mailadres, voornaam en achternaam dat je hebt ingevuld. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres, voornaam of achternaam.'\r\n                    );\r\n                } else {\r\n                    setErrorMessage('Fout bij aanmaken nieuw account!');\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={'nieuw-account-succes'} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"authorization-container\">\r\n            <Container fluid className=\"authorization-text\">\r\n                <Row className=\"justify-content-center align-content-start align-content-lg-center full-height p-2\">\r\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"4\" xl=\"4\">\r\n                        <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container-small\" />\r\n\r\n                        {showSuccessMessage ? (\r\n                            redirect()\r\n                        ) : (\r\n                            <>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <h3 className={'authorization-text'}>Nieuw account</h3>\r\n                                </Row>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <p className={'authorization-text'}>Maak binnen 2 minuten een account aan.</p>\r\n                                </Row>\r\n                                <br />\r\n                                <Row className=\"justify-content-center\">\r\n                                    <ButtonToolbar toggle>\r\n                                        <Col>\r\n                                            <Button\r\n                                                className={'authorization-button'}\r\n                                                variant={\r\n                                                    contactType === 'person'\r\n                                                        ? 'primary fixed-height'\r\n                                                        : 'light fixed-height'\r\n                                                }\r\n                                                block\r\n                                                onClick={() => setContactType('person')}\r\n                                            >\r\n                                                Voor jezelf\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                className={'authorization-button'}\r\n                                                variant={contactType === 'organisation' ? 'primary' : 'light'}\r\n                                                block\r\n                                                onClick={() => setContactType('organisation')}\r\n                                            >\r\n                                                Voor je organisatie\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </ButtonToolbar>\r\n                                </Row>\r\n                                <br />\r\n\r\n                                {contactType === 'person' ? (\r\n                                    <NewAccountFormPersonal\r\n                                        handleSubmit={handleSubmit}\r\n                                        showSuccessMessage={showSuccessMessage}\r\n                                    />\r\n                                ) : (\r\n                                    <NewAccountFormOrganisation\r\n                                        handleSubmit={handleSubmit}\r\n                                        showSuccessMessage={showSuccessMessage}\r\n                                    />\r\n                                )}\r\n                                <br />\r\n\r\n                                {showError ? (\r\n                                    <Row>\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            {errorMessage}\r\n                                        </Alert>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction NewAccountWithProvider() {\r\n    const RE_CAPTCHA_KEY = process.env.REACT_APP_RE_CAPTCHA_KEY;\r\n\r\n    return (\r\n        <GoogleReCaptchaProvider reCaptchaKey={RE_CAPTCHA_KEY} language={'nl'}>\r\n            <NewAccount />\r\n        </GoogleReCaptchaProvider>\r\n    );\r\n}\r\n\r\nexport default NewAccountWithProvider;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NewAccountSuccess = () => {\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                    <div>\r\n                        <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                        <p className={'authorization-text'}>\r\n                            Binnen enkele minuten ontvang je een e-mail met een persoonlijke link. Via deze link kun je\r\n                            je account activeren.\r\n                            <br />\r\n                            <br />\r\n                            <strong>Let op:</strong> Het kan zijn dat de mail door een spamfilter is geblokkeerd.\r\n                            Spamfilters van bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de\r\n                            Spam/Reclame of je onze mail daar terug vindt.\r\n                        </p>\r\n                        <a onClick={window.close} href=\"#\" className=\"authorization-link\">\r\n                            Sluit venster\r\n                        </a>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NewAccountSuccess;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email('Geen geldig e-mailadres')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountEmail() {\r\n    const [portalUserEmail, setPortalUserEmail] = useState('');\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (function callFetchUserEmail() {\r\n            PortalUserAPI.fetchPortalUserEmail()\r\n                .then(payload => {\r\n                    setPortalUserEmail(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n    function handleSubmitChangeEmail(values, actions) {\r\n        PortalUserAPI.changeEmail(values)\r\n            .then(payload => {\r\n                setPortalUserEmail(values.email);\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', changePrimaryEmailAddress: false }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangeEmail(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Inlog e-mail is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit\r\n                            e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan\r\n                            alsjeblieft een ander e-mailadres.\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12}>\r\n                            <FormLabel className={'field-label'}>Huidig e-mailadres</FormLabel>\r\n                            <TextBlock>{portalUserEmail}</TextBlock>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label pt-1'}>Nieuw e-mailadres</Form.Label>\r\n                            <Field\r\n                                name=\"email\"\r\n                                render={({ field }) => (\r\n                                    <InputText field={field} errors={errors} touched={touched} id=\"email\" />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Field\r\n                                name=\"changePrimaryEmailAddress\"\r\n                                render={({ field }) => (\r\n                                    <label className=\"w-checkbox checkbox-fld\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            {...field}\r\n                                            id=\"change-primary-email-address\"\r\n                                            checked={field.value}\r\n                                            className=\"w-checkbox-input checkbox\"\r\n                                        />\r\n                                        <span\r\n                                            htmlFor=\"change-primary-email-address\"\r\n                                            className=\"checkbox-label w-form-label\"\r\n                                        >\r\n                                            Wijziging ook doorvoeren op huidig correspondentie e-mailadres?\r\n                                        </span>\r\n                                    </label>\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig e-mailadres'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountEmail;\r\n","import React, { useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountPassword() {\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    function handleSubmitChangePassword(values, actions) {\r\n        PortalUserAPI.changePassword(values)\r\n            .then(payload => {\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ password: '', passwordConfirmation: '' }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangePassword(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Wachtwoord is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Fout bij wijzigen wachtwoord!\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label'}>Nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"password\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"password\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label mt-0'}>Herhaal nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"passwordConfirmation\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"passwordConfirmation\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Herhaal nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig wachtwoord'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountPassword;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ChangeAccountEmail from './Email';\r\nimport ChangeAccountPassword from './Password';\r\n\r\nfunction ChangeAccount() {\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">Wijzig inloggegevens</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={6} className={'mb-5'}>\r\n                    <h3 className={'h3'}>Wijzig inlog e-mailadres</h3>\r\n\r\n                    <ChangeAccountEmail />\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <h3 className={'h3'}>Wijzig wachtwoord</h3>\r\n\r\n                    <ChangeAccountPassword />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ChangeAccount;\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction AboutUs() {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentSelectedContact.id) {\r\n                ContactAPI.fetchContactRelatedAdministrations(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        },\r\n        [currentSelectedContact.id]\r\n    );\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        Overzicht organisaties waar <strong>{formatFullName(currentSelectedContact.fullName)}</strong>{' '}\r\n                        een relatie mee heeft.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            {state.isLoading ? (\r\n                <Row>\r\n                    <Col>\r\n                        <LoadingView />\r\n                    </Col>\r\n                </Row>\r\n            ) : state.result.length === 0 ? (\r\n                <Row>\r\n                    <Col>Geen informatie organisaties beschikbaar waar contact een relatie mee heeft.</Col>\r\n                </Row>\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <p>Klik op de organisatie voor meer details.</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Naam</th>\r\n                                <th>Adres</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {state.result.map(item => (\r\n                                <tr key={item.id}>\r\n                                    <td>\r\n                                        <Link to={`/over-ons-organisatie/${item.id}`}>{item.name}</Link>\r\n                                    </td>\r\n                                    <td>\r\n                                        {item.address}, {item.city}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AboutUs;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nfunction RegistrationDetailsTitle({ contactName, projectName, administrationName }) {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <h1 className=\"content-heading\">\r\n                    Deelname van {contactName} in de {projectName}\r\n                </h1>\r\n                <span className=\"content-subheading\">Uitgevende instantie {administrationName}</span>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsTitle;\r\n","export default field => {\r\n    switch (field.type) {\r\n        case 'date':\r\n        case 'string':\r\n            return 'text-left';\r\n        case 'decimal':\r\n        case 'money':\r\n        case 'integer':\r\n            return 'text-right';\r\n        default:\r\n            return 'text-left';\r\n    }\r\n};\r\n","import moneyPresenter from './MoneyPresenter';\r\nimport moment from 'moment';\r\n\r\nexport default field => {\r\n    switch (field.type) {\r\n        case 'date':\r\n            return field.value ? moment(field.value).format('L') : '';\r\n        case 'decimal':\r\n            return field.value\r\n                ? field.value.toLocaleString('nl', {\r\n                      minimumFractionDigits: 2,\r\n                      maximumFractionDigits: 2,\r\n                  })\r\n                : '';\r\n        case 'money':\r\n            return moneyPresenter(field.value);\r\n        case 'string':\r\n        case 'integer':\r\n        default:\r\n            return field.value;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport classNameBasedOnTypePresenter from '../../../../helpers/classNameBasedOnTypePresenter';\r\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\r\n\r\nfunction RegistrationDetailsProjectTable({ fields }) {\r\n    if (!fields || fields.length === 0) return <p>Geen projectdetails bekend</p>;\r\n\r\n    return (\r\n        <Table className={'my-4'}>\r\n            <tbody>\r\n                {fields.map((field, index) => (\r\n                    <tr key={index}>\r\n                        <td>\r\n                            <strong>{field.label}</strong>\r\n                        </td>\r\n                        <td>{valueBasedOnTypePresenter(field)}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsProjectTable;\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\r\nimport classNameBasedOnTypePresenter from '../../../../helpers/classNameBasedOnTypePresenter';\r\n\r\nfunction RegistrationDetailsMutationTable({ participantMutations }) {\r\n    if (!participantMutations || participantMutations.length === 0) return <p>Geen mutaties bekend</p>;\r\n\r\n    return (\r\n        <Table responsive={true} className={'my-4'}>\r\n            <thead>\r\n                <tr>\r\n                    {participantMutations[0].fields.map((field, index) => (\r\n                        <th key={index}>{field.label}</th>\r\n                    ))}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {participantMutations.map((participantMutation, index) => (\r\n                    <tr key={index}>\r\n                        {participantMutation.fields.map((field, index) => (\r\n                            <td class={classNameBasedOnTypePresenter(field)} key={index}>\r\n                                {valueBasedOnTypePresenter(field)}\r\n                            </td>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsMutationTable;\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport RegistrationDetailsTitle from './Title';\r\nimport RegistrationDetailsProjectTable from './project-table';\r\nimport RegistrationDetailsMutationTable from './mutation-table';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction RegistrationDetails({ match: { params } }) {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function() {\r\n                ParticipantProjectAPI.show(params.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setCurrentThemeSettings(payload.data.data.basicInformation.portalSettingsLayoutAssigned);\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [params.id, currentSelectedContact]);\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {state.isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                            <Link to={`/inschrijvingen-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Huidige deelnames\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <RegistrationDetailsTitle {...state.result.basicInformation} />\r\n                    <RegistrationDetailsProjectTable fields={state.result.fields} />\r\n                    <RegistrationDetailsMutationTable participantMutations={state.result.participantMutations} />\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetails;\r\n","import React, { useEffect, useReducer, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { FaFileDownload } from 'react-icons/all';\r\nimport fileDownload from 'js-file-download';\r\n\r\nconst INITIAL_STATE = {\r\n    result: [],\r\n    isLoading: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'updateIsLoading':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n        case 'updateResult':\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n            };\r\n        default:\r\n            return INITIAL_STATE;\r\n    }\r\n};\r\n\r\nfunction FinancialOverviewDocuments() {\r\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n\r\n    useEffect(\r\n        function() {\r\n            if (currentSelectedContact.id) {\r\n                ContactAPI.fetchContactFinancialOverviewDocuments(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        dispatch({\r\n                            type: 'updateResult',\r\n                            payload: payload.data.data,\r\n                        });\r\n                        setIsLoading(false);\r\n                    })\r\n                    .catch(() => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        },\r\n        [currentSelectedContact.id]\r\n    );\r\n\r\n    function setIsLoading(isLoading) {\r\n        dispatch({\r\n            type: 'updateIsLoading',\r\n            payload: isLoading,\r\n        });\r\n    }\r\n\r\n    function downloadFile(e, id) {\r\n        e.preventDefault();\r\n\r\n        ContactAPI.financialOverviewContactDownload(id)\r\n            .then(payload => {\r\n                fileDownload(payload.data, payload.headers['x-filename']);\r\n            })\r\n            .catch(() => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {state.isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading mt-0\">Waardestaat documenten</h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Naam</th>\r\n                                <th>Omschrijving</th>\r\n                                <th>Downloaden</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {state.result.map(item => (\r\n                                <tr key={item.id}>\r\n                                    <td>{item.name}</td>\r\n                                    <td>{item.description}</td>\r\n                                    <td>\r\n                                        <a href=\"#\" onClick={e => downloadFile(e, item.id)}>\r\n                                            <FaFileDownload /> downloaden\r\n                                        </a>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default FinancialOverviewDocuments;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n    fetchAdministration: function(id) {\r\n        const requestUrl = `/jory/administration/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'name',\r\n                        'address',\r\n                        'postalCode',\r\n                        'city',\r\n                        'kvkNumber',\r\n                        'iBAN',\r\n                        'ibanAttn',\r\n                        'btwNumber',\r\n                        'website',\r\n                    ],\r\n                    rlt: {\r\n                        country: { fld: ['name'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { PortalUserContext } from '../../../context/PortalUserContext';\r\nimport { Card, Table } from 'react-bootstrap';\r\nimport AdministrationAPI from '../../../api/administration/AdministrationAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction AboutUsAdministration({ match }) {\r\n    const { currentSelectedContact } = useContext(PortalUserContext);\r\n    const [administration, setAdministration] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function callFetchAdministration() {\r\n                setLoading(true);\r\n                console.log(match);\r\n                AdministrationAPI.fetchAdministration(match.params.id)\r\n                    .then(payload => {\r\n                        setAdministration(payload.data.data);\r\n                        setLoading(false);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n    }, [match, currentSelectedContact]);\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                            <Link to={`/over-ons`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Over ons\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <Row className={'justify-content-center align-content-center flex-wrap'}>\r\n                        <Col xs={12} lg={6} className={'mb-3'}>\r\n                            <Card>\r\n                                <Card.Header className={'card-header_title'}>\r\n                                    Informatie over {administration.name}\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    <Table responsive>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Naam</strong>\r\n                                                </td>\r\n                                                <td>{administration.name}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Adres</strong>\r\n                                                </td>\r\n                                                <td>{administration.address}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Postcode / Plaats</strong>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {administration.postalCode} {administration.city}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Kvk</strong>\r\n                                                </td>\r\n                                                <td>{administration.kvkNumber}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>Website</strong>\r\n                                                </td>\r\n                                                <td>{administration.website}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>IBAN</strong>\r\n                                                </td>\r\n                                                <td>{administration.iBAN}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>IBAN t.n.v.</strong>\r\n                                                </td>\r\n                                                <td>{administration.ibanAttn}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <strong>BTW nummer</strong>\r\n                                                </td>\r\n                                                <td>{administration.btwNumber}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AboutUsAdministration;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchByCode: code => {\r\n        const requestUrl = `/jory/participant-mutation`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    flt: {\r\n                        f: 'code',\r\n                        d: code,\r\n                    },\r\n                    fld: ['econobisPaymentLink', 'isPaidByMollie'],\r\n                    rlt: {\r\n                        participation: {\r\n                            rlt: {\r\n                                project: {\r\n                                    fld: ['name', 'textRegistrationFinished'],\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ParticipantMutationAPI from '../../../api/participant-mutation/ParticipantMutationAPI';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport {PortalUserConsumer} from '../../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport {Link} from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\n\r\nfunction ProjectMollieRedirect({match, currentSelectedContact}) {\r\n    const [participantMutation, setParticipantMutation] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const handlePaymentRetry = () => {\r\n        window.location.href = participantMutation.econobisPaymentLink;\r\n    }\r\n\r\n    useEffect(() => {\r\n        (function fetchContactAndProject() {\r\n            setLoading(true);\r\n\r\n            axios\r\n                .all([\r\n                    ParticipantMutationAPI.fetchByCode(match.params.code),\r\n                ])\r\n                .then(\r\n                    axios.spread((payloadParticipantMutation) => {\r\n                        if(payloadParticipantMutation.data.data.length !== 1){\r\n                            alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                            setLoading(false);\r\n                            return;\r\n                        }\r\n\r\n                        setParticipantMutation(payloadParticipantMutation.data.data[0]);\r\n                        setLoading(false);\r\n                    })\r\n                )\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [match]);\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView/>\r\n            ) : (\r\n                <>\r\n                    <Row className={'mb-4'}>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                {\r\n                                    participantMutation.isPaidByMollie ? (\r\n                                        <>Ingeschreven voor\r\n                                            project <strong>{participantMutation.participation.project.name}</strong></>\r\n                                    ) : (\r\n                                        <>Betaling voor\r\n                                            project <strong>{participantMutation.participation.project.name}</strong> nog\r\n                                            niet gelukt.</>\r\n                                    )\r\n                                }\r\n\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            {participantMutation.isPaidByMollie ? (\r\n                                <>\r\n                                    <p>\r\n                                        { participantMutation.participation.project.textRegistrationFinished.split('\\n').map((item, key) => {\r\n                                            return <span key={key}>{item}<br/></span>\r\n                                        }) }\r\n                                    </p>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <p>\r\n                                        Uw inschrijving kon nog niet worden afgerond doordat de betaling niet is gelukt,\r\n                                        gebruik onderstaande betaal button om de betaling alsnog uit te voeren.</p>\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar mijn huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                                {!participantMutation.isPaidByMollie && (\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handlePaymentRetry}>\r\n                                        Betalen\r\n                                    </Button>\r\n                                )}\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function ProjectMollieRedirectWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({currentSelectedContact}) => (\r\n                <ProjectMollieRedirect {...props} currentSelectedContact={currentSelectedContact}/>\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch } from 'react-router-dom';\r\nimport ProtectedRoute from './route/ProtectedRoute';\r\nimport PublicRoute from './route/PublicRoute';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport { PortalUserProvider } from './context/PortalUserContext';\r\nimport Login from './container/authorization/login';\r\nimport Register from './container/authorization/register';\r\nimport Forgot from './container/authorization/forgot';\r\nimport Reset from './container/authorization/reset';\r\nimport ContactDetails from './container/contact-details';\r\nimport MyAreasOfInterest from './container/my-areas-of-interest';\r\nimport RegisterProject from './container/register';\r\nimport ProjectList from './container/project/list';\r\nimport ProjectDetails from './container/project/details';\r\nimport RegistrationList from './container/registration/list';\r\nimport NewAccount from './container/authorization/new-account';\r\nimport NewAccountSuccess from './container/authorization/new-account/NewAccountSuccess';\r\nimport ChangeAccount from './container/authorization/change-account';\r\nimport AboutUs from './container/about-us/list';\r\nimport RegistrationDetails from './container/registration/details';\r\nimport FinancialOverviewDocuments from './container/financial-overview-documents/list';\r\nimport { ThemeSettingsProvider } from './context/ThemeSettingsContext';\r\nimport AboutUsAdministration from './container/about-us/details';\r\nimport ProjectMollieRedirectWithContext from \"./container/register/mollie-redirect\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n                <PortalUserProvider>\r\n                    <ThemeSettingsProvider>\r\n                        <Switch>\r\n                            <ProtectedRoute exact path=\"/\" component={ContactDetails} />\r\n                            <ProtectedRoute path=\"/gegevens\" component={ContactDetails} />\r\n                            <ProtectedRoute path=\"/mijn-interessegebieden\" component={MyAreasOfInterest} />\r\n                            <ProtectedRoute path=\"/inschrijven/mollie-resultaat/:code\" component={ProjectMollieRedirectWithContext} />\r\n                            <ProtectedRoute path=\"/inschrijven/:id\" component={RegisterProject} />\r\n                            <ProtectedRoute path=\"/inschrijven-projecten\" component={ProjectList} />\r\n                            <ProtectedRoute path=\"/inschrijvingen-projecten\" component={RegistrationList} />\r\n                            <ProtectedRoute path=\"/project-deelname/:id\" component={RegistrationDetails} />\r\n                            <ProtectedRoute path=\"/project/:id\" component={ProjectDetails} />\r\n                            <ProtectedRoute path=\"/waardestaat-documenten\" component={FinancialOverviewDocuments} />\r\n                            <ProtectedRoute path=\"/wijzig-inloggegevens\" component={ChangeAccount} />\r\n                            <ProtectedRoute path=\"/over-ons\" component={AboutUs} />\r\n                            <ProtectedRoute path=\"/over-ons-organisatie/:id\" component={AboutUsAdministration} />\r\n                            <PublicRoute path=\"/login\" component={Login} />\r\n                            <PublicRoute path=\"/activeer-registratie/:registrationCode/:email\" component={Register} />\r\n                            <PublicRoute path=\"/wachtwoord-vergeten\" component={Forgot} />\r\n                            <PublicRoute path=\"/wachtwoord-wijzigen/:token/:email\" component={Reset} />\r\n                            <PublicRoute path=\"/nieuw-account\" component={NewAccount} />\r\n                            <PublicRoute path=\"/nieuw-account-succes\" component={NewAccountSuccess} />\r\n                        </Switch>\r\n                    </ThemeSettingsProvider>\r\n                </PortalUserProvider>\r\n            </AuthProvider>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/normalize.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-day-picker/lib/style.css';\r\nimport './css/webflow.css';\r\nimport './css/econobis.webflow.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'moment/locale/nl';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// Server data is set and can now removed\r\nvar serverDataScript = document.getElementById('server-data');\r\nserverDataScript.remove();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}