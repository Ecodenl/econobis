{"version":3,"sources":["context/AuthContext.js","context/PortalUserContext.js","context/ThemeSettingsContext.js","components/layout/Header.js","api/default-setup/AxiosInstance.js","api/portal-user/PortalUserAPI.js","route/ProtectedRoute.js","route/PublicRoute.js","components/form/InputText.js","components/button/ButtonText.js","container/authorization/login/Form.js","api/auth/AuthAPI.js","api/portal-settings/PortalSettingsAPI.js","container/authorization/login/index.js","container/authorization/register/Form.js","container/authorization/register/index.js","container/authorization/forgot/Form.js","container/authorization/forgot/index.js","container/authorization/reset/Form.js","container/authorization/reset/index.js","api/project/ProjectAPI.js","api/contact/ContactAPI.js","helpers/RebaseContact.js","components/general/LoadingView.js","components/general/TextBlock.js","container/contact-details/default-form-personal/View.js","components/form/Select.js","data/Countries.js","data/EnergySuppliers.js","data/Titles.js","data/LastNamePrefixes.js","components/form/InputDate.js","container/contact-details/default-form-personal/Edit.js","helpers/ValidationSchemaPersonal.js","container/contact-details/Personal.js","container/contact-details/default-form-organisation/View.js","container/contact-details/default-form-organisation/Edit.js","helpers/ValidationSchemaOrganisation.js","container/contact-details/Organisation.js","container/contact-details/index.js","container/my-areas-of-interest/Form.js","container/my-areas-of-interest/index.js","helpers/MoneyPresenter.js","helpers/CalculateTransactionCosts.js","components/form/InputTextCurrency.js","container/register/steps/StepOneLoan.js","container/register/steps/StepOneObligation.js","container/register/steps/StepOneCapital.js","container/register/steps/StepOnePcr.js","container/register/steps/StepTwo.js","container/register/steps/StepThree.js","components/general/ViewHtmlAsText.js","api/participant-project/ParticipantProjectAPI.js","container/register/steps/StepFour.js","container/register/steps/StepFive.js","container/register/steps/index.js","container/register/MasterForm.js","container/register/index.js","container/project/list/index.js","container/project/details/LoanDetails.js","container/project/details/ObligationDetails.js","container/project/details/CapitalDetails.js","container/project/details/PcrDetails.js","container/project/details/index.js","container/registration/list/index.js","container/authorization/new-account/NewAccountFormPersonal.js","container/authorization/new-account/NewAccountFormOrganisation.js","container/authorization/new-account/index.js","container/authorization/new-account/NewAccountSuccess.js","container/authorization/change-account/Email.js","container/authorization/change-account/Password.js","container/authorization/change-account/index.js","container/about-us/list/index.js","container/registration/details/Title.js","helpers/classNameBasedOnTypePresenter.js","helpers/ValueBasedOnTypePresenter.js","container/registration/details/project-table/index.js","container/registration/details/mutation-table/index.js","container/registration/details/index.js","container/financial-overview-documents/list/index.js","api/administration/AdministrationAPI.js","container/about-us/details/index.js","api/participant-mutation/ParticipantMutationAPI.js","container/register/mollie-redirect/index.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","localStorageToken","AuthProvider","props","useState","window","localStorage","getItem","checkIfAuth","isAuth","setAuth","Provider","value","login","payload","cbRedirect","token","access_token","removeItem","setItem","moment","format","logout","children","AuthConsumer","Consumer","PortalUserContext","user","setInitialUserData","PortalUserProvider","setUser","currentSelectedContact","setCurrentContact","selectedContactId","id","occupationUser","occupations","find","occupation","primaryContact","organisationUser","typeId","primary","switchCurrentContact","contact","resetCurrentUserToDefault","updateNameSelectedContact","fullName","updatedOccupations","map","occupationContact","PortalUserConsumer","ThemeSettingsContext","defaultThemeSettings","setInitialThemeSettings","setCurrentThemeSettings","switchToDefaultThemeSettings","ThemeSettingsProvider","setDefaultThemeSettings","currentThemeSettings","useEffect","document","documentElement","style","setProperty","portal_background_color","portal_background_text_color","login_header_background_color","login_header_background_text_color","header_icons_color","login_field_background_color","login_field_background_text_color","button_color","button_text_color","ThemeSettingsConsumer","withRouter","location","history","menuOpen","updateStateMenu","closeMenu","redirect","to","push","ref","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","useOutsideAlerter","useRef","className","ReactHtmlParser","search","replace","firstName","slice","lastName","formatProfilePicName","Container","Row","Col","xs","undefined","portal_logo_file_name","Image","src","onClick","Dropdown","alignRight","Toggle","Menu","Header","Item","disabled","Divider","active","occupationForPortal","key","right","width","isOpen","onStateChange","state","handleStateChange","customBurgerIcon","Fragment","pathname","BASE_URL","__SERVER_DATA__","base_url","axiosInstance","axios","create","baseURL","interceptors","request","use","config","lastActivity","add","hash","setTimeout","reload","checkTokenExpiration","AUTH_TOKEN","headers","Authorization","error","Promise","reject","get","params","jory","fld","rlt","values","post","ProtectedRoute","Component","component","rest","useLocation","useContext","PortalUserAPI","then","data","portalSettingsLayoutAssigned","catch","alert","includes","render","ProtectedRouteWithContext","PublicRoute","InputText","field","type","readOnly","placeholder","showErrorMessage","errors","touched","classNameErrorMessage","customOnChange","onChange","name","Boolean","defaultProps","ButtonText","buttonClassName","buttonText","onClickAction","loading","title","loadingSpinnerColor","Button","size","color","validationSchema","Yup","shape","username","email","required","password","LoginForm","handleSubmit","initialValues","enableReinitialize","onSubmit","actions","setSubmitting","isSubmitting","AUTH_KEY","client_id","client_secret","client_key","grant_type","requestUrl","defaults","common","loginCredentials","keys","isLoading","setIsLoading","showError","toggleError","redirectToReferrer","toggleRedirect","from","portalActive","setPortalActive","showNewAtCooperativeLink","setShowNewAtCooperativeLink","newAtCooperativeLinkText","setNewAtCooperativeLinkText","AuthAPI","PortalSettingsAPI","fluid","sm","md","lg","xl","alt","Alert","variant","href","min","matches","passwordConfirmation","oneOf","RegisterForm","Register","match","showLoginLink","setLoginLink","errorMessage","setErrorMessage","showSuccessMessage","toggleSuccessMessage","registrationCode","decodeURIComponent","password_confirmation","console","log","response","status","message","RegisterWithContext","ForgotForm","Forgot","ResetForm","Reset","ResetWithContext","flt","and","f","o","d","projectType","administration","person","organisation","emailAddresses","phoneNumbers","addresses","country","primaryContactEnergySupplier","energySupplier","participations","project","registerValues","contactId","projectId","responseType","contactData","emptyAddress","street","number","addition","postalCode","city","countryId","primaryAddress","visitAddress","postalAddress","invoiceAddress","address","emptyEmail","emailCorrespondence","emailAddress","emailInvoice","emptyPhoneNumber","phoneNumberPrimary","phoneNumber","phoneNumberTwo","filter","energySupplierId","esNumber","eanElectricity","memberSince","eanGas","Loading","height","TextBlock","showPlaceholder","DefaultContactPersonalView","portalSettings","initialContact","iban","ibanAttn","didAgreeAvg","dateDidAgreeAvg","FormLabel","initials","lastNamePrefix","dateOfBirth","checked","htmlFor","Select","options","optionLabel","emptyOption","option","InputDate","onChangeAction","formattedDate","onDayChange","date","formatDate","parseDate","dayPickerProps","showWeekNumbers","locale","firstDayOfWeek","localeUtils","MomentLocaleUtils","inputProps","autoComplete","DefaultContactPersonalEdit","projectTypeCodeRef","setFieldValue","Titles","disableChangeContactNameOnPortal","data-tip","data-for","effect","place","multiline","aria-haspopup","LastNamePrefixes","isParticipant","isParticipantSceProject","isParticipantPcrProject","Countries","e","toUpperCase","EnergySuppliers","validationSchemaBasic","test","trim","nullable","Number","isInteger","this","parent","validationSchemaAdditional","typeError","ibantools","validationSchemaPcrAdditional","ContactDetailsPersonal","handleSubmitContactValues","editButtonGroup","editForm","setEditForm","ValidationSchemaPersonal","concat","ButtonGroup","aria-label","isEmpty","DefaultContactOrganisationView","primaryOccupations","chamberOfCommerceNumber","vatNumber","website","DefaultContactOrganisationEdit","ContactDetailsOrganisation","ValidationSchemaOrganisation","ContactDetails","setContact","setPortalSettings","setLoading","prevCurrentSelectedContact","usePrevious","callFetchContact","ContactAPI","rebaseContact","switchToView","updatedContact","setStatus","setState","hasError","LoadingView","ContactDetailsWithContext","MyAreasOfInterestForm","arrayHelpers","myAreasOfInterest","myAreaOfInterest","index","participation","generalOptions","generalOption","MyAreasOfInterest","amount","parseFloat","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","amountOptioned","participationsOptioned","transactionCosts","varAmountOptioned","toString","varParticipationsOptioned","toFixed","transactionCostsCodeRef","transactionCostsAmount","codeRef","currentBookWorth","transactionCostsAmount3","transactionCostsPercentage3","transactionCostsAmount2","transactionCostsPercentage2","transactionCostsPercentage","transactionCostsAmountMin","transactionCostsAmountMax","InputTextCurrency","StepOneLoan","next","contactProjectData","initialRegisterValues","handleSubmitRegisterValues","transform","originalvalue","minAmountLoan","maxAmountLoan","choiceMembership","showQuestionAboutMembership","belongsToMembershipGroup","calculateAmount","calculateTransactionCostsAmount","useTransactionCostsWithMembership","calculateTransactionCosts","calculateTotalAmount","totalAmount","Label","MoneyPresenter","textIsMemberMerged","textIsNoMemberMerged","textBecomeMemberMerged","textBecomeNoMemberMerged","textTransactionCosts","StepOneObligation","integer","minParticipations","max","maxParticipations","positive","StepOneCapital","StepOnePcr","pcrYearlyPowerKwhConsumption","pcrPostalCode","checkPostalcodeLink","postalcodeLink","substring","pcrNumberOfSolarPanels","pcrInputGeneratedNumberOfKwh","PCR_POWER_KWH_CONSUMPTION_PERCENTAGE","PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL","calculateEstimatedGeneratedNumberOfKwh","calculateGeneratedNumberOfKwh","calculatePowerKwhConsumption","powerKwhConsumption","pcrEstimatedGeneratedNumberOfKwh","Math","ceil","pcrAdviseMaxNumberOfParticipations","calculateAdviseMaxNumberOfParticipations","pcrHasSolarPanels","pcrEstimatedRevenueOk","StepTwo","previous","typeContact","validationSchemaPcrPersonal","validationSchemaPcrOrganisation","isSceProject","StepThree","didAcceptAgreement","didUnderstandInfo","dangerouslySetInnerHTML","__html","textAgreeTermsMerged","textLinkAgreeTermsMerged","textLinkUnderstandInfoMerged","usesMollie","ViewHtmlAsText","StepFour","setSucces","contactDocument","setContactDocument","didAgreeRegistration","contactDocumentOk","ParticipantProjectAPI","econobisPaymentLink","textAcceptAgreementMerged","textAcceptAgreementQuestionMerged","StepFive","textRegistrationFinishedMerged","split","item","Steps","currentStep","MasterForm","setStep","RegisterProject","initialPcrValues","setRegisterValues","setProject","isSucces","setContactProjectData","formatFullName","all","ProjectAPI","spread","payloadProject","payloadContact","payloadContactProjectData","projectRegisterIndicators","allowChangeParticipation","allowPayMollie","hasParticipation","allowRegisterToProject","nextStep","textNotAllowedRegisterToProject","RegisterProjectWithContext","ProjectList","contactProjectsArray","setContactProjectsArray","sceOrPcrProjectsAvailable","setSceOrPcrProjectsAvailable","length","isSceOrPcrProject","noAddressesFound","Table","responsive","administrationName","dateStartRegistrations","dateEndRegistrations","ProjectListWithContext","LoanDetails","amountOfLoanNeeded","description","ObligationDetails","totalParticipations","CapitalDetails","PcrDetails","ProjectDetails","renderDetails","linkProjectInfo","RegistrationList","dateEnd","amountInteressed","amountGranted","amountDefinitive","participationsInteressed","participationsGranted","participationsDefinitive","RegistrationListWithContext","personFirstName","personLastName","NewAccountFormPersonal","personTitleId","organisationName","NewAccountFormOrganisation","NewAccount","executeRecaptcha","useGoogleReCaptcha","contactType","setContactType","a","reCaptchaToken","ButtonToolbar","toggle","block","NewAccountWithProvider","reCaptchaKey","process","language","NewAccountSuccess","close","ChangeAccountEmail","portalUserEmail","setPortalUserEmail","changePrimaryEmailAddress","resetForm","handleSubmitChangeEmail","ChangeAccountPassword","handleSubmitChangePassword","ChangeAccount","INITIAL_STATE","result","reducer","action","AboutUs","useReducer","dispatch","RegistrationDetailsTitle","contactName","projectName","moneyPresenter","RegistrationDetailsProjectTable","fields","label","valueBasedOnTypePresenter","RegistrationDetailsMutationTable","participantMutations","participantMutation","class","classNameBasedOnTypePresenter","RegistrationDetails","basicInformation","FinancialOverviewDocuments","preventDefault","fileDownload","downloadFile","AboutUsAdministration","setAdministration","AdministrationAPI","Card","Body","kvkNumber","iBAN","btwNumber","code","ProjectMollieRedirect","setParticipantMutation","ParticipantMutationAPI","payloadParticipantMutation","isPaidByMollie","textRegistrationFinished","ProjectMollieRedirectWithContext","App","exact","path","Login","hostname","ReactDOM","getElementById","remove","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b28b0acd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\n\nconst AuthContext = React.createContext();\n\nconst localStorageToken = '__customer-portal-econobis-token__';\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\n\nconst AuthProvider = function(props) {\n    const [isAuth, setAuth] = useState(checkIfAuth());\n\n    function login(payload, cbRedirect) {\n        const token = payload.access_token;\n        window.localStorage.removeItem(localStorageCurrentSelectedContact);\n        window.localStorage.setItem(localStorageToken, token);\n        localStorage.setItem(localStorageLastActivity, moment().format());\n        setAuth(true);\n        cbRedirect();\n    }\n\n    function logout() {\n        window.localStorage.removeItem(localStorageToken);\n        window.localStorage.removeItem(localStorageLastActivity);\n        setAuth(false);\n    }\n\n    function checkIfAuth() {\n        const token = getToken();\n        if (!token) {\n            // Redirect to login\n            return false;\n        }\n        return true;\n    }\n\n    function getToken() {\n        return window.localStorage.getItem(localStorageToken);\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{\n                isAuth: isAuth,\n                login: login,\n                logout: logout,\n            }}\n        >\n            {props.children}\n        </AuthContext.Provider>\n    );\n};\n\nconst AuthConsumer = AuthContext.Consumer;\n\nexport { AuthProvider, AuthConsumer };\n","import React, { createContext, useState } from 'react';\n\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\n\nconst PortalUserContext = createContext({\n    user: {},\n    setInitialUserData: () => {},\n});\n\nconst PortalUserProvider = function(props) {\n    const [user, setUser] = useState({});\n    const [currentSelectedContact, setCurrentContact] = useState({});\n\n    function setInitialUserData(user) {\n        setUser(user);\n\n        const selectedContactId = window.localStorage.getItem(localStorageCurrentSelectedContact);\n\n        // When there is already a selected contact id then lookup the contact\n        // Selected contact could be the user or one of the occupations\n        if (selectedContactId) {\n            if (user.id == selectedContactId) {\n                setCurrentContact(user);\n            } else {\n                const occupationUser = user.occupations.find(\n                    occupation => occupation.primaryContact.id == selectedContactId\n                );\n\n                setCurrentContact(occupationUser.primaryContact);\n            }\n        } else {\n            // If there is no selected contact then set default the login user as selected contact.\n            // Except if the user has an organisation as occupation that is primary\n            const organisationUser = user.occupations.find(\n                occupation => occupation.primaryContact.typeId === 'organisation' && occupation.primary\n            );\n\n            if (organisationUser) {\n                setCurrentContact(organisationUser.primaryContact);\n                window.localStorage.setItem(localStorageCurrentSelectedContact, organisationUser.primaryContact.id);\n            } else {\n                setCurrentContact(user);\n                window.localStorage.setItem(localStorageCurrentSelectedContact, user.id);\n            }\n        }\n    }\n\n    function switchCurrentContact(contact) {\n        setCurrentContact(contact);\n        window.localStorage.setItem(localStorageCurrentSelectedContact, contact.id);\n    }\n\n    function resetCurrentUserToDefault() {\n        setUser({});\n        setCurrentContact({});\n    }\n\n    function updateNameSelectedContact(fullName) {\n        setCurrentContact({ ...currentSelectedContact, fullName });\n\n        if (user.id === currentSelectedContact.id) {\n            user.fullName = fullName;\n        }\n\n        const updatedOccupations = user.occupations.map(occupationContact => {\n            if (occupationContact.primaryContact.id === currentSelectedContact.id) {\n                occupationContact.primaryContact.fullName = fullName;\n            }\n            return occupationContact;\n        });\n\n        setUser({ ...user, occupations: updatedOccupations });\n    }\n\n    return (\n        <PortalUserContext.Provider\n            value={{\n                user: user,\n                setInitialUserData,\n                currentSelectedContact,\n                switchCurrentContact,\n                resetCurrentUserToDefault,\n                updateNameSelectedContact,\n            }}\n        >\n            {props.children}\n        </PortalUserContext.Provider>\n    );\n};\n\nconst PortalUserConsumer = PortalUserContext.Consumer;\n\nexport { PortalUserProvider, PortalUserConsumer, PortalUserContext };\n","import React, { createContext, useState, useEffect } from 'react';\n\nconst ThemeSettingsContext = createContext({\n    defaultThemeSettings: {},\n    setInitialThemeSettings: () => {},\n    setCurrentThemeSettings: () => {},\n    switchToDefaultThemeSettings: () => {},\n});\n\nconst ThemeSettingsProvider = function(props) {\n    const [defaultThemeSettings, setDefaultThemeSettings] = useState({});\n    const [currentThemeSettings, setCurrentThemeSettings] = useState({});\n\n    useEffect(\n        function() {\n            if (currentThemeSettings.id) {\n                handleChangeCurrentThemeSettings();\n            }\n        },\n        [currentThemeSettings.id]\n    );\n\n    function setInitialThemeSettings(payload) {\n        setDefaultThemeSettings(payload);\n        setCurrentThemeSettings(payload);\n    }\n\n    function switchToDefaultThemeSettings() {\n        setCurrentThemeSettings(defaultThemeSettings);\n    }\n\n    function handleChangeCurrentThemeSettings() {\n        document.documentElement.style.setProperty(\n            '--main-primary-color',\n            currentThemeSettings.portal_background_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-primary-text-color',\n            currentThemeSettings.portal_background_text_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-primary-rgba',\n            currentThemeSettings.login_header_background_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-primary-rgba-text-color',\n            currentThemeSettings.login_header_background_text_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-header-portal-icon-color',\n            currentThemeSettings.header_icons_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-secondary-color',\n            currentThemeSettings.login_field_background_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-secondary-text-color',\n            currentThemeSettings.login_field_background_text_color\n        );\n        document.documentElement.style.setProperty('--button-primary-color', currentThemeSettings.button_color);\n        document.documentElement.style.setProperty(\n            '--button-primary-text-color',\n            currentThemeSettings.button_text_color\n        );\n    }\n\n    return (\n        <ThemeSettingsContext.Provider\n            value={{\n                defaultThemeSettings,\n                setInitialThemeSettings,\n                setCurrentThemeSettings,\n                switchToDefaultThemeSettings,\n                currentThemeSettings,\n            }}\n        >\n            {props.children}\n        </ThemeSettingsContext.Provider>\n    );\n};\n\nconst ThemeSettingsConsumer = ThemeSettingsContext.Consumer;\n\nexport { ThemeSettingsProvider, ThemeSettingsConsumer, ThemeSettingsContext };\n","import React, { useState, useEffect, useRef } from 'react';\nimport { slide as Menu } from 'react-burger-menu';\nimport { AuthConsumer } from '../../context/AuthContext';\nimport { Link, withRouter } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\nimport { ThemeSettingsConsumer } from '../../context/ThemeSettingsContext';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport { FaUser } from 'react-icons/fa';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ReactHtmlParser from 'react-html-parser';\n\nfunction Header({ location, history }) {\n    const [menuOpen, updateStateMenu] = useState(false);\n\n    // This keeps your state in sync with the opening/closing of the menu\n    // via the default means, e.g. clicking the X, pressing the ESC key etc.\n    function handleStateChange(state) {\n        updateStateMenu(state.isOpen);\n    }\n\n    // This can be used to close the menu, e.g. when a user clicks a menu item\n    function openMenu() {\n        updateStateMenu(true);\n    }\n\n    // This can be used to close the menu, e.g. when a user clicks a menu item\n    function closeMenu() {\n        updateStateMenu(false);\n    }\n\n    // This can be used to toggle the menu, e.g. when using a custom icon\n    // Tip: You probably want to hide either/both default icons if using a custom icon\n    // See https://github.com/negomi/react-burger-menu#custom-icons\n    function toggleMenu() {\n        updateStateMenu(!menuOpen);\n    }\n\n    function formatProfilePicName(fullName) {\n        if (fullName) {\n            if (fullName.search(',') < 0) {\n                return fullName.replace(/\\s(?=\\S*$)/, '<br>');\n            } else {\n                const firstName = fullName.slice(fullName.search(',') + 2);\n                let lastName = fullName.slice(0, fullName.search(','));\n                lastName = lastName.replace(/\\s(?=\\S*$)/, '<br>');\n                return firstName + '<br>' + lastName;\n            }\n        } else {\n            return '?';\n        }\n    }\n\n    /**\n     * Hook that alerts clicks outside of the passed ref\n     */\n    function useOutsideAlerter(ref) {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                updateStateMenu(false);\n            }\n        }\n\n        useEffect(() => {\n            // Bind the event listener\n            document.addEventListener('mousedown', handleClickOutside);\n            return () => {\n                // Unbind the event listener on clean up\n                document.removeEventListener('mousedown', handleClickOutside);\n            };\n        });\n    }\n\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef);\n\n    function redirect(to) {\n        history.push(`/${to}`);\n    }\n\n    return (\n        <header>\n            <div className=\"header-portal\">\n                <div className=\"profile-pic\">\n                    <PortalUserConsumer>\n                        {({ currentSelectedContact }) => (\n                            <p className=\"profile-title\">\n                                {ReactHtmlParser(formatProfilePicName(currentSelectedContact.fullName))}\n                            </p>\n                        )}\n                    </PortalUserConsumer>\n                </div>\n\n                <Container>\n                    <Row>\n                        <Col xs={6}>\n                            <ThemeSettingsConsumer>\n                                {({ currentThemeSettings }) => (\n                                    <div className=\"header-logo\">\n                                        {currentThemeSettings.portal_logo_file_name !== undefined && (\n                                            <Image src={`images/${currentThemeSettings.portal_logo_file_name}`} />\n                                        )}\n                                    </div>\n                                )}\n                            </ThemeSettingsConsumer>\n                        </Col>\n                        <Col xs={6}>\n                            <div className=\"d-flex justify-content-end\">\n                                {/* Hambuger menu */}\n                                <div className=\"bm-burger-button\" onClick={openMenu}>\n                                    <span>\n                                        <span className=\"bm-burger-bars bm-burger-bar-1\" />\n                                        <span className=\"bm-burger-bars bm-burger-bar-2\" />\n                                        <span className=\"bm-burger-bars bm-burger-bar-3\" />\n                                    </span>\n                                </div>\n                                {/* User switch menu */}\n                                <AuthConsumer>\n                                    {({ logout }) => {\n                                        return (\n                                            <PortalUserConsumer>\n                                                {({\n                                                    user,\n                                                    currentSelectedContact,\n                                                    switchCurrentContact,\n                                                    resetCurrentUserToDefault,\n                                                }) => {\n                                                    return (\n                                                        <Dropdown alignRight>\n                                                            <Dropdown.Toggle>\n                                                                <FaUser />\n                                                            </Dropdown.Toggle>\n                                                            <Dropdown.Menu>\n                                                                <Dropdown.Header>Ingelogd als</Dropdown.Header>\n                                                                <Dropdown.Item disabled>{user.fullName}</Dropdown.Item>\n                                                                <Dropdown.Item>\n                                                                    <Link\n                                                                        to={'/wijzig-inloggegevens'}\n                                                                        className={'dropdown-link'}\n                                                                    >\n                                                                        Wijzig inloggegevens\n                                                                    </Link>\n                                                                </Dropdown.Item>\n                                                                {/*<Dropdown.Item*/}\n                                                                {/*href={'#/wijzig-inloggegevens'}*/}\n                                                                {/*className={'dropdown-link'}*/}\n                                                                {/*>*/}\n                                                                {/*Wijzig inloggegevens*/}\n                                                                {/*</Dropdown.Item>*/}\n                                                                <Dropdown.Divider />\n                                                                <Dropdown.Header>Beheren van</Dropdown.Header>\n                                                                <Dropdown.Item\n                                                                    onClick={() => {\n                                                                        switchCurrentContact(user);\n                                                                        redirect('gegevens');\n                                                                    }}\n                                                                    active={\n                                                                        currentSelectedContact.id === user.id\n                                                                            ? true\n                                                                            : false\n                                                                    }\n                                                                >\n                                                                    {user.fullName}\n                                                                </Dropdown.Item>\n                                                                {user.occupations\n                                                                    ? user.occupations.map(occupationContact =>\n                                                                          (occupationContact.primaryContact.typeId ===\n                                                                              'organisation' &&\n                                                                              occupationContact.primary) ||\n                                                                          (occupationContact.primaryContact.typeId ===\n                                                                              'person' &&\n                                                                              occupationContact.occupation\n                                                                                  .occupationForPortal) ? (\n                                                                              <Dropdown.Item\n                                                                                  key={occupationContact.id}\n                                                                                  onClick={() => {\n                                                                                      switchCurrentContact(\n                                                                                          occupationContact.primaryContact\n                                                                                      );\n                                                                                      redirect('gegevens');\n                                                                                  }}\n                                                                                  active={\n                                                                                      currentSelectedContact.id ===\n                                                                                      occupationContact.primaryContact\n                                                                                          .id\n                                                                                          ? true\n                                                                                          : false\n                                                                                  }\n                                                                              >\n                                                                                  {\n                                                                                      occupationContact.primaryContact\n                                                                                          .fullName\n                                                                                  }\n                                                                              </Dropdown.Item>\n                                                                          ) : null\n                                                                      )\n                                                                    : null}\n                                                                <Dropdown.Divider />\n                                                                <Dropdown.Item\n                                                                    onClick={() => {\n                                                                        logout();\n                                                                        resetCurrentUserToDefault();\n                                                                    }}\n                                                                >\n                                                                    Log uit\n                                                                </Dropdown.Item>\n                                                            </Dropdown.Menu>\n                                                        </Dropdown>\n                                                    );\n                                                }}\n                                            </PortalUserConsumer>\n                                        );\n                                    }}\n                                </AuthConsumer>\n                            </div>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n            {/* Sidebar menu */}\n            <Menu\n                right\n                width={'300px'}\n                // noOverlay\n                isOpen={menuOpen}\n                onStateChange={state => handleStateChange(state)}\n                customBurgerIcon={false}\n            >\n                <div className={'sidebar-menu'}>\n                    <React.Fragment>\n                        <h6 className=\"heading in-menu\">MENU</h6>\n                        <Link\n                            to={'/inschrijvingen-projecten'}\n                            className={`nav-link w-nav-link w--nav-link-open ${\n                                location.pathname === '/inschrijvingen-projecten' ? 'w--current' : ''\n                            }`}\n                            onClick={closeMenu}\n                        >\n                            Huidige deelnames\n                        </Link>\n                        <Link\n                            to={'/gegevens'}\n                            className={`nav-link w-nav-link w--nav-link-open ${\n                                location.pathname === '/gegevens' ? 'w--current' : ''\n                            }`}\n                            onClick={closeMenu}\n                        >\n                            Gegevens\n                        </Link>\n                        {/* later */}\n                        {/*<Link*/}\n                        {/*to={'/deelname-projecten'}*/}\n                        {/*className={`nav-link w-nav-link w--nav-link-open ${*/}\n                        {/*location.pathname === '/' ? 'w--current' : ''*/}\n                        {/*}`}*/}\n                        {/*onClick={closeMenu}*/}\n                        {/*>*/}\n                        {/*Deelnames*/}\n                        {/*</Link>*/}\n                        <Link\n                            to={'/inschrijven-projecten'}\n                            className={`nav-link w-nav-link w--nav-link-open ${\n                                location.pathname === '/inschrijven-projecten' ? 'w--current' : ''\n                            }`}\n                            onClick={closeMenu}\n                        >\n                            Inschrijven projecten\n                        </Link>\n                        <Link\n                            to={'/waardestaat-documenten'}\n                            className={`nav-link w-nav-link w--nav-link-open ${\n                                location.pathname === '/waardestaat-documenten' ? 'w--current' : ''\n                            }`}\n                            onClick={closeMenu}\n                        >\n                            Waardestaat documenten\n                        </Link>\n                        <Link\n                            to={'/over-ons'}\n                            className={`nav-link w-nav-link w--nav-link-open ${\n                                location.pathname === '/over-ons' ? 'w--current' : ''\n                            }`}\n                            onClick={closeMenu}\n                        >\n                            Over ons\n                        </Link>\n                    </React.Fragment>\n                </div>\n            </Menu>\n        </header>\n    );\n}\n\nexport default withRouter(Header);\n","import axios from 'axios';\nimport moment from 'moment';\n\nconst BASE_URL = window.__SERVER_DATA__.base_url;\nconst localStorageToken = '__customer-portal-econobis-token__';\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\n\nconst axiosInstance = axios.create({\n    baseURL: `${BASE_URL}`,\n});\n\naxiosInstance.interceptors.request.use(\n    function(config) {\n        // First check if token is expired or not\n        checkTokenExpiration();\n        // Do something before request is sent\n        const AUTH_TOKEN = 'Bearer ' + localStorage.getItem(localStorageToken);\n        config.headers.Authorization = AUTH_TOKEN;\n        return config;\n    },\n    function(error) {\n        // Do something with request error\n        return Promise.reject(error);\n    }\n);\n\n// Check token expiration and redirect if token is expired\nfunction checkTokenExpiration() {\n    const lastActivity = moment(localStorage.getItem(localStorageLastActivity));\n\n    if (\n        !localStorage.getItem(localStorageLastActivity) ||\n        lastActivity.add('30', 'minutes').format() < moment().format()\n    ) {\n        if (window.location.hash !== '#/login' && window.location.hash !== '#/loguit') {\n            setTimeout(() => {\n                localStorage.removeItem(localStorageToken);\n                localStorage.removeItem(localStorageLastActivity);\n                window.location.reload();\n            }, 100);\n        }\n    } else {\n        localStorage.setItem(localStorageLastActivity, moment().format());\n    }\n}\n\nexport default axiosInstance;\n","import axiosInstance from '../default-setup/AxiosInstance';\n\nexport default {\n    fetchPortalUserDetails: function() {\n        const requestUrl = `/me`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: [\n                        'id',\n                        'number',\n                        'fullName',\n                        'iban',\n                        'ibanAttn',\n                        'didAgreeAvg',\n                        'dateDidAgreeAvg',\n                        'addressLines',\n                        'portalSettingsLayoutAssigned',\n                    ],\n                    rlt: {\n                        occupations: {\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\n                            rlt: {\n                                occupation: {\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\n                                },\n                                primaryContact: { fld: ['id', 'fullName', 'typeId'] },\n                                contact: { fld: ['id', 'fullName'] },\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    },\n\n    fetchPortalUserEmail: function() {\n        return axiosInstance.get(`/portal-user-email`);\n    },\n\n    changeEmail: values => {\n        const requestUrl = `/portal-user/change-email`;\n\n        return axiosInstance.post(requestUrl, values);\n    },\n\n    changePassword: values => {\n        const requestUrl = `/portal-user/change-password`;\n\n        return axiosInstance.post(requestUrl, values);\n    },\n};\n","import React, { useEffect, useContext } from 'react';\nimport { Route, Redirect, useLocation } from 'react-router-dom';\nimport { AuthConsumer } from '../context/AuthContext';\nimport Header from '../components/layout/Header';\nimport PortalUserAPI from '../api/portal-user/PortalUserAPI';\nimport { PortalUserConsumer } from '../context/PortalUserContext';\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\n\nconst ProtectedRoute = ({ component: Component, setInitialUserData, isAuth, ...rest }) => {\n    const location = useLocation();\n    const { setInitialThemeSettings, switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\n\n    useEffect(() => {\n        if (isAuth) {\n            (function callFetchPortalUserDetails() {\n                PortalUserAPI.fetchPortalUserDetails()\n                    .then(payload => {\n                        setInitialUserData(payload.data.data);\n                        setInitialThemeSettings(payload.data.data.portalSettingsLayoutAssigned);\n                    })\n                    .catch(error => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                    });\n            })();\n        }\n    }, [isAuth]);\n\n    useEffect(() => {\n        if (isAuth) {\n            if (\n                !location.pathname.includes('/project/') &&\n                !location.pathname.includes('/project-deelname/') &&\n                !location.pathname.includes('/inschrijven/')\n            ) {\n                switchToDefaultThemeSettings();\n            }\n        }\n    }, [location.pathname]);\n\n    return (\n        <AuthConsumer>\n            {({ isAuth }) => (\n                <div className=\"body-2\" id=\"body-2\">\n                    <Header />\n                    <Route render={props => (isAuth ? <Component {...props} /> : <Redirect to=\"/login\" />)} {...rest} />\n                </div>\n            )}\n        </AuthConsumer>\n    );\n};\n\nexport default function ProtectedRouteWithContext(props) {\n    return (\n        <AuthConsumer>\n            {({ isAuth }) => (\n                <PortalUserConsumer>\n                    {({ setInitialUserData }) => (\n                        <ProtectedRoute {...props} setInitialUserData={setInitialUserData} isAuth={isAuth} />\n                    )}\n                </PortalUserConsumer>\n            )}\n        </AuthConsumer>\n    );\n}\n","import React, { useContext, useEffect } from 'react';\nimport { Route, useLocation } from 'react-router-dom';\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\n\nconst PublicRoute = ({ component: Component, ...rest }) => {\n    const location = useLocation();\n    const { switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\n\n    useEffect(() => {\n        switchToDefaultThemeSettings();\n    }, [location.pathname]);\n\n    return <Route render={props => <Component {...props} />} {...rest} />;\n};\n\nexport default PublicRoute;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst InputText = ({\n    field,\n    type,\n    className,\n    id,\n    readOnly,\n    placeholder,\n    showErrorMessage,\n    errors,\n    touched,\n    classNameErrorMessage,\n    disabled,\n    customOnChange = null,\n}) => {\n    if (customOnChange) {\n        field.onChange = customOnChange;\n    }\n    return (\n        <>\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\n            ) : null}\n            <input\n                type={type}\n                className={`text-input w-input ${className} ${\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\n                } `}\n                id={id}\n                {...field}\n                readOnly={readOnly}\n                placeholder={placeholder}\n                disabled={disabled}\n            />\n        </>\n    );\n};\n\nInputText.defaultProps = {\n    type: 'text',\n    className: 'content',\n    readOnly: false,\n    placeholder: '',\n    showErrorMessage: true,\n    classNameErrorMessage: 'text-danger',\n    errors: {},\n    touched: {},\n};\n\nInputText.propTypes = {\n    field: PropTypes.object.isRequired,\n    type: PropTypes.string,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    readOnly: PropTypes.bool,\n    showErrorMessage: PropTypes.bool,\n    classNameErrorMessage: PropTypes.string,\n    placeholder: PropTypes.string,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n};\n\nexport default InputText;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ClipLoader } from 'react-spinners';\nimport Button from 'react-bootstrap/Button';\n\nconst ButtonText = ({\n    buttonClassName,\n    buttonText,\n    onClickAction,\n    type,\n    loading,\n    title,\n    loadingSpinnerColor,\n    disabled,\n}) => (\n    <Button\n        type={type}\n        className={`${buttonClassName}`}\n        onClick={onClickAction}\n        disabled={loading || disabled}\n        title={title}\n        size=\"sm\"\n    >\n        {loading ? <ClipLoader color={loadingSpinnerColor} size={17} /> : <span>{buttonText}</span>}\n    </Button>\n);\n\nButtonText.defaultProps = {\n    buttonClassName: '',\n    type: 'button',\n    title: '',\n    loading: false,\n    loadingSpinnerColor: 'white',\n    disabled: false,\n};\n\nButtonText.propTypes = {\n    buttonClassName: PropTypes.string,\n    buttonText: PropTypes.string.isRequired,\n    onClickAction: PropTypes.func,\n    type: PropTypes.string,\n    title: PropTypes.string,\n    loading: PropTypes.bool,\n    loadingSpinnerColor: PropTypes.string,\n    disabled: PropTypes.bool,\n};\n\nexport default ButtonText;\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ButtonText from '../../../components/button/ButtonText';\n\nconst validationSchema = Yup.object().shape({\n    username: Yup.string()\n        .email()\n        .required('Verplicht'),\n    password: Yup.string().required('Verplicht'),\n});\n\nconst LoginForm = function({ handleSubmit, login }) {\n    return (\n        <Formik\n            initialValues={{ username: '', password: '' }}\n            enableReinitialize={true}\n            validationSchema={validationSchema}\n            onSubmit={(values, actions) => {\n                actions.setSubmitting(true);\n                handleSubmit(values, actions, login);\n            }}\n            render={({ isSubmitting, errors, touched }) => {\n                return (\n                    <Form>\n                        <Field\n                            name=\"username\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"username\"\n                                    className={''}\n                                    placeholder={'E-mailadres'}\n                                    errors={errors}\n                                    touched={touched}\n                                    // showErrorMessage={false}\n                                />\n                            )}\n                        />\n                        <Field\n                            name=\"password\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"password\"\n                                    className={''}\n                                    placeholder={'Wachtwoord'}\n                                    type={'password'}\n                                    errors={errors}\n                                    touched={touched}\n                                    // showErrorMessage={false}\n                                />\n                            )}\n                        />\n                        <ButtonText\n                            buttonText={'Log in'}\n                            buttonClassName={'authorization-button'}\n                            type={'submit'}\n                            loading={isSubmitting}\n                            loadingSpinnerColor={'#034b8c'}\n                        />\n                    </Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default LoginForm;\n","import axios from 'axios';\n\nconst AUTH_KEY = {\n    client_id: window.__SERVER_DATA__.client_id,\n    client_secret: window.__SERVER_DATA__.client_key,\n    grant_type: 'password',\n};\n\nconst BASE_URL = window.__SERVER_DATA__.base_url;\n\nexport default {\n    newAccount: payload => {\n        const requestUrl = `${BASE_URL}/new-account`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, payload);\n    },\n    newAccountSuccess: payload => {\n        const requestUrl = `${BASE_URL}/new-account-success`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, payload);\n    },\n\n    login: loginCredentials => {\n        const requestUrl = `${BASE_URL}/oauth/token`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, { ...AUTH_KEY, ...loginCredentials });\n    },\n\n    register: payload => {\n        const requestUrl = `${BASE_URL}/register`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, payload);\n    },\n\n    forgot: email => {\n        const requestUrl = `${BASE_URL}/password/email`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, email);\n    },\n\n    reset: payload => {\n        const requestUrl = `${BASE_URL}/password/reset`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, payload);\n    },\n};\n","import axiosInstance from '../default-setup/AxiosInstance';\n\nconst URL_PORTAL_SETTINGS = `setting`;\n\nexport default {\n    fetchPortalSettings: keys => {\n        const requestUrl = `${URL_PORTAL_SETTINGS}/multiple${keys}`;\n\n        return axiosInstance.get(requestUrl);\n    },\n    fetchPortalActive: () => {\n        const requestUrl = `${URL_PORTAL_SETTINGS}/portal-active`;\n\n        return axiosInstance.get(requestUrl);\n    },\n    fetchCooperativeName: () => {\n        const requestUrl = `${URL_PORTAL_SETTINGS}/cooperative-name`;\n\n        return axiosInstance.get(requestUrl);\n    },\n    fetchShowNewAtCooperativeLink: () => {\n        const requestUrl = `${URL_PORTAL_SETTINGS}/show-new-at-cooperative-link`;\n\n        return axiosInstance.get(requestUrl);\n    },\n    fetchNewAtCooperativeLinkText: () => {\n        const requestUrl = `${URL_PORTAL_SETTINGS}/new-at-cooperative-link-text`;\n\n        return axiosInstance.get(requestUrl);\n    },\n};\n","import React, { useEffect, useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { AuthConsumer } from '../../../context/AuthContext';\nimport LoginForm from './Form';\nimport AuthAPI from '../../../api/auth/AuthAPI';\nimport Alert from 'react-bootstrap/Alert';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport PortalSettingsAPI from '../../../api/portal-settings/PortalSettingsAPI';\n\nexport default props => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [showError, toggleError] = useState(false);\n\n    const [redirectToReferrer, toggleRedirect] = useState(false);\n    let { from } = props.location.state || { from: { pathname: '/gegevens' } };\n\n    const [portalActive, setPortalActive] = useState(false);\n    const [showNewAtCooperativeLink, setShowNewAtCooperativeLink] = useState(false);\n    const [newAtCooperativeLinkText, setNewAtCooperativeLinkText] = useState('');\n\n    useEffect(() => {\n        (function callFetchPortalActive() {\n            PortalSettingsAPI.fetchPortalActive()\n                .then(payload => {\n                    setPortalActive(payload.data);\n                    setIsLoading(false);\n                })\n                .catch(error => {\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                    setIsLoading(false);\n                });\n        })();\n\n        (function callFetchShowNewAtCooperativeLink() {\n            PortalSettingsAPI.fetchShowNewAtCooperativeLink()\n                .then(payload => {\n                    setShowNewAtCooperativeLink(payload.data);\n                })\n                .catch(error => {\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                });\n        })();\n\n        (function callFetchNewAtCooperativeLinkText() {\n            PortalSettingsAPI.fetchNewAtCooperativeLinkText()\n                .then(payload => {\n                    setNewAtCooperativeLinkText(payload.data);\n                })\n                .catch(error => {\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                });\n        })();\n    }, []);\n\n    function handleSubmit(values, actions, login) {\n        AuthAPI.login(values)\n            .then(payload => {\n                toggleError(false);\n                login(payload.data, () => toggleRedirect(true));\n            })\n            .catch(error => {\n                // If login fails show error and then set submitting back to false\n                toggleError(true);\n                actions.setSubmitting(false);\n            });\n    }\n\n    function redirect() {\n        return <Redirect to={from} />;\n    }\n\n    return (\n        <>\n            {redirectToReferrer ? (\n                redirect()\n            ) : (\n                <AuthConsumer>\n                    {({ isAuth, login }) => (\n                        <Container fluid className=\"authorization-container\">\n                            <Row className=\"justify-content-center align-content-center full-height\">\n                                <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\n                                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\n                                    {isLoading ? (\n                                        <React.Fragment>\n                                            <Row className=\"justify-content-center\">\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                                    Applicatie wordt geladen...\n                                                </Alert>\n                                            </Row>\n                                        </React.Fragment>\n                                    ) : !portalActive ? (\n                                        <React.Fragment>\n                                            <Row className=\"justify-content-center\">\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                                    Deze applicatie kan op dit moment niet gebruikt worden.\n                                                </Alert>\n                                            </Row>\n                                        </React.Fragment>\n                                    ) : !isLoading ? (\n                                        <React.Fragment>\n                                            <LoginForm handleSubmit={handleSubmit} login={login} />\n                                            {showError ? (\n                                                <Row className=\"justify-content-center\">\n                                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                                        Gebruikte logingegevens zijn onjuist!\n                                                    </Alert>\n                                                </Row>\n                                            ) : null}\n                                            <Row className=\"justify-content-center\">\n                                                <Link to={'/wachtwoord-vergeten'} className=\"authorization-link\">\n                                                    Wachtwoord vergeten?\n                                                </Link>\n                                            </Row>\n                                            {showNewAtCooperativeLink ? (\n                                                <Row className=\"justify-content-center\">\n                                                    <a\n                                                        href={'/#/nieuw-account'}\n                                                        className=\"authorization-link\"\n                                                        target=\"_blank\"\n                                                    >\n                                                        {newAtCooperativeLinkText}\n                                                    </a>\n                                                </Row>\n                                            ) : null}\n                                        </React.Fragment>\n                                    ) : null}\n                                </Col>\n                            </Row>\n                        </Container>\n                    )}\n                </AuthConsumer>\n            )}\n        </>\n    );\n};\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ButtonText from '../../../components/button/ButtonText';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { GoogleReCaptchaProvider, GoogleReCaptcha } from 'react-google-recaptcha-v3';\n\nconst validationSchema = Yup.object().shape({\n    password: Yup.string()\n        .min(10, 'Minimum van ${min} verplicht')\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\n        .required('Verplicht'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\n        .required('Verplicht'),\n});\n\nconst RegisterForm = ({ handleSubmit, email }) => (\n    <Formik\n        initialValues={{ password: '', passwordConfirmation: '' }}\n        enableReinitialize={true}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true);\n            handleSubmit(values, actions);\n        }}\n        render={({ isSubmitting, errors, touched }) => (\n            <Form>\n                <div className=\"mb-3\">\n                    <p className={'authorization-text'}>\n                        Stel je wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\n                    </p>\n                </div>\n                <Row>\n                    <Col>\n                        <Field\n                            name=\"password\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"password\"\n                                    className={field.value ? 'numeric-password' : ''}\n                                    placeholder={'Nieuw wachtwoord'}\n                                    errors={errors}\n                                    touched={touched}\n                                    classNameErrorMessage={'authorization-text'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"mt-2\">\n                        <Field\n                            name=\"passwordConfirmation\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"passwordConfirmation\"\n                                    className={field.value ? 'numeric-password' : ''}\n                                    placeholder={'Herhaal nieuw wachtwoord'}\n                                    errors={errors}\n                                    touched={touched}\n                                    classNameErrorMessage={'authorization-text mb-3'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"my-3\">\n                        <small className={'authorization-text'}>\n                            Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1\n                            hoofdletter bevatten.\n                        </small>\n                    </Col>\n                </Row>\n                <ButtonText\n                    buttonText={'Verzenden'}\n                    buttonClassName={'authorization-button'}\n                    size=\"sm\"\n                    type={'submit'}\n                    loading={isSubmitting}\n                    loadingSpinnerColor={'#034b8c'}\n                />\n            </Form>\n        )}\n    />\n);\n\nexport default RegisterForm;\n","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport RegisterForm from './Form';\nimport AuthAPI from '../../../api/auth/AuthAPI';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { AuthConsumer } from '../../../context/AuthContext';\nimport ButtonText from '../../../components/button/ButtonText';\nimport Alert from 'react-bootstrap/Alert';\n\nconst Register = ({ location, match, login }) => {\n    const [showError, toggleError] = useState(false);\n    const [showLoginLink, setLoginLink] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n    const registrationCode = decodeURIComponent(match.params.registrationCode);\n    const email = decodeURIComponent(match.params.email);\n\n    const [redirectToReferrer, toggleRedirect] = useState(false);\n    let { from } = location.state || { from: { pathname: '/gegevens' } };\n\n    function handleSubmit(values, actions) {\n        AuthAPI.register({\n            registrationCode,\n            email,\n            password: values.password,\n            password_confirmation: values.passwordConfirmation,\n        })\n            .then(payload => {\n                toggleSuccessMessage(true);\n                AuthAPI.login({ username: email, password: values.password })\n                    .then(payload => {\n                        toggleError(false);\n                        setLoginLink(false);\n                        setErrorMessage('');\n                        login(payload.data, () => {});\n\n                        setTimeout(() => {\n                            toggleRedirect(true);\n                        }, 15000);\n                    })\n                    .catch(error => {\n                        // If login fails show error and then set submitting back to false\n                        toggleError(true);\n                        setLoginLink(true);\n                        setErrorMessage('Er is iets fout gegaan bij automatisch inloggen na activeren.');\n                        actions.setSubmitting(false);\n                    });\n            })\n            .catch(error => {\n                console.log(error.response.status);\n                console.log(error.response.data.message);\n                toggleError(true);\n                if (\n                    error.response &&\n                    error.response.data &&\n                    error.response.data.message &&\n                    error.response.status === 423\n                ) {\n                    setLoginLink(true);\n                    setErrorMessage(error.response.data.message);\n                } else {\n                    setLoginLink(false);\n                    setErrorMessage(\n                        'Er is iets fout gegaan bij activeren. Controleer of de activatie link juist en volledig is.'\n                    );\n                }\n                // If login fails show error and then set submitting back to false\n                actions.setSubmitting(false);\n            });\n    }\n\n    function redirect() {\n        return <Redirect to={from} />;\n    }\n\n    return (\n        <>\n            {redirectToReferrer ? (\n                redirect()\n            ) : (\n                <Container fluid className=\"authorization-container\">\n                    <Row className=\"justify-content-center align-content-center full-height\">\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\n                            {showSuccessMessage ? (\n                                <>\n                                    <h3 className={'authorization-text'}>Je account is geactiveerd</h3>\n                                    <p className={'authorization-text'}>Je bent nu ingelogd</p>\n                                    <ButtonText\n                                        buttonText={'Ga verder'}\n                                        onClickAction={toggleRedirect}\n                                        buttonClassName={'authorization-button'}\n                                        size=\"sm\"\n                                    />\n                                </>\n                            ) : (\n                                <>\n                                    <h3 className={'authorization-text'}>Account activeren</h3>\n                                    {!showLoginLink ? <RegisterForm handleSubmit={handleSubmit} email={email} /> : null}\n                                    {showError ? (\n                                        <Row className={'justify-content-center align-content-center '}>\n                                            <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                                {errorMessage}\n                                            </Alert>\n                                        </Row>\n                                    ) : null}\n                                </>\n                            )}\n                            {showLoginLink ? (\n                                <ButtonText\n                                    buttonText={'Ga naar loginscherm'}\n                                    onClickAction={toggleRedirect}\n                                    buttonClassName={'authorization-button'}\n                                    size=\"sm\"\n                                />\n                            ) : null}\n                        </Col>\n                    </Row>\n                </Container>\n            )}\n        </>\n    );\n};\n\nexport default function RegisterWithContext(props) {\n    return <AuthConsumer>{({ login }) => <Register {...props} login={login} />}</AuthConsumer>;\n}\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ButtonText from '../../../components/button/ButtonText';\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string()\n        .email()\n        .required('Verplicht'),\n});\n\nconst ForgotForm = ({ handleSubmit, showSuccessMessage }) => (\n    <Formik\n        initialValues={{ email: '' }}\n        enableReinitialize={true}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true);\n            handleSubmit(values, actions);\n        }}\n        render={({ isSubmitting, errors, touched }) => (\n            <Form>\n                <Field\n                    name=\"email\"\n                    render={({ field }) => (\n                        <InputText\n                            field={field}\n                            id=\"email\"\n                            className={''}\n                            placeholder={'E-mailadres'}\n                            errors={errors}\n                            touched={touched}\n                            // todo check waarom dit erin stond ?!\n                            // showErrorMessage={false}\n                        />\n                    )}\n                />\n                <ButtonText\n                    buttonText={showSuccessMessage ? 'E-mail is verstuurd!' : 'Verstuur wachtwoord reset link'}\n                    buttonClassName={'authorization-button'}\n                    size=\"sm\"\n                    type={'submit'}\n                    loading={isSubmitting}\n                    loadingSpinnerColor={'#034b8c'}\n                    disabled={showSuccessMessage}\n                />\n            </Form>\n        )}\n    />\n);\n\nexport default ForgotForm;\n","import React, { useState } from 'react';\n\nimport ForgotForm from './Form';\nimport AuthAPI from '../../../api/auth/AuthAPI';\nimport Alert from 'react-bootstrap/Alert';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from 'react-router-dom';\n\nconst Forgot = props => {\n    const [showError, toggleError] = useState(false);\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n\n    function handleSubmit(values, actions) {\n        AuthAPI.forgot(values)\n            .then(payload => {\n                toggleError(false);\n                toggleSuccessMessage(true);\n                actions.setSubmitting(false);\n            })\n            .catch(error => {\n                // If forgot API fails show error and then set submitting back to false\n                // toggleError(true);\n                // If forgot API fails show succesmessage anyway\n                toggleError(false);\n                toggleSuccessMessage(true);\n                actions.setSubmitting(false);\n            });\n    }\n\n    return (\n        <Container fluid className=\"authorization-container\">\n            <Row className=\"justify-content-center align-content-center full-height\">\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\n                    {showSuccessMessage ? (\n                        <div>\n                            <Row className={'justify-content-center '}>\n                                <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\n                            </Row>\n                            <Row className={'justify-content-center '}>\n                                <p className={'authorization-text'}>\n                                    Als het e-mailadres bij ons bekend is, dan ontvang je binnen enkele minuten een\n                                    e-mail met een persoonlijke link. Via deze link kun je een nieuw wachtwoord\n                                    instellen.\n                                    <br />\n                                    Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van\n                                    bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of\n                                    je onze mail daar terug vindt.\n                                </p>\n                            </Row>\n                        </div>\n                    ) : (\n                        <div>\n                            <Row className={'justify-content-center '}>\n                                <h3 className={'authorization-text'}>Wachtwoord vergeten</h3>\n                            </Row>\n                            <Row className={'justify-content-center '}>\n                                <p className={'authorization-text'}>\n                                    Vul het e-mailadres in waarmee je inlogt en dat bij ons bekend is. Je ontvangt van\n                                    ons een e-mail waarmee je een nieuw wachtwoord kunt instellen.\n                                </p>\n                            </Row>\n                            <Row className={'justify-content-center '}>\n                                <Col xs={12} md={6}>\n                                    <ForgotForm handleSubmit={handleSubmit} showSuccessMessage={showSuccessMessage} />\n                                    {showError ? (\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                            E-mailadres is niet bekend!\n                                        </Alert>\n                                    ) : null}\n                                </Col>\n                            </Row>\n                        </div>\n                    )}\n                    <Row className={'justify-content-center '}>\n                        <Link to={'/login'} className=\"authorization-link\">\n                            Terug naar inloggen\n                        </Link>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default Forgot;\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ButtonText from '../../../components/button/ButtonText';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nconst validationSchema = Yup.object().shape({\n    password: Yup.string()\n        .min(10, 'Minimum van ${min} verplicht')\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\n        .required('Verplicht'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\n        .required('Verplicht'),\n});\n\nconst ResetForm = ({ handleSubmit, email }) => (\n    <Formik\n        initialValues={{ password: '', passwordConfirmation: '' }}\n        enableReinitialize={true}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true);\n            handleSubmit(values, actions);\n        }}\n        render={({ isSubmitting, errors, touched }) => (\n            <Form>\n                <Row className=\"justify-content-center\">\n                    <p className={'authorization-text'}>\n                        Stel een nieuw wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\n                    </p>\n                </Row>\n                <Row className=\"justify-content-center\">\n                    <Field\n                        name=\"password\"\n                        render={({ field }) => (\n                            <InputText\n                                field={field}\n                                id=\"password\"\n                                className={field.value ? 'numeric-password' : ''}\n                                placeholder={'Nieuw wachtwoord'}\n                                errors={errors}\n                                touched={touched}\n                                classNameErrorMessage={'authorization-text'}\n                            />\n                        )}\n                    />\n                </Row>\n                <Row className=\"justify-content-center\">\n                    <Field\n                        name=\"passwordConfirmation\"\n                        render={({ field }) => (\n                            <InputText\n                                field={field}\n                                id=\"passwordConfirmation\"\n                                className={field.value ? 'numeric-password' : ''}\n                                placeholder={'Herhaal nieuw wachtwoord'}\n                                errors={errors}\n                                touched={touched}\n                                classNameErrorMessage={'authorization-text mb-3'}\n                            />\n                        )}\n                    />\n                </Row>\n                <Row className=\"justify-content-center\">\n                    <small className={'authorization-text'}>\n                        Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1 hoofdletter\n                        bevatten.\n                    </small>\n                </Row>\n                <Row className=\"justify-content-center\">\n                    <ButtonText\n                        buttonText={'Verzenden'}\n                        buttonClassName={'authorization-button'}\n                        size=\"sm\"\n                        type={'submit'}\n                        loading={isSubmitting}\n                        loadingSpinnerColor={'#034b8c'}\n                    />\n                </Row>\n            </Form>\n        )}\n    />\n);\n\nexport default ResetForm;\n","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport ResetForm from './Form';\nimport AuthAPI from '../../../api/auth/AuthAPI';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { AuthConsumer } from '../../../context/AuthContext';\nimport ButtonText from '../../../components/button/ButtonText';\n\nconst Reset = ({ location, match, login }) => {\n    const [showError, toggleError] = useState(false);\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n    const token = decodeURIComponent(match.params.token);\n    const email = decodeURIComponent(match.params.email);\n\n    const [redirectToReferrer, toggleRedirect] = useState(false);\n    let { from } = location.state || { from: { pathname: '/gegevens' } };\n\n    function handleSubmit(values, actions) {\n        AuthAPI.reset({ token, email, password: values.password, password_confirmation: values.passwordConfirmation })\n            .then(payload => {\n                toggleSuccessMessage(true);\n                AuthAPI.login({ username: email, password: values.password })\n                    .then(payload => {\n                        toggleError(false);\n                        login(payload.data, () => {});\n\n                        setTimeout(() => {\n                            toggleRedirect(true);\n                        }, 15000);\n                    })\n                    .catch(error => {\n                        // If login fails show error and then set submitting back to false\n                        toggleError(true);\n                        actions.setSubmitting(false);\n                    });\n            })\n            .catch(error => {\n                // If login fails show error and then set submitting back to false\n                actions.setSubmitting(false);\n            });\n    }\n\n    function redirect() {\n        return <Redirect to={from} />;\n    }\n\n    return (\n        <>\n            {redirectToReferrer ? (\n                redirect()\n            ) : (\n                <Container fluid className=\"authorization-container\">\n                    <Row className=\"justify-content-center align-content-center full-height\">\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\n                            {showSuccessMessage ? (\n                                <>\n                                    <Row className=\"justify-content-center\">\n                                        <h3 className={'authorization-text'}>Je wachtwoord is ingesteld</h3>\n                                    </Row>\n                                    <Row className=\"justify-content-center\">\n                                        <p className={'authorization-text'}>Je bent nu ingelogd</p>\n                                    </Row>\n                                    <Row className=\"justify-content-center\">\n                                        <ButtonText\n                                            buttonText={'Ga verder'}\n                                            onClickAction={toggleRedirect}\n                                            buttonClassName={'authorization-button'}\n                                            size=\"sm\"\n                                        />\n                                    </Row>\n                                </>\n                            ) : (\n                                <>\n                                    <Row className=\"justify-content-center\">\n                                        <h3 className={'authorization-text'}>Wachtwoord wijzigen</h3>\n                                    </Row>\n                                    <ResetForm handleSubmit={handleSubmit} email={email} />\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Container>\n            )}\n        </>\n    );\n};\n\nexport default function ResetWithContext(props) {\n    return <AuthConsumer>{({ login }) => <Reset {...props} login={login} />}</AuthConsumer>;\n}\n","import axiosInstance from '../default-setup/AxiosInstance';\nimport moment from 'moment';\n\nexport default {\n    fetchProjects: function() {\n        const requestUrl = `/jory/project`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: ['id', 'name', 'dateStartRegistrations', 'dateEndRegistrations'],\n                    flt: {\n                        and: [\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\n                        ],\n                    },\n                    rlt: {\n                        administration: { fld: ['id', 'name'] },\n                    },\n                },\n            },\n        });\n    },\n\n    fetchProject: function(id) {\n        const requestUrl = `/jory/project/${id}`;\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: [\n                        'id',\n                        'name',\n                        'description',\n                        'dateStartRegistrations',\n                        'dateEndRegistrations',\n                        'dateEndRegistrations',\n                        'minParticipations',\n                        'maxParticipations',\n                        'totalParticipations',\n                        'participationWorth',\n                        'currentBookWorth',\n                        'amountOfLoanNeeded',\n                        'minAmountLoan',\n                        'maxAmountLoan',\n                        'isSceProject',\n                        'checkPostalcodeLink',\n                        'postalcodeLink',\n                        'linkAgreeTerms',\n                        'linkProjectInfo',\n                        'linkUnderstandInfo',\n                        'showQuestionAboutMembership',\n                        'useTransactionCostsWithMembership',\n                        'usesMollie',\n                        'textTransactionCosts',\n                        'transactionCostsCodeRef',\n                        'transactionCostsAmountMin',\n                        'transactionCostsAmountMax',\n                        'transactionCostsAmount',\n                        'transactionCostsPercentage',\n                        'transactionCostsAmount2',\n                        'transactionCostsPercentage2',\n                        'transactionCostsAmount3',\n                        'transactionCostsPercentage3',\n                    ],\n                    flt: {\n                        and: [\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\n                        ],\n                    },\n                    rlt: {\n                        projectType: { fld: ['id', 'codeRef'] },\n                        administration: { fld: ['id', 'name', 'portalSettingsLayoutAssigned'] },\n                    },\n                },\n            },\n        });\n    },\n};\n","import axiosInstance from '../default-setup/AxiosInstance';\nimport moment from '../project/ProjectAPI';\n\nexport default {\n    fetchContact: function(id) {\n        const requestUrl = `/jory/contact/${id}`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: [\n                        'id',\n                        'typeId',\n                        'number',\n                        'fullName',\n                        'iban',\n                        'ibanAttn',\n                        'didAgreeAvg',\n                        'dateDidAgreeAvg',\n                        'addressLines',\n                        'isParticipant',\n                        'disableChangeContactNameOnPortal',\n                        'noAddressesFound',\n                        'isParticipantPcrProject',\n                        'isParticipantSceProject',\n                    ],\n                    rlt: {\n                        person: {\n                            fld: [\n                                'id',\n                                'firstName',\n                                'lastName',\n                                'initials',\n                                'titleId',\n                                'lastNamePrefix',\n                                'lastNamePrefixId',\n                                'dateOfBirth',\n                            ],\n                            rlt: {\n                                title: { fld: ['id', 'name'] },\n                            },\n                        },\n                        organisation: {\n                            fld: ['id', 'name', 'website', 'chamberOfCommerceNumber', 'vatNumber'],\n                        },\n                        emailAddresses: { fld: ['id', 'email', 'primary', 'typeId'] },\n                        phoneNumbers: { fld: ['id', 'number', 'primary', 'typeId'] },\n                        addresses: {\n                            fld: [\n                                'id',\n                                'street',\n                                'number',\n                                'addition',\n                                'postalCode',\n                                'city',\n                                'countryId',\n                                'primary',\n                                'typeId',\n                            ],\n                            rlt: {\n                                country: { fld: ['id', 'name'] },\n                            },\n                        },\n                        occupations: {\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\n                            rlt: {\n                                occupation: {\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\n                                },\n                                primaryContact: {\n                                    fld: ['id', 'fullName'],\n                                },\n                            },\n                        },\n                        primaryContactEnergySupplier: {\n                            fld: [\n                                'id',\n                                'energySupplierId',\n                                'esNumber',\n                                'eanElectricity',\n                                'eanGas',\n                                'memberSince',\n                                'isCurrentSupplier',\n                            ],\n                            rlt: { energySupplier: [] },\n                            flt: {\n                                f: 'isCurrentSupplier',\n                                d: true,\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    },\n\n    fetchContactWithParticipants: function(id) {\n        const requestUrl = `/jory/contact/${id}`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: [\n                        'id',\n                        'typeId',\n                        'number',\n                        'fullName',\n                        'iban',\n                        'ibanAttn',\n                        'didAgreeAvg',\n                        'dateDidAgreeAvg',\n                        'addressLines',\n                    ],\n                    rlt: {\n                        participations: {\n                            fld: [\n                                'id',\n                                'dateRegister',\n                                'didAcceptAgreement',\n                                'dateDidAcceptAgreement',\n                                'didUnderstandInfo',\n                                'dateDidUnderstandInfo',\n                                'participationsDefinitive',\n                                'participationsGranted',\n                                'participationsOptioned',\n                                'participationsInteressed',\n                                'amountDefinitive',\n                                'amountGranted',\n                                'amountOptioned',\n                                'amountInteressed',\n                                'powerKwhConsumption',\n                            ],\n                            rlt: {\n                                project: {\n                                    fld: [\n                                        'id',\n                                        'name',\n                                        'dateEnd',\n                                        'linkProjectInfo',\n                                        'linkUnderstandInfo',\n                                        'showQuestionAboutMembership',\n                                        'usesMollie',\n                                    ],\n                                    rlt: {\n                                        projectType: { fld: ['id', 'codeRef'] },\n                                        administration: { fld: ['name'] },\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    },\n\n    updateContact: contact => {\n        const requestUrl = `/contact/${contact.id}`;\n\n        return axiosInstance.post(requestUrl, contact);\n    },\n\n    previewDocument: registerValues => {\n        const requestUrl = `/contact/${registerValues.contactId}/${registerValues.projectId}/preview-document`;\n\n        return axiosInstance.post(requestUrl, registerValues);\n    },\n\n    fetchContactProjects: function(contactId, projectId) {\n        const requestUrl = `/contact/${contactId}/contact-projects`;\n\n        return axiosInstance.get(requestUrl);\n    },\n\n    fetchContactProjectData: function(contactId, projectId) {\n        const requestUrl = `/contact/${contactId}/${projectId}/contact-project-data`;\n\n        return axiosInstance.get(requestUrl);\n    },\n\n    fetchContactFinancialOverviewDocuments: function(contactId) {\n        const requestUrl = `/contact/${contactId}/financial-overview-documents`;\n\n        return axiosInstance.get(requestUrl);\n    },\n\n    financialOverviewContactDownload: function(id) {\n        const requestUrl = `/financial-overview-contact/${id}/download`;\n\n        return axiosInstance(requestUrl, { responseType: 'blob' });\n    },\n\n    fetchContactRelatedAdministrations: function(contactId) {\n        const requestUrl = `/contact/${contactId}/related-administrations`;\n\n        return axiosInstance.get(requestUrl);\n    },\n};\n","export default function(contactData) {\n    const typeContact = contactData.typeId ? contactData.typeId : null;\n\n    let emptyAddress = { street: '', number: '', addition: '', postalCode: '', city: '', countryId: null };\n    let primaryAddress = null;\n    let visitAddress = null;\n    let postalAddress = null;\n    let invoiceAddress = null;\n    switch (typeContact) {\n        case 'person':\n            // Set primary address\n            primaryAddress = contactData.addresses.find(address => address.primary);\n            contactData.primaryAddress = primaryAddress ? { ...emptyAddress, ...primaryAddress } : emptyAddress;\n            break;\n        case 'organisation':\n            // Set visit, postal, invoice addresses\n            visitAddress = contactData.addresses.find(address => address.typeId === 'visit');\n            contactData.visitAddress = visitAddress ? { ...emptyAddress, ...visitAddress } : emptyAddress;\n            postalAddress = contactData.addresses.find(address => address.typeId === 'postal');\n            contactData.postalAddress = postalAddress ? { ...emptyAddress, ...postalAddress } : emptyAddress;\n            invoiceAddress = contactData.addresses.find(address => address.typeId === 'invoice');\n            contactData.invoiceAddress = invoiceAddress ? { ...emptyAddress, ...invoiceAddress } : emptyAddress;\n            break;\n    }\n\n    // Set correspondence email address\n    let emptyEmail = { email: '' };\n    const emailCorrespondence = contactData.emailAddresses.find(emailAddress => emailAddress.primary);\n    contactData.emailCorrespondence = emailCorrespondence ? { ...emptyEmail, ...emailCorrespondence } : emptyEmail;\n\n    // Set invoice email address\n    const emailInvoice = contactData.emailAddresses.find(\n        emailAddress => emailAddress.typeId === 'invoice' && !emailAddress.primary\n    );\n    contactData.emailInvoice = emailInvoice ? { ...emptyEmail, ...emailInvoice } : emptyEmail;\n\n    // Set primary phone number\n    let emptyPhoneNumber = { number: '' };\n    const phoneNumberPrimary = contactData.phoneNumbers.find(phoneNumber => phoneNumber.primary);\n    contactData.phoneNumberPrimary = phoneNumberPrimary\n        ? { ...emptyPhoneNumber, ...phoneNumberPrimary }\n        : emptyPhoneNumber;\n\n    // Set first phone number which is not primary\n    const phoneNumberTwo = contactData.phoneNumbers.filter(phoneNumber => !phoneNumber.primary)[0];\n    contactData.phoneNumberTwo = phoneNumberTwo ? { ...emptyPhoneNumber, ...phoneNumberTwo } : emptyPhoneNumber;\n\n    // Set primary contact energy supplier\n    let emptyPrimaryContactEnergySupplier = {\n        energySupplierId: null,\n        esNumber: '',\n        eanElectricity: '',\n        memberSince: '',\n        eanGas: '',\n    };\n    if (!contactData.primaryContactEnergySupplier) {\n        contactData.primaryContactEnergySupplier = emptyPrimaryContactEnergySupplier;\n    }\n    return contactData;\n}\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport { ClipLoader } from 'react-spinners';\n\nfunction Loading() {\n    return (\n        <Row className=\"justify-content-center align-content-center flex-wrap\" style={{ height: '40vh' }}>\n            <ClipLoader color={'#3898EC'} size={48} />\n        </Row>\n    );\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TextBlock = ({ children, className, id, placeholder }) => {\n    const showPlaceholder = children === '' || children === null || children === undefined;\n\n    return (\n        <div className={`text-block ${className} ${showPlaceholder ? 'placeholder' : ''}`} id={id}>\n            {showPlaceholder ? <div className={'placeholder-message'}>{placeholder}</div> : children}\n        </div>\n    );\n};\n\nTextBlock.defaultProps = {\n    className: 'text-block',\n    id: '',\n    children: '',\n    placeholder: '',\n};\n\nTextBlock.propTypes = {\n    className: PropTypes.string,\n    id: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    placeholder: PropTypes.string,\n};\n\nexport default TextBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Row from 'react-bootstrap/Row';\nimport moment from 'moment';\n\nfunction DefaultContactPersonalView({ portalSettings, initialContact }) {\n    const {\n        person = {},\n        emailCorrespondence,\n        emailInvoice,\n        phoneNumberPrimary,\n        phoneNumberTwo,\n        primaryAddress,\n        iban,\n        ibanAttn,\n        didAgreeAvg,\n        dateDidAgreeAvg,\n        number,\n        primaryContactEnergySupplier,\n    } = initialContact;\n    return (\n        <Row>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Naam</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Aanhef'}>\n                        {person.title ? person.title.name : ''}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Initialen'}>\n                        {person.initials}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Voornaam'}>\n                        {person.firstName}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Tussenvoegsel'}>\n                        {person.lastNamePrefix}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Achternaam'}>\n                        {person.lastName}\n                    </TextBlock>\n                </Row>\n                <FormLabel className={'field-label'}>Geboortedatum</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6 col-md-4'} placeholder={'Geboortedatum'}>\n                        {person.dateOfBirth ? moment(person.dateOfBirth).format('L') : ''}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\n                        {emailCorrespondence.email}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\n                        {emailInvoice.email}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\n                        {phoneNumberPrimary.number}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\n                        {phoneNumberTwo.number}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Adres</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\n                        {primaryAddress.street}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\n                        {primaryAddress.number}\n                    </TextBlock>\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\n                        {primaryAddress.addition}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\n                        {primaryAddress.postalCode}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\n                        {primaryAddress.city}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\n                        {primaryAddress.country ? primaryAddress.country.name : ''}\n                    </TextBlock>\n                </Row>\n            </Col>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\n                        {iban}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\n                        {ibanAttn}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\n                <Row>\n                    <div className={'col-12 col-sm-8'}>\n                        <input\n                            type=\"checkbox\"\n                            id=\"did_agree_avg\"\n                            checked={didAgreeAvg}\n                            className=\"w-checkbox-input checkbox\"\n                            disabled={true}\n                        />\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\n                            Ik ga akkoord met{' '}\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\n                                privacybeleid\n                            </a>{' '}\n                            {didAgreeAvg ? (\n                                <em>({dateDidAgreeAvg ? ' ' + moment(dateDidAgreeAvg).format('L') : ''})</em>\n                            ) : (\n                                ''\n                            )}\n                        </span>\n                    </div>\n                </Row>\n\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\n                        {primaryContactEnergySupplier.energySupplier\n                            ? primaryContactEnergySupplier.energySupplier.name\n                            : ''}\n                    </TextBlock>\n                </Row>\n\n                {primaryContactEnergySupplier && primaryContactEnergySupplier.energySupplierId ? (\n                    <>\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\n                                {primaryContactEnergySupplier.esNumber}\n                            </TextBlock>\n                        </Row>\n\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\n                                {primaryContactEnergySupplier.memberSince\n                                    ? moment(primaryContactEnergySupplier.memberSince).format('L')\n                                    : ''}\n                            </TextBlock>\n                        </Row>\n\n                        <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\n                                {primaryContactEnergySupplier.eanElectricity}\n                            </TextBlock>\n                        </Row>\n\n                        <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\n                                {primaryContactEnergySupplier.eanGas}\n                            </TextBlock>\n                        </Row>\n                    </>\n                ) : (\n                    ''\n                )}\n            </Col>\n        </Row>\n    );\n}\n\nexport default DefaultContactPersonalView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst Select = ({\n    field,\n    className,\n    id,\n    options,\n    optionLabel,\n    emptyOption,\n    placeholder,\n    showErrorMessage,\n    errors,\n    touched,\n    classNameErrorMessage,\n    disabled,\n}) => {\n    return (\n        <>\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\n            ) : null}\n            <select\n                className={`select-field w-select content ${className} ${\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\n                } `}\n                id={id}\n                {...field}\n                disabled={disabled}\n            >\n                {emptyOption ? <option value=\"\">{placeholder ? `-- ${placeholder} --` : ''}</option> : null}\n                {options.map(option => {\n                    return (\n                        <option key={option.id} value={option.id}>\n                            {option[optionLabel]}\n                        </option>\n                    );\n                })}\n            </select>\n        </>\n    );\n};\n\nSelect.defaultProps = {\n    className: '',\n    readOnly: false,\n    required: '',\n    optionLabel: 'name',\n    emptyOption: true,\n    placeholder: '',\n    showErrorMessage: true,\n    classNameErrorMessage: 'text-danger',\n    errors: {},\n    touched: {},\n};\n\nSelect.propTypes = {\n    field: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    options: PropTypes.array.isRequired,\n    optionLabel: PropTypes.string,\n    emptyOption: PropTypes.bool,\n    placeholder: PropTypes.string,\n    showErrorMessage: PropTypes.bool,\n    classNameErrorMessage: PropTypes.string,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n};\n\nexport default Select;\n","export default [\n    { id: 'AU', name: 'Australië' },\n    { id: 'BE', name: 'België' },\n    { id: 'CA', name: 'Canade' },\n    { id: 'DK', name: 'Denemarken' },\n    { id: 'DE', name: 'Duitsland' },\n    { id: 'FI', name: 'Finland' },\n    { id: 'FR', name: 'Frankrijk' },\n    { id: 'IE', name: 'Ierland' },\n    { id: 'IT', name: 'Italië' },\n    { id: 'LU', name: 'Luxemburg' },\n    { id: 'NL', name: 'Nederland' },\n    { id: 'NZ', name: 'Nieuw-Zeeland' },\n    { id: 'NO', name: 'Noorwegen' },\n    { id: 'AT', name: 'Oostenrijk' },\n    { id: 'PL', name: 'Polen' },\n    { id: 'PT', name: 'Portugal' },\n    { id: 'ES', name: 'Spanje' },\n    { id: 'CZ', name: 'Tsjechië' },\n    { id: 'GB', name: 'Verenigd Koninkrijk' },\n    { id: 'VS', name: 'Verenigde Staten' },\n    { id: 'SE', name: 'Zweden' },\n    { id: 'CH', name: 'Zwitserland' },\n];\n","export default [\n    { id: 26, name: 'Agem' },\n    { id: 27, name: 'Anode Energie' },\n    { id: 24, name: 'Betuwe stroom' },\n    { id: 2, name: 'Budget Energie' },\n    { id: 28, name: 'De Groene Stroomfabriek' },\n    { id: 25, name: 'Delta Energie' },\n    { id: 50, name: 'DGB Energie' },\n    { id: 46, name: 'Dorpstroom' },\n    { id: 3, name: 'E.on' },\n    { id: 45, name: 'Easyenergy' },\n    { id: 4, name: 'Eneco' },\n    { id: 19, name: 'Energie VanOns' },\n    { id: 49, name: 'Energie Zero' },\n    { id: 42, name: 'Energiebesteding' },\n    { id: 5, name: 'Energiedirect' },\n    { id: 21, name: 'Energieflex' },\n    { id: 37, name: 'Energyhouse' },\n    { id: 6, name: 'Engie' },\n    { id: 7, name: 'Essent' },\n    { id: 35, name: 'Fenor energie' },\n    { id: 8, name: 'Greenchoice' },\n    { id: 43, name: 'GreenNL' },\n    { id: 40, name: 'Groenpand' },\n    { id: 44, name: 'Hezelaer' },\n    { id: 9, name: 'Holland Wind' },\n    { id: 33, name: 'Holthausen Clean Energy (HCE)' },\n    { id: 20, name: 'Huismerk Energie' },\n    { id: 30, name: 'HVC Kringloop Energie' },\n    { id: 23, name: 'Innova Energie' },\n    { id: 10, name: 'Main energie' },\n    { id: 38, name: 'NieuweStroom' },\n    { id: 12, name: 'NL Energie' },\n    { id: 1, name: 'OM' },\n    { id: 18, name: 'Overig' },\n    { id: 14, name: 'Oxxio' },\n    { id: 39, name: 'ParkStroom' },\n    { id: 36, name: 'Power peers' },\n    { id: 15, name: 'Pure energy' },\n    { id: 16, name: 'Qurrent' },\n    { id: 48, name: 'Qwint' },\n    { id: 31, name: 'Sepa Green' },\n    { id: 32, name: 'Servicehouse' },\n    { id: 34, name: 'Total' },\n    { id: 22, name: 'United Consumers' },\n    { id: 17, name: 'VanDeBron' },\n    { id: 13, name: 'Vattenfall' },\n    { id: 47, name: 'Welkom Energie' },\n    { id: 41, name: 'Windcentrale' },\n];\n","export default [\n    { id: 0, name: '' },\n    { id: 1, name: 'Dhr' },\n    { id: 2, name: 'Mevr' },\n    { id: 3, name: 'De heer, Mevrouw' },\n    { id: 4, name: 'Familie' },\n    { id: 5, name: 'De heer of mevrouw' },\n    { id: 6, name: 'De heren' },\n    { id: 7, name: 'De dames' },\n    { id: 8, name: 'Erven' },\n];\n","export default [\n    { id: 0, name: '' },\n    { id: 1, name: 'van' },\n    { id: 2, name: 'de' },\n    { id: 3, name: 'van der' },\n    { id: 4, name: 'van de' },\n    { id: 5, name: 'van den' },\n    { id: 6, name: 'den' },\n    { id: 7, name: 'ten' },\n    { id: 8, name: 'ter' },\n    { id: 9, name: 'te' },\n    { id: 10, name: \"van 't\" },\n    { id: 11, name: 'el' },\n    { id: 12, name: 'le' },\n    { id: 13, name: 'van het' },\n    { id: 14, name: \"in 't\" },\n    { id: 15, name: \"'t\" },\n    { id: 16, name: 'von' },\n    { id: 17, name: 'du' },\n    { id: 18, name: 'da' },\n    { id: 19, name: 'de la' },\n    { id: 20, name: 'la' },\n    { id: 21, name: 'der' },\n    { id: 22, name: 'van ter' },\n    { id: 23, name: \"op 't\" },\n    { id: 24, name: 'op den' },\n    { id: 25, name: 'op ten' },\n    { id: 26, name: 'op de' },\n];\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport MomentLocaleUtils, { formatDate, parseDate } from 'react-day-picker/moment';\nimport moment from 'moment';\nimport { get } from 'lodash';\n\nconst InputDate = ({\n    className,\n    id,\n    value,\n    required,\n    readOnly,\n    name,\n    onChangeAction,\n    placeholder,\n    showErrorMessage,\n    errors,\n    touched,\n    classNameErrorMessage,\n}) => {\n    const handleDayChange = date => {\n        // Convert date in correct value for database\n        const formattedDate = date ? moment(date).format('Y-MM-DD') : '';\n\n        onChangeAction(name, formattedDate);\n    };\n\n    const formattedDate = value ? moment(value).format('L') : '';\n\n    return (\n        <>\n            {get(errors, name, '') && get(touched, name, '') && showErrorMessage ? (\n                <small className={`${classNameErrorMessage}`}>{get(errors, name, '')}</small>\n            ) : null}\n            <DayPickerInput\n                id={id}\n                value={formattedDate}\n                onDayChange={handleDayChange}\n                formatDate={formatDate}\n                parseDate={parseDate}\n                dayPickerProps={{\n                    showWeekNumbers: true,\n                    locale: 'nl',\n                    firstDayOfWeek: 1,\n                    localeUtils: MomentLocaleUtils,\n                }}\n                inputProps={{\n                    className: `text-input content w-input ${className} ${\n                        Boolean(get(errors, name, '') && get(touched, name, '')) ? 'has-error mb-0' : ''\n                    } `,\n                    name: name,\n                    autoComplete: 'off',\n                    readOnly: readOnly,\n                    disabled: readOnly,\n                    placeholder: placeholder,\n                }}\n                required={required}\n                readOnly={readOnly}\n                placeholder={''}\n            />\n        </>\n    );\n};\n\nInputDate.defaultProps = {\n    className: '',\n    required: '',\n    readOnly: false,\n    value: null,\n    placeholder: '',\n    showErrorMessage: true,\n    classNameErrorMessage: 'text-danger',\n    errors: {},\n    touched: {},\n};\n\nInputDate.propTypes = {\n    type: PropTypes.string,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    onChangeAction: PropTypes.func,\n    required: PropTypes.string,\n    readOnly: PropTypes.bool,\n    placeholder: PropTypes.string,\n    showErrorMessage: PropTypes.bool,\n    classNameErrorMessage: PropTypes.string,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n};\n\nexport default InputDate;\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field } from 'formik';\nimport Select from '../../../components/form/Select';\nimport Countries from '../../../data/Countries';\nimport EnergySuppliers from '../../../data/EnergySuppliers';\nimport Titles from '../../../data/Titles';\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport Row from 'react-bootstrap/Row';\nimport TextBlock from '../../../components/general/TextBlock';\nimport moment from 'moment';\nimport InputDate from '../../../components/form/InputDate';\nimport { FaInfoCircle } from 'react-icons/fa';\nimport ReactTooltip from 'react-tooltip';\n\nconst DefaultContactPersonalEdit = function({\n    portalSettings,\n    initialContact,\n    projectTypeCodeRef,\n    errors,\n    touched,\n    values,\n    setFieldValue,\n}) {\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\n    return (\n        <Row>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\n                <Row>\n                    <Col xs={12} sm={6}>\n                        <Field\n                            name=\"person.titleId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"title_id\"\n                                    placeholder={'Aanhef'}\n                                    options={Titles}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                        {initialContact.disableChangeContactNameOnPortal ? (\n                            <>\n                                <FaInfoCircle\n                                    color={'blue'}\n                                    size={'15px'}\n                                    data-tip={\n                                        'Je neemt deel aan een project waarvan de deelnemingen op naam zijn uitgegeven.<br />' +\n                                        'Daarom kun je jouw naam niet zelf wijzigen.<br />' +\n                                        'Overige contactgegevens kun je wel zelf aanpassen.<br />' +\n                                        'Een wijziging van rekeningnummer wordt door ons gecontroleerd.<br />' +\n                                        'Heb je vragen of wil je jouw gegevens door de beheerder laten wijzigen?<br />' +\n                                        'Kijk in het menu onder \"Over ons\" voor contact gegevens.'\n                                    }\n                                    data-for={`contact-${initialContact.id}`}\n                                />\n                                <ReactTooltip\n                                    id={`contact-${initialContact.id}`}\n                                    effect=\"float\"\n                                    place=\"right\"\n                                    multiline={true}\n                                    aria-haspopup=\"true\"\n                                />\n                            </>\n                        ) : (\n                            ''\n                        )}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"person.initials\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"initials\"\n                                    placeholder={'Initialen'}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"person.firstName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"first_name\"\n                                    placeholder={'Voornaam'}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"person.lastNamePrefixId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name_prefix_id\"\n                                    options={LastNamePrefixes}\n                                    placeholder={'Tussenvoegsel'}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"person.lastName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name\"\n                                    placeholder={'Achternaam'}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <FormLabel\n                    htmlFor=\"date_of_birth\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    Geboortedatum\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={6}>\n                        <Field\n                            name=\"person.dateOfBirth\"\n                            render={({ field }) => (\n                                <InputDate\n                                    {...field}\n                                    errors={errors}\n                                    touched={touched}\n                                    onChangeAction={setFieldValue}\n                                    id=\"date_of_birth\"\n                                    placeholder={'Geboortedatum'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\n                    E-mailadres correspondentie\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"emailCorrespondence.email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"email-correspondence\"\n                                    placeholder={'E-mailadres'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\n                    E-mailadres nota\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"emailInvoice.email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"email-invoice\"\n                                    placeholder={'E-mailadres'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel\n                    htmlFor=\"telephone-number-1\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    Telefoonnummer 1\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={10} md={6}>\n                        <Field\n                            name=\"phoneNumberPrimary.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"telephone-number-1\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\n                    Telefoonnummer 2\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={10} md={6}>\n                        <Field\n                            name=\"phoneNumberTwo.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"telephone-number-2\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel\n                    htmlFor=\"street\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    Adres\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12}>\n                        <Field\n                            name=\"primaryAddress.street\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street\"\n                                    placeholder={'Straat'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"primaryAddress.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street_number\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"primaryAddress.addition\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"addition\"\n                                    placeholder={'Toevoeging'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"primaryAddress.postalCode\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"postal_code\"\n                                    placeholder={'Postcode'}\n                                    disabled={\n                                        initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject\n                                    }\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"primaryAddress.city\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"city\"\n                                    placeholder={'Plaats'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"primaryAddress.countryId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"country_id\"\n                                    placeholder={'Selecteer uw land'}\n                                    options={Countries}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n            </Col>\n\n            <Col xs={12} md={6}>\n                <FormLabel\n                    htmlFor=\"iban\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    IBAN gegevens\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"iban\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"iban\"\n                                    placeholder={'Rekeningnummer (IBAN)'}\n                                    customOnChange={e => {\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\n                                    }}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"ibanAttn\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"iban_attn\"\n                                    placeholder={'IBAN te name van'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\n                    Akkoord privacybeleid\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"didAgreeAvg\"\n                            render={({ field }) => (\n                                <label className=\"w-checkbox checkbox-fld\">\n                                    <input\n                                        type=\"checkbox\"\n                                        {...field}\n                                        id=\"did_agree_avg\"\n                                        checked={field.value}\n                                        className=\"w-checkbox-input checkbox\"\n                                        disabled={initialContact.didAgreeAvg}\n                                    />\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\n                                        Ik ga akkoord met{' '}\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\n                                            privacybeleid\n                                        </a>{' '}\n                                        {values.didAgreeAvg ? (\n                                            <em>\n                                                (\n                                                {initialContact.dateDidAgreeAvg\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\n                                                    : moment().format('L')}\n                                                )\n                                            </em>\n                                        ) : (\n                                            ''\n                                        )}\n                                    </span>\n                                    {touched[field.name] && errors[field.name] ? (\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\n                                    ) : null}\n                                </label>\n                            )}\n                        />\n                    </Col>\n                </Row>\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\n                    <>\n                        <FormLabel\n                            htmlFor=\"energy_supplier_id\"\n                            className={\n                                initialContact.isParticipantPcrProject ||\n                                projectTypeCodeRef === 'postalcode_link_capital'\n                                    ? 'field-label required'\n                                    : 'field-label'\n                            }\n                        >\n                            Huidige energie leverancier\n                        </FormLabel>\n                        <Row>\n                            <Col xs={12} sm={12} md={8}>\n                                <Field\n                                    name=\"primaryContactEnergySupplier.energySupplierId\"\n                                    render={({ field }) => (\n                                        <Select\n                                            field={field}\n                                            errors={errors}\n                                            touched={touched}\n                                            id=\"energy_supplier_id\"\n                                            placeholder={'Selecteer uw leverancier'}\n                                            options={EnergySuppliers}\n                                            // disabled={\n                                            //     initialContact.primaryContactEnergySupplier &&\n                                            //     initialContact.primaryContactEnergySupplier.energySupplierId &&\n                                            //     initialContact.isParticipant\n                                            // }\n                                        />\n                                    )}\n                                />\n                            </Col>\n                        </Row>\n\n                        {values.primaryContactEnergySupplier && values.primaryContactEnergySupplier.energySupplierId ? (\n                            <>\n                                <FormLabel\n                                    htmlFor=\"es_number\"\n                                    className={\n                                        projectTypeCodeRef === 'postalcode_link_capital'\n                                            ? 'field-label required'\n                                            : 'field-label'\n                                    }\n                                >\n                                    Klant nummer bij leverancier\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"primaryContactEnergySupplier.esNumber\"\n                                            render={({ field }) => (\n                                                <InputText\n                                                    field={field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    id=\"es_number\"\n                                                    placeholder={'Klant nummer bij leverancier'}\n                                                    // disabled={\n                                                    //     initialContact.primaryContactEnergySupplier &&\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\n                                                    //     initialContact.primaryContactEnergySupplier.esNumber &&\n                                                    //     initialContact.isParticipant\n                                                    // }\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\n                                    Klant bij leverancier sinds\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"primaryContactEnergySupplier.memberSince\"\n                                            render={({ field }) => (\n                                                <InputDate\n                                                    {...field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    onChangeAction={setFieldValue}\n                                                    id=\"member_since\"\n                                                    placeholder={'Klant sinds'}\n                                                    // readOnly={\n                                                    //     initialContact.primaryContactEnergySupplier &&\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\n                                                    //     initialContact.primaryContactEnergySupplier.memberSince\n                                                    // }\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n\n                                <FormLabel\n                                    htmlFor=\"ean_electricity\"\n                                    className={\n                                        projectTypeCodeRef === 'postalcode_link_capital'\n                                            ? 'field-label required'\n                                            : 'field-label'\n                                    }\n                                >\n                                    EAN nummer electriciteit\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"primaryContactEnergySupplier.eanElectricity\"\n                                            render={({ field }) => (\n                                                <InputText\n                                                    field={field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    id=\"ean_electricity\"\n                                                    placeholder={'EAN nummer electriciteit'}\n                                                    // disabled={\n                                                    //     initialContact.primaryContactEnergySupplier &&\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\n                                                    //     initialContact.primaryContactEnergySupplier.eanElectricity &&\n                                                    //     initialContact.isParticipant\n                                                    // }\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n\n                                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\n                                    EAN nummer gas\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"primaryContactEnergySupplier.eanGas\"\n                                            render={({ field }) => (\n                                                <InputText\n                                                    field={field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    id=\"ean_gas\"\n                                                    placeholder={'EAN nummer gas'}\n                                                    // disabled={\n                                                    //     initialContact.primaryContactEnergySupplier &&\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\n                                                    //     initialContact.primaryContactEnergySupplier.eanGas\n                                                    // }\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n                            </>\n                        ) : (\n                            ''\n                        )}\n                    </>\n                ) : null}\n            </Col>\n        </Row>\n    );\n};\n\nexport default DefaultContactPersonalEdit;\n","import * as Yup from 'yup';\nimport * as ibantools from 'ibantools';\n\nexport default {\n    validationSchemaBasic: Yup.object().shape({\n        // TODO set more correct values for validation, only important fields are set now\n        didAgreeAvg: Yup.bool().test(\n            'didAgreeAvg',\n            'Je dient akkoord te gaan met privacybeleid!',\n            value => value === true\n        ),\n        person: Yup.object().shape({\n            lastName: Yup.string()\n                .trim()\n                .required('Verplicht'),\n        }),\n        emailCorrespondence: Yup.object().shape({\n            email: Yup.string()\n                .trim()\n                .email('Ongeldig e-mail adres')\n                .required('Verplicht'),\n        }),\n        emailInvoice: Yup.object().shape({\n            email: Yup.string()\n                .trim()\n                .email('Ongeldig e-mail adres'),\n        }),\n        primaryAddress: Yup.object().shape({\n            street: Yup.string().trim(),\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                }),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        (this.parent.countryId !== 'NL' &&\n                            this.parent.countryId !== null &&\n                            this.parent.countryId != '') ||\n                        value.trim() == ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                }),\n            city: Yup.string().trim(),\n        }),\n        phoneNumberPrimary: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\n        }),\n        phoneNumberTwo: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\n        }),\n        primaryContactEnergySupplier: Yup.object().shape({\n            eanElectricity: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\n            eanGas: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\n        }),\n    }),\n\n    validationSchemaAdditional: Yup.object().shape({\n        person: Yup.object().shape({\n            firstName: Yup.string()\n                .trim()\n                // .required('Verplicht'),\n                .test('initials-and-first-name-check', 'Voornaam of initialen verplicht', function(value) {\n                    if (value.trim() != '' || this.parent.initials.trim() != '') {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n            dateOfBirth: Yup.date()\n                .typeError('Verplicht of ongeldige datum')\n                .required('Verplicht'),\n        }),\n        phoneNumberPrimary: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\n                .required('Verplicht'),\n        }),\n        phoneNumberTwo: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\n        }),\n        primaryAddress: Yup.object().shape({\n            street: Yup.string()\n                .trim()\n                .required('Verplicht'),\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                })\n                .required('Verplicht'),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        this.parent.countryId !== 'NL' &&\n                        this.parent.countryId !== null &&\n                        this.parent.countryId != ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                })\n                .required('Verplicht'),\n            city: Yup.string()\n                .trim()\n                .required('Verplicht'),\n        }),\n        iban: Yup.string()\n            .trim()\n            .nullable()\n            .required('Verplicht')\n            .test('iban', 'Ongeldige IBAN of gebruik geen spaties.', value => ibantools.isValidIBAN(value)),\n        ibanAttn: Yup.string()\n            .trim()\n            .nullable()\n            .required('Verplicht'),\n    }),\n\n    validationSchemaPcrAdditional: Yup.object().shape({\n        primaryContactEnergySupplier: Yup.object().shape({\n            energySupplierId: Yup.string()\n                .nullable()\n                .required('Verplicht'),\n            esNumber: Yup.string()\n                .nullable()\n                .trim()\n                .required('Verplicht'),\n            eanElectricity: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\n                .required('Verplicht'),\n            eanGas: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\n        }),\n    }),\n};\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport DefaultContactPersonalView from './default-form-personal/View';\nimport DefaultContactPersonalEdit from './default-form-personal/Edit';\nimport Col from 'react-bootstrap/Col';\nimport { Form, Formik } from 'formik';\nimport { ClipLoader } from 'react-spinners';\nimport ValidationSchemaPersonal from './../../helpers/ValidationSchemaPersonal';\nimport { isEmpty } from 'lodash';\nimport { Alert } from 'react-bootstrap';\n\nfunction ContactDetailsPersonal({\n    portalSettings,\n    initialContact,\n    handleSubmitContactValues,\n    editButtonGroup,\n    editForm,\n    setEditForm,\n}) {\n    const validationSchema = initialContact.isParticipantPcrProject\n        ? ValidationSchemaPersonal.validationSchemaBasic\n              .concat(ValidationSchemaPersonal.validationSchemaAdditional)\n              .concat(ValidationSchemaPersonal.validationSchemaPcrAdditional)\n        : initialContact.isParticipant\n        ? ValidationSchemaPersonal.validationSchemaBasic.concat(ValidationSchemaPersonal.validationSchemaAdditional)\n        : ValidationSchemaPersonal.validationSchemaBasic;\n    return (\n        <div>\n            {editForm ? (\n                <Formik\n                    initialValues={initialContact}\n                    enableReinitialize={true}\n                    validationSchema={validationSchema}\n                    onSubmit={(values, actions) => {\n                        actions.setSubmitting(true);\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\n                    }}\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\n                        return (\n                            <Form>\n                                <DefaultContactPersonalEdit\n                                    portalSettings={portalSettings}\n                                    initialContact={initialContact}\n                                    touched={touched}\n                                    errors={errors}\n                                    setFieldValue={setFieldValue}\n                                    values={values}\n                                />\n                                <Row>\n                                    <Col>\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                            <Button\n                                                variant={'outline-dark'}\n                                                size=\"sm\"\n                                                onClick={function() {\n                                                    setEditForm(false);\n                                                }}\n                                            >\n                                                Annuleren\n                                            </Button>\n                                            <Button\n                                                className={'w-button'}\n                                                size=\"sm\"\n                                                onClick={handleSubmit}\n                                                disabled={isSubmitting}\n                                            >\n                                                {isSubmitting ? (\n                                                    <span>\n                                                        <ClipLoader color={'white'} size={14} />\n                                                        Bezig met opslaan\n                                                    </span>\n                                                ) : (\n                                                    'Opslaan'\n                                                )}\n                                            </Button>\n                                        </ButtonGroup>\n                                    </Col>\n                                </Row>\n                                {!isEmpty(errors) ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                                {status && status.message ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\n                                                    {status.message}\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </Form>\n                        );\n                    }}\n                />\n            ) : (\n                <>\n                    <DefaultContactPersonalView portalSettings={portalSettings} initialContact={initialContact} />\n                    <Row>\n                        <Col>{editButtonGroup}</Col>\n                    </Row>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default ContactDetailsPersonal;\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Row from 'react-bootstrap/Row';\nimport moment from 'moment';\n\nfunction DefaultContactOrganisationView({ portalSettings, initialContact }) {\n    const {\n        organisation = {},\n        emailCorrespondence,\n        emailInvoice,\n        phoneNumberPrimary,\n        phoneNumberTwo,\n        visitAddress,\n        postalAddress,\n        invoiceAddress,\n        iban,\n        ibanAttn,\n        didAgreeAvg,\n        dateDidAgreeAvg,\n        number,\n        primaryContactEnergySupplier,\n        primaryOccupations,\n    } = initialContact;\n\n    return (\n        <Row>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Bedrijfsnaam</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Bedrijfsnaam'}>\n                        {organisation.name}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>KvK</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'KvK'}>\n                        {organisation.chamberOfCommerceNumber}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'BTW nummer'}>\n                        {organisation.vatNumber}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\n                        {iban}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\n                        {ibanAttn}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Website</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Website'}>\n                        {organisation.website}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\n                <Row>\n                    <div className={'col-12 col-sm-8'}>\n                        <input\n                            type=\"checkbox\"\n                            id=\"did_agree_avg\"\n                            checked={didAgreeAvg}\n                            className=\"w-checkbox-input checkbox\"\n                            disabled={true}\n                        />\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\n                            Ik ga akkoord met{' '}\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\n                                privacybeleid\n                            </a>{' '}\n                            {didAgreeAvg ? <em>({dateDidAgreeAvg ? moment(dateDidAgreeAvg).format('L') : ''})</em> : ''}\n                        </span>\n                    </div>\n                </Row>\n\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\n                        {emailCorrespondence.email}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\n                        {emailInvoice.email}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\n                        {phoneNumberPrimary.number}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\n                        {phoneNumberTwo.number}\n                    </TextBlock>\n                </Row>\n            </Col>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label'}>Bezoekadres</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\n                        {visitAddress.street}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\n                        {visitAddress.number}\n                    </TextBlock>\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\n                        {visitAddress.addition}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\n                        {visitAddress.postalCode}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\n                        {visitAddress.city}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\n                        {visitAddress.country ? visitAddress.country.name : ''}\n                    </TextBlock>\n                </Row>\n                <FormLabel className={'field-label'}>Postadres</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\n                        {postalAddress.street}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\n                        {postalAddress.number}\n                    </TextBlock>\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\n                        {postalAddress.addition}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\n                        {postalAddress.postalCode}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\n                        {postalAddress.city}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\n                        {postalAddress.country ? postalAddress.country.name : ''}\n                    </TextBlock>{' '}\n                </Row>\n                <FormLabel className={'field-label'}>Nota adres</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\n                        {invoiceAddress.street}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\n                        {invoiceAddress.number}\n                    </TextBlock>\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\n                        {invoiceAddress.addition}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\n                        {invoiceAddress.postalCode}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\n                        {invoiceAddress.city}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\n                        {invoiceAddress.country ? invoiceAddress.country.name : ''}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\n                        {primaryContactEnergySupplier.energySupplier\n                            ? primaryContactEnergySupplier.energySupplier.name\n                            : ''}\n                    </TextBlock>\n                </Row>\n\n                {primaryContactEnergySupplier && primaryContactEnergySupplier.energySupplierId ? (\n                    <>\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\n                                {primaryContactEnergySupplier.esNumber}\n                            </TextBlock>\n                        </Row>\n\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\n                                {primaryContactEnergySupplier.memberSince\n                                    ? moment(primaryContactEnergySupplier.memberSince).format('L')\n                                    : ''}\n                            </TextBlock>\n                        </Row>\n\n                        <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\n                                {primaryContactEnergySupplier.eanElectricity}\n                            </TextBlock>\n                        </Row>\n\n                        <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\n                                {primaryContactEnergySupplier.eanGas}\n                            </TextBlock>\n                        </Row>\n                    </>\n                ) : (\n                    ''\n                )}\n\n                {/*<FormLabel className={'field-label'}>Contacten</FormLabel>*/}\n                {/*{primaryOccupations ? (*/}\n                {/*primaryOccupations.map(primaryOccupation => (*/}\n                {/*<Row>*/}\n                {/*<TextBlock className={'col-12 col-sm-4'} placeholder={'Contact naam'}>*/}\n                {/*{primaryOccupation.contact.fullName}*/}\n                {/*</TextBlock>*/}\n                {/*<TextBlock className={'col-12 col-sm-4'} placeholder={'Contact verbinding'}>*/}\n                {/*{primaryOccupation.occupation.primaryOccupation}*/}\n                {/*</TextBlock>*/}\n                {/*</Row>*/}\n                {/*))*/}\n                {/*) : (*/}\n                {/*<Row>*/}\n                {/*<TextBlock className={'col-12 col-sm-8'} />*/}\n                {/*</Row>*/}\n                {/*)}*/}\n            </Col>\n        </Row>\n    );\n}\n\nexport default DefaultContactOrganisationView;\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field } from 'formik';\nimport Select from '../../../components/form/Select';\nimport Countries from '../../../data/Countries';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport Row from 'react-bootstrap/Row';\nimport TextBlock from '../../../components/general/TextBlock';\nimport moment from 'moment';\nimport EnergySuppliers from '../../../data/EnergySuppliers';\nimport InputDate from '../../../components/form/InputDate';\nimport { FaInfoCircle } from 'react-icons/fa';\nimport ReactTooltip from 'react-tooltip';\n\nconst DefaultContactOrganisationEdit = function({\n    portalSettings,\n    initialContact,\n    projectTypeCodeRef,\n    errors,\n    touched,\n    values,\n    setFieldValue,\n}) {\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\n    return (\n        <Row>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"organisation.name\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"name\"\n                                    placeholder={'Naam'}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={4}>\n                        {initialContact.disableChangeContactNameOnPortal ? (\n                            <>\n                                <FaInfoCircle\n                                    color={'blue'}\n                                    size={'15px'}\n                                    data-tip={\n                                        'Je neemt deel aan een project waarvan de deelnemingen op naam zijn uitgegeven.<br />' +\n                                        'Daarom kun je jouw naam niet zelf wijzigen.<br />' +\n                                        'Overige contactgegevens kun je wel zelf aanpassen.<br />' +\n                                        'Een wijziging van rekeningnummer wordt door ons gecontroleerd.<br />' +\n                                        'Heb je vragen of wil je jouw gegevens door de beheerder laten wijzigen?<br />' +\n                                        'Kijk in het menu onder \"Over ons\" voor contact gegevens.'\n                                    }\n                                    data-for={`contact-${initialContact.id}`}\n                                />\n                                <ReactTooltip\n                                    id={`contact-${initialContact.id}`}\n                                    effect=\"float\"\n                                    place=\"right\"\n                                    multiline={true}\n                                    aria-haspopup=\"true\"\n                                />\n                            </>\n                        ) : (\n                            ''\n                        )}\n                    </Col>\n                </Row>\n\n                <FormLabel className={'field-label'}>KvK</FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"organisation.chamberOfCommerceNumber\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"chamber_of_commerce_number\"\n                                    placeholder={'KvK'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"organisation.vatNumber\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"vat_number\"\n                                    placeholder={'BTW nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel\n                    htmlFor=\"iban\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    IBAN gegevens\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"iban\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"iban\"\n                                    placeholder={'Rekeningnummer (IBAN)'}\n                                    customOnChange={e => {\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\n                                    }}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"ibanAttn\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"iban_attn\"\n                                    placeholder={'IBAN te name van'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel className={'field-label'}>Website</FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"organisation.website\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"website\"\n                                    placeholder={'Website'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\n                    Akkoord privacybeleid\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"didAgreeAvg\"\n                            render={({ field }) => (\n                                <label className=\"w-checkbox checkbox-fld\">\n                                    <input\n                                        type=\"checkbox\"\n                                        {...field}\n                                        id=\"did_agree_avg\"\n                                        checked={field.value}\n                                        className=\"w-checkbox-input checkbox\"\n                                        disabled={initialContact.didAgreeAvg}\n                                    />\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\n                                        Ik ga akkoord met{' '}\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\n                                            privacybeleid\n                                        </a>{' '}\n                                        {values.didAgreeAvg ? (\n                                            <em>\n                                                (\n                                                {initialContact.dateDidAgreeAvg\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\n                                                    : moment().format('L')}\n                                                )\n                                            </em>\n                                        ) : (\n                                            ''\n                                        )}\n                                    </span>\n                                    {touched[field.name] && errors[field.name] ? (\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\n                                    ) : null}\n                                </label>\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\n                    E-mailadres correspondentie\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"emailCorrespondence.email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"email-correspondence\"\n                                    placeholder={'E-mailadres'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\n                    E-mailadres nota\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"emailInvoice.email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"email-invoice\"\n                                    placeholder={'E-mailadres'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel\n                    htmlFor=\"telephone-number-1\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    Telefoonnummer 1\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={10} md={6}>\n                        <Field\n                            name=\"phoneNumberPrimary.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"telephone-number-1\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\n                    Telefoonnummer 2\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={10} md={6}>\n                        <Field\n                            name=\"phoneNumberTwo.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"telephone-number-2\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n            </Col>\n\n            <Col xs={12} md={6}>\n                <FormLabel\n                    htmlFor=\"street\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    Bezoekadres\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12}>\n                        <Field\n                            name=\"visitAddress.street\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street\"\n                                    placeholder={'Straat'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"visitAddress.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street_number\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"visitAddress.addition\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"addition\"\n                                    placeholder={'Toevoeging'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"visitAddress.postalCode\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"postal_code\"\n                                    placeholder={'Postcode'}\n                                    disabled={\n                                        initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject\n                                    }\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"visitAddress.city\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"city\"\n                                    placeholder={'Plaats'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"visitAddress.countryId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"country_id\"\n                                    placeholder={'Selecteer uw land'}\n                                    options={Countries}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\n                    Postadres\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12}>\n                        <Field\n                            name=\"postalAddress.street\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street\"\n                                    placeholder={'Straat'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"postalAddress.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street_number\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"postalAddress.addition\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"addition\"\n                                    placeholder={'Toevoeging'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"postalAddress.postalCode\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"postal_code\"\n                                    placeholder={'Postcode'}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"postalAddress.city\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"city\"\n                                    placeholder={'Plaats'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"postalAddress.countryId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"country_id\"\n                                    placeholder={'Selecteer uw land'}\n                                    options={Countries}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\n                    Nota adres\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12}>\n                        <Field\n                            name=\"invoiceAddress.street\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street\"\n                                    placeholder={'Straat'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"invoiceAddress.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street_number\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"invoiceAddress.addition\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"addition\"\n                                    placeholder={'Toevoeging'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"invoiceAddress.postalCode\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"postal_code\"\n                                    placeholder={'Postcode'}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"invoiceAddress.city\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"city\"\n                                    placeholder={'Plaats'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"invoiceAddress.countryId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"country_id\"\n                                    placeholder={'Selecteer uw land'}\n                                    options={Countries}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\n                    <>\n                        <FormLabel\n                            htmlFor=\"energy_supplier_id\"\n                            className={\n                                initialContact.isParticipantPcrProject ||\n                                projectTypeCodeRef === 'postalcode_link_capital'\n                                    ? 'field-label required'\n                                    : 'field-label'\n                            }\n                        >\n                            Huidige energie leverancier\n                        </FormLabel>\n                        <Row>\n                            <Col xs={12} sm={12} md={8}>\n                                <Field\n                                    name=\"primaryContactEnergySupplier.energySupplierId\"\n                                    render={({ field }) => (\n                                        <Select\n                                            field={field}\n                                            errors={errors}\n                                            touched={touched}\n                                            id=\"energy_supplier_id\"\n                                            placeholder={'Selecteer uw leverancier'}\n                                            options={EnergySuppliers}\n                                            // disabled={\n                                            //     initialContact.primaryContactEnergySupplier &&\n                                            //     initialContact.primaryContactEnergySupplier.energySupplierId &&\n                                            //     initialContact.isParticipant\n                                            // }\n                                        />\n                                    )}\n                                />\n                            </Col>\n                        </Row>\n\n                        {values.primaryContactEnergySupplier && values.primaryContactEnergySupplier.energySupplierId ? (\n                            <>\n                                <FormLabel\n                                    htmlFor=\"es_number\"\n                                    className={\n                                        projectTypeCodeRef === 'postalcode_link_capital'\n                                            ? 'field-label required'\n                                            : 'field-label'\n                                    }\n                                >\n                                    Klant nummer bij leverancier\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"primaryContactEnergySupplier.esNumber\"\n                                            render={({ field }) => (\n                                                <InputText\n                                                    field={field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    id=\"es_number\"\n                                                    placeholder={'Klant nummer bij leverancier'}\n                                                    // disabled={\n                                                    //     initialContact.primaryContactEnergySupplier &&\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\n                                                    //     initialContact.primaryContactEnergySupplier.esNumber &&\n                                                    //     initialContact.isParticipant\n                                                    // }\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\n                                    Klant bij leverancier sinds\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"primaryContactEnergySupplier.memberSince\"\n                                            render={({ field }) => (\n                                                <InputDate\n                                                    {...field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    onChangeAction={setFieldValue}\n                                                    id=\"member_since\"\n                                                    placeholder={'Klant sinds'}\n                                                    // readOnly={\n                                                    //     initialContact.primaryContactEnergySupplier &&\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\n                                                    //     initialContact.primaryContactEnergySupplier.memberSince\n                                                    // }\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n\n                                <FormLabel\n                                    htmlFor=\"ean_electricity\"\n                                    className={\n                                        projectTypeCodeRef === 'postalcode_link_capital'\n                                            ? 'field-label required'\n                                            : 'field-label'\n                                    }\n                                >\n                                    EAN nummer electriciteit\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"primaryContactEnergySupplier.eanElectricity\"\n                                            render={({ field }) => (\n                                                <InputText\n                                                    field={field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    id=\"ean_electricity\"\n                                                    placeholder={'EAN nummer electriciteit'}\n                                                    // disabled={\n                                                    //     initialContact.primaryContactEnergySupplier &&\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\n                                                    //     initialContact.primaryContactEnergySupplier.eanElectricity &&\n                                                    //     initialContact.isParticipant\n                                                    // }\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n\n                                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\n                                    EAN nummer gas\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"primaryContactEnergySupplier.eanGas\"\n                                            render={({ field }) => (\n                                                <InputText\n                                                    field={field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    id=\"ean_gas\"\n                                                    placeholder={'EAN nummer gas'}\n                                                    // disabled={\n                                                    //     initialContact.primaryContactEnergySupplier &&\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\n                                                    //     initialContact.primaryContactEnergySupplier.eanGas\n                                                    // }\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n                            </>\n                        ) : (\n                            ''\n                        )}\n                    </>\n                ) : null}\n            </Col>\n        </Row>\n    );\n};\n\nexport default DefaultContactOrganisationEdit;\n","import * as Yup from 'yup';\nimport * as ibantools from 'ibantools';\n\nexport default {\n    validationSchemaBasic: Yup.object().shape({\n        // TODO set more correct values for validation, only important fields are set now\n        didAgreeAvg: Yup.bool().test(\n            'didAgreeAvg',\n            'Je dient akkoord te gaan met privacybeleid!',\n            value => value === true\n        ),\n        organisation: Yup.object().shape({\n            name: Yup.string()\n                .trim()\n                .required('Verplicht'),\n        }),\n        emailCorrespondence: Yup.object().shape({\n            email: Yup.string()\n                .trim()\n                .email('Ongeldig e-mail adres')\n                .required('Verplicht'),\n        }),\n        emailInvoice: Yup.object().shape({\n            email: Yup.string()\n                .trim()\n                .email('Ongeldig e-mail adres'),\n        }),\n        postalAddress: Yup.object().shape({\n            street: Yup.string().trim(),\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                }),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        (this.parent.countryId !== 'NL' &&\n                            this.parent.countryId !== null &&\n                            this.parent.countryId != '') ||\n                        value.trim() == ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                }),\n            city: Yup.string().trim(),\n        }),\n        visitAddress: Yup.object().shape({\n            street: Yup.string().trim(),\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                }),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        (this.parent.countryId !== 'NL' &&\n                            this.parent.countryId !== null &&\n                            this.parent.countryId != '') ||\n                        value.trim() == ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                }),\n            city: Yup.string().trim(),\n        }),\n        invoiceAddress: Yup.object().shape({\n            street: Yup.string().trim(),\n            number: Yup.string()\n                .nullable()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                }),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        (this.parent.countryId !== 'NL' &&\n                            this.parent.countryId !== null &&\n                            this.parent.countryId != '') ||\n                        value.trim() == ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                }),\n            city: Yup.string().trim(),\n        }),\n        phoneNumberPrimary: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\n        }),\n        phoneNumberTwo: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\n        }),\n        primaryContactEnergySupplier: Yup.object().shape({\n            eanElectricity: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\n            eanGas: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\n        }),\n    }),\n\n    validationSchemaAdditional: Yup.object().shape({\n        phoneNumberPrimary: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\n                .required('Verplicht'),\n        }),\n        visitAddress: Yup.object().shape({\n            street: Yup.string()\n                .trim()\n                .required('Verplicht'),\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                })\n                .required('Verplicht'),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        this.parent.countryId !== 'NL' &&\n                        this.parent.countryId !== null &&\n                        this.parent.countryId != ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                })\n                .required('Verplicht'),\n            city: Yup.string()\n                .trim()\n                .required('Verplicht'),\n        }),\n        iban: Yup.string()\n            .trim()\n            .nullable()\n            .required('yyVerplicht')\n            .test('iban', 'Ongeldige IBAN of gebruik geen spaties.', value => ibantools.isValidIBAN(value)),\n        ibanAttn: Yup.string()\n            .trim()\n            .nullable()\n            .required('Verplicht'),\n        organisation: Yup.object().shape({\n            chamberOfCommerceNumber: Yup.string()\n                .trim()\n                .required('Verplicht'),\n        }),\n    }),\n\n    validationSchemaPcrAdditional: Yup.object().shape({\n        primaryContactEnergySupplier: Yup.object().shape({\n            energySupplierId: Yup.string()\n                .nullable()\n                .required('Verplicht'),\n            esNumber: Yup.string()\n                .nullable()\n                .trim()\n                .required('Verplicht'),\n            eanElectricity: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\n                .required('Verplicht'),\n            eanGas: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\n        }),\n    }),\n};\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport DefaultContactOrganisationView from './default-form-organisation/View';\nimport DefaultContactOrganisationEdit from './default-form-organisation/Edit';\nimport Col from 'react-bootstrap/Col';\nimport { Form, Formik } from 'formik';\nimport { ClipLoader } from 'react-spinners';\nimport ValidationSchemaOrganisation from './../../helpers/ValidationSchemaOrganisation';\nimport { isEmpty } from 'lodash';\nimport { Alert } from 'react-bootstrap';\n\nfunction ContactDetailsOrganisation({\n    portalSettings,\n    initialContact,\n    handleSubmitContactValues,\n    editButtonGroup,\n    editForm,\n    setEditForm,\n}) {\n    const validationSchema = initialContact.isParticipantPcrProject\n        ? ValidationSchemaOrganisation.validationSchemaBasic\n              .concat(ValidationSchemaOrganisation.validationSchemaAdditional)\n              .concat(ValidationSchemaOrganisation.validationSchemaPcrAdditional)\n        : initialContact.isParticipant\n        ? ValidationSchemaOrganisation.validationSchemaBasic.concat(\n              ValidationSchemaOrganisation.validationSchemaAdditional\n          )\n        : ValidationSchemaOrganisation.validationSchemaBasic;\n\n    return (\n        <div>\n            {editForm ? (\n                <Formik\n                    initialValues={initialContact}\n                    enableReinitialize={true}\n                    validationSchema={validationSchema}\n                    onSubmit={(values, actions) => {\n                        actions.setSubmitting(true);\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\n                    }}\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\n                        return (\n                            <Form>\n                                <DefaultContactOrganisationEdit\n                                    portalSettings={portalSettings}\n                                    initialContact={initialContact}\n                                    touched={touched}\n                                    errors={errors}\n                                    setFieldValue={setFieldValue}\n                                    values={values}\n                                />\n                                <Row>\n                                    <Col>\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                            <Button\n                                                variant={'outline-dark'}\n                                                size=\"sm\"\n                                                onClick={function() {\n                                                    setEditForm(false);\n                                                }}\n                                            >\n                                                Annuleren\n                                            </Button>\n                                            <Button\n                                                className={'w-button'}\n                                                size=\"sm\"\n                                                onClick={handleSubmit}\n                                                disabled={isSubmitting}\n                                            >\n                                                {isSubmitting ? (\n                                                    <span>\n                                                        <ClipLoader color={'white'} size={14} />\n                                                        Bezig met opslaan\n                                                    </span>\n                                                ) : (\n                                                    'Opslaan'\n                                                )}\n                                            </Button>\n                                        </ButtonGroup>\n                                    </Col>\n                                </Row>\n                                {!isEmpty(errors) ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                                {status && status.message ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\n                                                    {status.message}\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </Form>\n                        );\n                    }}\n                />\n            ) : (\n                <>\n                    <DefaultContactOrganisationView portalSettings={portalSettings} initialContact={initialContact} />\n                    <Row>\n                        <Col>{editButtonGroup}</Col>\n                    </Row>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default ContactDetailsOrganisation;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\nimport ContactAPI from '../../api/contact/ContactAPI';\nimport rebaseContact from '../../helpers/RebaseContact';\nimport LoadingView from '../../components/general/LoadingView';\nimport ContactDetailsPersonal from './Personal';\nimport ContactDetailsOrganisation from './Organisation';\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nconst ContactDetails = function(props) {\n    const [contact, setContact] = useState({});\n    const [portalSettings, setPortalSettings] = useState({});\n    const [isLoading, setLoading] = useState(true);\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\n    const [editForm, setEditForm] = useState(false);\n\n    useEffect(() => {\n        const keys =\n            '?keys[]=portalName' +\n            '&keys[]=portalWebsite' +\n            '&keys[]=portalUrl' +\n            '&keys[]=responsibleUserId' +\n            '&keys[]=checkContactTaskResponsibleUserId' +\n            '&keys[]=linkPrivacyPolicy' +\n            '&keys[]=pcrPowerKwhConsumptionPercentage' +\n            '&keys[]=pcrGeneratingCapacityOneSolorPanel';\n        PortalSettingsAPI.fetchPortalSettings(keys)\n            .then(payload => {\n                setPortalSettings({ ...payload.data });\n            })\n            .catch(error => {\n                this.setState({ isLoading: false, hasError: true });\n            });\n\n        // Call Api if current selected contact id is filled\n        if (props.currentSelectedContact.id) {\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\n                callFetchContact();\n            }\n        }\n    }, [props.currentSelectedContact]);\n\n    function callFetchContact() {\n        setLoading(true);\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\n            .then(payload => {\n                const contactData = rebaseContact(payload.data.data);\n\n                setContact(contactData);\n                props.updateNameSelectedContact(contactData.fullName);\n                setLoading(false);\n            })\n            .catch(error => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                setLoading(false);\n            });\n    }\n\n    function usePrevious(value) {\n        const ref = useRef();\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    }\n\n    function handleSubmitContactValues(values, actions, switchToView) {\n        const updatedContact = { ...contact, ...values, projectId: null };\n        ContactAPI.updateContact(updatedContact)\n            .then(payload => {\n                callFetchContact();\n                actions.setSubmitting(false);\n                switchToView();\n            })\n            .catch(error => {\n                actions.setSubmitting(false);\n                actions.setStatus({\n                    message: error.response.data.message,\n                });\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\n            });\n    }\n\n    const editButtonGroup = (\n        <ButtonGroup aria-label=\"Steps\" className={'float-right'}>\n            <Button\n                className={'w-button'}\n                size=\"sm\"\n                onClick={function() {\n                    setEditForm(true);\n                }}\n            >\n                Wijzig\n            </Button>\n        </ButtonGroup>\n    );\n\n    return (\n        <div className=\"content-section\">\n            {isLoading ? (\n                <LoadingView />\n            ) : (\n                <div className=\"content-container w-container\">\n                    <Row>\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\n                            <Link to={`/inschrijven-projecten`}>\n                                <Button className={'w-button'} size=\"sm\">\n                                    Inschrijven projecten\n                                </Button>\n                            </Link>\n                            &nbsp;\n                            <Link to={`/inschrijvingen-projecten`}>\n                                <Button className={'w-button'} size=\"sm\">\n                                    Huidige deelnames\n                                </Button>\n                            </Link>\n                        </ButtonGroup>\n                    </Row>\n                    {editForm ? (\n                        <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\n                    ) : (\n                        <Row>\n                            <Col>\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\n                            </Col>\n                            <Col>{editButtonGroup}</Col>\n                        </Row>\n                    )}\n                    <div className=\"w-form\" />\n                    {/* If contact is person */}\n                    {contact.typeId === 'person' ? (\n                        <ContactDetailsPersonal\n                            portalSettings={portalSettings}\n                            initialContact={contact}\n                            handleSubmitContactValues={handleSubmitContactValues}\n                            editButtonGroup={editButtonGroup}\n                            editForm={editForm}\n                            setEditForm={setEditForm}\n                        />\n                    ) : null}\n                    {/* If contact is organisation */}\n                    {contact.typeId === 'organisation' ? (\n                        <ContactDetailsOrganisation\n                            portalSettings={portalSettings}\n                            initialContact={contact}\n                            handleSubmitContactValues={handleSubmitContactValues}\n                            editButtonGroup={editButtonGroup}\n                            editForm={editForm}\n                            setEditForm={setEditForm}\n                        />\n                    ) : null}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default function ContactDetailsWithContext(props) {\n    return (\n        <PortalUserConsumer>\n            {({ currentSelectedContact, updateNameSelectedContact }) => (\n                <ContactDetails\n                    {...props}\n                    currentSelectedContact={currentSelectedContact}\n                    updateNameSelectedContact={updateNameSelectedContact}\n                />\n            )}\n        </PortalUserConsumer>\n    );\n}\n","import React from 'react';\nimport { Field, FieldArray, Form, Formik } from 'formik';\nimport ButtonText from '../../components/button/ButtonText';\n\nconst MyAreasOfInterestForm = function({ handleSubmit, initialValues }) {\n    return (\n        <Formik\n            initialValues={initialValues}\n            enableReinitialize={true}\n            onSubmit={(values, actions) => {\n                actions.setSubmitting(true);\n                console.log(values);\n            }}\n            render={({ errors, touched, setFieldValue, isSubmitting, values }) => {\n                return (\n                    <Form id=\"email-form\" name=\"email-form\">\n                        <div className=\"w-row\">\n                            <div className=\"w-col w-col-6\">\n                                <h6 className=\"heading-content\">Mijn interessegebieden</h6>\n                                <FieldArray\n                                    name=\"myAreasOfInterest\"\n                                    render={arrayHelpers => (\n                                        <div>\n                                            {values.myAreasOfInterest &&\n                                                values.myAreasOfInterest.map((myAreaOfInterest, index) => (\n                                                    <div key={index}>\n                                                        <Field\n                                                            name={`myAreasOfInterest[${index}]['value']`}\n                                                            render={({ field }) => (\n                                                                <label className=\"w-checkbox checkbox-fld\">\n                                                                    <input\n                                                                        type=\"checkbox\"\n                                                                        {...field}\n                                                                        id={myAreaOfInterest.name}\n                                                                        checked={myAreaOfInterest.value}\n                                                                        className=\"w-checkbox-input checkbox\"\n                                                                    />\n                                                                    <span\n                                                                        htmlFor={myAreaOfInterest.name}\n                                                                        className=\"checkbox-label w-form-label\"\n                                                                    >\n                                                                        {myAreaOfInterest.name}\n                                                                    </span>\n                                                                </label>\n                                                            )}\n                                                        />\n                                                    </div>\n                                                ))}\n                                        </div>\n                                    )}\n                                />\n\n                                <h6 className=\"heading-content\">Deelname</h6>\n                                <FieldArray\n                                    name=\"participations\"\n                                    render={arrayHelpers => (\n                                        <div>\n                                            {values.participations &&\n                                                values.participations.map((participation, index) => (\n                                                    <div key={index}>\n                                                        <Field\n                                                            name={`participations[${index}]['value']`}\n                                                            render={({ field }) => (\n                                                                <label className=\"w-checkbox checkbox-fld\">\n                                                                    <input\n                                                                        type=\"checkbox\"\n                                                                        {...field}\n                                                                        id={participation.name}\n                                                                        checked={participation.value}\n                                                                        className=\"w-checkbox-input checkbox\"\n                                                                    />\n                                                                    <span\n                                                                        htmlFor={participation.name}\n                                                                        className=\"checkbox-label w-form-label\"\n                                                                    >\n                                                                        {participation.name}\n                                                                    </span>\n                                                                </label>\n                                                            )}\n                                                        />\n                                                    </div>\n                                                ))}\n                                        </div>\n                                    )}\n                                />\n\n                                <h6 className=\"heading-content\">Algemeen</h6>\n                                <FieldArray\n                                    name=\"generalOptions\"\n                                    render={arrayHelpers => (\n                                        <div>\n                                            {values.generalOptions &&\n                                                values.generalOptions.map((generalOption, index) => (\n                                                    <div key={index}>\n                                                        <Field\n                                                            name={`generalOptions[${index}]['value']`}\n                                                            render={({ field }) => (\n                                                                <label className=\"w-checkbox checkbox-fld\">\n                                                                    <input\n                                                                        type=\"checkbox\"\n                                                                        {...field}\n                                                                        id={generalOption.name}\n                                                                        checked={generalOption.value}\n                                                                        className=\"w-checkbox-input checkbox\"\n                                                                    />\n                                                                    <span\n                                                                        htmlFor={generalOption.name}\n                                                                        className=\"checkbox-label w-form-label\"\n                                                                    >\n                                                                        {generalOption.name}\n                                                                    </span>\n                                                                </label>\n                                                            )}\n                                                        />\n                                                    </div>\n                                                ))}\n                                        </div>\n                                    )}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"w-row\">\n                            <div className=\"w-col w-col-6\">\n                                <ButtonText\n                                    buttonText={'Opslaan'}\n                                    buttonClassName={'save-btn w-button'}\n                                    type={'submit'}\n                                    loading={isSubmitting}\n                                />\n                            </div>\n                            <div className=\"w-col w-col-6\" />\n                        </div>\n                    </Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MyAreasOfInterestForm;\n","import React from 'react';\nimport MyAreasOfInterestForm from './Form';\n\nconst MyAreasOfInterest = function() {\n    // TODO Fetch values from API\n    const initialValues = {\n        myAreasOfInterest: [\n            { id: 4, name: 'Gevel isolatie', value: true },\n            { id: 5, name: 'Zonnepanelen', value: false },\n            { id: 6, name: 'Dak isolatie', value: false },\n            { id: 7, name: 'Zonneboiler', value: true },\n        ],\n        participations: [{ id: 2, name: 'Test groep', value: true }, { id: 3, name: 'De leuke mensen', value: false }],\n        generalOptions: [{ id: 1, name: 'Test algemeen groep', value: false }],\n    };\n\n    return (\n        <div className=\"content-section\">\n            <div className=\"content-container w-container\">\n                <h1 className=\"content-heading\">Instellingen</h1>\n                <div className=\"w-form\" />\n                <MyAreasOfInterestForm initialValues={initialValues} />\n            </div>\n        </div>\n    );\n};\n\nexport default MyAreasOfInterest;\n","export default amount => {\n    if (!amount) amount = 0;\n    // if (isNaN(amount)) {\n    //     amount = amount.replace(',', '.');\n    // }\n    amount = parseFloat(amount * 100) / 100;\n\n    if (isNaN(amount)) return 'Ongeldig bedrag';\n\n    return `€ ${amount.toLocaleString('nl', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n    })}`;\n};\n","export default function(project, amountOptioned, participationsOptioned) {\n    let transactionCosts = 0;\n    let varAmountOptioned = amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\n    let varParticipationsOptioned = participationsOptioned ? parseFloat(participationsOptioned).toFixed(0) : 0;\n    switch (project.transactionCostsCodeRef) {\n        case 'amount-once':\n            transactionCosts = project.transactionCostsAmount;\n            break;\n        case 'amount':\n            if (project.projectType.codeRef === 'loan') {\n                transactionCosts = project.transactionCostsAmount;\n            } else {\n                transactionCosts = project.transactionCostsAmount * varParticipationsOptioned;\n            }\n            break;\n        case 'percentage':\n            let amount = 0;\n            if (project.projectType.codeRef === 'loan') {\n                amount = varAmountOptioned;\n            } else {\n                amount = varParticipationsOptioned * project.currentBookWorth;\n            }\n            if (amount != 0) {\n                if (project.transactionCostsAmount3 !== null && amount >= project.transactionCostsAmount3) {\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage3) / 100).toFixed(2));\n                } else if (project.transactionCostsAmount2 !== null && amount >= project.transactionCostsAmount2) {\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage2) / 100).toFixed(2));\n                } else if (project.transactionCostsAmount !== null && amount >= project.transactionCostsAmount) {\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage) / 100).toFixed(2));\n                } else {\n                    transactionCosts = 0;\n                }\n            }\n            break;\n        default:\n            transactionCosts = 0;\n    }\n    if (project.transactionCostsCodeRef !== 'none') {\n        if (project.transactionCostsAmountMin !== null && transactionCosts < project.transactionCostsAmountMin) {\n            transactionCosts = project.transactionCostsAmountMin;\n        }\n        if (project.transactionCostsAmountMax !== null && transactionCosts > project.transactionCostsAmountMax) {\n            transactionCosts = project.transactionCostsAmountMax;\n        }\n    }\n\n    return transactionCosts;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst InputTextCurrency = ({\n    field,\n    type,\n    className,\n    id,\n    readOnly,\n    placeholder,\n    showErrorMessage,\n    errors,\n    touched,\n    classNameErrorMessage,\n    disabled,\n    customOnChange = null,\n}) => {\n    if (customOnChange) {\n        field.onChange = customOnChange;\n    }\n    return (\n        <>\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\n            ) : null}\n            <input\n                type={type}\n                className={`text-input w-input ${className} ${\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\n                } `}\n                id={id}\n                {...field}\n                value={field.value.toString().replace('.', ',')}\n                readOnly={readOnly}\n                placeholder={placeholder}\n                disabled={disabled}\n            />\n        </>\n    );\n};\n\nInputTextCurrency.defaultProps = {\n    type: 'text',\n    className: 'content',\n    readOnly: false,\n    placeholder: '',\n    showErrorMessage: true,\n    classNameErrorMessage: 'text-danger',\n    errors: {},\n    touched: {},\n};\n\nInputTextCurrency.propTypes = {\n    field: PropTypes.object.isRequired,\n    type: PropTypes.string,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    readOnly: PropTypes.bool,\n    showErrorMessage: PropTypes.bool,\n    classNameErrorMessage: PropTypes.string,\n    placeholder: PropTypes.string,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n};\n\nexport default InputTextCurrency;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Alert } from 'react-bootstrap';\nimport { get, isEmpty } from 'lodash';\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\nimport InputTextCurrency from '../../../components/form/InputTextCurrency';\n\nfunction StepOneLoan({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\n    const validationSchema = Yup.object({\n        amountOptioned: Yup.string()\n            .required('Verplicht')\n            .transform(function(value, originalvalue) {\n                return value ? value.replace(',', '.') : 0;\n            })\n            .test(\n                'amountOptioned',\n                'Minimum van ' + project.minAmountLoan + ' nodig',\n                value => value >= project.minAmountLoan\n            )\n            .test(\n                'amountOptioned',\n                'Maximum van ' + project.maxAmountLoan + ' bereikt',\n                value => value <= project.maxAmountLoan\n            )\n            .matches(/^\\s*(?=.*[1-9])\\d*(?:\\.\\d{1,2})?\\s*$/, 'Fout bedrag'),\n        choiceMembership: Yup.number().test(\n            'choiceMembership',\n            'Verplicht',\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\n        ),\n    });\n\n    function setAmountOptioned(amountOptioned) {\n        return amountOptioned ? amountOptioned.toString().replace(',', '.') : '';\n    }\n    function calculateAmount(amountOptioned) {\n        return amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\n    }\n    function calculateTransactionCostsAmount(amountOptioned, choiceMembership) {\n        if (!project.useTransactionCostsWithMembership) {\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\n                return 0;\n            }\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\n                return 0;\n            }\n        }\n        return calculateTransactionCosts(project, amountOptioned, null);\n    }\n    function calculateTotalAmount(amountOptioned, choiceMembership) {\n        return (\n            calculateAmount(amountOptioned) + calculateTransactionCostsAmount(amountOptioned, choiceMembership)\n        ).toFixed(2);\n    }\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitRegisterValues({\n                    ...values,\n                    amountOptioned: setAmountOptioned(values.amountOptioned),\n                    amount: calculateAmount(values.amountOptioned),\n                    transactionCostsAmount: calculateTransactionCostsAmount(\n                        values.amountOptioned,\n                        values.choiceMembership\n                    ),\n                    totalAmount: calculateTotalAmount(values.amountOptioned, values.choiceMembership),\n                });\n                next();\n            }}\n            initialValues={initialRegisterValues}\n            enableReinitialize={true}\n        >\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\n                <>\n                    <Form>\n                        <Row>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Minimaal bedrag</FormLabel>\n                                <TextBlock>{project.minAmountLoan}</TextBlock>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Maximaal bedrag</FormLabel>\n                                <TextBlock>{project.maxAmountLoan}</TextBlock>\n                            </Col>\n\n                            <Col xs={12} md={6}>\n                                <Form.Label className={'field-label'}>In te leggen bedrag</Form.Label>\n                                <Field\n                                    name=\"amountOptioned\"\n                                    render={({ field }) => (\n                                        <InputTextCurrency\n                                            field={field}\n                                            errors={errors}\n                                            touched={touched}\n                                            id=\"amount_optioned\"\n                                        />\n                                    )}\n                                />\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\n                                </FormLabel>\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.amountOptioned))}</TextBlock>\n                            </Col>\n                        </Row>\n                        {project.showQuestionAboutMembership ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <p>\n                                            {contactProjectData.belongsToMembershipGroup\n                                                ? contactProjectData.textIsMemberMerged\n                                                : contactProjectData.textIsNoMemberMerged}\n                                        </p>\n                                    </Col>\n                                </Row>\n                                {!contactProjectData.belongsToMembershipGroup ? (\n                                    <Row>\n                                        <Col xs={12} md={10}>\n                                            <Field\n                                                name=\"choiceMembership\"\n                                                render={({ field }) => (\n                                                    <>\n                                                        {get(errors, field.name, '') &&\n                                                            get(touched, field.name, '') && (\n                                                                <small className=\"text-danger\">\n                                                                    {get(errors, field.name, '')}\n                                                                </small>\n                                                            )}\n                                                        <div className=\"form-check\">\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_yes\"\n                                                                    checked={field.value === 1}\n                                                                    value={1}\n                                                                    onChange={() =>\n                                                                        setFieldValue('choiceMembership', 1)\n                                                                    }\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\n                                                            </label>\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_no\"\n                                                                    checked={field.value === 2}\n                                                                    value={2}\n                                                                    onChange={() => {\n                                                                        setFieldValue('choiceMembership', 2);\n                                                                    }}\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\n                                                            </label>\n                                                        </div>\n                                                    </>\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </>\n                        ) : null}\n\n                        {project.transactionCostsCodeRef !== 'none' ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTransactionCostsAmount(\n                                                    values.amountOptioned,\n                                                    values.choiceMembership\n                                                )\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTotalAmount(values.amountOptioned, values.choiceMembership)\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                </Row>\n                            </>\n                        ) : null}\n\n                        <Row>\n                            <Col>\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\n                                        Ga naar gegevens\n                                    </Button>\n                                </ButtonGroup>\n                            </Col>\n                        </Row>\n                        {!isEmpty(errors) ? (\n                            <Row>\n                                <Col>\n                                    <div className=\"alert-wrapper\">\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\n                                            stap!\n                                        </Alert>\n                                    </div>\n                                </Col>\n                            </Row>\n                        ) : null}\n                    </Form>\n                </>\n            )}\n        </Formik>\n    );\n}\n\nexport default StepOneLoan;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from '../../../components/form/InputText';\nimport { Alert } from 'react-bootstrap';\nimport { get, isEmpty } from 'lodash';\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\n\nfunction StepOneObligation({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\n    const validationSchema = Yup.object({\n        participationsOptioned: Yup.number()\n            .integer('Alleen gehele aantallen')\n            .typeError('Alleen nummers')\n            .test(\n                'participationsOptioned',\n                'Minimum van ' + project.minParticipations + ' nodig',\n                value => value >= project.minParticipations\n            )\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\n            .positive('Getal moet groter zijn dan 0')\n            .required('Verplicht'),\n        choiceMembership: Yup.number().test(\n            'choiceMembership',\n            'Verplicht',\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\n        ),\n    });\n\n    function calculateAmount(participationsOptioned) {\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\n    }\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\n        if (!project.useTransactionCostsWithMembership) {\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\n                return 0;\n            }\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\n                return 0;\n            }\n        }\n        return calculateTransactionCosts(project, null, participationsOptioned);\n    }\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\n        return (\n            calculateAmount(participationsOptioned) +\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\n        ).toFixed(2);\n    }\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitRegisterValues({\n                    ...values,\n                    amount: calculateAmount(values.participationsOptioned),\n                    transactionCostsAmount: calculateTransactionCostsAmount(\n                        values.participationsOptioned,\n                        values.choiceMembership\n                    ),\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\n                });\n                next();\n            }}\n            initialValues={initialRegisterValues}\n            enableReinitialize={true}\n        >\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\n                <>\n                    <Form>\n                        <Row>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Minimale aantal obligaties</FormLabel>\n                                <TextBlock>{project.minParticipations}</TextBlock>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Maximale aantal obligaties</FormLabel>\n                                <TextBlock>{project.maxParticipations}</TextBlock>\n                            </Col>\n\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Huidige hoofdsom per obligatie</FormLabel>\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <Form.Label className={'field-label'}>Gewenst aantal obligaties</Form.Label>\n                                <Field\n                                    name=\"participationsOptioned\"\n                                    render={({ field }) => (\n                                        <InputText\n                                            field={field}\n                                            errors={errors}\n                                            touched={touched}\n                                            id=\"participations_optioned\"\n                                        />\n                                    )}\n                                />\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\n                                </FormLabel>\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\n                            </Col>\n                        </Row>\n                        {project.showQuestionAboutMembership ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <p>\n                                            {contactProjectData.belongsToMembershipGroup\n                                                ? contactProjectData.textIsMemberMerged\n                                                : contactProjectData.textIsNoMemberMerged}\n                                        </p>\n                                    </Col>\n                                </Row>\n                                {!contactProjectData.belongsToMembershipGroup ? (\n                                    <Row>\n                                        <Col xs={12} md={10}>\n                                            <Field\n                                                name=\"choiceMembership\"\n                                                render={({ field }) => (\n                                                    <>\n                                                        {get(errors, field.name, '') &&\n                                                            get(touched, field.name, '') && (\n                                                                <small className=\"text-danger\">\n                                                                    {get(errors, field.name, '')}\n                                                                </small>\n                                                            )}\n                                                        <div className=\"form-check\">\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_yes\"\n                                                                    checked={field.value === 1}\n                                                                    value={1}\n                                                                    onChange={() =>\n                                                                        setFieldValue('choiceMembership', 1)\n                                                                    }\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\n                                                            </label>\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_no\"\n                                                                    checked={field.value === 2}\n                                                                    value={2}\n                                                                    onChange={() => {\n                                                                        setFieldValue('choiceMembership', 2);\n                                                                    }}\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\n                                                            </label>\n                                                        </div>\n                                                    </>\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </>\n                        ) : null}\n\n                        {project.transactionCostsCodeRef !== 'none' ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTransactionCostsAmount(\n                                                    values.participationsOptioned,\n                                                    values.choiceMembership\n                                                )\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTotalAmount(\n                                                    values.participationsOptioned,\n                                                    values.choiceMembership\n                                                )\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                </Row>\n                            </>\n                        ) : null}\n\n                        <Row>\n                            <Col>\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\n                                        Ga naar gegevens\n                                    </Button>\n                                </ButtonGroup>\n                            </Col>\n                        </Row>\n                        {!isEmpty(errors) ? (\n                            <Row>\n                                <Col>\n                                    <div className=\"alert-wrapper\">\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\n                                            stap!\n                                        </Alert>\n                                    </div>\n                                </Col>\n                            </Row>\n                        ) : null}\n                    </Form>\n                </>\n            )}\n        </Formik>\n    );\n}\n\nexport default StepOneObligation;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from '../../../components/form/InputText';\nimport { Alert } from 'react-bootstrap';\nimport { get, isEmpty } from 'lodash';\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\n\nfunction StepOneCapital({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\n    const validationSchema = Yup.object({\n        participationsOptioned: Yup.number()\n            .integer('Alleen gehele aantallen')\n            .typeError('Alleen nummers')\n            .test(\n                'participationsOptioned',\n                'Minimum van ' + project.minParticipations + ' nodig',\n                value => value >= project.minParticipations\n            )\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\n            .positive('Getal moet groter zijn dan 0')\n            .required('Verplicht'),\n        choiceMembership: Yup.number().test(\n            'choiceMembership',\n            'Verplicht',\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\n        ),\n    });\n\n    function calculateAmount(participationsOptioned) {\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\n    }\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\n        if (!project.useTransactionCostsWithMembership) {\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\n                return 0;\n            }\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\n                return 0;\n            }\n        }\n        return calculateTransactionCosts(project, null, participationsOptioned);\n    }\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\n        return (\n            calculateAmount(participationsOptioned) +\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\n        ).toFixed(2);\n    }\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitRegisterValues({\n                    ...values,\n                    amount: calculateAmount(values.participationsOptioned),\n                    transactionCostsAmount: calculateTransactionCostsAmount(\n                        values.participationsOptioned,\n                        values.choiceMembership\n                    ),\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\n                });\n                next();\n            }}\n            initialValues={initialRegisterValues}\n            enableReinitialize={true}\n        >\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\n                <>\n                    <Form>\n                        <Row>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\n                                <TextBlock>{project.minParticipations}</TextBlock>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\n                                <TextBlock>{project.maxParticipations}</TextBlock>\n                            </Col>\n\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <Form.Label className={'field-label'}>Gewenst aantal participaties</Form.Label>\n                                <Field\n                                    name=\"participationsOptioned\"\n                                    render={({ field }) => (\n                                        <InputText\n                                            field={field}\n                                            errors={errors}\n                                            touched={touched}\n                                            id=\"participations_optioned\"\n                                        />\n                                    )}\n                                />\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\n                                </FormLabel>\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\n                            </Col>\n                        </Row>\n                        {project.showQuestionAboutMembership ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <p>\n                                            {contactProjectData.belongsToMembershipGroup\n                                                ? contactProjectData.textIsMemberMerged\n                                                : contactProjectData.textIsNoMemberMerged}\n                                        </p>\n                                    </Col>\n                                </Row>\n                                {!contactProjectData.belongsToMembershipGroup ? (\n                                    <Row>\n                                        <Col xs={12} md={10}>\n                                            <Field\n                                                name=\"choiceMembership\"\n                                                render={({ field }) => (\n                                                    <>\n                                                        {get(errors, field.name, '') &&\n                                                            get(touched, field.name, '') && (\n                                                                <small className=\"text-danger\">\n                                                                    {get(errors, field.name, '')}\n                                                                </small>\n                                                            )}\n                                                        <div className=\"form-check\">\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_yes\"\n                                                                    checked={field.value === 1}\n                                                                    value={1}\n                                                                    onChange={() =>\n                                                                        setFieldValue('choiceMembership', 1)\n                                                                    }\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\n                                                            </label>\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_no\"\n                                                                    checked={field.value === 2}\n                                                                    value={2}\n                                                                    onChange={() => {\n                                                                        setFieldValue('choiceMembership', 2);\n                                                                    }}\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\n                                                            </label>\n                                                        </div>\n                                                    </>\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </>\n                        ) : null}\n\n                        {project.transactionCostsCodeRef !== 'none' ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTransactionCostsAmount(\n                                                    values.participationsOptioned,\n                                                    values.choiceMembership\n                                                )\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTotalAmount(\n                                                    values.participationsOptioned,\n                                                    values.choiceMembership\n                                                )\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                </Row>\n                            </>\n                        ) : null}\n\n                        <Row>\n                            <Col>\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\n                                        Ga naar gegevens\n                                    </Button>\n                                </ButtonGroup>\n                            </Col>\n                        </Row>\n                        {!isEmpty(errors) ? (\n                            <Row>\n                                <Col>\n                                    <div className=\"alert-wrapper\">\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\n                                            stap!\n                                        </Alert>\n                                    </div>\n                                </Col>\n                            </Row>\n                        ) : null}\n                    </Form>\n                </>\n            )}\n        </Formik>\n    );\n}\n\nexport default StepOneCapital;\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from '../../../components/form/InputText';\nimport { Alert } from 'react-bootstrap';\nimport { get, isEmpty } from 'lodash';\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\n\nfunction StepOnePcr({\n    portalSettings,\n    next,\n    project,\n    contactProjectData,\n    initialContact,\n    initialRegisterValues,\n    handleSubmitRegisterValues,\n}) {\n    const validationSchema = Yup.object({\n        participationsOptioned: Yup.number()\n            .integer('Alleen gehele aantallen')\n            .typeError('Alleen nummers')\n            .test(\n                'participationsOptioned',\n                'Minimum van ' + project.minParticipations + ' nodig',\n                value => value >= project.minParticipations\n            )\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\n            .positive('Getal moet groter zijn dan 0')\n            .required('Verplicht'),\n        pcrYearlyPowerKwhConsumption: Yup.number()\n            .typeError('Alleen nummers')\n            .positive('Getal moet groter zijn dan 0')\n            .required('Verplicht'),\n        pcrPostalCode: Yup.string()\n            .min(4, 'Minimum van ${min} postcode cijfers nodig')\n            .required('Verplicht')\n            .test(\n                'pcrPostalCode',\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\n                value =>\n                    value &&\n                    (!project.checkPostalcodeLink ||\n                        (project.postalcodeLink && project.postalcodeLink.includes(value.substring(0, 4))))\n            ),\n        pcrNumberOfSolarPanels: Yup.number().typeError('Alleen nummers'),\n        pcrInputGeneratedNumberOfKwh: Yup.number().typeError('Alleen nummers'),\n        choiceMembership: Yup.number().test(\n            'choiceMembership',\n            'Verplicht',\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\n        ),\n    });\n\n    // const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = 0.8;\n    const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = portalSettings['pcrPowerKwhConsumptionPercentage'];\n    // const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = 250;\n    const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = portalSettings['pcrGeneratingCapacityOneSolorPanel'];\n\n    function calculateEstimatedGeneratedNumberOfKwh(values) {\n        return values.pcrNumberOfSolarPanels\n            ? values.pcrNumberOfSolarPanels * PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\n            : 0;\n    }\n    function calculateGeneratedNumberOfKwh(values) {\n        return values.pcrInputGeneratedNumberOfKwh && values.pcrInputGeneratedNumberOfKwh > 0\n            ? values.pcrInputGeneratedNumberOfKwh\n            : calculateEstimatedGeneratedNumberOfKwh(values)\n            ? calculateEstimatedGeneratedNumberOfKwh(values)\n            : 0;\n    }\n    function calculatePowerKwhConsumption(values) {\n        let extraPowerKwhConsumption =\n            values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values) > 0\n                ? values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values)\n                : 0;\n        return extraPowerKwhConsumption;\n    }\n    function calculateAdviseMaxNumberOfParticipations(values) {\n        let pcrAdviseMaxNumberOfParticipations =\n            calculatePowerKwhConsumption(values) > 0\n                ? Math.ceil(\n                      (calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE) /\n                          PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\n                  )\n                : 0;\n\n        if (pcrAdviseMaxNumberOfParticipations < project.minParticipations) {\n            pcrAdviseMaxNumberOfParticipations = project.minParticipations;\n        } else if (pcrAdviseMaxNumberOfParticipations > project.maxParticipations) {\n            pcrAdviseMaxNumberOfParticipations = project.maxParticipations;\n        }\n        return pcrAdviseMaxNumberOfParticipations;\n    }\n\n    function calculateAmount(participationsOptioned) {\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\n    }\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\n        if (!project.useTransactionCostsWithMembership) {\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\n                return 0;\n            }\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\n                return 0;\n            }\n        }\n        return calculateTransactionCosts(project, null, participationsOptioned);\n    }\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\n        return (\n            calculateAmount(participationsOptioned) +\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\n        ).toFixed(2);\n    }\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitRegisterValues({\n                    ...values,\n                    powerKwhConsumption: calculatePowerKwhConsumption(values),\n                    amount: calculateAmount(values.participationsOptioned),\n                    transactionCostsAmount: calculateTransactionCostsAmount(\n                        values.participationsOptioned,\n                        values.choiceMembership\n                    ),\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\n                });\n                next();\n            }}\n            initialValues={{\n                ...initialRegisterValues,\n            }}\n            enableReinitialize={true}\n        >\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => {\n                let pcrEstimatedGeneratedNumberOfKwh = calculateEstimatedGeneratedNumberOfKwh(values);\n                let powerKwhConsumption = Math.ceil(\n                    calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE\n                );\n                let pcrAdviseMaxNumberOfParticipations = calculateAdviseMaxNumberOfParticipations(values);\n                return (\n                    <>\n                        <Form>\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\n                                    <TextBlock>{project.minParticipations}</TextBlock>\n                                </Col>\n                                <Col xs={12} md={6}>\n                                    <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\n                                    <TextBlock>{project.maxParticipations}</TextBlock>\n                                </Col>\n\n                                <Col xs={12} md={6}>\n                                    <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\n                                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label required'}>Je postcode</Form.Label>\n                                    <Field\n                                        name=\"pcrPostalCode\"\n                                        render={({ field }) => (\n                                            <InputText\n                                                field={field}\n                                                errors={errors}\n                                                touched={touched}\n                                                id=\"pcr_postal_code\"\n                                            />\n                                        )}\n                                    />\n                                </Col>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label'}>Deelnemende postcodes</Form.Label>\n                                    <TextBlock>{project.postalcodeLink}</TextBlock>\n                                </Col>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label required'}>\n                                        Je (geschatte) jaarlijks verbruik (in kWh)\n                                    </Form.Label>\n                                    <Field\n                                        name=\"pcrYearlyPowerKwhConsumption\"\n                                        render={({ field }) => (\n                                            <InputText\n                                                field={field}\n                                                errors={errors}\n                                                touched={touched}\n                                                id=\"pcr_yearly_power_kwh_consumption\"\n                                            />\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Form.Label className={'field-label'}>\n                                        Heb je al zonnepanelen op je eigen dak of doe je mee in een ander project?\n                                    </Form.Label>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Field\n                                        name=\"pcrHasSolarPanels\"\n                                        render={({ field }) => (\n                                            <>\n                                                <div className=\"form-check form-check-inline\">\n                                                    <label className=\"radio-inline\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            {...field}\n                                                            id=\"pcr_has_solar_panels_yes\"\n                                                            checked={field.value === 'Y'}\n                                                            value={'Y'}\n                                                            onChange={() => setFieldValue('pcrHasSolarPanels', 'Y')}\n                                                        />\n                                                        &nbsp;Ja\n                                                    </label>\n                                                    &nbsp;&nbsp;\n                                                    <label className=\"radio-inline\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            {...field}\n                                                            id=\"pcr_has_solar_panels_no\"\n                                                            checked={field.value === 'N'}\n                                                            value={'N'}\n                                                            onChange={() => {\n                                                                setFieldValue('pcrHasSolarPanels', 'N');\n                                                                setFieldValue('pcrNumberOfSolarPanels', 0);\n                                                            }}\n                                                        />\n                                                        &nbsp;Nee\n                                                    </label>\n                                                </div>\n                                            </>\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n\n                            {values.pcrHasSolarPanels === 'Y' ? (\n                                <Row>\n                                    <Col xs={12} md={6}>\n                                        <Form.Label className={'field-label'}>\n                                            Hoeveel zonnepanelen wekken al stroom voor je op\n                                        </Form.Label>\n                                        <Field\n                                            name=\"pcrNumberOfSolarPanels\"\n                                            render={({ field }) => (\n                                                <InputText\n                                                    field={field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    id=\"pcr_number_of_solar_panels\"\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n                            ) : (\n                                ''\n                            )}\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label'}>\n                                        Wij schatten in dat je panelen jaarlijks opwekken\n                                    </Form.Label>\n                                    <TextBlock id=\"pcr_input_estimated_generated_number_of_kwh\">\n                                        {pcrEstimatedGeneratedNumberOfKwh} kWh\n                                    </TextBlock>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Form.Label className={'field-label'}>Klopt het geschatte opbrengst?</Form.Label>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Field\n                                        name=\"pcrEstimatedRevenueOk\"\n                                        render={({ field }) => (\n                                            <>\n                                                <div className=\"form-check form-check-inline\">\n                                                    <label className=\"radio-inline\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            {...field}\n                                                            id=\"pcr_estimated_revenue_ok_yes\"\n                                                            checked={field.value === 'Y'}\n                                                            value={'Y'}\n                                                            onChange={() => {\n                                                                setFieldValue('pcrEstimatedRevenueOk', 'Y');\n                                                                setFieldValue('pcrInputGeneratedNumberOfKwh', 0);\n                                                            }}\n                                                        />\n                                                        &nbsp;Ja\n                                                    </label>\n                                                    &nbsp;&nbsp;\n                                                    <label className=\"radio-inline\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            {...field}\n                                                            id=\"pcr_estimated_revenue_ok_no\"\n                                                            checked={field.value === 'N'}\n                                                            value={'N'}\n                                                            onChange={() => setFieldValue('pcrEstimatedRevenueOk', 'N')}\n                                                        />\n                                                        &nbsp;Nee\n                                                    </label>\n                                                </div>\n                                            </>\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n\n                            {values.pcrEstimatedRevenueOk === 'N' ? (\n                                <>\n                                    <Row>\n                                        <Col xs={12} md={6}>\n                                            <Form.Label className={'field-label'}>\n                                                Wat is de jaarlijkse opbrengst van jouw panelen (in kWh)\n                                            </Form.Label>\n                                            <Field\n                                                name=\"pcrInputGeneratedNumberOfKwh\"\n                                                render={({ field }) => (\n                                                    <InputText\n                                                        field={field}\n                                                        errors={errors}\n                                                        touched={touched}\n                                                        id=\"pcr_input_generated_number_of_kwh\"\n                                                    />\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </>\n                            ) : (\n                                ''\n                            )}\n\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <p>\n                                        We adviseren tot {PCR_POWER_KWH_CONSUMPTION_PERCENTAGE * 100}% van je jaarlijks\n                                        verbruik minus de jaarlijkse opbrengsten (in jouw geval {powerKwhConsumption}{' '}\n                                        kWh) te dekken met participaties. In het veld hier direct onder is voor je\n                                        uitgerekend hoeveel participaties dat zijn. Het is een advies, je mag er ook\n                                        meer kopen. Dit kan echter slecht zijn voor je rendement.\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label'}>\n                                        Advies maximaal aantal participaties\n                                    </Form.Label>\n                                    <TextBlock>{pcrAdviseMaxNumberOfParticipations}</TextBlock>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label required'}>\n                                        Gewenst aantal participaties\n                                    </Form.Label>\n                                    <Field\n                                        name=\"participationsOptioned\"\n                                        render={({ field }) => (\n                                            <InputText\n                                                field={field}\n                                                errors={errors}\n                                                touched={touched}\n                                                id=\"participations_optioned\"\n                                            />\n                                        )}\n                                    />\n                                </Col>\n                                <Col xs={12} md={6}>\n                                    <FormLabel className={'field-label'}>\n                                        {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\n                                    </FormLabel>\n                                    <TextBlock>\n                                        {MoneyPresenter(calculateAmount(values.participationsOptioned))}\n                                    </TextBlock>\n                                </Col>\n                            </Row>\n                            {project.showQuestionAboutMembership ? (\n                                <>\n                                    <hr />\n                                    <Row>\n                                        <Col xs={12} md={10}>\n                                            <p>\n                                                {contactProjectData.belongsToMembershipGroup\n                                                    ? contactProjectData.textIsMemberMerged\n                                                    : contactProjectData.textIsNoMemberMerged}\n                                            </p>\n                                        </Col>\n                                    </Row>\n                                    {!contactProjectData.belongsToMembershipGroup ? (\n                                        <Row>\n                                            <Col xs={12} md={10}>\n                                                <Field\n                                                    name=\"choiceMembership\"\n                                                    render={({ field }) => (\n                                                        <>\n                                                            {get(errors, field.name, '') &&\n                                                                get(touched, field.name, '') && (\n                                                                    <small className=\"text-danger\">\n                                                                        {get(errors, field.name, '')}\n                                                                    </small>\n                                                                )}\n                                                            <div className=\"form-check\">\n                                                                <label className=\"radio-inline\">\n                                                                    <input\n                                                                        type=\"radio\"\n                                                                        {...field}\n                                                                        id=\"choice_membership_yes\"\n                                                                        checked={field.value === 1}\n                                                                        value={1}\n                                                                        onChange={() =>\n                                                                            setFieldValue('choiceMembership', 1)\n                                                                        }\n                                                                    />\n                                                                    &nbsp;{contactProjectData.textBecomeMemberMerged}\n                                                                </label>\n                                                                <label className=\"radio-inline\">\n                                                                    <input\n                                                                        type=\"radio\"\n                                                                        {...field}\n                                                                        id=\"choice_membership_no\"\n                                                                        checked={field.value === 2}\n                                                                        value={2}\n                                                                        onChange={() => {\n                                                                            setFieldValue('choiceMembership', 2);\n                                                                        }}\n                                                                    />\n                                                                    &nbsp;{contactProjectData.textBecomeNoMemberMerged}\n                                                                </label>\n                                                            </div>\n                                                        </>\n                                                    )}\n                                                />\n                                            </Col>\n                                        </Row>\n                                    ) : null}\n                                </>\n                            ) : null}\n\n                            {project.transactionCostsCodeRef !== 'none' ? (\n                                <>\n                                    <hr />\n                                    <Row>\n                                        <Col xs={12} md={6}>\n                                            <FormLabel className={'field-label'}>\n                                                {project.textTransactionCosts}\n                                            </FormLabel>\n                                            <TextBlock>\n                                                {MoneyPresenter(\n                                                    calculateTransactionCostsAmount(\n                                                        values.participationsOptioned,\n                                                        values.choiceMembership\n                                                    )\n                                                )}\n                                            </TextBlock>\n                                        </Col>\n                                        <Col xs={12} md={6}>\n                                            <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\n                                            <TextBlock>\n                                                {MoneyPresenter(\n                                                    calculateTotalAmount(\n                                                        values.participationsOptioned,\n                                                        values.choiceMembership\n                                                    )\n                                                )}\n                                            </TextBlock>\n                                        </Col>\n                                    </Row>\n                                </>\n                            ) : null}\n\n                            <Row>\n                                <Col>\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\n                                            Ga naar gegevens\n                                        </Button>\n                                    </ButtonGroup>\n                                </Col>\n                            </Row>\n                            {!isEmpty(errors) ? (\n                                <Row>\n                                    <Col>\n                                        <div className=\"alert-wrapper\">\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\n                                                volgende stap!\n                                            </Alert>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                        </Form>\n                    </>\n                );\n            }}\n        </Formik>\n    );\n}\n\nexport default StepOnePcr;\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport DefaultContactPersonalEdit from '../../contact-details/default-form-personal/Edit';\nimport { Form, Formik } from 'formik';\nimport { ClipLoader } from 'react-spinners';\nimport ValidationSchemaPersonal from '../../../helpers/ValidationSchemaPersonal';\nimport ValidationSchemaOrganisation from '../../../helpers/ValidationSchemaOrganisation';\nimport * as Yup from 'yup';\nimport DefaultContactOrganisationEdit from '../../contact-details/default-form-organisation/Edit';\nimport { Alert } from 'react-bootstrap';\nimport { isEmpty } from 'lodash';\n\nfunction StepTwo({ portalSettings, previous, next, project, initialContact, handleSubmitContactValues }) {\n    initialContact.isParticipant = true;\n    const typeContact = initialContact.typeId ? initialContact.typeId : null;\n    const validationSchemaPcrPersonal = Yup.object().shape({\n        primaryAddress: Yup.object().shape({\n            postalCode: Yup.string().test(\n                'postal-code-primary-address-in-pcr-area',\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\n                function(value) {\n                    return !project.checkPostalcodeLink || project.postalcodeLink.includes(value.substring(0, 4));\n                }\n            ),\n        }),\n    });\n    const validationSchemaPcrOrganisation = Yup.object().shape({\n        visitAddress: Yup.object().shape({\n            postalCode: Yup.string()\n                .test(\n                    'postal-code-visit-address-in-pcr-area',\n                    'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\n                    function(value) {\n                        return !project.checkPostalcodeLink || project.postalcodeLink.includes(value.substring(0, 4));\n                    }\n                )\n                .required('Verplicht'),\n        }),\n    });\n\n    let validationSchema = null;\n    let validationSchemaBasic = null;\n    let validationSchemaAdditional = null;\n    let validationSchemaPcrAdditional = null;\n    switch (typeContact) {\n        case 'person':\n            validationSchemaBasic = ValidationSchemaPersonal.validationSchemaBasic;\n            validationSchemaAdditional = ValidationSchemaPersonal.validationSchemaAdditional;\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\n            }\n            if (project.isSceProject) {\n                validationSchema = validationSchema.concat(validationSchemaPcrPersonal);\n            }\n            break;\n        case 'organisation':\n            validationSchemaBasic = ValidationSchemaOrganisation.validationSchemaBasic;\n            validationSchemaAdditional = ValidationSchemaOrganisation.validationSchemaAdditional;\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\n            }\n            if (project.isSceProject) {\n                validationSchema = validationSchema.concat(validationSchemaPcrOrganisation);\n            }\n            break;\n    }\n    return (\n        <div>\n            <Formik\n                initialValues={initialContact}\n                enableReinitialize={true}\n                validationSchema={validationSchema}\n                onSubmit={(values, actions) => {\n                    actions.setSubmitting(true);\n                    handleSubmitContactValues(values, actions, next);\n                }}\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\n                    // console.log(errors);\n                    return (\n                        <Form>\n                            {/* If contact is person */}\n                            {initialContact.typeId === 'person' ? (\n                                <DefaultContactPersonalEdit\n                                    portalSettings={portalSettings}\n                                    initialContact={initialContact}\n                                    projectTypeCodeRef={project.projectType.codeRef}\n                                    setFieldValue={setFieldValue}\n                                    values={values}\n                                    touched={touched}\n                                    errors={errors}\n                                />\n                            ) : null}\n\n                            {/* If contact is organisation */}\n                            {initialContact.typeId === 'organisation' ? (\n                                <DefaultContactOrganisationEdit\n                                    portalSettings={portalSettings}\n                                    initialContact={initialContact}\n                                    projectTypeCodeRef={project.projectType.codeRef}\n                                    setFieldValue={setFieldValue}\n                                    values={values}\n                                    touched={touched}\n                                    errors={errors}\n                                />\n                            ) : null}\n\n                            <Row>\n                                <Col>\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\n                                            Terug\n                                        </Button>\n                                        <Button\n                                            className={'w-button'}\n                                            size=\"sm\"\n                                            onClick={handleSubmit}\n                                            disabled={isSubmitting}\n                                        >\n                                            {isSubmitting ? (\n                                                <span>\n                                                    <ClipLoader color={'white'} size={14} />\n                                                    Bezig met opslaan\n                                                </span>\n                                            ) : (\n                                                'Opslaan en doorgaan'\n                                            )}\n                                        </Button>\n                                    </ButtonGroup>\n                                </Col>\n                            </Row>\n                            {!isEmpty(errors) ? (\n                                <Row>\n                                    <Col>\n                                        <div className=\"alert-wrapper\">\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\n                                                volgende stap!\n                                            </Alert>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                            {status && status.message ? (\n                                <Row>\n                                    <Col>\n                                        <div className=\"alert-wrapper\">\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\n                                                {status.message}\n                                            </Alert>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                        </Form>\n                    );\n                }}\n            />\n        </div>\n    );\n}\n\nexport default StepTwo;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Col from 'react-bootstrap/Col';\nimport { Alert } from 'react-bootstrap';\nimport { isEmpty } from 'lodash';\n\nfunction StepThree({ project, contactProjectData, previous, next, initialRegisterValues, handleSubmitRegisterValues }) {\n    const validationSchema = Yup.object({\n        didAcceptAgreement: Yup.bool().test(\n            'didAcceptAgreement',\n            'Je dient akkoord te gaan met de voorwaarden!',\n            value => value === true\n        ),\n        didUnderstandInfo: Yup.bool().test(\n            'didUnderstandInfo',\n            'Je dient te bevestigen, dat de project informatie gelezen en begrepen is!',\n            value => value === true\n        ),\n    });\n\n    return (\n        <div>\n            <Formik\n                validationSchema={validationSchema}\n                onSubmit={function(values, actions) {\n                    handleSubmitRegisterValues(values);\n                    next();\n                }}\n                initialValues={initialRegisterValues}\n            >\n                {({ handleSubmit, touched, errors }) => (\n                    <>\n                        <Form>\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <p\n                                        dangerouslySetInnerHTML={{\n                                            __html: contactProjectData.textAgreeTermsMerged.replace(/\\n/g, '<br />'),\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Field\n                                        name=\"didAcceptAgreement\"\n                                        render={({ field }) => (\n                                            <label className=\"w-checkbox checkbox-fld\">\n                                                <input\n                                                    type=\"checkbox\"\n                                                    {...field}\n                                                    id=\"did_accept_agreement\"\n                                                    checked={field.value}\n                                                    className=\"w-checkbox-input checkbox\"\n                                                />\n                                                <span\n                                                    htmlFor=\"did_accept_agreement\"\n                                                    className=\"checkbox-label w-form-label\"\n                                                    dangerouslySetInnerHTML={{\n                                                        __html: contactProjectData.textLinkAgreeTermsMerged.replace(\n                                                            /\\n/g,\n                                                            '<br />'\n                                                        ),\n                                                    }}\n                                                />\n                                                {touched[field.name] && errors[field.name] ? (\n                                                    <div className={'error-message text-danger'}>\n                                                        {errors[field.name]}\n                                                    </div>\n                                                ) : null}\n                                            </label>\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Field\n                                        name=\"didUnderstandInfo\"\n                                        render={({ field }) => (\n                                            <label className=\"w-checkbox checkbox-fld\">\n                                                <input\n                                                    type=\"checkbox\"\n                                                    {...field}\n                                                    id=\"did_understand_info\"\n                                                    checked={field.value}\n                                                    className=\"w-checkbox-input checkbox\"\n                                                />\n                                                <span\n                                                    htmlFor=\"did_understand_info\"\n                                                    className=\"checkbox-label w-form-label\"\n                                                    dangerouslySetInnerHTML={{\n                                                        __html: contactProjectData.textLinkUnderstandInfoMerged.replace(\n                                                            /\\n/g,\n                                                            '<br />'\n                                                        ),\n                                                    }}\n                                                />\n                                                {touched[field.name] && errors[field.name] ? (\n                                                    <div className={'error-message text-danger'}>\n                                                        {errors[field.name]}\n                                                    </div>\n                                                ) : null}\n                                            </label>\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\n                                            Terug\n                                        </Button>\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\n                                            {project.usesMollie ? (\n                                                <>Ga naar bevestigen en betalen</>\n                                            ) : (\n                                                <>Ga naar bevestigen</>\n                                            )}\n                                        </Button>\n                                    </ButtonGroup>\n                                </Col>\n                            </Row>\n                            {!isEmpty(errors) ? (\n                                <Row>\n                                    <Col>\n                                        <div className=\"alert-wrapper\">\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\n                                                volgende stap!\n                                            </Alert>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                        </Form>\n                    </>\n                )}\n            </Formik>\n        </div>\n    );\n}\n\nexport default StepThree;\n","import React from 'react';\nimport Frame from 'react-frame-component';\nimport PropTypes from 'prop-types';\n\nconst ViewHtmlAsText = ({ id, value }) => {\n    const createMarkup = () => {\n        return { __html: value };\n    };\n\n    return (\n        <Frame>\n            <div id={id} dangerouslySetInnerHTML={createMarkup()} />\n        </Frame>\n    );\n};\n\nViewHtmlAsText.defaultProps = {\n    value: '',\n};\n\nViewHtmlAsText.propTypes = {\n    id: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport default ViewHtmlAsText;\n","import axiosInstance from '../default-setup/AxiosInstance';\n\nexport default {\n    createParticipantProject: registerValues => {\n        const requestUrl = `/project/participant/create`;\n\n        return axiosInstance.post(requestUrl, registerValues);\n    },\n\n    show: id => {\n        const requestUrl = `/project/participant/${id}`;\n\n        return axiosInstance.get(requestUrl);\n    },\n};\n","import React, { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ContactAPI from '../../../api/contact/ContactAPI';\nimport ViewHtmlAsText from '../../../components/general/ViewHtmlAsText';\nimport Col from 'react-bootstrap/Col';\nimport LoadingView from '../../../components/general/LoadingView';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\nimport { ClipLoader } from 'react-spinners';\nimport { Alert } from 'react-bootstrap';\nimport { isEmpty } from 'lodash';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport TextBlock from '../../../components/general/TextBlock';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\n\nfunction StepFour({ project, contactProjectData, previous, next, registerValues, setSucces }) {\n    const [contactDocument, setContactDocument] = useState('');\n    const [isLoading, setLoading] = useState(true);\n    useEffect(() => {\n        (function callFetchContact() {\n            setLoading(true);\n            ContactAPI.previewDocument(registerValues)\n                .then(payload => {\n                    setContactDocument(payload.data);\n                    setLoading(false);\n                })\n                .catch(error => {\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                    setLoading(false);\n                });\n        })();\n    }, [registerValues]);\n\n    function handleSubmitRegisterValues(actions, next) {\n        ParticipantProjectAPI.createParticipantProject(registerValues)\n            .then(payload => {\n                // console.log(payload);\n                actions.setSubmitting(false);\n\n                /**\n                 * Als Mollie is ingeschakeld voor het project wordt er een betaallink gereturned.\n                 * In dat geval huidige scherm verlaten en door naar mollie.\n                 */\n                if (payload.data.econobisPaymentLink) {\n                    window.location.href = payload.data.econobisPaymentLink;\n                    return;\n                }\n\n                setSucces(true);\n                next();\n            })\n            .catch(error => {\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\n                actions.setSubmitting(false);\n            });\n    }\n\n    const validationSchema = Yup.object({\n        didAgreeRegistration: Yup.bool().test(\n            'didAgreeRegistration',\n            'Je dient akkoord te gaan met het inschrijfformulier!',\n            value => value === true\n        ),\n    });\n\n    let contactDocumentOk = false;\n    if (!isEmpty('' + contactDocument)) {\n        contactDocumentOk = true;\n    }\n\n    return (\n        <>\n            {isLoading ? (\n                <LoadingView />\n            ) : !contactDocumentOk ? (\n                <>\n                    <Row>\n                        <Col>Er ging iets mis bij het maken van het bevestingsformulier voorbeeld.</Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={10}>\n                            <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                <Button className={'w-button'} size=\"sm\" onClick={previous}>\n                                    Terug\n                                </Button>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            ) : (\n                <Formik\n                    validationSchema={validationSchema}\n                    onSubmit={function(values, actions) {\n                        handleSubmitRegisterValues(actions, next);\n                    }}\n                    initialValues={{ didAgreeRegistration: false }}\n                >\n                    {({ handleSubmit, touched, errors, isSubmitting, status }) => (\n                        <>\n                            <Form>\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <FormLabel className={'field-label'}>Controleer de inschrijving</FormLabel>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <ViewHtmlAsText value={contactDocument} />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} md={3}>\n                                        <FormLabel className={'field-label-text'}>\n                                            {project.transactionCostsCodeRef === 'none'\n                                                ? 'Te betalen bedrag'\n                                                : 'Bedrag'}\n                                        </FormLabel>\n                                    </Col>\n                                    <Col xs={12} md={3}>\n                                        <TextBlock className={'float-right'}>\n                                            {MoneyPresenter(registerValues.amount)}\n                                        </TextBlock>\n                                    </Col>\n                                </Row>\n                                {project.transactionCostsCodeRef !== 'none' ? (\n                                    <>\n                                        <Row>\n                                            <Col xs={12} md={3}>\n                                                <FormLabel className={'field-label-text'}>\n                                                    {project.textTransactionCosts}\n                                                </FormLabel>\n                                            </Col>\n                                            <Col xs={12} md={3}>\n                                                <TextBlock className={'float-right'}>\n                                                    {MoneyPresenter(registerValues.transactionCostsAmount)}\n                                                </TextBlock>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col xs={12} md={3}>\n                                                <FormLabel className={'field-label-text'}>Totaal te betalen</FormLabel>\n                                            </Col>\n                                            <Col xs={12} md={3}>\n                                                <TextBlock className={'float-right'}>\n                                                    {MoneyPresenter(registerValues.totalAmount)}\n                                                </TextBlock>\n                                            </Col>\n                                        </Row>\n                                    </>\n                                ) : null}\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <p\n                                            dangerouslySetInnerHTML={{\n                                                __html: contactProjectData.textAcceptAgreementMerged.replace(\n                                                    /\\n/g,\n                                                    '<br />'\n                                                ),\n                                            }}\n                                        />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <Field\n                                            name=\"didAgreeRegistration\"\n                                            render={({ field }) => (\n                                                <label className=\"w-checkbox checkbox-fld\">\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        {...field}\n                                                        id=\"did_agree_registration\"\n                                                        checked={field.value}\n                                                        className=\"w-checkbox-input checkbox\"\n                                                    />\n                                                    <span\n                                                        htmlFor=\"did_agree_registration\"\n                                                        className=\"checkbox-label w-form-label\"\n                                                    >\n                                                        {contactProjectData.textAcceptAgreementQuestionMerged}\n                                                    </span>\n                                                    {touched[field.name] && errors[field.name] ? (\n                                                        <div className={'error-message text-danger'}>\n                                                            {errors[field.name]}\n                                                        </div>\n                                                    ) : null}\n                                                </label>\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                            <Button className={'w-button'} size=\"sm\" onClick={previous}>\n                                                Terug\n                                            </Button>\n                                            <Button\n                                                className={'w-button'}\n                                                size=\"sm\"\n                                                onClick={handleSubmit}\n                                                disabled={isSubmitting}\n                                            >\n                                                {isSubmitting ? (\n                                                    <span>\n                                                        <ClipLoader color={'white'} size={14} />\n                                                        Bezig met verwerken\n                                                    </span>\n                                                ) : (\n                                                    <>\n                                                        {project.usesMollie ? (\n                                                            <>Betaal en bevestig de inschrijving</>\n                                                        ) : (\n                                                            <>Bevestig inschrijving</>\n                                                        )}\n                                                    </>\n                                                )}\n                                            </Button>\n                                        </ButtonGroup>\n                                    </Col>\n                                </Row>\n                                {!isEmpty(errors) ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                    Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\n                                                    volgende stap!\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                                {status && status.message ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\n                                                    {status.message}\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </Form>\n                        </>\n                    )}\n                </Formik>\n            )}\n        </>\n    );\n}\n\nexport default StepFour;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from 'react-router-dom';\nimport { Form } from 'formik';\n\nfunction StepFive({ contactProjectData }) {\n    return (\n        <div>\n            <Row>\n                <Col xs={12} md={10}>\n                    {contactProjectData.textRegistrationFinishedMerged.split('\\n').map((item, key) => {\n                        return (\n                            <span key={key}>\n                                {item}\n                                <br />\n                            </span>\n                        );\n                    })}\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={12} md={10}>\n                    <ButtonGroup className=\"float-right\">\n                        <Link to={`/inschrijvingen-projecten`}>\n                            <Button className={'w-button'} size=\"sm\">\n                                Naar mijn huidige deelnames\n                            </Button>\n                        </Link>\n                    </ButtonGroup>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nexport default StepFive;\n","import React from 'react';\nimport StepOneLoan from './StepOneLoan';\nimport StepOneObligation from './StepOneObligation';\nimport StepOneCapital from './StepOneCapital';\nimport StepOnePcr from './StepOnePcr';\nimport StepTwo from './StepTwo';\nimport StepThree from './StepThree';\nimport StepFour from './StepFour';\nimport StepFive from './StepFive';\nimport { isEmpty } from 'lodash';\nimport Container from 'react-bootstrap/Container';\n\nfunction Steps({\n    portalSettings,\n    currentStep,\n    previous,\n    next,\n    project,\n    contactProjectData,\n    initialRegisterValues,\n    handleSubmitRegisterValues,\n    initialContact,\n    handleSubmitContactValues,\n    setSucces,\n}) {\n    if (isEmpty(project)) {\n        return (\n            <Container className={'content-section'}>\n                <>\n                    <p>Fout bij ophalen project. Inschrijving niet (meer) mogelijk op dit moment.</p>\n                </>\n            </Container>\n        );\n    }\n\n    switch (currentStep) {\n        case 1:\n            switch (project.projectType.codeRef) {\n                case 'loan':\n                    return (\n                        <StepOneLoan\n                            next={next}\n                            project={project}\n                            contactProjectData={contactProjectData}\n                            initialRegisterValues={initialRegisterValues}\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\n                        />\n                    );\n                case 'obligation':\n                    return (\n                        <StepOneObligation\n                            next={next}\n                            project={project}\n                            contactProjectData={contactProjectData}\n                            initialRegisterValues={initialRegisterValues}\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\n                        />\n                    );\n                case 'capital':\n                    return (\n                        <StepOneCapital\n                            next={next}\n                            project={project}\n                            contactProjectData={contactProjectData}\n                            initialRegisterValues={initialRegisterValues}\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\n                        />\n                    );\n                case 'postalcode_link_capital':\n                    return (\n                        <StepOnePcr\n                            portalSettings={portalSettings}\n                            next={next}\n                            project={project}\n                            contactProjectData={contactProjectData}\n                            initialContact={initialContact}\n                            initialRegisterValues={initialRegisterValues}\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\n                        />\n                    );\n                default:\n                    return null;\n            }\n\n        case 2:\n            return (\n                <StepTwo\n                    portalSettings={portalSettings}\n                    previous={previous}\n                    next={next}\n                    project={project}\n                    initialContact={initialContact}\n                    handleSubmitContactValues={handleSubmitContactValues}\n                />\n            );\n        case 3:\n            return (\n                <StepThree\n                    project={project}\n                    contactProjectData={contactProjectData}\n                    previous={previous}\n                    next={next}\n                    initialRegisterValues={initialRegisterValues}\n                    handleSubmitRegisterValues={handleSubmitRegisterValues}\n                />\n            );\n        case 4:\n            return (\n                <StepFour\n                    project={project}\n                    contactProjectData={contactProjectData}\n                    previous={previous}\n                    next={next}\n                    registerValues={initialRegisterValues}\n                    setSucces={setSucces}\n                />\n            );\n        case 5:\n            return <StepFive contactProjectData={contactProjectData} />;\n        default:\n            return null;\n    }\n}\n\nexport default Steps;\n","import React from 'react';\nimport Steps from './steps';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction MasterForm({\n    portalSettings,\n    project,\n    contactProjectData,\n    initialRegisterValues,\n    handleSubmitRegisterValues,\n    initialContact,\n    handleSubmitContactValues,\n    setSucces,\n}) {\n    const [currentStep, setStep] = React.useState(1);\n\n    function previous() {\n        setStep(currentStep <= 2 ? 1 : currentStep - 1);\n    }\n\n    function next() {\n        setStep(currentStep >= 4 ? 5 : currentStep + 1);\n    }\n\n    return (\n        <>\n            {currentStep <= 4 ? (\n                <Row className={'mb-4'}>\n                    <Col>\n                        <div className={'arrow-steps clearfix'}>\n                            <div className={`step ${currentStep === 1 ? 'current' : ''}`}>1. Inschrijven</div>\n                            <div className={`step ${currentStep === 2 ? 'current' : ''}`}>2. Gegevens</div>\n                            <div className={`step ${currentStep === 3 ? 'current' : ''}`}>3. Voorwaarden</div>\n                            <div className={`step ${currentStep === 4 ? 'current' : ''}`}>\n                                {\n                                    project.usesMollie ? (\n                                        <>4. Bevestigen en betalen</>\n                                    ) : (\n                                        <>4. Bevestigen</>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            ) : null}\n            <Steps\n                portalSettings={portalSettings}\n                currentStep={currentStep}\n                previous={previous}\n                next={next}\n                project={project}\n                contactProjectData={contactProjectData}\n                initialRegisterValues={initialRegisterValues}\n                handleSubmitRegisterValues={handleSubmitRegisterValues}\n                initialContact={initialContact}\n                handleSubmitContactValues={handleSubmitContactValues}\n                setSucces={setSucces}\n            />\n        </>\n    );\n}\n\nexport default MasterForm;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ProjectAPI from '../../api/project/ProjectAPI';\nimport LoadingView from '../../components/general/LoadingView';\nimport ContactAPI from '../../api/contact/ContactAPI';\nimport rebaseContact from '../../helpers/RebaseContact';\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport MasterForm from './MasterForm';\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\nimport axios from 'axios';\nimport { ThemeSettingsContext } from '../../context/ThemeSettingsContext';\nimport { Alert } from 'react-bootstrap';\n\nfunction RegisterProject({ match, currentSelectedContact }) {\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\n\n    const initialRegisterValues = {\n        contactId: null,\n        projectId: null,\n        participationsOptioned: 0,\n        powerKwhConsumption: 0,\n        amountOptioned: 0,\n        didAcceptAgreement: false,\n        didUnderstandInfo: false,\n        choiceMembership: 0,\n    };\n\n    const initialPcrValues = {\n        pcrYearlyPowerKwhConsumption: 0,\n        pcrPostalCode: '',\n        pcrHasSolarPanels: 'N',\n        pcrInputGeneratedNumberOfKwh: 0,\n        pcrEstimatedRevenueOk: 'Y',\n    };\n\n    const [registerValues, setRegisterValues] = useState(initialRegisterValues);\n\n    const [project, setProject] = useState({});\n    const [contact, setContact] = useState({});\n    const [portalSettings, setPortalSettings] = useState({});\n    const [isLoading, setLoading] = useState(true);\n    const [isSucces, setSucces] = useState(false);\n    const [contactProjectData, setContactProjectData] = useState({});\n\n    useEffect(() => {\n        if (currentSelectedContact.id) {\n            (function fetchContactAndProject() {\n                setLoading(true);\n\n                axios\n                    .all([\n                        ProjectAPI.fetchProject(match.params.id),\n                        ContactAPI.fetchContact(currentSelectedContact.id),\n                        ContactAPI.fetchContactProjectData(currentSelectedContact.id, match.params.id),\n                    ])\n                    .then(\n                        axios.spread((payloadProject, payloadContact, payloadContactProjectData) => {\n                            const contact = payloadContact.data.data;\n                            const project = payloadProject.data.data;\n                            setProject(project);\n                            setCurrentThemeSettings(project.administration.portalSettingsLayoutAssigned);\n                            const contactData = rebaseContact(contact);\n                            setContact(contactData);\n\n                            setContactProjectData(payloadContactProjectData.data);\n\n                            if (\n                                project &&\n                                project.projectType &&\n                                project.projectType.codeRef === 'postalcode_link_capital'\n                            ) {\n                                let pcrPostalCode = '';\n                                if (contactData.typeId === 'organisation') {\n                                    pcrPostalCode = contactData.visitAddress ? contactData.visitAddress.postalCode : '';\n                                } else {\n                                    pcrPostalCode = contactData.primaryAddress\n                                        ? contactData.primaryAddress.postalCode\n                                        : '';\n                                }\n                                setRegisterValues({\n                                    ...registerValues,\n                                    projectId: match.params.id,\n                                    contactId: currentSelectedContact.id,\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\n                                    ...initialPcrValues,\n                                    pcrPostalCode,\n                                });\n                            } else {\n                                setRegisterValues({\n                                    ...registerValues,\n                                    projectId: match.params.id,\n                                    contactId: currentSelectedContact.id,\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\n                                });\n                            }\n\n                            if (\n                                payloadContactProjectData.data.projectRegisterIndicators.allowChangeParticipation &&\n                                payloadContactProjectData.data.projectRegisterIndicators.allowPayMollie\n                            ) {\n                                /**\n                                 * Er is wel ingeschreven maar nog niet betaald, dan mag het formulier\n                                 * wel geopend worden en stellen we de eerder ingevoerde gegevens in. projectRegisterIndicators\n                                 */\n                                setRegisterValues(current => {\n                                    return {\n                                        ...current,\n                                        participationsOptioned:\n                                            payloadContactProjectData.data.projectRegisterIndicators\n                                                .participationsOptioned,\n                                        amountOptioned:\n                                            payloadContactProjectData.data.projectRegisterIndicators.amountOptioned,\n                                        pcrYearlyPowerKwhConsumption:\n                                            payloadContactProjectData.data.projectRegisterIndicators\n                                                .powerKwhConsumption,\n                                        didAcceptAgreement: true,\n                                        didUnderstandInfo: true,\n                                    };\n                                });\n                            }\n\n                            setLoading(false);\n                        })\n                    )\n                    .catch(error => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setLoading(false);\n                    });\n            })();\n        }\n\n        (function callFetchPortalSettings() {\n            setLoading(true);\n            const keys =\n                '?keys[]=portalName' +\n                '&keys[]=portalWebsite' +\n                '&keys[]=portalUrl' +\n                '&keys[]=responsibleUserId' +\n                '&keys[]=checkContactTaskResponsibleUserId' +\n                '&keys[]=linkPrivacyPolicy' +\n                '&keys[]=pcrPowerKwhConsumptionPercentage' +\n                '&keys[]=pcrGeneratingCapacityOneSolorPanel';\n            PortalSettingsAPI.fetchPortalSettings(keys)\n                .then(payload => {\n                    setPortalSettings({ ...payload.data });\n                })\n                .catch(error => {\n                    this.setState({ isLoading: false, hasError: true });\n                });\n        })();\n    }, [match, currentSelectedContact]);\n\n    function formatFullName(fullName) {\n        if (fullName) {\n            if (fullName.search(',') < 0) {\n                return fullName;\n            } else {\n                const firstName = fullName.slice(fullName.search(',') + 2);\n                const lastName = fullName.slice(0, fullName.search(','));\n                return firstName + ' ' + lastName;\n            }\n        } else {\n            return ' ';\n        }\n    }\n\n    function handleSubmitRegisterValues(values) {\n        setRegisterValues({ ...registerValues, ...values });\n    }\n\n    function handleSubmitContactValues(values, actions, nextStep) {\n        const updatedContact = { ...contact, ...values, projectId: project.id };\n        ContactAPI.updateContact(updatedContact)\n            .then(payload => {\n                ContactAPI.fetchContact(currentSelectedContact.id)\n                    .then(payload => {\n                        const contactData = rebaseContact(payload.data.data);\n\n                        setContact(contactData);\n                        nextStep();\n                    })\n                    .catch(error => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setLoading(false);\n                    });\n            })\n            .catch(error => {\n                actions.setSubmitting(false);\n                actions.setStatus({\n                    message: error.response.data.message,\n                });\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\n            });\n    }\n\n    return (\n        <Container className={'content-section'}>\n            {isLoading ? (\n                <LoadingView />\n            ) : !contactProjectData.projectRegisterIndicators.hasParticipation &&\n              !contactProjectData.projectRegisterIndicators.allowRegisterToProject ? (\n                <>\n                    <Row>\n                        <Col>\n                            <h1 className=\"content-heading\">\n                                Inschrijving voor project <strong>{project.name}</strong>\n                            </h1>\n                            <Row className={'mb-4'}>\n                                <Col>\n                                    <div className=\"alert-wrapper\">\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                            {contactProjectData.projectRegisterIndicators.textNotAllowedRegisterToProject\n                                                .split('<br />')\n                                                .map((item, key) => {\n                                                    return (\n                                                        <span key={key}>\n                                                            {item}\n                                                            <br />\n                                                        </span>\n                                                    );\n                                                })}\n                                        </Alert>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={10}>\n                            <ButtonGroup className=\"float-right\">\n                                <Link to={`/inschrijvingen-projecten`}>\n                                    <Button className={'w-button'} size=\"sm\">\n                                        Naar huidige deelnames\n                                    </Button>\n                                </Link>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            ) : contactProjectData.projectRegisterIndicators.hasParticipation &&\n              !contactProjectData.projectRegisterIndicators.allowChangeParticipation ? (\n                <>\n                    <Row>\n                        <Col>\n                            <h1 className=\"content-heading\">\n                                <strong>{formatFullName(contact.fullName)}</strong> is al ingeschreven voor project{' '}\n                                <strong>{project.name}</strong>\n                            </h1>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={10}>\n                            <ButtonGroup className=\"float-right\">\n                                <Link to={`/inschrijvingen-projecten`}>\n                                    <Button className={'w-button'} size=\"sm\">\n                                        Naar huidige deelnames\n                                    </Button>\n                                </Link>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            ) : (\n                <Row>\n                    <Col>\n                        {isSucces ? (\n                            <h1 className=\"content-heading\">\n                                Ingeschreven voor project <strong>{project.name}</strong>\n                            </h1>\n                        ) : (\n                            <>\n                                <Row>\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\n                                        <Link to={`/inschrijven-projecten`}>\n                                            <Button className={'w-button'} size=\"sm\">\n                                                Inschrijven projecten\n                                            </Button>\n                                        </Link>\n                                    </ButtonGroup>\n                                </Row>\n                                <h1 className=\"content-heading\">\n                                    Schrijf <strong>{formatFullName(contact.fullName)}</strong> in voor project{' '}\n                                    <strong>{project.name}</strong>\n                                </h1>\n                            </>\n                        )}\n                        <MasterForm\n                            portalSettings={portalSettings}\n                            project={project}\n                            contactProjectData={contactProjectData}\n                            initialRegisterValues={registerValues}\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\n                            initialContact={contact}\n                            handleSubmitContactValues={handleSubmitContactValues}\n                            setSucces={setSucces}\n                        />\n                    </Col>\n                </Row>\n            )}\n        </Container>\n    );\n}\n\nexport default function RegisterProjectWithContext(props) {\n    return (\n        <PortalUserConsumer>\n            {({ currentSelectedContact }) => (\n                <RegisterProject {...props} currentSelectedContact={currentSelectedContact} />\n            )}\n        </PortalUserConsumer>\n    );\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\nimport LoadingView from '../../../components/general/LoadingView';\nimport ContactAPI from '../../../api/contact/ContactAPI';\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport { FaInfoCircle } from 'react-icons/fa';\nimport ReactTooltip from 'react-tooltip';\nimport rebaseContact from '../../../helpers/RebaseContact';\nimport { Alert } from 'react-bootstrap';\n\nfunction ProjectList(props) {\n    const [contact, setContact] = useState({});\n    const [contactProjectsArray, setContactProjectsArray] = useState([]);\n    const [sceOrPcrProjectsAvailable, setSceOrPcrProjectsAvailable] = useState(false);\n    const [isLoading, setLoading] = useState(true);\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\n\n    useEffect(() => {\n        (function callFetchProjects() {\n            setLoading(true);\n            // Call Api if current selected contact id is filled\n            if (props.currentSelectedContact.id) {\n                // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\n                if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\n                    callFetchContact();\n                    callFetchContactProjects();\n                }\n            }\n        })();\n    }, [props.currentSelectedContact]);\n\n    useEffect(() => {\n        (function determineSceOrPcrProjectsAvailable() {\n            if (contactProjectsArray.length > 0) {\n                contactProjectsArray.find(function(project) {\n                    return project.isSceOrPcrProject && setSceOrPcrProjectsAvailable(true);\n                });\n            }\n        })();\n    }, [contactProjectsArray.length > 0]);\n\n    function callFetchContact() {\n        setLoading(true);\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\n            .then(payload => {\n                const contactData = rebaseContact(payload.data.data);\n\n                setContact(contactData);\n            })\n            .catch(error => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                setLoading(false);\n            });\n    }\n\n    function callFetchContactProjects() {\n        ContactAPI.fetchContactProjects(props.currentSelectedContact.id)\n            .then(payload => {\n                setContactProjectsArray(payload.data);\n                setLoading(false);\n            })\n            .catch(error => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                setLoading(false);\n            });\n    }\n\n    function formatFullName(fullName) {\n        if (fullName) {\n            if (fullName.search(',') < 0) {\n                return fullName;\n            } else {\n                const firstName = fullName.slice(fullName.search(',') + 2);\n                const lastName = fullName.slice(0, fullName.search(','));\n                return firstName + ' ' + lastName;\n            }\n        } else {\n            return ' ';\n        }\n    }\n\n    function usePrevious(value) {\n        const ref = useRef();\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    }\n\n    return (\n        <Container className={'content-section'}>\n            <Row>\n                <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\n                    <Link to={`/gegevens`}>\n                        <Button className={'w-button'} size=\"sm\">\n                            Gegevens\n                        </Button>\n                    </Link>\n                    &nbsp;\n                    <Link to={`/inschrijvingen-projecten`}>\n                        <Button className={'w-button'} size=\"sm\">\n                            Huidige deelnames\n                        </Button>\n                    </Link>\n                </ButtonGroup>\n            </Row>\n            <Row>\n                <Col>\n                    <h1 className=\"content-heading\">\n                        Overzicht projecten waarop{' '}\n                        <strong>{formatFullName(props.currentSelectedContact.fullName)}</strong> kan inschrijven.\n                    </h1>\n                </Col>\n            </Row>\n\n            {sceOrPcrProjectsAvailable && contact.noAddressesFound && (\n                <>\n                    <Row>\n                        <Col>\n                            <div className=\"alert-wrapper\">\n                                <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                    Op dit moment zijn je adresgegevens nog niet bij ons bekend.\n                                    <br />\n                                    Er zijn projecten waarop je kan inschrijven die afhankelijk van je adres zijn.\n                                </Alert>\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                <Link to={`/gegevens`}>\n                                    <Button className={'w-button'} size=\"sm\">\n                                        Adresgegevens toevoegen\n                                    </Button>\n                                </Link>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            )}\n            <>\n                <Row>\n                    <Col>\n                        <p>Klik op het project voor meer details.</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        {isLoading ? (\n                            <LoadingView />\n                        ) : contactProjectsArray.length === 0 ? (\n                            'Geen projecten beschikbaar om op in te schrijven.'\n                        ) : (\n                            <Table responsive>\n                                <thead>\n                                    <tr>\n                                        <th>Uitgevende instantie</th>\n                                        <th>Project</th>\n                                        <th>Ingeschreven</th>\n                                        <th>Start inschrijving</th>\n                                        <th>Einde inschrijving</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {contactProjectsArray.map(project => (\n                                        <tr key={project.id}>\n                                            <td>{project.administrationName}</td>\n                                            <td>\n                                                {project.allowChangeParticipation ? (\n                                                    <>\n                                                        {project.name} (\n                                                        <Link to={`/project/${project.id}`}>wijzig inschrijving</Link>)\n                                                    </>\n                                                ) : (\n                                                    <>\n                                                        {!project.hasParticipation && project.allowRegisterToProject ? (\n                                                            <Link to={`/project/${project.id}`}>{project.name}</Link>\n                                                        ) : (\n                                                            <span className={'text-muted'}>{project.name}</span>\n                                                        )}\n                                                    </>\n                                                )}\n                                            </td>\n                                            <td>\n                                                {project.hasParticipation ? (\n                                                    <>\n                                                        {project.allowPayMollie ? (\n                                                            <div className=\"text-center\">\n                                                                Nog niet betaald,\n                                                                <br />\n                                                                <a href={project.econobisPaymentLink}>betaal nu</a>\n                                                            </div>\n                                                        ) : (\n                                                            <div className=\"text-success text-center\">✔</div>\n                                                        )}\n                                                    </>\n                                                ) : (\n                                                    <div className=\"text-center\">\n                                                        {!project.allowRegisterToProject ? (\n                                                            <>\n                                                                <FaInfoCircle\n                                                                    color={'blue'}\n                                                                    size={'15px'}\n                                                                    data-tip={`${project.textNotAllowedRegisterToProject}`}\n                                                                    data-for={`project-${project.id}`}\n                                                                />\n                                                                <ReactTooltip\n                                                                    id={`project-${project.id}`}\n                                                                    effect=\"float\"\n                                                                    place=\"bottom\"\n                                                                    multiline={true}\n                                                                    aria-haspopup=\"true\"\n                                                                />\n                                                            </>\n                                                        ) : (\n                                                            ''\n                                                        )}\n                                                    </div>\n                                                )}\n                                            </td>\n                                            <td>\n                                                {project.dateStartRegistrations\n                                                    ? moment(project.dateStartRegistrations).format('LL')\n                                                    : ''}\n                                            </td>\n                                            <td>\n                                                {project.dateEndRegistrations\n                                                    ? moment(project.dateEndRegistrations).format('LL')\n                                                    : ''}\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                        )}\n                    </Col>\n                </Row>\n            </>\n        </Container>\n    );\n}\n\nexport default function ProjectListWithContext(props) {\n    return (\n        <PortalUserConsumer>\n            {({ currentSelectedContact }) => <ProjectList {...props} currentSelectedContact={currentSelectedContact} />}\n        </PortalUserConsumer>\n    );\n}\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport moment from 'moment';\nimport TextBlock from '../../../components/general/TextBlock';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\n\nfunction LoanDetails({ project }) {\n    return (\n        <>\n            <Row>\n                <Col xs={12} md={6}>\n                    <FormLabel>Project</FormLabel>\n                    <TextBlock>{project.name}</TextBlock>\n                    <FormLabel>Lening nodig</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.amountOfLoanNeeded)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Omschrijving project</FormLabel>\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Minimaal bedrag per contact</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.minAmountLoan)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Maximaal bedrag per contact</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.maxAmountLoan)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Start inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Eind inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default LoanDetails;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport moment from 'moment';\nimport TextBlock from '../../../components/general/TextBlock';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\n\nfunction ObligationDetails({ project }) {\n    return (\n        <>\n            <Row>\n                <Col xs={12} md={6}>\n                    <FormLabel>Project</FormLabel>\n                    <TextBlock>{project.name}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Omschrijving project</FormLabel>\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\n                </Col>\n\n                <Col xs={12} md={6}>\n                    <FormLabel>Huidige hoofdsom per obligatie</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Aantal obligaties nodig</FormLabel>\n                    <TextBlock>{project.totalParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Minimaal aantal obligaties per contact</FormLabel>\n                    <TextBlock>{project.minParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Maximaal aantal obligaties per contact</FormLabel>\n                    <TextBlock>{project.maxParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Start inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Eind inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default ObligationDetails;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport moment from 'moment';\nimport TextBlock from '../../../components/general/TextBlock';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\n\nfunction CapitalDetails({ project }) {\n    return (\n        <>\n            <Row>\n                <Col xs={12} md={6}>\n                    <FormLabel>Project</FormLabel>\n                    <TextBlock>{project.name}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Omschrijving project</FormLabel>\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\n                </Col>\n\n                <Col xs={12} md={6}>\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Aantal participaties nodig</FormLabel>\n                    <TextBlock>{project.totalParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\n                    <TextBlock>{project.minParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\n                    <TextBlock>{project.maxParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Start inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Eind inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default CapitalDetails;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport moment from 'moment';\nimport TextBlock from '../../../components/general/TextBlock';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\n\nfunction PcrDetails({ project }) {\n    return (\n        <>\n            <Row>\n                <Col xs={12} md={6}>\n                    <FormLabel>Project</FormLabel>\n                    <TextBlock>{project.name}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Omschrijving project</FormLabel>\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\n                </Col>\n\n                <Col xs={12} md={6}>\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Aantal participaties nodig</FormLabel>\n                    <TextBlock>{project.totalParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\n                    <TextBlock>{project.minParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\n                    <TextBlock>{project.maxParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Start inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Eind inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default PcrDetails;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ProjectAPI from '../../../api/project/ProjectAPI';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport LoadingView from '../../../components/general/LoadingView';\nimport LoanDetails from './LoanDetails';\nimport ObligationDetails from './ObligationDetails';\nimport CapitalDetails from './CapitalDetails';\nimport PcrDetails from './PcrDetails';\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\nimport { PortalUserContext } from '../../../context/PortalUserContext';\nimport { isEmpty } from 'lodash';\n\nfunction ProjectDetails({ match }) {\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\n    const { currentSelectedContact } = useContext(PortalUserContext);\n    const [project, setProject] = useState({});\n    const [isLoading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if (currentSelectedContact.id) {\n            (function callFetchProject() {\n                setLoading(true);\n                ProjectAPI.fetchProject(match.params.id)\n                    .then(payload => {\n                        setProject(payload.data.data);\n                        setCurrentThemeSettings(payload.data.data.administration.portalSettingsLayoutAssigned);\n                        setLoading(false);\n                    })\n                    .catch(error => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setLoading(false);\n                    });\n            })();\n        }\n    }, [match, currentSelectedContact]);\n\n    function renderDetails() {\n        switch (project.projectType.codeRef) {\n            case 'loan':\n                return <LoanDetails project={project} />;\n            case 'obligation':\n                return <ObligationDetails project={project} />;\n            case 'capital':\n                return <CapitalDetails project={project} />;\n            case 'postalcode_link_capital':\n                return <PcrDetails project={project} />;\n            default:\n                return null;\n        }\n    }\n    if (isEmpty(project)) {\n        return (\n            <Container className={'content-section'}>\n                {isLoading ? (\n                    <LoadingView />\n                ) : (\n                    <>\n                        <p>Geen projectdetails bekend</p>\n                    </>\n                )}\n            </Container>\n        );\n    }\n\n    return (\n        <Container className={'content-section'}>\n            {isLoading ? (\n                <LoadingView />\n            ) : (\n                <>\n                    <Row>\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\n                            <Link to={`/inschrijven-projecten`}>\n                                <Button className={'w-button'} size=\"sm\">\n                                    Inschrijven projecten\n                                </Button>\n                            </Link>\n                        </ButtonGroup>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <h1 className=\"content-heading\">Inschrijven project</h1>\n                            <div className=\"content-subheading\">Uitgevende instantie {project.administration.name}</div>\n                        </Col>\n                    </Row>\n\n                    {renderDetails()}\n\n                    <Row className={'mt-5'}>\n                        <Col>\n                            <p>\n                                Meer informatie over dit project vind je{' '}\n                                <a href={`${project.linkProjectInfo}`} target=\"_blank\">\n                                    hier\n                                </a>\n                            </p>\n                            <p>Wil je inschrijven op dit project. Klik dan op \"Ga naar inschrijven\".</p>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <ButtonGroup className=\"float-right\">\n                                <Link to={`/inschrijven/${project.id}`}>\n                                    <Button className={'w-button'} size=\"sm\">\n                                        Ga naar inschrijven\n                                    </Button>\n                                </Link>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default ProjectDetails;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport LoadingView from '../../../components/general/LoadingView';\nimport ContactAPI from '../../../api/contact/ContactAPI';\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\n\nfunction RegistrationList(props) {\n    const [contact, setContact] = useState({});\n    const [isLoading, setLoading] = useState(true);\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\n\n    useEffect(() => {\n        // Call Api if current selected contact id is filled\n        if (props.currentSelectedContact.id) {\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\n                callFetchContact();\n            }\n        }\n    }, [props.currentSelectedContact]);\n\n    function callFetchContact() {\n        setLoading(true);\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\n            .then(payload => {\n                setContact(payload.data.data);\n                setLoading(false);\n            })\n            .catch(error => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                setLoading(false);\n            });\n    }\n\n    function usePrevious(value) {\n        const ref = useRef();\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    }\n\n    function formatFullName(fullName) {\n        if (fullName) {\n            if (fullName.search(',') < 0) {\n                return fullName;\n            } else {\n                const firstName = fullName.slice(fullName.search(',') + 2);\n                const lastName = fullName.slice(0, fullName.search(','));\n                return firstName + ' ' + lastName;\n            }\n        } else {\n            return ' ';\n        }\n    }\n\n    return (\n        <Container className={'content-section'}>\n            <Row>\n                <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\n                    <Link to={`/gegevens`}>\n                        <Button className={'w-button'} size=\"sm\">\n                            Gegevens\n                        </Button>\n                    </Link>\n                    &nbsp;\n                    <Link to={`/inschrijven-projecten`}>\n                        <Button className={'w-button'} size=\"sm\">\n                            Inschrijven projecten\n                        </Button>\n                    </Link>\n                </ButtonGroup>\n            </Row>{' '}\n            <Row>\n                <Col>\n                    <h1 className=\"content-heading\">\n                        De projecten waarin <strong>{formatFullName(contact.fullName)}</strong> deelneemt.\n                    </h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {isLoading ? (\n                        <LoadingView />\n                    ) : contact.length === 0 ? (\n                        'Nog geen inschrijvingen.'\n                    ) : (\n                        <Table responsive>\n                            <thead>\n                                <tr>\n                                    <th>Uitgevende instantie</th>\n                                    <th>Project</th>\n                                    <th>Deelname</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {contact.participations.map(participation => {\n                                    if (\n                                        !participation.project.dateEnd ||\n                                        moment(participation.project.dateEnd).format('YYYY-MM-DD') >=\n                                            moment().format('YYYY-MM-DD')\n                                    ) {\n                                        return (\n                                            <tr key={participation.id}>\n                                                <td>{participation.project.administration.name}</td>\n                                                <td>\n                                                    <Link to={`/project-deelname/${participation.id}`}>\n                                                        {participation.project.name}\n                                                    </Link>\n                                                </td>\n                                                <td>\n                                                    {participation.project.projectType.codeRef == 'loan' ? (\n                                                        <>\n                                                            {participation.amountInteressed != 0 ? (\n                                                                <span>\n                                                                    Lening{' '}\n                                                                    {MoneyPresenter(participation.amountInteressed)}{' '}\n                                                                    <em>(Interesse)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.amountOptioned != 0 ? (\n                                                                <span>\n                                                                    Lening{' '}\n                                                                    {MoneyPresenter(participation.amountOptioned)}{' '}\n                                                                    <em>(Ingeschreven)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.amountGranted != 0 ? (\n                                                                <span>\n                                                                    Lening {MoneyPresenter(participation.amountGranted)}{' '}\n                                                                    <em>(Toegekend)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.amountDefinitive != 0 ? (\n                                                                <span>\n                                                                    Lening{' '}\n                                                                    {MoneyPresenter(participation.amountDefinitive)}{' '}\n                                                                    <em>(Definitief)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                        </>\n                                                    ) : (\n                                                        ''\n                                                    )}\n\n                                                    {participation.project.projectType.codeRef == 'obligation' ? (\n                                                        <>\n                                                            {participation.participationsInteressed != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsInteressed}\n                                                                    {' obligaties '} <em> (Interesse)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsOptioned != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsOptioned}\n                                                                    {' obligaties '} <em>(Ingeschreven)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsGranted != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsGranted}\n                                                                    {' obligaties '} <em>(Toegekend)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsDefinitive != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsDefinitive}\n                                                                    {' obligaties '}\n                                                                    <em>(Definitief)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                        </>\n                                                    ) : (\n                                                        ''\n                                                    )}\n\n                                                    {participation.project.projectType.codeRef == 'capital' ? (\n                                                        <>\n                                                            {participation.participationsInteressed != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsInteressed}\n                                                                    {' participaties '} <em>(Interesse)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsOptioned != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsOptioned}\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsGranted != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsGranted}\n                                                                    {' participaties '} <em>(Toegekend)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsDefinitive != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsDefinitive}\n                                                                    {' participaties '} <em>(Definitief)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                        </>\n                                                    ) : (\n                                                        ''\n                                                    )}\n\n                                                    {participation.project.projectType.codeRef ==\n                                                    'postalcode_link_capital' ? (\n                                                        <>\n                                                            {participation.participationsInteressed != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsInteressed}\n                                                                    {' participaties '} <em>(Interesse)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsOptioned != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsOptioned}\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsGranted != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsGranted}\n                                                                    {' participaties '} <em>(Toegekend)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsDefinitive != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsDefinitive}\n                                                                    {' participaties '} <em>(Definitief)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                        </>\n                                                    ) : (\n                                                        ''\n                                                    )}\n                                                </td>\n                                            </tr>\n                                        );\n                                    }\n                                    return null;\n                                })}\n                            </tbody>\n                        </Table>\n                    )}\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default function RegistrationListWithContext(props) {\n    return (\n        <PortalUserConsumer>\n            {({ currentSelectedContact }) => (\n                <RegistrationList {...props} currentSelectedContact={currentSelectedContact} />\n            )}\n        </PortalUserConsumer>\n    );\n}\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonText from '../../../components/button/ButtonText';\nimport Titles from '../../../data/Titles';\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\nimport Select from '../../../components/form/Select';\nimport { Link } from 'react-router-dom';\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string()\n        .email()\n        .required('Verplicht'),\n    personFirstName: Yup.string()\n        .trim()\n        .required('Verplicht'),\n    personLastName: Yup.string()\n        .trim()\n        .required('Verplicht'),\n});\n\nconst NewAccountFormPersonal = ({ handleSubmit, showSuccessMessage }) => (\n    <Formik\n        initialValues={{\n            email: '',\n            personTitleId: '',\n            personFirstName: '',\n            personLastName: '',\n        }}\n        enableReinitialize={true}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true);\n            handleSubmit(values, actions);\n        }}\n        render={({ isSubmitting, errors, touched }) => (\n            <Form>\n                <>\n                    <Row className=\"justify-content-center\">\n                        <p className={'authorization-text'}>Account aanmaken voor jezelf</p>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <p className={'authorization-text'}>Gegevens</p>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personTitleId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"title_id\"\n                                    className={'select-field-transparent'}\n                                    placeholder={'Aanhef'}\n                                    options={Titles}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personFirstName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"first_name-new-acount\"\n                                    className={''}\n                                    placeholder={'Voornaam'}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personLastNamePrefixId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name_prefix_id\"\n                                    options={LastNamePrefixes}\n                                    className={'select-field-transparent'}\n                                    placeholder={'Tussenvoegsel'}\n                                />\n                            )}\n                        />\n                        <Field\n                            name=\"personLastName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name-new-acount\"\n                                    className={''}\n                                    placeholder={'Achternaam'}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"email-new-acount\"\n                                    className={''}\n                                    placeholder={'E-mailadres'}\n                                    errors={errors}\n                                    touched={touched}\n                                />\n                            )}\n                        />\n                    </Row>\n\n                    <Row className=\"justify-content-center\">\n                        <ButtonText\n                            buttonText={'Account aanmaken'}\n                            buttonClassName={'authorization-button'}\n                            size=\"sm\"\n                            type={'submit'}\n                            loading={isSubmitting}\n                            loadingSpinnerColor={'#034b8c'}\n                            disabled={showSuccessMessage}\n                        />\n                    </Row>\n                </>\n            </Form>\n        )}\n    />\n);\n\nexport default NewAccountFormPersonal;\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonText from '../../../components/button/ButtonText';\nimport Titles from '../../../data/Titles';\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\nimport Select from '../../../components/form/Select';\nimport { Link } from 'react-router-dom';\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string()\n        .email()\n        .required('Verplicht'),\n    organisationName: Yup.string()\n        .trim()\n        .required('Verplicht'),\n    personFirstName: Yup.string()\n        .trim()\n        .required('Verplicht'),\n    personLastName: Yup.string()\n        .trim()\n        .required('Verplicht'),\n});\n\nconst NewAccountFormOrganisation = ({ handleSubmit, showSuccessMessage }) => (\n    <Formik\n        initialValues={{ email: '', organisationName: '', personTitleId: '', personFirstName: '', personLastName: '' }}\n        enableReinitialize={true}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true);\n            handleSubmit(values, actions);\n        }}\n        render={({ isSubmitting, errors, touched }) => (\n            <Form>\n                <>\n                    <Row className=\"justify-content-center\">\n                        <p className={'authorization-text'}>Account aanmaken voor je organisatie</p>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"organisationName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"name-new-acount\"\n                                    className={''}\n                                    placeholder={'Naam Organisatie'}\n                                    errors={errors}\n                                    touched={touched}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <p className={'authorization-text'}>Gegevens contactpersoon</p>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personTitleId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"title_id\"\n                                    className={'select-field-transparent'}\n                                    placeholder={'Aanhef'}\n                                    options={Titles}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personFirstName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"first_name-new-acount\"\n                                    className={''}\n                                    placeholder={'Voornaam'}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personLastNamePrefixId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name_prefix_id\"\n                                    options={LastNamePrefixes}\n                                    className={'select-field-transparent'}\n                                    placeholder={'Tussenvoegsel'}\n                                />\n                            )}\n                        />\n                        <Field\n                            name=\"personLastName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name-new-acount\"\n                                    className={''}\n                                    placeholder={'Achternaam'}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"email-new-acount\"\n                                    className={''}\n                                    placeholder={'E-mailadres'}\n                                    errors={errors}\n                                    touched={touched}\n                                />\n                            )}\n                        />\n                    </Row>\n\n                    <Row className=\"justify-content-center\">\n                        <ButtonText\n                            buttonText={'Account aanmaken'}\n                            buttonClassName={'authorization-button'}\n                            size=\"sm\"\n                            type={'submit'}\n                            loading={isSubmitting}\n                            loadingSpinnerColor={'#034b8c'}\n                            disabled={showSuccessMessage}\n                        />\n                    </Row>\n                </>\n            </Form>\n        )}\n    />\n);\n\nexport default NewAccountFormOrganisation;\n","import React, { useState } from 'react';\nimport { GoogleReCaptchaProvider, useGoogleReCaptcha } from 'react-google-recaptcha-v3';\nimport AuthAPI from '../../../api/auth/AuthAPI';\nimport Alert from 'react-bootstrap/Alert';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport NewAccountFormPersonal from './NewAccountFormPersonal';\nimport NewAccountFormOrganisation from './NewAccountFormOrganisation';\nimport { Redirect } from 'react-router-dom';\nimport { Button, ButtonToolbar } from 'react-bootstrap';\n\nconst NewAccount = props => {\n    const { executeRecaptcha } = useGoogleReCaptcha();\n    const [contactType, setContactType] = useState('person');\n    const [showError, toggleError] = useState(false);\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    async function handleSubmit(values, actions) {\n        if (!executeRecaptcha) {\n            return;\n        }\n        const reCaptchaToken = await executeRecaptcha('signup_page');\n\n        AuthAPI.newAccount({ ...values, contactType: contactType, reCaptchaToken })\n            .then(payload => {\n                toggleError(false);\n                toggleSuccessMessage(true);\n                actions.setSubmitting(false);\n            })\n            .catch(error => {\n                // If new account fails show error and then set submitting back to false\n                toggleError(true);\n                if (error.response && error.response.status === 404) {\n                    setErrorMessage(\n                        'Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres.'\n                    );\n                } else if (error.response && error.response.status === 405) {\n                    setErrorMessage(\n                        'Er bestaat al een contact met het e-mailadres, voornaam en achternaam dat je hebt ingevuld. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres, voornaam of achternaam.'\n                    );\n                } else {\n                    setErrorMessage('Fout bij aanmaken nieuw account!');\n                }\n\n                actions.setSubmitting(false);\n            });\n    }\n\n    function redirect() {\n        return <Redirect to={'nieuw-account-succes'} />;\n    }\n\n    return (\n        <div className=\"authorization-container\">\n            <Container fluid className=\"authorization-text\">\n                <Row className=\"justify-content-center align-content-start align-content-lg-center full-height p-2\">\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"4\" xl=\"4\">\n                        <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container-small\" />\n\n                        {showSuccessMessage ? (\n                            redirect()\n                        ) : (\n                            <>\n                                <Row className=\"justify-content-center\">\n                                    <h3 className={'authorization-text'}>Nieuw account</h3>\n                                </Row>\n                                <Row className=\"justify-content-center\">\n                                    <p className={'authorization-text'}>Maak binnen 2 minuten een account aan.</p>\n                                </Row>\n                                <br />\n                                <Row className=\"justify-content-center\">\n                                    <ButtonToolbar toggle>\n                                        <Col>\n                                            <Button\n                                                className={'authorization-button'}\n                                                variant={\n                                                    contactType === 'person'\n                                                        ? 'primary fixed-height'\n                                                        : 'light fixed-height'\n                                                }\n                                                block\n                                                onClick={() => setContactType('person')}\n                                            >\n                                                Voor jezelf\n                                            </Button>\n                                        </Col>\n                                        <Col>\n                                            <Button\n                                                className={'authorization-button'}\n                                                variant={contactType === 'organisation' ? 'primary' : 'light'}\n                                                block\n                                                onClick={() => setContactType('organisation')}\n                                            >\n                                                Voor je organisatie\n                                            </Button>\n                                        </Col>\n                                    </ButtonToolbar>\n                                </Row>\n                                <br />\n\n                                {contactType === 'person' ? (\n                                    <NewAccountFormPersonal\n                                        handleSubmit={handleSubmit}\n                                        showSuccessMessage={showSuccessMessage}\n                                    />\n                                ) : (\n                                    <NewAccountFormOrganisation\n                                        handleSubmit={handleSubmit}\n                                        showSuccessMessage={showSuccessMessage}\n                                    />\n                                )}\n                                <br />\n\n                                {showError ? (\n                                    <Row>\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                            {errorMessage}\n                                        </Alert>\n                                    </Row>\n                                ) : null}\n                            </>\n                        )}\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nfunction NewAccountWithProvider() {\n    const RE_CAPTCHA_KEY = process.env.REACT_APP_RE_CAPTCHA_KEY;\n\n    return (\n        <GoogleReCaptchaProvider reCaptchaKey={RE_CAPTCHA_KEY} language={'nl'}>\n            <NewAccount />\n        </GoogleReCaptchaProvider>\n    );\n}\n\nexport default NewAccountWithProvider;\n","import React, { useEffect, useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from 'react-router-dom';\n\nconst NewAccountSuccess = () => {\n    return (\n        <Container fluid className=\"authorization-container\">\n            <Row className=\"justify-content-center align-content-center full-height\">\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\n                    <div>\n                        <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\n                        <p className={'authorization-text'}>\n                            Binnen enkele minuten ontvang je een e-mail met een persoonlijke link. Via deze link kun je\n                            je account activeren.\n                            <br />\n                            <br />\n                            <strong>Let op:</strong> Het kan zijn dat de mail door een spamfilter is geblokkeerd.\n                            Spamfilters van bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de\n                            Spam/Reclame of je onze mail daar terug vindt.\n                        </p>\n                        <a onClick={window.close} href=\"#\" className=\"authorization-link\">\n                            Sluit venster\n                        </a>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default NewAccountSuccess;\n","import React, { useEffect, useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from '../../../components/form/InputText';\nimport ButtonText from '../../../components/button/ButtonText';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport TextBlock from '../../../components/general/TextBlock';\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\nimport Alert from 'react-bootstrap/Alert';\n\nconst validationSchema = Yup.object({\n    email: Yup.string()\n        .email('Geen geldig e-mailadres')\n        .required('Verplicht'),\n});\n\nfunction ChangeAccountEmail() {\n    const [portalUserEmail, setPortalUserEmail] = useState('');\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n    const [showError, toggleError] = useState(false);\n\n    useEffect(() => {\n        (function callFetchUserEmail() {\n            PortalUserAPI.fetchPortalUserEmail()\n                .then(payload => {\n                    setPortalUserEmail(payload.data);\n                })\n                .catch(error => {\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                });\n        })();\n    }, []);\n    function handleSubmitChangeEmail(values, actions) {\n        PortalUserAPI.changeEmail(values)\n            .then(payload => {\n                setPortalUserEmail(values.email);\n                actions.resetForm();\n                toggleError(false);\n                toggleSuccessMessage(true);\n                actions.setSubmitting(false);\n            })\n            .catch(error => {\n                actions.setSubmitting(false);\n                toggleError(true);\n                toggleSuccessMessage(false);\n            });\n    }\n\n    return (\n        <Formik\n            initialValues={{ email: '', changePrimaryEmailAddress: false }}\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitChangeEmail(values, actions);\n            }}\n        >\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\n                <Form onSubmit={handleSubmit}>\n                    {showSuccessMessage ? (\n                        <Row>\n                            <Col xs={12}>\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\n                                    Inlog e-mail is succesvol gewijzigd!\n                                </Alert>\n                            </Col>\n                        </Row>\n                    ) : null}\n                    {showError ? (\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                            Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit\n                            e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan\n                            alsjeblieft een ander e-mailadres.\n                        </Alert>\n                    ) : null}\n\n                    <Row>\n                        <Col xs={12}>\n                            <FormLabel className={'field-label'}>Huidig e-mailadres</FormLabel>\n                            <TextBlock>{portalUserEmail}</TextBlock>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={9}>\n                            <Form.Label className={'field-label pt-1'}>Nieuw e-mailadres</Form.Label>\n                            <Field\n                                name=\"email\"\n                                render={({ field }) => (\n                                    <InputText field={field} errors={errors} touched={touched} id=\"email\" />\n                                )}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={9}>\n                            <Field\n                                name=\"changePrimaryEmailAddress\"\n                                render={({ field }) => (\n                                    <label className=\"w-checkbox checkbox-fld\">\n                                        <input\n                                            type=\"checkbox\"\n                                            {...field}\n                                            id=\"change-primary-email-address\"\n                                            checked={field.value}\n                                            className=\"w-checkbox-input checkbox\"\n                                        />\n                                        <span\n                                            htmlFor=\"change-primary-email-address\"\n                                            className=\"checkbox-label w-form-label\"\n                                        >\n                                            Wijziging ook doorvoeren op huidig correspondentie e-mailadres?\n                                        </span>\n                                    </label>\n                                )}\n                            />\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col xs={12} md={6}>\n                            <ButtonText\n                                buttonText={'Wijzig e-mailadres'}\n                                size=\"sm\"\n                                type={'submit'}\n                                loading={isSubmitting}\n                            />\n                        </Col>\n                    </Row>\n                </Form>\n            )}\n        </Formik>\n    );\n}\n\nexport default ChangeAccountEmail;\n","import React, { useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from '../../../components/form/InputText';\nimport ButtonText from '../../../components/button/ButtonText';\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\nimport Alert from 'react-bootstrap/Alert';\n\nconst validationSchema = Yup.object().shape({\n    password: Yup.string()\n        .min(10, 'Minimum van ${min} verplicht')\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\n        .required('Verplicht'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\n        .required('Verplicht'),\n});\n\nfunction ChangeAccountPassword() {\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n    const [showError, toggleError] = useState(false);\n\n    function handleSubmitChangePassword(values, actions) {\n        PortalUserAPI.changePassword(values)\n            .then(payload => {\n                actions.resetForm();\n                toggleError(false);\n                toggleSuccessMessage(true);\n                actions.setSubmitting(false);\n            })\n            .catch(error => {\n                actions.setSubmitting(false);\n                toggleError(true);\n                toggleSuccessMessage(false);\n            });\n    }\n\n    return (\n        <Formik\n            initialValues={{ password: '', passwordConfirmation: '' }}\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitChangePassword(values, actions);\n            }}\n        >\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\n                <Form onSubmit={handleSubmit}>\n                    {showSuccessMessage ? (\n                        <Row>\n                            <Col xs={12}>\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\n                                    Wachtwoord is succesvol gewijzigd!\n                                </Alert>\n                            </Col>\n                        </Row>\n                    ) : null}\n                    {showError ? (\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                            Fout bij wijzigen wachtwoord!\n                        </Alert>\n                    ) : null}\n\n                    <Row>\n                        <Col xs={12} md={9}>\n                            <Form.Label className={'field-label'}>Nieuw wachtwoord</Form.Label>\n                            <Field\n                                name=\"password\"\n                                render={({ field }) => (\n                                    <InputText\n                                        field={field}\n                                        id=\"password\"\n                                        className={field.value ? 'content numeric-password' : 'content'}\n                                        placeholder={'Nieuw wachtwoord'}\n                                        errors={errors}\n                                        touched={touched}\n                                    />\n                                )}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={9}>\n                            <Form.Label className={'field-label mt-0'}>Herhaal nieuw wachtwoord</Form.Label>\n                            <Field\n                                name=\"passwordConfirmation\"\n                                render={({ field }) => (\n                                    <InputText\n                                        field={field}\n                                        id=\"passwordConfirmation\"\n                                        className={field.value ? 'content numeric-password' : 'content'}\n                                        placeholder={'Herhaal nieuw wachtwoord'}\n                                        errors={errors}\n                                        touched={touched}\n                                    />\n                                )}\n                            />\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col xs={12} md={6}>\n                            <ButtonText\n                                buttonText={'Wijzig wachtwoord'}\n                                size=\"sm\"\n                                type={'submit'}\n                                loading={isSubmitting}\n                            />\n                        </Col>\n                    </Row>\n                </Form>\n            )}\n        </Formik>\n    );\n}\n\nexport default ChangeAccountPassword;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ChangeAccountEmail from './Email';\nimport ChangeAccountPassword from './Password';\n\nfunction ChangeAccount() {\n    return (\n        <Container className={'content-section'}>\n            <Row>\n                <Col>\n                    <h1 className=\"content-heading\">Wijzig inloggegevens</h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={12} md={6} className={'mb-5'}>\n                    <h3 className={'h3'}>Wijzig inlog e-mailadres</h3>\n\n                    <ChangeAccountEmail />\n                </Col>\n                <Col xs={12} md={6}>\n                    <h3 className={'h3'}>Wijzig wachtwoord</h3>\n\n                    <ChangeAccountPassword />\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default ChangeAccount;\n","import React, { useEffect, useReducer, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport LoadingView from '../../../components/general/LoadingView';\nimport ContactAPI from '../../../api/contact/ContactAPI';\nimport { PortalUserContext } from '../../../context/PortalUserContext';\n\nconst INITIAL_STATE = {\n    result: [],\n    isLoading: true,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'updateIsLoading':\n            return {\n                ...state,\n                isLoading: action.payload,\n            };\n        case 'updateResult':\n            return {\n                ...state,\n                result: action.payload,\n            };\n        default:\n            return INITIAL_STATE;\n    }\n};\n\nfunction AboutUs() {\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n    const { currentSelectedContact } = useContext(PortalUserContext);\n\n    useEffect(\n        function() {\n            if (currentSelectedContact.id) {\n                ContactAPI.fetchContactRelatedAdministrations(currentSelectedContact.id)\n                    .then(payload => {\n                        dispatch({\n                            type: 'updateResult',\n                            payload: payload.data.data,\n                        });\n                        setIsLoading(false);\n                    })\n                    .catch(() => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setIsLoading(false);\n                    });\n            }\n        },\n        [currentSelectedContact.id]\n    );\n\n    function formatFullName(fullName) {\n        if (fullName) {\n            if (fullName.search(',') < 0) {\n                return fullName;\n            } else {\n                const firstName = fullName.slice(fullName.search(',') + 2);\n                const lastName = fullName.slice(0, fullName.search(','));\n                return firstName + ' ' + lastName;\n            }\n        } else {\n            return ' ';\n        }\n    }\n\n    function setIsLoading(isLoading) {\n        dispatch({\n            type: 'updateIsLoading',\n            payload: isLoading,\n        });\n    }\n\n    return (\n        <Container className={'content-section'}>\n            <Row>\n                <Col>\n                    <h1 className=\"content-heading\">\n                        Overzicht organisaties waar <strong>{formatFullName(currentSelectedContact.fullName)}</strong>{' '}\n                        een relatie mee heeft.\n                    </h1>\n                </Col>\n            </Row>\n            {state.isLoading ? (\n                <Row>\n                    <Col>\n                        <LoadingView />\n                    </Col>\n                </Row>\n            ) : state.result.length === 0 ? (\n                <Row>\n                    <Col>Geen informatie organisaties beschikbaar waar contact een relatie mee heeft.</Col>\n                </Row>\n            ) : (\n                <>\n                    <Row>\n                        <Col>\n                            <p>Klik op de organisatie voor meer details.</p>\n                        </Col>\n                    </Row>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Naam</th>\n                                <th>Adres</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {state.result.map(item => (\n                                <tr key={item.id}>\n                                    <td>\n                                        <Link to={`/over-ons-organisatie/${item.id}`}>{item.name}</Link>\n                                    </td>\n                                    <td>\n                                        {item.address}, {item.city}\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default AboutUs;\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nfunction RegistrationDetailsTitle({ contactName, projectName, administrationName }) {\n    return (\n        <Row>\n            <Col>\n                <h1 className=\"content-heading\">\n                    Deelname van {contactName} in de {projectName}\n                </h1>\n                <span className=\"content-subheading\">Uitgevende instantie {administrationName}</span>\n            </Col>\n        </Row>\n    );\n}\n\nexport default RegistrationDetailsTitle;\n","export default field => {\n    switch (field.type) {\n        case 'date':\n        case 'string':\n            return 'text-left';\n        case 'decimal':\n        case 'money':\n        case 'integer':\n            return 'text-right';\n        default:\n            return 'text-left';\n    }\n};\n","import moneyPresenter from './MoneyPresenter';\nimport moment from 'moment';\n\nexport default field => {\n    switch (field.type) {\n        case 'date':\n            return field.value ? moment(field.value).format('L') : '';\n        case 'decimal':\n            return field.value\n                ? field.value.toLocaleString('nl', {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                  })\n                : '';\n        case 'money':\n            return moneyPresenter(field.value);\n        case 'string':\n        case 'integer':\n        default:\n            return field.value;\n    }\n};\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport classNameBasedOnTypePresenter from '../../../../helpers/classNameBasedOnTypePresenter';\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\n\nfunction RegistrationDetailsProjectTable({ fields }) {\n    if (!fields || fields.length === 0) return <p>Geen projectdetails bekend</p>;\n\n    return (\n        <Table className={'my-4'}>\n            <tbody>\n                {fields.map((field, index) => (\n                    <tr key={index}>\n                        <td>\n                            <strong>{field.label}</strong>\n                        </td>\n                        <td>{valueBasedOnTypePresenter(field)}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    );\n}\n\nexport default RegistrationDetailsProjectTable;\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\nimport classNameBasedOnTypePresenter from '../../../../helpers/classNameBasedOnTypePresenter';\n\nfunction RegistrationDetailsMutationTable({ participantMutations }) {\n    if (!participantMutations || participantMutations.length === 0) return <p>Geen mutaties bekend</p>;\n\n    return (\n        <Table responsive={true} className={'my-4'}>\n            <thead>\n                <tr>\n                    {participantMutations[0].fields.map((field, index) => (\n                        <th key={index}>{field.label}</th>\n                    ))}\n                </tr>\n            </thead>\n            <tbody>\n                {participantMutations.map((participantMutation, index) => (\n                    <tr key={index}>\n                        {participantMutation.fields.map((field, index) => (\n                            <td class={classNameBasedOnTypePresenter(field)} key={index}>\n                                {valueBasedOnTypePresenter(field)}\n                            </td>\n                        ))}\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    );\n}\n\nexport default RegistrationDetailsMutationTable;\n","import React, { useEffect, useReducer, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\nimport LoadingView from '../../../components/general/LoadingView';\nimport RegistrationDetailsTitle from './Title';\nimport RegistrationDetailsProjectTable from './project-table';\nimport RegistrationDetailsMutationTable from './mutation-table';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\nimport { PortalUserContext } from '../../../context/PortalUserContext';\n\nconst INITIAL_STATE = {\n    result: [],\n    isLoading: true,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'updateIsLoading':\n            return {\n                ...state,\n                isLoading: action.payload,\n            };\n        case 'updateResult':\n            return {\n                ...state,\n                result: action.payload,\n            };\n        default:\n            return INITIAL_STATE;\n    }\n};\n\nfunction RegistrationDetails({ match: { params } }) {\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\n    const { currentSelectedContact } = useContext(PortalUserContext);\n\n    useEffect(() => {\n        if (currentSelectedContact.id) {\n            (function() {\n                ParticipantProjectAPI.show(params.id)\n                    .then(payload => {\n                        dispatch({\n                            type: 'updateResult',\n                            payload: payload.data.data,\n                        });\n                        setCurrentThemeSettings(payload.data.data.basicInformation.portalSettingsLayoutAssigned);\n                        setIsLoading(false);\n                    })\n                    .catch(() => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setIsLoading(false);\n                    });\n            })();\n        }\n    }, [params.id, currentSelectedContact]);\n\n    function setIsLoading(isLoading) {\n        dispatch({\n            type: 'updateIsLoading',\n            payload: isLoading,\n        });\n    }\n\n    return (\n        <Container className={'content-section'}>\n            {state.isLoading ? (\n                <LoadingView />\n            ) : (\n                <>\n                    <Row>\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\n                            <Link to={`/inschrijvingen-projecten`}>\n                                <Button className={'w-button'} size=\"sm\">\n                                    Huidige deelnames\n                                </Button>\n                            </Link>\n                        </ButtonGroup>\n                    </Row>\n                    <RegistrationDetailsTitle {...state.result.basicInformation} />\n                    <RegistrationDetailsProjectTable fields={state.result.fields} />\n                    <RegistrationDetailsMutationTable participantMutations={state.result.participantMutations} />\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default RegistrationDetails;\n","import React, { useEffect, useReducer, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport LoadingView from '../../../components/general/LoadingView';\nimport ContactAPI from '../../../api/contact/ContactAPI';\nimport { PortalUserContext } from '../../../context/PortalUserContext';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Table from 'react-bootstrap/Table';\nimport { FaFileDownload } from 'react-icons/all';\nimport fileDownload from 'js-file-download';\n\nconst INITIAL_STATE = {\n    result: [],\n    isLoading: true,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'updateIsLoading':\n            return {\n                ...state,\n                isLoading: action.payload,\n            };\n        case 'updateResult':\n            return {\n                ...state,\n                result: action.payload,\n            };\n        default:\n            return INITIAL_STATE;\n    }\n};\n\nfunction FinancialOverviewDocuments() {\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n    const { currentSelectedContact } = useContext(PortalUserContext);\n\n    useEffect(\n        function() {\n            if (currentSelectedContact.id) {\n                ContactAPI.fetchContactFinancialOverviewDocuments(currentSelectedContact.id)\n                    .then(payload => {\n                        dispatch({\n                            type: 'updateResult',\n                            payload: payload.data.data,\n                        });\n                        setIsLoading(false);\n                    })\n                    .catch(() => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setIsLoading(false);\n                    });\n            }\n        },\n        [currentSelectedContact.id]\n    );\n\n    function setIsLoading(isLoading) {\n        dispatch({\n            type: 'updateIsLoading',\n            payload: isLoading,\n        });\n    }\n\n    function downloadFile(e, id) {\n        e.preventDefault();\n\n        ContactAPI.financialOverviewContactDownload(id)\n            .then(payload => {\n                fileDownload(payload.data, payload.headers['x-filename']);\n            })\n            .catch(() => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                setIsLoading(false);\n            });\n    }\n\n    return (\n        <Container className={'content-section'}>\n            {state.isLoading ? (\n                <LoadingView />\n            ) : (\n                <>\n                    <Row>\n                        <Col>\n                            <h1 className=\"content-heading mt-0\">Waardestaat documenten</h1>\n                        </Col>\n                    </Row>\n                    <Table>\n                        <thead>\n                            <tr>\n                                <th>Naam</th>\n                                <th>Omschrijving</th>\n                                <th>Downloaden</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {state.result.map(item => (\n                                <tr key={item.id}>\n                                    <td>{item.name}</td>\n                                    <td>{item.description}</td>\n                                    <td>\n                                        <a href=\"#\" onClick={e => downloadFile(e, item.id)}>\n                                            <FaFileDownload /> downloaden\n                                        </a>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default FinancialOverviewDocuments;\n","import axiosInstance from '../default-setup/AxiosInstance';\nimport moment from 'moment';\n\nexport default {\n    fetchAdministration: function(id) {\n        const requestUrl = `/jory/administration/${id}`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: [\n                        'id',\n                        'name',\n                        'address',\n                        'postalCode',\n                        'city',\n                        'kvkNumber',\n                        'iBAN',\n                        'ibanAttn',\n                        'btwNumber',\n                        'website',\n                    ],\n                    rlt: {\n                        country: { fld: ['name'] },\n                    },\n                },\n            },\n        });\n    },\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport LoadingView from '../../../components/general/LoadingView';\nimport { PortalUserContext } from '../../../context/PortalUserContext';\nimport { Card, Table } from 'react-bootstrap';\nimport AdministrationAPI from '../../../api/administration/AdministrationAPI';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\n\nfunction AboutUsAdministration({ match }) {\n    const { currentSelectedContact } = useContext(PortalUserContext);\n    const [administration, setAdministration] = useState({});\n    const [isLoading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if (currentSelectedContact.id) {\n            (function callFetchAdministration() {\n                setLoading(true);\n                console.log(match);\n                AdministrationAPI.fetchAdministration(match.params.id)\n                    .then(payload => {\n                        setAdministration(payload.data.data);\n                        setLoading(false);\n                    })\n                    .catch(error => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setLoading(false);\n                    });\n            })();\n        }\n    }, [match, currentSelectedContact]);\n\n    return (\n        <Container className={'content-section'}>\n            {isLoading ? (\n                <LoadingView />\n            ) : (\n                <>\n                    <Row>\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\n                            <Link to={`/over-ons`}>\n                                <Button className={'w-button'} size=\"sm\">\n                                    Over ons\n                                </Button>\n                            </Link>\n                        </ButtonGroup>\n                    </Row>\n                    <Row className={'justify-content-center align-content-center flex-wrap'}>\n                        <Col xs={12} lg={6} className={'mb-3'}>\n                            <Card>\n                                <Card.Header className={'card-header_title'}>\n                                    Informatie over {administration.name}\n                                </Card.Header>\n                                <Card.Body>\n                                    <Table responsive>\n                                        <tbody>\n                                            <tr>\n                                                <td>\n                                                    <strong>Naam</strong>\n                                                </td>\n                                                <td>{administration.name}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>Adres</strong>\n                                                </td>\n                                                <td>{administration.address}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>Postcode / Plaats</strong>\n                                                </td>\n                                                <td>\n                                                    {administration.postalCode} {administration.city}\n                                                </td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>Kvk</strong>\n                                                </td>\n                                                <td>{administration.kvkNumber}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>Website</strong>\n                                                </td>\n                                                <td>{administration.website}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>IBAN</strong>\n                                                </td>\n                                                <td>{administration.iBAN}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>IBAN t.n.v.</strong>\n                                                </td>\n                                                <td>{administration.ibanAttn}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>BTW nummer</strong>\n                                                </td>\n                                                <td>{administration.btwNumber}</td>\n                                            </tr>\n                                        </tbody>\n                                    </Table>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default AboutUsAdministration;\n","import axiosInstance from '../default-setup/AxiosInstance';\n\nexport default {\n    fetchByCode: code => {\n        const requestUrl = `/jory/participant-mutation`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    flt: {\n                        f: 'code',\n                        d: code,\n                    },\n                    fld: ['econobisPaymentLink', 'isPaidByMollie'],\n                    rlt: {\n                        participation: {\n                            rlt: {\n                                project: {\n                                    fld: ['name', 'textRegistrationFinished'],\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    },\n};\n","import React, {useEffect, useState} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ParticipantMutationAPI from '../../../api/participant-mutation/ParticipantMutationAPI';\nimport LoadingView from '../../../components/general/LoadingView';\nimport {PortalUserConsumer} from '../../../context/PortalUserContext';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport {Link} from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\n\nfunction ProjectMollieRedirect({match, currentSelectedContact}) {\n    const [participantMutation, setParticipantMutation] = useState({});\n    const [isLoading, setLoading] = useState(true);\n\n    const handlePaymentRetry = () => {\n        window.location.href = participantMutation.econobisPaymentLink;\n    }\n\n    useEffect(() => {\n        (function fetchContactAndProject() {\n            setLoading(true);\n\n            axios\n                .all([\n                    ParticipantMutationAPI.fetchByCode(match.params.code),\n                ])\n                .then(\n                    axios.spread((payloadParticipantMutation) => {\n                        if(payloadParticipantMutation.data.data.length !== 1){\n                            alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                            setLoading(false);\n                            return;\n                        }\n\n                        setParticipantMutation(payloadParticipantMutation.data.data[0]);\n                        setLoading(false);\n                    })\n                )\n                .catch(error => {\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                    setLoading(false);\n                });\n        })();\n    }, [match]);\n\n    return (\n        <Container className={'content-section'}>\n            {isLoading ? (\n                <LoadingView/>\n            ) : (\n                <>\n                    <Row className={'mb-4'}>\n                        <Col>\n                            <h1 className=\"content-heading\">\n                                {\n                                    participantMutation.isPaidByMollie ? (\n                                        <>Ingeschreven voor\n                                            project <strong>{participantMutation.participation.project.name}</strong></>\n                                    ) : (\n                                        <>Betaling voor\n                                            project <strong>{participantMutation.participation.project.name}</strong> nog\n                                            niet gelukt.</>\n                                    )\n                                }\n\n                            </h1>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={10}>\n                            {participantMutation.isPaidByMollie ? (\n                                <>\n                                    <p>\n                                        { participantMutation.participation.project.textRegistrationFinished.split('\\n').map((item, key) => {\n                                            return <span key={key}>{item}<br/></span>\n                                        }) }\n                                    </p>\n                                </>\n                            ) : (\n                                <>\n                                    <p>\n                                        Uw inschrijving kon nog niet worden afgerond doordat de betaling niet is gelukt,\n                                        gebruik onderstaande betaal button om de betaling alsnog uit te voeren.</p>\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={10}>\n                            <ButtonGroup className=\"float-right\">\n                                <Link to={`/inschrijvingen-projecten`}>\n                                    <Button className={'w-button'} size=\"sm\">\n                                        Naar mijn huidige deelnames\n                                    </Button>\n                                </Link>\n                                {!participantMutation.isPaidByMollie && (\n                                    <Button className={'w-button'} size=\"sm\" onClick={handlePaymentRetry}>\n                                        Betalen\n                                    </Button>\n                                )}\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default function ProjectMollieRedirectWithContext(props) {\n    return (\n        <PortalUserConsumer>\n            {({currentSelectedContact}) => (\n                <ProjectMollieRedirect {...props} currentSelectedContact={currentSelectedContact}/>\n            )}\n        </PortalUserConsumer>\n    );\n}\n","import React from 'react';\nimport { HashRouter as Router, Switch } from 'react-router-dom';\nimport ProtectedRoute from './route/ProtectedRoute';\nimport PublicRoute from './route/PublicRoute';\nimport { AuthProvider } from './context/AuthContext';\nimport { PortalUserProvider } from './context/PortalUserContext';\nimport Login from './container/authorization/login';\nimport Register from './container/authorization/register';\nimport Forgot from './container/authorization/forgot';\nimport Reset from './container/authorization/reset';\nimport ContactDetails from './container/contact-details';\nimport MyAreasOfInterest from './container/my-areas-of-interest';\nimport RegisterProject from './container/register';\nimport ProjectList from './container/project/list';\nimport ProjectDetails from './container/project/details';\nimport RegistrationList from './container/registration/list';\nimport NewAccount from './container/authorization/new-account';\nimport NewAccountSuccess from './container/authorization/new-account/NewAccountSuccess';\nimport ChangeAccount from './container/authorization/change-account';\nimport AboutUs from './container/about-us/list';\nimport RegistrationDetails from './container/registration/details';\nimport FinancialOverviewDocuments from './container/financial-overview-documents/list';\nimport { ThemeSettingsProvider } from './context/ThemeSettingsContext';\nimport AboutUsAdministration from './container/about-us/details';\nimport ProjectMollieRedirectWithContext from \"./container/register/mollie-redirect\";\n\nfunction App() {\n    return (\n        <Router>\n            <AuthProvider>\n                <PortalUserProvider>\n                    <ThemeSettingsProvider>\n                        <Switch>\n                            <ProtectedRoute exact path=\"/\" component={ContactDetails} />\n                            <ProtectedRoute path=\"/gegevens\" component={ContactDetails} />\n                            <ProtectedRoute path=\"/mijn-interessegebieden\" component={MyAreasOfInterest} />\n                            <ProtectedRoute path=\"/inschrijven/mollie-resultaat/:code\" component={ProjectMollieRedirectWithContext} />\n                            <ProtectedRoute path=\"/inschrijven/:id\" component={RegisterProject} />\n                            <ProtectedRoute path=\"/inschrijven-projecten\" component={ProjectList} />\n                            <ProtectedRoute path=\"/inschrijvingen-projecten\" component={RegistrationList} />\n                            <ProtectedRoute path=\"/project-deelname/:id\" component={RegistrationDetails} />\n                            <ProtectedRoute path=\"/project/:id\" component={ProjectDetails} />\n                            <ProtectedRoute path=\"/waardestaat-documenten\" component={FinancialOverviewDocuments} />\n                            <ProtectedRoute path=\"/wijzig-inloggegevens\" component={ChangeAccount} />\n                            <ProtectedRoute path=\"/over-ons\" component={AboutUs} />\n                            <ProtectedRoute path=\"/over-ons-organisatie/:id\" component={AboutUsAdministration} />\n                            <PublicRoute path=\"/login\" component={Login} />\n                            <PublicRoute path=\"/activeer-registratie/:registrationCode/:email\" component={Register} />\n                            <PublicRoute path=\"/wachtwoord-vergeten\" component={Forgot} />\n                            <PublicRoute path=\"/wachtwoord-wijzigen/:token/:email\" component={Reset} />\n                            <PublicRoute path=\"/nieuw-account\" component={NewAccount} />\n                            <PublicRoute path=\"/nieuw-account-succes\" component={NewAccountSuccess} />\n                        </Switch>\n                    </ThemeSettingsProvider>\n                </PortalUserProvider>\n            </AuthProvider>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/normalize.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-day-picker/lib/style.css';\nimport './css/webflow.css';\nimport './css/econobis.webflow.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'moment/locale/nl';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Server data is set and can now removed\nvar serverDataScript = document.getElementById('server-data');\nserverDataScript.remove();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}