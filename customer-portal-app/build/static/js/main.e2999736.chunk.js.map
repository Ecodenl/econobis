{"version":3,"sources":["context/AuthContext.js","context/PortalUserContext.js","components/layout/Header.js","api/default-setup/AxiosInstance.js","api/portal-user/PortalUserAPI.js","route/ProtectedRoute.js","route/PublicRoute.js","components/form/InputText.js","components/button/ButtonText.js","container/authorization/login/Form.js","api/auth/AuthAPI.js","api/portal-settings/PortalSettingsAPI.js","container/authorization/login/index.js","container/authorization/register/Form.js","container/authorization/register/index.js","container/authorization/forgot/Form.js","container/authorization/forgot/index.js","container/authorization/reset/Form.js","container/authorization/reset/index.js","api/project/ProjectAPI.js","api/contact/ContactAPI.js","helpers/RebaseContact.js","components/general/LoadingView.js","components/general/TextBlock.js","container/contact-details/default-form-personal/View.js","components/form/Select.js","data/Countries.js","data/EnergySuppliers.js","data/Titles.js","data/LastNamePrefixes.js","components/form/InputDate.js","container/contact-details/default-form-personal/Edit.js","helpers/ValidationSchemaPersonal.js","container/contact-details/Personal.js","container/contact-details/default-form-organisation/View.js","container/contact-details/default-form-organisation/Edit.js","helpers/ValidationSchemaOrganisation.js","container/contact-details/Organisation.js","container/contact-details/index.js","container/my-areas-of-interest/Form.js","container/my-areas-of-interest/index.js","helpers/MoneyPresenter.js","container/register/steps/StepOneLoan.js","container/register/steps/StepOneObligation.js","container/register/steps/StepOneCapital.js","container/register/steps/StepOnePcr.js","container/register/steps/StepTwo.js","container/register/steps/StepThree.js","components/general/ViewHtmlAsText.js","api/participant-project/ParticipantProjectAPI.js","container/register/steps/StepFour.js","container/register/steps/StepFive.js","container/register/steps/index.js","container/register/MasterForm.js","container/register/index.js","container/project/list/index.js","container/project/details/LoanDetails.js","container/project/details/ObligationDetails.js","container/project/details/CapitalDetails.js","container/project/details/PcrDetails.js","container/project/details/index.js","container/registration/list/index.js","container/authorization/new-account/NewAccountFormPersonal.js","container/authorization/new-account/NewAccountFormOrganisation.js","container/authorization/new-account/index.js","container/authorization/new-account/NewAccountSuccess.js","container/authorization/change-account/Email.js","container/authorization/change-account/Password.js","container/authorization/change-account/index.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","localStorageToken","AuthProvider","props","useState","window","localStorage","getItem","checkIfAuth","isAuth","setAuth","Provider","value","login","payload","cbRedirect","token","access_token","removeItem","setItem","moment","format","logout","children","AuthConsumer","Consumer","PortalUserContext","user","setInitialUserData","PortalUserProvider","setUser","currentSelectedContact","setCurrentContact","selectedContactId","id","occupationUser","occupations","find","occupation","primaryContact","organisationUser","typeId","primary","switchCurrentContact","contact","resetCurrentUserToDefault","updateNameSelectedContact","fullName","updatedOccupations","map","occupationContact","PortalUserConsumer","withRouter","location","history","menuOpen","updateStateMenu","closeMenu","redirect","to","push","ref","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideAlerter","useRef","className","ReactHtmlParser","search","replace","firstName","slice","lastName","formatProfilePicName","Container","Row","Col","xs","Image","src","onClick","Dropdown","alignRight","Toggle","Menu","Header","Item","disabled","Divider","active","occupationForPortal","key","right","width","isOpen","onStateChange","state","handleStateChange","customBurgerIcon","Fragment","pathname","BASE_URL","__SERVER_DATA__","base_url","axiosInstance","axios","create","baseURL","interceptors","request","use","config","lastActivity","add","hash","setTimeout","reload","checkTokenExpiration","AUTH_TOKEN","headers","Authorization","error","Promise","reject","get","params","jory","fld","rlt","values","post","ProtectedRoute","Component","component","rest","PortalUserAPI","then","data","catch","alert","render","ProtectedRouteWithContext","PublicRoute","InputText","field","type","readOnly","placeholder","showErrorMessage","errors","touched","classNameErrorMessage","customOnChange","onChange","name","Boolean","defaultProps","ButtonText","buttonClassName","buttonText","onClickAction","loading","title","loadingSpinnerColor","Button","size","color","validationSchema","Yup","shape","username","email","required","password","LoginForm","handleSubmit","initialValues","enableReinitialize","onSubmit","actions","setSubmitting","isSubmitting","AUTH_KEY","client_id","client_secret","client_key","grant_type","requestUrl","defaults","common","loginCredentials","keys","isLoading","setIsLoading","showError","toggleError","redirectToReferrer","toggleRedirect","from","portalActive","setPortalActive","showNewAtCooperativeLink","setShowNewAtCooperativeLink","newAtCooperativeLinkText","setNewAtCooperativeLinkText","AuthAPI","PortalSettingsAPI","fluid","sm","md","lg","xl","alt","Alert","variant","href","min","matches","passwordConfirmation","oneOf","RegisterForm","Register","match","showSuccessMessage","toggleSuccessMessage","registrationCode","decodeURIComponent","password_confirmation","RegisterWithContext","ForgotForm","Forgot","ResetForm","Reset","ResetWithContext","flt","and","f","o","d","projectType","person","organisation","emailAddresses","phoneNumbers","addresses","country","primaryContactEnergySupplier","energySupplier","participations","project","registerValues","contactId","projectId","contactData","emptyAddress","street","number","addition","postalCode","city","countryId","primaryAddress","visitAddress","postalAddress","invoiceAddress","address","emptyEmail","emailCorrespondence","emailAddress","emailInvoice","emptyPhoneNumber","phoneNumberPrimary","phoneNumber","phoneNumberTwo","filter","energySupplierId","esNumber","eanElectricity","memberSince","eanGas","Loading","style","height","TextBlock","showPlaceholder","undefined","DefaultContactPersonalView","portalSettings","initialContact","iban","ibanAttn","didAgreeAvg","dateDidAgreeAvg","FormLabel","initials","lastNamePrefix","dateOfBirth","checked","htmlFor","Select","options","optionLabel","emptyOption","option","InputDate","onChangeAction","formattedDate","onDayChange","date","formatDate","parseDate","dayPickerProps","showWeekNumbers","locale","firstDayOfWeek","localeUtils","MomentLocaleUtils","inputProps","autoComplete","DefaultContactPersonalEdit","projectTypeCodeRef","setFieldValue","Titles","LastNamePrefixes","isParticipant","isParticipantPcrProject","Countries","e","toUpperCase","EnergySuppliers","validationSchemaBasic","test","trim","nullable","Number","isInteger","this","parent","validationSchemaAdditional","titleId","typeError","ibantools","validationSchemaPcrAdditional","ContactDetailsPersonal","handleSubmitContactValues","editButtonGroup","editForm","setEditForm","ValidationSchemaPersonal","concat","ButtonGroup","aria-label","isEmpty","DefaultContactOrganisationView","primaryOccupations","chamberOfCommerceNumber","vatNumber","website","DefaultContactOrganisationEdit","ContactDetailsOrganisation","ValidationSchemaOrganisation","ContactDetails","setContact","setPortalSettings","setLoading","prevCurrentSelectedContact","usePrevious","callFetchContact","ContactAPI","rebaseContact","switchToView","updatedContact","setState","hasError","LoadingView","ContactDetailsWithContext","MyAreasOfInterestForm","console","log","arrayHelpers","myAreasOfInterest","myAreaOfInterest","index","participation","generalOptions","generalOption","MyAreasOfInterest","amount","parseFloat","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","StepOneLoan","next","initialRegisterValues","handleSubmitRegisterValues","amountOptioned","minAmountLoan","maxAmountLoan","Label","MoneyPresenter","StepOneObligation","participationsOptioned","minParticipations","max","maxParticipations","positive","participationWorth","StepOneCapital","StepOnePcr","pcrYearlyPowerKwhConsumption","pcrPostalCode","postalcodeLink","includes","substring","pcrNumberOfSolarPanels","pcrInputGeneratedNumberOfKwh","PCR_POWER_KWH_CONSUMPTION_PERCENTAGE","PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL","calculateEstimatedGeneratedNumberOfKwh","calculateGeneratedNumberOfKwh","calculatePowerKwhConsumption","powerKwhConsumption","pcrEstimatedGeneratedNumberOfKwh","Math","ceil","pcrAdviseMaxNumberOfParticipations","calculateAdviseMaxNumberOfParticipations","pcrHasSolarPanels","pcrEstimatedRevenueOk","StepTwo","previous","typeContact","validationSchemaPcrPersonal","validationSchemaPcrOrganisation","codeRef","StepThree","contactProjectData","didAcceptAgreement","didUnderstandInfo","linkAgreeTerms","linkUnderstandInfo","showQuestionAboutMembership","belongsToMembershipGroup","textIsMemberMerged","textIsNoMemberMerged","textBecomeMemberMerged","textBecomeNoMemberMerged","ViewHtmlAsText","dangerouslySetInnerHTML","__html","StepFour","setSucces","contactDocument","setContactDocument","didAgreeRegistration","ParticipantProjectAPI","StepFive","Steps","currentStep","MasterForm","setStep","RegisterProject","initialPcrValues","choiceMembership","setRegisterValues","setProject","isSucces","isRegistered","setRegistered","setContactProjectData","formatFullName","all","ProjectAPI","spread","payloadProject","payloadContact","payloadContactProjectData","contactProjecten","item","nextStep","RegisterProjectWithContext","ProjectList","contactProjectsArray","setContactProjectsArray","projectData","setProjectData","length","Table","responsive","dateStartRegistrations","dateEndRegistrations","ProjectListWithContext","LoanDetails","amountOfLoanNeeded","description","ObligationDetails","totalParticipations","CapitalDetails","PcrDetails","ProjectDetails","renderDetails","RegistrationList","dateEnd","amountInteressed","amountGranted","amountDefinitive","participationsInteressed","participationsGranted","participationsDefinitive","RegistrationListWithContext","personTitleId","personFirstName","personLastName","NewAccountFormPersonal","organisationName","NewAccountFormOrganisation","NewAccount","executeRecaptcha","useGoogleReCaptcha","contactType","setContactType","errorMessage","setErrorMessage","a","reCaptchaToken","response","status","ButtonToolbar","toggle","block","NewAccountWithProvider","reCaptchaKey","process","language","NewAccountSuccess","close","ChangeAccountEmail","portalUserEmail","setPortalUserEmail","changePrimaryEmailAddress","resetForm","handleSubmitChangeEmail","ChangeAccountPassword","handleSubmitChangePassword","ChangeAccount","App","exact","path","Login","hostname","ReactDOM","getElementById","remove","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2999736.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst AuthProvider = function(props) {\r\n    const [isAuth, setAuth] = useState(checkIfAuth());\r\n\r\n    function login(payload, cbRedirect) {\r\n        const token = payload.access_token;\r\n        window.localStorage.removeItem(localStorageCurrentSelectedContact);\r\n        window.localStorage.setItem(localStorageToken, token);\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n        setAuth(true);\r\n        cbRedirect();\r\n    }\r\n\r\n    function logout() {\r\n        window.localStorage.removeItem(localStorageToken);\r\n        window.localStorage.removeItem(localStorageLastActivity);\r\n        setAuth(false);\r\n    }\r\n\r\n    function checkIfAuth() {\r\n        const token = getToken();\r\n        if (!token) {\r\n            // Redirect to login\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getToken() {\r\n        return window.localStorage.getItem(localStorageToken);\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                isAuth: isAuth,\r\n                login: login,\r\n                logout: logout,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nconst AuthConsumer = AuthContext.Consumer;\r\n\r\nexport { AuthProvider, AuthConsumer };\r\n","import React, { createContext, useState } from 'react';\r\n\r\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\r\n\r\nconst PortalUserContext = createContext({\r\n    user: {},\r\n    setInitialUserData: () => {},\r\n});\r\n\r\nconst PortalUserProvider = function(props) {\r\n    const [user, setUser] = useState({});\r\n    const [currentSelectedContact, setCurrentContact] = useState({});\r\n\r\n    function setInitialUserData(user) {\r\n        setUser(user);\r\n\r\n        const selectedContactId = window.localStorage.getItem(localStorageCurrentSelectedContact);\r\n\r\n        // When there is already a selected contact id then lookup the contact\r\n        // Selected contact could be the user or one of the occupations\r\n        if (selectedContactId) {\r\n            if (user.id == selectedContactId) {\r\n                setCurrentContact(user);\r\n            } else {\r\n                const occupationUser = user.occupations.find(\r\n                    occupation => occupation.primaryContact.id == selectedContactId\r\n                );\r\n\r\n                setCurrentContact(occupationUser.primaryContact);\r\n            }\r\n        } else {\r\n            // If there is no selected contact then set default the login user as selected contact.\r\n            // Except if the user has an organisation as occupation that is primary\r\n            const organisationUser = user.occupations.find(\r\n                occupation => occupation.primaryContact.typeId === 'organisation' &&\r\n                    occupation.primary\r\n            );\r\n\r\n            if (organisationUser) {\r\n                setCurrentContact(organisationUser.primaryContact);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, organisationUser.primaryContact.id);\r\n            } else {\r\n                setCurrentContact(user);\r\n                window.localStorage.setItem(localStorageCurrentSelectedContact, user.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    function switchCurrentContact(contact) {\r\n        setCurrentContact(contact);\r\n        window.localStorage.setItem(localStorageCurrentSelectedContact, contact.id);\r\n    }\r\n\r\n    function resetCurrentUserToDefault() {\r\n        setUser({});\r\n        setCurrentContact({});\r\n    }\r\n\r\n    function updateNameSelectedContact(fullName) {\r\n        setCurrentContact({ ...currentSelectedContact, fullName });\r\n\r\n        if (user.id === currentSelectedContact.id) {\r\n            user.fullName = fullName;\r\n        }\r\n\r\n        const updatedOccupations = user.occupations.map(occupationContact => {\r\n            if (occupationContact.primaryContact.id === currentSelectedContact.id) {\r\n                occupationContact.primaryContact.fullName = fullName;\r\n            }\r\n            return occupationContact;\r\n        });\r\n\r\n        setUser({ ...user, occupations: updatedOccupations });\r\n    }\r\n\r\n    return (\r\n        <PortalUserContext.Provider\r\n            value={{\r\n                user: user,\r\n                setInitialUserData,\r\n                currentSelectedContact,\r\n                switchCurrentContact,\r\n                resetCurrentUserToDefault,\r\n                updateNameSelectedContact,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </PortalUserContext.Provider>\r\n    );\r\n};\r\n\r\nconst PortalUserConsumer = PortalUserContext.Consumer;\r\n\r\nexport { PortalUserProvider, PortalUserConsumer };\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { AuthConsumer } from '../../context/AuthContext';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { FaUser } from 'react-icons/fa';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nfunction Header({ location, history }) {\r\n    const [menuOpen, updateStateMenu] = useState(false);\r\n\r\n    // This keeps your state in sync with the opening/closing of the menu\r\n    // via the default means, e.g. clicking the X, pressing the ESC key etc.\r\n    function handleStateChange(state) {\r\n        updateStateMenu(state.isOpen);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function openMenu() {\r\n        updateStateMenu(true);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function closeMenu() {\r\n        updateStateMenu(false);\r\n    }\r\n\r\n    // This can be used to toggle the menu, e.g. when using a custom icon\r\n    // Tip: You probably want to hide either/both default icons if using a custom icon\r\n    // See https://github.com/negomi/react-burger-menu#custom-icons\r\n    function toggleMenu() {\r\n        updateStateMenu(!menuOpen);\r\n    }\r\n\r\n    function formatProfilePicName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName.replace(/\\s(?=\\S*$)/, '<br>');\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                let lastName = fullName.slice(0, fullName.search(','));\r\n                lastName = lastName.replace(/\\s(?=\\S*$)/, '<br>');\r\n                return firstName + '<br>' + lastName;\r\n            }\r\n        } else {\r\n            return '?';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hook that alerts clicks outside of the passed ref\r\n     */\r\n    function useOutsideAlerter(ref) {\r\n        /**\r\n         * Alert if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                updateStateMenu(false);\r\n            }\r\n        }\r\n\r\n        useEffect(() => {\r\n            // Bind the event listener\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n            return () => {\r\n                // Unbind the event listener on clean up\r\n                document.removeEventListener('mousedown', handleClickOutside);\r\n            };\r\n        });\r\n    }\r\n\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef);\r\n\r\n    function redirect(to) {\r\n        history.push(`/${to}`);\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"header-portal\">\r\n                <div className=\"profile-pic\">\r\n                    <PortalUserConsumer>\r\n                        {({ currentSelectedContact }) => (\r\n                            <p className=\"profile-title\">\r\n                                {ReactHtmlParser(formatProfilePicName(currentSelectedContact.fullName))}\r\n                            </p>\r\n                        )}\r\n                    </PortalUserConsumer>\r\n                </div>\r\n\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs={6}>\r\n                            <div className=\"header-logo\">\r\n                                <Image src=\"images/logo.png\" />\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                {/* Hambuger menu */}\r\n                                <div className=\"bm-burger-button\" onClick={openMenu}>\r\n                                    <span>\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-1\" />\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-2\" />\r\n                                        <span className=\"bm-burger-bars bm-burger-bar-3\" />\r\n                                    </span>\r\n                                </div>\r\n                                {/* User switch menu */}\r\n                                <AuthConsumer>\r\n                                    {({ logout }) => {\r\n                                        return (\r\n                                            <PortalUserConsumer>\r\n                                                {({\r\n                                                    user,\r\n                                                    currentSelectedContact,\r\n                                                    switchCurrentContact,\r\n                                                    resetCurrentUserToDefault,\r\n                                                }) => {\r\n                                                    return (\r\n                                                        <Dropdown alignRight>\r\n                                                            <Dropdown.Toggle>\r\n                                                                <FaUser />\r\n                                                            </Dropdown.Toggle>\r\n                                                            <Dropdown.Menu>\r\n                                                                <Dropdown.Header>Ingelogd als</Dropdown.Header>\r\n                                                                <Dropdown.Item disabled>{user.fullName}</Dropdown.Item>\r\n                                                                <Dropdown.Item>\r\n                                                                    <Link\r\n                                                                        to={'/wijzig-inloggegevens'}\r\n                                                                        className={'dropdown-link'}\r\n                                                                    >\r\n                                                                        Wijzig inloggegevens\r\n                                                                    </Link>\r\n                                                                </Dropdown.Item>\r\n                                                                {/*<Dropdown.Item*/}\r\n                                                                {/*href={'#/wijzig-inloggegevens'}*/}\r\n                                                                {/*className={'dropdown-link'}*/}\r\n                                                                {/*>*/}\r\n                                                                {/*Wijzig inloggegevens*/}\r\n                                                                {/*</Dropdown.Item>*/}\r\n                                                                <Dropdown.Divider />\r\n                                                                <Dropdown.Header>Beheren van</Dropdown.Header>\r\n                                                                <Dropdown.Item\r\n                                                                    onClick={() => {\r\n                                                                        switchCurrentContact(user);\r\n                                                                        redirect('gegevens');\r\n                                                                    }}\r\n                                                                    active={\r\n                                                                        currentSelectedContact.id === user.id\r\n                                                                            ? true\r\n                                                                            : false\r\n                                                                    }\r\n                                                                >\r\n                                                                    {user.fullName}\r\n                                                                </Dropdown.Item>\r\n                                                                {user.occupations\r\n                                                                    ? user.occupations.map(occupationContact =>\r\n                                                                          (occupationContact.primaryContact.typeId ===\r\n                                                                              'organisation' &&\r\n                                                                              occupationContact.primary) ||\r\n                                                                          (occupationContact.primaryContact.typeId ===\r\n                                                                              'person' &&\r\n                                                                              occupationContact.occupation\r\n                                                                                  .occupationForPortal) ? (\r\n                                                                              <Dropdown.Item\r\n                                                                                  key={occupationContact.id}\r\n                                                                                  onClick={() => {\r\n                                                                                      switchCurrentContact(\r\n                                                                                          occupationContact.primaryContact\r\n                                                                                      );\r\n                                                                                      redirect('gegevens');\r\n                                                                                  }}\r\n                                                                                  active={\r\n                                                                                      currentSelectedContact.id ===\r\n                                                                                      occupationContact.primaryContact\r\n                                                                                          .id\r\n                                                                                          ? true\r\n                                                                                          : false\r\n                                                                                  }\r\n                                                                              >\r\n                                                                                  {\r\n                                                                                      occupationContact.primaryContact\r\n                                                                                          .fullName\r\n                                                                                  }\r\n                                                                              </Dropdown.Item>\r\n                                                                          ) : null\r\n                                                                      )\r\n                                                                    : null}\r\n                                                                <Dropdown.Divider />\r\n                                                                <Dropdown.Item\r\n                                                                    onClick={() => {\r\n                                                                        logout();\r\n                                                                        resetCurrentUserToDefault();\r\n                                                                    }}\r\n                                                                >\r\n                                                                    Log uit\r\n                                                                </Dropdown.Item>\r\n                                                            </Dropdown.Menu>\r\n                                                        </Dropdown>\r\n                                                    );\r\n                                                }}\r\n                                            </PortalUserConsumer>\r\n                                        );\r\n                                    }}\r\n                                </AuthConsumer>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            {/* Sidebar menu */}\r\n            <Menu\r\n                right\r\n                width={'300px'}\r\n                // noOverlay\r\n                isOpen={menuOpen}\r\n                onStateChange={state => handleStateChange(state)}\r\n                customBurgerIcon={false}\r\n            >\r\n                <div className={'sidebar-menu'}>\r\n                    <React.Fragment>\r\n                        <h6 className=\"heading in-menu\">MENU</h6>\r\n                        <Link\r\n                            to={'/inschrijvingen-projecten'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/inschrijvingen-projecten' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Huidige deelnames\r\n                        </Link>\r\n                        <Link\r\n                            to={'/gegevens'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/gegevens' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Gegevens\r\n                        </Link>\r\n                        {/* later */}\r\n                        {/*<Link*/}\r\n                        {/*to={'/deelname-projecten'}*/}\r\n                        {/*className={`nav-link w-nav-link w--nav-link-open ${*/}\r\n                        {/*location.pathname === '/' ? 'w--current' : ''*/}\r\n                        {/*}`}*/}\r\n                        {/*onClick={closeMenu}*/}\r\n                        {/*>*/}\r\n                        {/*Deelnames*/}\r\n                        {/*</Link>*/}\r\n                        <Link\r\n                            to={'/inschrijven-projecten'}\r\n                            className={`nav-link w-nav-link w--nav-link-open ${\r\n                                location.pathname === '/inschrijven-projecten' ? 'w--current' : ''\r\n                            }`}\r\n                            onClick={closeMenu}\r\n                        >\r\n                            Inschrijven projecten\r\n                        </Link>\r\n                    </React.Fragment>\r\n                </div>\r\n            </Menu>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\nconst localStorageToken = '__customer-portal-econobis-token__';\r\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `${BASE_URL}`,\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function(config) {\r\n        // First check if token is expired or not\r\n        checkTokenExpiration();\r\n        // Do something before request is sent\r\n        const AUTH_TOKEN = 'Bearer ' + localStorage.getItem(localStorageToken);\r\n        config.headers.Authorization = AUTH_TOKEN;\r\n        return config;\r\n    },\r\n    function(error) {\r\n        // Do something with request error\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Check token expiration and redirect if token is expired\r\nfunction checkTokenExpiration() {\r\n    const lastActivity = moment(localStorage.getItem(localStorageLastActivity));\r\n\r\n    if (\r\n        !localStorage.getItem(localStorageLastActivity) ||\r\n        lastActivity.add('30', 'minutes').format() < moment().format()\r\n    ) {\r\n        if (window.location.hash !== '#/login' && window.location.hash !== '#/loguit') {\r\n            setTimeout(() => {\r\n                localStorage.removeItem(localStorageToken);\r\n                localStorage.removeItem(localStorageLastActivity);\r\n                window.location.reload();\r\n            }, 100);\r\n        }\r\n    } else {\r\n        localStorage.setItem(localStorageLastActivity, moment().format());\r\n    }\r\n}\r\n\r\nexport default axiosInstance;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchPortalUserDetails: function() {\r\n        const requestUrl = `/me`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                    ],\r\n                    rlt: {\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: { fld: ['id', 'fullName', 'typeId'] },\r\n                                contact: { fld: ['id', 'fullName'] },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchPortalUserEmail: function() {\r\n        return axiosInstance.get(`/portal-user-email`);\r\n    },\r\n\r\n    changeEmail: values => {\r\n        const requestUrl = `/portal-user/change-email`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n\r\n    changePassword: values => {\r\n        const requestUrl = `/portal-user/change-password`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { AuthConsumer } from '../context/AuthContext';\r\nimport Header from '../components/layout/Header';\r\nimport PortalUserAPI from '../api/portal-user/PortalUserAPI';\r\nimport { PortalUserConsumer } from '../context/PortalUserContext';\r\n\r\nconst ProtectedRoute = ({ component: Component, setInitialUserData, isAuth, ...rest }) => {\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            (function callFetchPortalUserDetails() {\r\n                PortalUserAPI.fetchPortalUserDetails()\r\n                    .then(payload => {\r\n                        setInitialUserData(payload.data.data);\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    });\r\n            })();\r\n        }\r\n    }, [isAuth]);\r\n\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <div className=\"body-2\" id=\"body-2\">\r\n                    <Header />\r\n                    <Route render={props => (isAuth ? <Component {...props} /> : <Redirect to=\"/login\" />)} {...rest} />\r\n                </div>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n};\r\n\r\nexport default function ProtectedRouteWithContext(props) {\r\n    return (\r\n        <AuthConsumer>\r\n            {({ isAuth }) => (\r\n                <PortalUserConsumer>\r\n                    {({ setInitialUserData }) => (\r\n                        <ProtectedRoute {...props} setInitialUserData={setInitialUserData} isAuth={isAuth} />\r\n                    )}\r\n                </PortalUserConsumer>\r\n            )}\r\n        </AuthConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => (\r\n    <Route render={props => <Component {...props} />} {...rest} />\r\n);\r\n\r\nexport default PublicRoute;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst InputText = ({\r\n    field,\r\n    type,\r\n    className,\r\n    id,\r\n    readOnly,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n    customOnChange = null,\r\n}) => {\r\n    if (customOnChange) {\r\n        field.onChange = customOnChange;\r\n    }\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <input\r\n                type={type}\r\n                className={`text-input w-input ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                readOnly={readOnly}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputText.defaultProps = {\r\n    type: 'text',\r\n    className: 'content',\r\n    readOnly: false,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputText.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputText;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst ButtonText = ({\r\n    buttonClassName,\r\n    buttonText,\r\n    onClickAction,\r\n    type,\r\n    loading,\r\n    title,\r\n    loadingSpinnerColor,\r\n    disabled,\r\n}) => (\r\n    <Button\r\n        type={type}\r\n        className={`${buttonClassName}`}\r\n        onClick={onClickAction}\r\n        disabled={loading || disabled}\r\n        title={title}\r\n        size=\"sm\"\r\n    >\r\n        {loading ? <ClipLoader color={loadingSpinnerColor} size={17} /> : <span>{buttonText}</span>}\r\n    </Button>\r\n);\r\n\r\nButtonText.defaultProps = {\r\n    buttonClassName: '',\r\n    type: 'button',\r\n    title: '',\r\n    loading: false,\r\n    loadingSpinnerColor: 'white',\r\n    disabled: false,\r\n};\r\n\r\nButtonText.propTypes = {\r\n    buttonClassName: PropTypes.string,\r\n    buttonText: PropTypes.string.isRequired,\r\n    onClickAction: PropTypes.func,\r\n    type: PropTypes.string,\r\n    title: PropTypes.string,\r\n    loading: PropTypes.bool,\r\n    loadingSpinnerColor: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n};\r\n\r\nexport default ButtonText;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    password: Yup.string().required('Verplicht'),\r\n});\r\n\r\nconst LoginForm = function({ handleSubmit, login }) {\r\n    return (\r\n        <Formik\r\n            initialValues={{ username: '', password: '' }}\r\n            enableReinitialize={true}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                handleSubmit(values, actions, login);\r\n            }}\r\n            render={({ isSubmitting, errors, touched }) => {\r\n                return (\r\n                    <Form>\r\n                        <Field\r\n                            name=\"username\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"username\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={''}\r\n                                    placeholder={'Wachtwoord'}\r\n                                    type={'password'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    // showErrorMessage={false}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <ButtonText\r\n                            buttonText={'Log in'}\r\n                            buttonClassName={'authorization-button'}\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                        />\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import axios from 'axios';\r\n\r\nconst AUTH_KEY = {\r\n    client_id: window.__SERVER_DATA__.client_id,\r\n    client_secret: window.__SERVER_DATA__.client_key,\r\n    grant_type: 'password',\r\n};\r\n\r\nconst BASE_URL = window.__SERVER_DATA__.base_url;\r\n\r\nexport default {\r\n    newAccount: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n    newAccountSuccess: payload => {\r\n        const requestUrl = `${BASE_URL}/new-account-success`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    login: loginCredentials => {\r\n        const requestUrl = `${BASE_URL}/oauth/token`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, { ...AUTH_KEY, ...loginCredentials });\r\n    },\r\n\r\n    register: payload => {\r\n        const requestUrl = `${BASE_URL}/register`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n\r\n    forgot: email => {\r\n        const requestUrl = `${BASE_URL}/password/email`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, email);\r\n    },\r\n\r\n    reset: payload => {\r\n        const requestUrl = `${BASE_URL}/password/reset`;\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        return axios.post(requestUrl, payload);\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nconst URL_PORTAL_SETTINGS = `setting`;\r\n\r\nexport default {\r\n    fetchPortalSettings: keys => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/multiple${keys}`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchPortalActive: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/portal-active`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchCooperativeName: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/cooperative-name`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchShowNewAtCooperativeLink: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/show-new-at-cooperative-link`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n    fetchNewAtCooperativeLinkText: () => {\r\n        const requestUrl = `${URL_PORTAL_SETTINGS}/new-at-cooperative-link-text`;\r\n\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport LoginForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport PortalSettingsAPI from '../../../api/portal-settings/PortalSettingsAPI';\r\n\r\nexport default props => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = props.location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    const [portalActive, setPortalActive] = useState(false);\r\n    const [showNewAtCooperativeLink, setShowNewAtCooperativeLink] = useState(false);\r\n    const [newAtCooperativeLinkText, setNewAtCooperativeLinkText] = useState('');\r\n\r\n    useEffect(() => {\r\n        (function callFetchPortalActive() {\r\n            PortalSettingsAPI.fetchPortalActive()\r\n                .then(payload => {\r\n                    setPortalActive(payload.data);\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setIsLoading(false);\r\n                });\r\n        })();\r\n\r\n        (function callFetchShowNewAtCooperativeLink() {\r\n            PortalSettingsAPI.fetchShowNewAtCooperativeLink()\r\n                .then(payload => {\r\n                    setShowNewAtCooperativeLink(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n\r\n        (function callFetchNewAtCooperativeLinkText() {\r\n            PortalSettingsAPI.fetchNewAtCooperativeLinkText()\r\n                .then(payload => {\r\n                    setNewAtCooperativeLinkText(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n\r\n    function handleSubmit(values, actions, login) {\r\n        AuthAPI.login(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                login(payload.data, () => toggleRedirect(true));\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <AuthConsumer>\r\n                    {({ isAuth, login }) => (\r\n                        <Container fluid className=\"authorization-container\">\r\n                            <Row className=\"justify-content-center align-content-center full-height\">\r\n                                <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\r\n                                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n\r\n                                    {!portalActive ? (\r\n                                        <React.Fragment>\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                    Deze applicatie kan op dit moment niet gebruikt worden.\r\n                                                </Alert>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    ) : !isLoading ? (\r\n                                        <React.Fragment>\r\n                                            <LoginForm handleSubmit={handleSubmit} login={login} />\r\n                                            {showError ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                                        Gebruikte logingegevens zijn onjuist!\r\n                                                    </Alert>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                            <Row className=\"justify-content-center\">\r\n                                                <Link to={'/wachtwoord-vergeten'} className=\"authorization-link\">\r\n                                                    Wachtwoord vergeten?\r\n                                                </Link>\r\n                                            </Row>\r\n                                            {showNewAtCooperativeLink ? (\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <a\r\n                                                        href={'/#/nieuw-account'}\r\n                                                        className=\"authorization-link\"\r\n                                                        target=\"_blank\"\r\n                                                    >\r\n                                                        {newAtCooperativeLinkText}\r\n                                                    </a>\r\n                                                </Row>\r\n                                            ) : null}\r\n                                        </React.Fragment>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    )}\r\n                </AuthConsumer>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { GoogleReCaptchaProvider, GoogleReCaptcha } from 'react-google-recaptcha-v3';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst RegisterForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <div className=\"mb-3\">\r\n                    <p className={'authorization-text'}>\r\n                        Stel je wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </div>\r\n                <Row>\r\n                    <Col>\r\n                        <Field\r\n                            name=\"password\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"password\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'authorization-text'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-2\">\r\n                        <Field\r\n                            name=\"passwordConfirmation\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"passwordConfirmation\"\r\n                                    className={field.value ? 'numeric-password' : ''}\r\n                                    placeholder={'Herhaal nieuw wachtwoord'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    classNameErrorMessage={'authorization-text mb-3'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"my-3\">\r\n                        <small className={'authorization-text'}>\r\n                            Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1\r\n                            hoofdletter bevatten.\r\n                        </small>\r\n                    </Col>\r\n                </Row>\r\n                <ButtonText\r\n                    buttonText={'Verzenden'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport RegisterForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst Register = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const registrationCode = decodeURIComponent(match.params.registrationCode);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.register({\r\n            registrationCode,\r\n            email,\r\n            password: values.password,\r\n            password_confirmation: values.passwordConfirmation,\r\n        })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <h3 className={'authorization-text'}>Je account is geactiveerd</h3>\r\n                                    <p className={'authorization-text'}>Je bent nu ingelogd</p>\r\n                                    <ButtonText\r\n                                        buttonText={'Ga verder'}\r\n                                        onClickAction={toggleRedirect}\r\n                                        buttonClassName={'authorization-button'}\r\n                                        size=\"sm\"\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <h3 className={'authorization-text'}>Account activeren</h3>\r\n                                    <RegisterForm handleSubmit={handleSubmit} email={email} />\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function RegisterWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Register {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ForgotForm = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Field\r\n                    name=\"email\"\r\n                    render={({ field }) => (\r\n                        <InputText\r\n                            field={field}\r\n                            id=\"email\"\r\n                            className={''}\r\n                            placeholder={'E-mailadres'}\r\n                            errors={errors}\r\n                            touched={touched}\r\n                            // todo check waarom dit erin stond ?!\r\n                            // showErrorMessage={false}\r\n                        />\r\n                    )}\r\n                />\r\n                <ButtonText\r\n                    buttonText={showSuccessMessage ? 'E-mail is verstuurd!' : 'Verstuur wachtwoord reset link'}\r\n                    buttonClassName={'authorization-button'}\r\n                    size=\"sm\"\r\n                    type={'submit'}\r\n                    loading={isSubmitting}\r\n                    loadingSpinnerColor={'#034b8c'}\r\n                    disabled={showSuccessMessage}\r\n                />\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ForgotForm;\r\n","import React, { useState } from 'react';\r\n\r\nimport ForgotForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Forgot = props => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.forgot(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If forgot API fails show error and then set submitting back to false\r\n                // toggleError(true);\r\n                // If forgot API fails show succesmessage anyway\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                    {showSuccessMessage ? (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Als het e-mailadres bij ons bekend is, dan ontvang je binnen enkele minuten een\r\n                                    e-mail met een persoonlijke link. Via deze link kun je een nieuw wachtwoord\r\n                                    instellen.\r\n                                    <br />\r\n                                    Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van\r\n                                    bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of\r\n                                    je onze mail daar terug vindt.\r\n                                </p>\r\n                            </Row>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Wachtwoord vergeten</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Vul het e-mailadres in waarmee je inlogt en die bij ons bekend is. Je ontvangt van\r\n                                    ons een e-mail waarmee je een nieuw wachtwoord kunt instellen.\r\n                                </p>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <Col xs={12} md={6}>\r\n                                    <ForgotForm handleSubmit={handleSubmit} showSuccessMessage={showSuccessMessage} />\r\n                                    {showError ? (\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            E-mailadres is niet bekend!\r\n                                        </Alert>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    )}\r\n                    <Row className={'justify-content-center '}>\r\n                        <Link to={'/login'} className=\"authorization-link\">\r\n                            Terug naar inloggen\r\n                        </Link>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Forgot;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst ResetForm = ({ handleSubmit, email }) => (\r\n    <Formik\r\n        initialValues={{ password: '', passwordConfirmation: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <Row className=\"justify-content-center\">\r\n                    <p className={'authorization-text'}>\r\n                        Stel een nieuw wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\r\n                    </p>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"password\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"password\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'authorization-text'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <Field\r\n                        name=\"passwordConfirmation\"\r\n                        render={({ field }) => (\r\n                            <InputText\r\n                                field={field}\r\n                                id=\"passwordConfirmation\"\r\n                                className={field.value ? 'numeric-password' : ''}\r\n                                placeholder={'Herhaal nieuw wachtwoord'}\r\n                                errors={errors}\r\n                                touched={touched}\r\n                                classNameErrorMessage={'authorization-text mb-3'}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <small className={'authorization-text'}>\r\n                        Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1 hoofdletter\r\n                        bevatten.\r\n                    </small>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <ButtonText\r\n                        buttonText={'Verzenden'}\r\n                        buttonClassName={'authorization-button'}\r\n                        size=\"sm\"\r\n                        type={'submit'}\r\n                        loading={isSubmitting}\r\n                        loadingSpinnerColor={'#034b8c'}\r\n                    />\r\n                </Row>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default ResetForm;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport ResetForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { AuthConsumer } from '../../../context/AuthContext';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\n\r\nconst Reset = ({ location, match, login }) => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const token = decodeURIComponent(match.params.token);\r\n    const email = decodeURIComponent(match.params.email);\r\n\r\n    const [redirectToReferrer, toggleRedirect] = useState(false);\r\n    let { from } = location.state || { from: { pathname: '/gegevens' } };\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.reset({ token, email, password: values.password, password_confirmation: values.passwordConfirmation })\r\n            .then(payload => {\r\n                toggleSuccessMessage(true);\r\n                AuthAPI.login({ username: email, password: values.password })\r\n                    .then(payload => {\r\n                        toggleError(false);\r\n                        login(payload.data, () => {});\r\n\r\n                        setTimeout(() => {\r\n                            toggleRedirect(true);\r\n                        }, 15000);\r\n                    })\r\n                    .catch(error => {\r\n                        // If login fails show error and then set submitting back to false\r\n                        toggleError(true);\r\n                        actions.setSubmitting(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // If login fails show error and then set submitting back to false\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={from} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirectToReferrer ? (\r\n                redirect()\r\n            ) : (\r\n                <Container fluid className=\"authorization-container\">\r\n                    <Row className=\"justify-content-center align-content-center full-height\">\r\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\r\n                            <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                            {showSuccessMessage ? (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'authorization-text'}>Je wachtwoord is ingesteld</h3>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <p className={'authorization-text'}>Je bent nu ingelogd</p>\r\n                                    </Row>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <ButtonText\r\n                                            buttonText={'Ga verder'}\r\n                                            onClickAction={toggleRedirect}\r\n                                            buttonClassName={'authorization-button'}\r\n                                            size=\"sm\"\r\n                                        />\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <h3 className={'authorization-text'}>Wachtwoord wijzigen</h3>\r\n                                    </Row>\r\n                                    <ResetForm handleSubmit={handleSubmit} email={email} />\r\n                                </>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default function ResetWithContext(props) {\r\n    return <AuthConsumer>{({ login }) => <Reset {...props} login={login} />}</AuthConsumer>;\r\n}\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n    fetchProjects: function() {\r\n        const requestUrl = `/jory/project`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: ['id', 'name', 'dateStartRegistrations', 'dateEndRegistrations'],\r\n                    flt: {\r\n                        and: [\r\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\r\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\r\n                        ],\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchProject: function(id) {\r\n        const requestUrl = `/jory/project/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'name',\r\n                        'description',\r\n                        'dateStartRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'dateEndRegistrations',\r\n                        'minParticipations',\r\n                        'maxParticipations',\r\n                        'totalParticipations',\r\n                        'participationWorth',\r\n                        'amountOfLoanNeeded',\r\n                        'minAmountLoan',\r\n                        'maxAmountLoan',\r\n                        'postalcodeLink',\r\n                        'linkAgreeTerms',\r\n                        'linkUnderstandInfo',\r\n                        'showQuestionAboutMembership',\r\n                    ],\r\n                    rlt: {\r\n                        projectType: { fld: ['id', 'codeRef'] },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\nimport moment from '../project/ProjectAPI';\r\n\r\nexport default {\r\n    fetchContact: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'isParticipant',\r\n                        'isParticipantPcrProject',\r\n                    ],\r\n                    rlt: {\r\n                        person: {\r\n                            fld: [\r\n                                'id',\r\n                                'firstName',\r\n                                'lastName',\r\n                                'initials',\r\n                                'titleId',\r\n                                'lastNamePrefix',\r\n                                'lastNamePrefixId',\r\n                                'dateOfBirth',\r\n                            ],\r\n                            rlt: {\r\n                                title: { fld: ['id', 'name'] },\r\n                            },\r\n                        },\r\n                        organisation: {\r\n                            fld: ['id', 'name', 'website', 'chamberOfCommerceNumber', 'vatNumber'],\r\n                        },\r\n                        emailAddresses: { fld: ['id', 'email', 'primary', 'typeId'] },\r\n                        phoneNumbers: { fld: ['id', 'number', 'primary', 'typeId'] },\r\n                        addresses: {\r\n                            fld: [\r\n                                'id',\r\n                                'street',\r\n                                'number',\r\n                                'addition',\r\n                                'postalCode',\r\n                                'city',\r\n                                'countryId',\r\n                                'primary',\r\n                                'typeId',\r\n                            ],\r\n                            rlt: {\r\n                                country: { fld: ['id', 'name'] },\r\n                            },\r\n                        },\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: {\r\n                                    fld: ['id', 'fullName'],\r\n                                },\r\n                            },\r\n                        },\r\n                        primaryContactEnergySupplier: {\r\n                            fld: [\r\n                                'id',\r\n                                'energySupplierId',\r\n                                'esNumber',\r\n                                'eanElectricity',\r\n                                'eanGas',\r\n                                'memberSince',\r\n                                'isCurrentSupplier',\r\n                            ],\r\n                            rlt: { energySupplier: [] },\r\n                            flt: {\r\n                                f: 'isCurrentSupplier',\r\n                                d: true,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchContactWithParticipants: function(id) {\r\n        const requestUrl = `/jory/contact/${id}`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'typeId',\r\n                        'number',\r\n                        'fullName',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                    ],\r\n                    rlt: {\r\n                        participations: {\r\n                            fld: [\r\n                                'id',\r\n                                'dateRegister',\r\n                                'didAcceptAgreement',\r\n                                'dateDidAcceptAgreement',\r\n                                'didUnderstandInfo',\r\n                                'dateDidUnderstandInfo',\r\n                                'participationsDefinitive',\r\n                                'participationsGranted',\r\n                                'participationsOptioned',\r\n                                'participationsInteressed',\r\n                                'amountDefinitive',\r\n                                'amountGranted',\r\n                                'amountOptioned',\r\n                                'amountInteressed',\r\n                            ],\r\n                            rlt: {\r\n                                project: {\r\n                                    fld: ['id', 'name', 'dateEnd', 'linkUnderstandInfo', 'showQuestionAboutMembership'],\r\n                                    rlt: { projectType: { fld: ['id', 'codeRef'] } },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    updateContact: contact => {\r\n        const requestUrl = `/contact/${contact.id}`;\r\n\r\n        return axiosInstance.post(requestUrl, contact);\r\n    },\r\n\r\n    previewDocument: registerValues => {\r\n        const requestUrl = `/contact/${registerValues.contactId}/${registerValues.projectId}/preview-document`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n\r\n    fetchContactProjectData: function(contactId, projectId) {\r\n        const requestUrl = `/contact/${contactId}/${projectId}/contact-project-data`;\r\n        return axiosInstance.get(requestUrl);\r\n    },\r\n};\r\n","export default function(contactData) {\r\n    const typeContact = contactData.typeId ? contactData.typeId : null;\r\n\r\n    let emptyAddress = { street: '', number: '', addition: '', postalCode: '', city: '', countryId: null };\r\n    let primaryAddress = null;\r\n    let visitAddress = null;\r\n    let postalAddress = null;\r\n    let invoiceAddress = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            // Set primary address\r\n            primaryAddress = contactData.addresses.find(address => address.primary);\r\n            contactData.primaryAddress = primaryAddress ? { ...emptyAddress, ...primaryAddress } : emptyAddress;\r\n            break;\r\n        case 'organisation':\r\n            // Set visit, postal, invoice addresses\r\n            visitAddress = contactData.addresses.find(address => address.typeId === 'visit');\r\n            contactData.visitAddress = visitAddress ? { ...emptyAddress, ...visitAddress } : emptyAddress;\r\n            postalAddress = contactData.addresses.find(address => address.typeId === 'postal');\r\n            contactData.postalAddress = postalAddress ? { ...emptyAddress, ...postalAddress } : emptyAddress;\r\n            invoiceAddress = contactData.addresses.find(address => address.typeId === 'invoice');\r\n            contactData.invoiceAddress = invoiceAddress ? { ...emptyAddress, ...invoiceAddress } : emptyAddress;\r\n            break;\r\n    }\r\n\r\n    // Set correspondence email address\r\n    let emptyEmail = { email: '' };\r\n    const emailCorrespondence = contactData.emailAddresses.find(emailAddress => emailAddress.primary);\r\n    contactData.emailCorrespondence = emailCorrespondence ? { ...emptyEmail, ...emailCorrespondence } : emptyEmail;\r\n\r\n    // Set invoice email address\r\n    const emailInvoice = contactData.emailAddresses.find(\r\n        emailAddress => emailAddress.typeId === 'invoice' && !emailAddress.primary\r\n    );\r\n    contactData.emailInvoice = emailInvoice ? { ...emptyEmail, ...emailInvoice } : emptyEmail;\r\n\r\n    // Set primary phone number\r\n    let emptyPhoneNumber = { number: '' };\r\n    const phoneNumberPrimary = contactData.phoneNumbers.find(phoneNumber => phoneNumber.primary);\r\n    contactData.phoneNumberPrimary = phoneNumberPrimary\r\n        ? { ...emptyPhoneNumber, ...phoneNumberPrimary }\r\n        : emptyPhoneNumber;\r\n\r\n    // Set first phone number which is not primary\r\n    const phoneNumberTwo = contactData.phoneNumbers.filter(phoneNumber => !phoneNumber.primary)[0];\r\n    contactData.phoneNumberTwo = phoneNumberTwo ? { ...emptyPhoneNumber, ...phoneNumberTwo } : emptyPhoneNumber;\r\n\r\n    // Set primary contact energy supplier\r\n    let emptyPrimaryContactEnergySupplier = {\r\n        energySupplierId: null,\r\n        esNumber: '',\r\n        eanElectricity: '',\r\n        memberSince: '',\r\n        eanGas: '',\r\n    };\r\n    if (!contactData.primaryContactEnergySupplier) {\r\n        contactData.primaryContactEnergySupplier = emptyPrimaryContactEnergySupplier;\r\n    }\r\n    return contactData;\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nfunction Loading() {\r\n    return (\r\n        <Row className=\"justify-content-center align-content-center flex-wrap\" style={{ height: '40vh' }}>\r\n            <ClipLoader color={'#3898EC'} size={48} />\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TextBlock = ({ children, className, id, placeholder }) => {\r\n    const showPlaceholder = children === '' || children === null || children === undefined;\r\n\r\n    return (\r\n        <div className={`text-block ${className} ${showPlaceholder ? 'placeholder' : ''}`} id={id}>\r\n            {showPlaceholder ? <div className={'placeholder-message'}>{placeholder}</div> : children}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextBlock.defaultProps = {\r\n    className: 'text-block',\r\n    id: '',\r\n    children: '',\r\n    placeholder: '',\r\n};\r\n\r\nTextBlock.propTypes = {\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    placeholder: PropTypes.string,\r\n};\r\n\r\nexport default TextBlock;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactPersonalView({ portalSettings, initialContact }) {\r\n    const {\r\n        person = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        primaryAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n        primaryContactEnergySupplier,\r\n    } = initialContact;\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Naam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Aanhef'}>\r\n                        {person.title ? person.title.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Initialen'}>\r\n                        {person.initials}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Voornaam'}>\r\n                        {person.firstName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Tussenvoegsel'}>\r\n                        {person.lastNamePrefix}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Achternaam'}>\r\n                        {person.lastName}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Geboortedatum</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6 col-md-4'} placeholder={'Geboortedatum'}>\r\n                        {person.dateOfBirth ? moment(person.dateOfBirth).format('L') : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {primaryAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {primaryAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {primaryAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {primaryAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {primaryAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {primaryAddress.country ? primaryAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? (\r\n                                <em>({dateDidAgreeAvg ? ' ' + moment(dateDidAgreeAvg).format('L') : ''})</em>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {primaryContactEnergySupplier.energySupplier\r\n                            ? primaryContactEnergySupplier.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                {primaryContactEnergySupplier && primaryContactEnergySupplier.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {primaryContactEnergySupplier.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {primaryContactEnergySupplier.memberSince\r\n                                    ? moment(primaryContactEnergySupplier.memberSince).format('L')\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                                {primaryContactEnergySupplier.eanElectricity}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                                {primaryContactEnergySupplier.eanGas}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactPersonalView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { get } from 'lodash';\r\n\r\nconst Select = ({\r\n    field,\r\n    className,\r\n    id,\r\n    options,\r\n    optionLabel,\r\n    emptyOption,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n    disabled,\r\n}) => {\r\n    return (\r\n        <>\r\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\r\n            ) : null}\r\n            <select\r\n                className={`select-field w-select content ${className} ${\r\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\r\n                } `}\r\n                id={id}\r\n                {...field}\r\n                disabled={disabled}\r\n            >\r\n                {emptyOption ? <option value=\"\">{placeholder ? `-- ${placeholder} --` : ''}</option> : null}\r\n                {options.map(option => {\r\n                    return (\r\n                        <option key={option.id} value={option.id}>\r\n                            {option[optionLabel]}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </>\r\n    );\r\n};\r\n\r\nSelect.defaultProps = {\r\n    className: '',\r\n    readOnly: false,\r\n    required: '',\r\n    optionLabel: 'name',\r\n    emptyOption: true,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nSelect.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    options: PropTypes.array.isRequired,\r\n    optionLabel: PropTypes.string,\r\n    emptyOption: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default Select;\r\n","export default [\r\n    { id: 'AU', name: 'Australië' },\r\n    { id: 'BE', name: 'België' },\r\n    { id: 'CA', name: 'Canade' },\r\n    { id: 'DK', name: 'Denemarken' },\r\n    { id: 'DE', name: 'Duitsland' },\r\n    { id: 'FI', name: 'Finland' },\r\n    { id: 'FR', name: 'Frankrijk' },\r\n    { id: 'IE', name: 'Ierland' },\r\n    { id: 'IT', name: 'Italië' },\r\n    { id: 'LU', name: 'Luxemburg' },\r\n    { id: 'NL', name: 'Nederland' },\r\n    { id: 'NO', name: 'Noorwegen' },\r\n    { id: 'AT', name: 'Oostenrijk' },\r\n    { id: 'PL', name: 'Polen' },\r\n    { id: 'PT', name: 'Portugal' },\r\n    { id: 'ES', name: 'Spanje' },\r\n    { id: 'GB', name: 'Verenigd Koninkrijk' },\r\n    { id: 'VS', name: 'Verenigde Staten' },\r\n    { id: 'SE', name: 'Zweden' },\r\n    { id: 'CH', name: 'Zwitserland' },\r\n];\r\n","export default [\r\n    { id: 26, name: 'Agem' },\r\n    { id: 27, name: 'Anode Energie' },\r\n    { id: 24, name: 'Betuwe stroom' },\r\n    { id: 2, name: 'Budget Energie' },\r\n    { id: 28, name: 'De Groene Stroomfabriek' },\r\n    { id: 25, name: 'Delta Energie' },\r\n    { id: 50, name: 'DGB Energie' },\r\n    { id: 46, name: 'Dorpstroom' },\r\n    { id: 3, name: 'E.on' },\r\n    { id: 45, name: 'Easyenergy' },\r\n    { id: 4, name: 'Eneco' },\r\n    { id: 19, name: 'Energie VanOns' },\r\n    { id: 49, name: 'Energie Zero' },\r\n    { id: 42, name: 'Energiebesteding' },\r\n    { id: 5, name: 'Energiedirect' },\r\n    { id: 21, name: 'Energieflex' },\r\n    { id: 37, name: 'Energyhouse' },\r\n    { id: 6, name: 'Engie' },\r\n    { id: 7, name: 'Essent' },\r\n    { id: 35, name: 'Fenor energie' },\r\n    { id: 8, name: 'Greenchoice' },\r\n    { id: 43, name: 'GreenNL' },\r\n    { id: 40, name: 'Groenpand' },\r\n    { id: 44, name: 'Hezelaer' },\r\n    { id: 9, name: 'Holland Wind' },\r\n    { id: 33, name: 'Holthausen Clean Energy (HCE)' },\r\n    { id: 20, name: 'Huismerk Energie' },\r\n    { id: 30, name: 'HVC Kringloop Energie' },\r\n    { id: 23, name: 'Innova Energie' },\r\n    { id: 10, name: 'Main energie' },\r\n    { id: 38, name: 'NieuweStroom' },\r\n    { id: 12, name: 'NL Energie' },\r\n    { id: 1, name: 'OM' },\r\n    { id: 18, name: 'Overig' },\r\n    { id: 14, name: 'Oxxio' },\r\n    { id: 39, name: 'ParkStroom' },\r\n    { id: 36, name: 'Power peers' },\r\n    { id: 15, name: 'Pure energy' },\r\n    { id: 16, name: 'Qurrent' },\r\n    { id: 48, name: 'Qwint' },\r\n    { id: 31, name: 'Sepa Green' },\r\n    { id: 32, name: 'Servicehouse' },\r\n    { id: 34, name: 'Total' },\r\n    { id: 22, name: 'United Consumers' },\r\n    { id: 17, name: 'VanDeBron' },\r\n    { id: 13, name: 'Vattenfall' },\r\n    { id: 47, name: 'Welkom Energie' },\r\n    { id: 41, name: 'Windcentrale' },\r\n];\r\n","export default [\r\n    { id: 1, name: 'Dhr' },\r\n    { id: 2, name: 'Mevr' },\r\n    { id: 3, name: 'De heer, Mevrouw' },\r\n    { id: 4, name: 'Familie' },\r\n    { id: 5, name: 'De heer of mevrouw' },\r\n    { id: 6, name: 'De heren' },\r\n    { id: 7, name: 'De dames' },\r\n    { id: 8, name: 'Erven' },\r\n];\r\n","export default [\r\n    { id: 0, name: '' },\r\n    { id: 1, name: 'van' },\r\n    { id: 2, name: 'de' },\r\n    { id: 3, name: 'van der' },\r\n    { id: 4, name: 'van de' },\r\n    { id: 5, name: 'van den' },\r\n    { id: 6, name: 'den' },\r\n    { id: 7, name: 'ten' },\r\n    { id: 8, name: 'ter' },\r\n    { id: 9, name: 'te' },\r\n    { id: 10, name: \"van 't\" },\r\n    { id: 11, name: 'el' },\r\n    { id: 12, name: 'le' },\r\n    { id: 13, name: 'van het' },\r\n    { id: 14, name: \"in 't\" },\r\n    { id: 15, name: \"'t\" },\r\n    { id: 16, name: 'von' },\r\n    { id: 17, name: 'du' },\r\n    { id: 18, name: 'da' },\r\n    { id: 19, name: 'de la' },\r\n    { id: 20, name: 'la' },\r\n    { id: 21, name: 'der' },\r\n    { id: 22, name: 'van ter' },\r\n    { id: 23, name: \"op 't\" },\r\n    { id: 24, name: 'op den' },\r\n    { id: 25, name: 'op ten' },\r\n    { id: 26, name: 'op de' },\r\n];\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport MomentLocaleUtils, { formatDate, parseDate } from 'react-day-picker/moment';\r\nimport moment from 'moment';\r\nimport { get } from 'lodash';\r\n\r\nconst InputDate = ({\r\n    className,\r\n    id,\r\n    value,\r\n    required,\r\n    readOnly,\r\n    name,\r\n    onChangeAction,\r\n    placeholder,\r\n    showErrorMessage,\r\n    errors,\r\n    touched,\r\n    classNameErrorMessage,\r\n}) => {\r\n    const handleDayChange = date => {\r\n        // Convert date in correct value for database\r\n        const formattedDate = date ? moment(date).format('Y-MM-DD') : '';\r\n\r\n        onChangeAction(name, formattedDate);\r\n    };\r\n\r\n    const formattedDate = value ? moment(value).format('L') : '';\r\n\r\n    return (\r\n        <>\r\n            {get(errors, name, '') && get(touched, name, '') && showErrorMessage ? (\r\n                <small className={`${classNameErrorMessage}`}>{get(errors, name, '')}</small>\r\n            ) : null}\r\n            <DayPickerInput\r\n                id={id}\r\n                value={formattedDate}\r\n                onDayChange={handleDayChange}\r\n                formatDate={formatDate}\r\n                parseDate={parseDate}\r\n                dayPickerProps={{\r\n                    showWeekNumbers: true,\r\n                    locale: 'nl',\r\n                    firstDayOfWeek: 1,\r\n                    localeUtils: MomentLocaleUtils,\r\n                }}\r\n                inputProps={{\r\n                    className: `text-input content w-input ${className} ${\r\n                        Boolean(get(errors, name, '') && get(touched, name, '')) ? 'has-error mb-0' : ''\r\n                    } `,\r\n                    name: name,\r\n                    autoComplete: 'off',\r\n                    readOnly: readOnly,\r\n                    disabled: readOnly,\r\n                    placeholder: placeholder,\r\n                }}\r\n                required={required}\r\n                readOnly={readOnly}\r\n                placeholder={''}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nInputDate.defaultProps = {\r\n    className: '',\r\n    required: '',\r\n    readOnly: false,\r\n    value: null,\r\n    placeholder: '',\r\n    showErrorMessage: true,\r\n    classNameErrorMessage: 'text-danger',\r\n    errors: {},\r\n    touched: {},\r\n};\r\n\r\nInputDate.propTypes = {\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    onChangeAction: PropTypes.func,\r\n    required: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string,\r\n    showErrorMessage: PropTypes.bool,\r\n    classNameErrorMessage: PropTypes.string,\r\n    errors: PropTypes.object,\r\n    touched: PropTypes.object,\r\n};\r\n\r\nexport default InputDate;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport InputDate from '../../../components/form/InputDate';\r\n\r\nconst DefaultContactPersonalEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.titleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.initials\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"initials\"\r\n                                    placeholder={'Initialen'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.firstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name\"\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"person.lastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"person.lastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name\"\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel\r\n                    htmlFor=\"date_of_birth\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Geboortedatum\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={6}>\r\n                        <Field\r\n                            name=\"person.dateOfBirth\"\r\n                            render={({ field }) => (\r\n                                <InputDate\r\n                                    {...field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    onChangeAction={setFieldValue}\r\n                                    id=\"date_of_birth\"\r\n                                    placeholder={'Geboortedatum'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Adres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"primaryAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"primaryAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={initialContact.isParticipantPcrProject}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"primaryAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"primaryContactEnergySupplier.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            // disabled={\r\n                                            //     initialContact.primaryContactEnergySupplier &&\r\n                                            //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                            //     initialContact.isParticipant\r\n                                            // }\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.primaryContactEnergySupplier && values.primaryContactEnergySupplier.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.esNumber &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                    // readOnly={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.memberSince\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel\r\n                                    htmlFor=\"ean_electricity\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    EAN nummer electriciteit\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanElectricity\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_electricity\"\r\n                                                    placeholder={'EAN nummer electriciteit'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanElectricity &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                                    EAN nummer gas\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanGas\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_gas\"\r\n                                                    placeholder={'EAN nummer gas'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanGas\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactPersonalEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        // TODO set more correct values for validation, only important fields are set now\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        person: Yup.object().shape({\r\n            lastName: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        person: Yup.object().shape({\r\n            titleId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            firstName: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            dateOfBirth: Yup.date()\r\n                .typeError('Verplicht of ongeldige datum')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht')\r\n            .test('iban', 'Ongeldige IBAN !', value => ibantools.isValidIBAN(value)),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            energySupplierId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            esNumber: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactPersonalView from './default-form-personal/View';\r\nimport DefaultContactPersonalEdit from './default-form-personal/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from './../../helpers/ValidationSchemaPersonal';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsPersonal({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaPersonal.validationSchemaBasic\r\n              .concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n              .concat(ValidationSchemaPersonal.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaPersonal.validationSchemaBasic.concat(ValidationSchemaPersonal.validationSchemaAdditional)\r\n        : ValidationSchemaPersonal.validationSchemaBasic;\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichten velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactPersonalView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsPersonal;\r\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Row from 'react-bootstrap/Row';\r\nimport moment from 'moment';\r\n\r\nfunction DefaultContactOrganisationView({ portalSettings, initialContact }) {\r\n    const {\r\n        organisation = {},\r\n        emailCorrespondence,\r\n        emailInvoice,\r\n        phoneNumberPrimary,\r\n        phoneNumberTwo,\r\n        visitAddress,\r\n        postalAddress,\r\n        invoiceAddress,\r\n        iban,\r\n        ibanAttn,\r\n        didAgreeAvg,\r\n        dateDidAgreeAvg,\r\n        number,\r\n        primaryContactEnergySupplier,\r\n        primaryOccupations,\r\n    } = initialContact;\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Bedrijfsnaam</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Bedrijfsnaam'}>\r\n                        {organisation.name}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'KvK'}>\r\n                        {organisation.chamberOfCommerceNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'BTW nummer'}>\r\n                        {organisation.vatNumber}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\r\n                        {iban}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\r\n                        {ibanAttn}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Website'}>\r\n                        {organisation.website}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\r\n                <Row>\r\n                    <div className={'col-12 col-sm-8'}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"did_agree_avg\"\r\n                            checked={didAgreeAvg}\r\n                            className=\"w-checkbox-input checkbox\"\r\n                            disabled={true}\r\n                        />\r\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                            Ik ga akkoord met{' '}\r\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                privacybeleid\r\n                            </a>{' '}\r\n                            {didAgreeAvg ? <em>({dateDidAgreeAvg ? moment(dateDidAgreeAvg).format('L') : ''})</em> : ''}\r\n                        </span>\r\n                    </div>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailCorrespondence.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\r\n                        {emailInvoice.email}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberPrimary.number}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\r\n                        {phoneNumberTwo.number}\r\n                    </TextBlock>\r\n                </Row>\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Bezoekadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {visitAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {visitAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {visitAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {visitAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {visitAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {visitAddress.country ? visitAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Postadres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {postalAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {postalAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {postalAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {postalAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {postalAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {postalAddress.country ? postalAddress.country.name : ''}\r\n                    </TextBlock>{' '}\r\n                </Row>\r\n                <FormLabel className={'field-label'}>Nota adres</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\r\n                        {invoiceAddress.street}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\r\n                        {invoiceAddress.number}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\r\n                        {invoiceAddress.addition}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\r\n                        {invoiceAddress.postalCode}\r\n                    </TextBlock>\r\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\r\n                        {invoiceAddress.city}\r\n                    </TextBlock>\r\n                </Row>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\r\n                        {invoiceAddress.country ? invoiceAddress.country.name : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\r\n                        {primaryContactEnergySupplier.energySupplier\r\n                            ? primaryContactEnergySupplier.energySupplier.name\r\n                            : ''}\r\n                    </TextBlock>\r\n                </Row>\r\n\r\n                {primaryContactEnergySupplier && primaryContactEnergySupplier.energySupplierId ? (\r\n                    <>\r\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\r\n                                {primaryContactEnergySupplier.esNumber}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\r\n                                {primaryContactEnergySupplier.memberSince\r\n                                    ? moment(primaryContactEnergySupplier.memberSince).format('L')\r\n                                    : ''}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\r\n                                {primaryContactEnergySupplier.eanElectricity}\r\n                            </TextBlock>\r\n                        </Row>\r\n\r\n                        <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\r\n                        <Row>\r\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\r\n                                {primaryContactEnergySupplier.eanGas}\r\n                            </TextBlock>\r\n                        </Row>\r\n                    </>\r\n                ) : (\r\n                    ''\r\n                )}\r\n\r\n                {/*<FormLabel className={'field-label'}>Contacten</FormLabel>*/}\r\n                {/*{primaryOccupations ? (*/}\r\n                {/*primaryOccupations.map(primaryOccupation => (*/}\r\n                {/*<Row>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-4'} placeholder={'Contact naam'}>*/}\r\n                {/*{primaryOccupation.contact.fullName}*/}\r\n                {/*</TextBlock>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-4'} placeholder={'Contact verbinding'}>*/}\r\n                {/*{primaryOccupation.occupation.primaryOccupation}*/}\r\n                {/*</TextBlock>*/}\r\n                {/*</Row>*/}\r\n                {/*))*/}\r\n                {/*) : (*/}\r\n                {/*<Row>*/}\r\n                {/*<TextBlock className={'col-12 col-sm-8'} />*/}\r\n                {/*</Row>*/}\r\n                {/*)}*/}\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DefaultContactOrganisationView;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field } from 'formik';\r\nimport Select from '../../../components/form/Select';\r\nimport Countries from '../../../data/Countries';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Row from 'react-bootstrap/Row';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport moment from 'moment';\r\nimport EnergySuppliers from '../../../data/EnergySuppliers';\r\nimport InputDate from '../../../components/form/InputDate';\r\n\r\nconst DefaultContactOrganisationEdit = function({\r\n    portalSettings,\r\n    initialContact,\r\n    projectTypeCodeRef,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setFieldValue,\r\n}) {\r\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\r\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\r\n    return (\r\n        <Row>\r\n            <Col xs={12} md={6}>\r\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\r\n                <Row>\r\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.name\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"name\"\r\n                                    placeholder={'Naam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>KvK</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.chamberOfCommerceNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"chamber_of_commerce_number\"\r\n                                    placeholder={'KvK'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.vatNumber\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"vat_number\"\r\n                                    placeholder={'BTW nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"iban\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    IBAN gegevens\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"iban\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban\"\r\n                                    placeholder={'Rekeningnummer (IBAN)'}\r\n                                    customOnChange={e => {\r\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"ibanAttn\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"iban_attn\"\r\n                                    placeholder={'IBAN te name van'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel className={'field-label'}>Website</FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"organisation.website\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"website\"\r\n                                    placeholder={'Website'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\r\n                    Akkoord privacybeleid\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"didAgreeAvg\"\r\n                            render={({ field }) => (\r\n                                <label className=\"w-checkbox checkbox-fld\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                        id=\"did_agree_avg\"\r\n                                        checked={field.value}\r\n                                        className=\"w-checkbox-input checkbox\"\r\n                                        disabled={initialContact.didAgreeAvg}\r\n                                    />\r\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\r\n                                        Ik ga akkoord met{' '}\r\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\r\n                                            privacybeleid\r\n                                        </a>{' '}\r\n                                        {values.didAgreeAvg ? (\r\n                                            <em>\r\n                                                (\r\n                                                {initialContact.dateDidAgreeAvg\r\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\r\n                                                    : moment().format('L')}\r\n                                                )\r\n                                            </em>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </span>\r\n                                    {touched[field.name] && errors[field.name] ? (\r\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\r\n                                    ) : null}\r\n                                </label>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\r\n                    E-mailadres correspondentie\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailCorrespondence.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-correspondence\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\r\n                    E-mailadres nota\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={8}>\r\n                        <Field\r\n                            name=\"emailInvoice.email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"email-invoice\"\r\n                                    placeholder={'E-mailadres'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel\r\n                    htmlFor=\"telephone-number-1\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Telefoonnummer 1\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberPrimary.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-1\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\r\n                    Telefoonnummer 2\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={10} md={6}>\r\n                        <Field\r\n                            name=\"phoneNumberTwo.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"telephone-number-2\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col xs={12} md={6}>\r\n                <FormLabel\r\n                    htmlFor=\"street\"\r\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\r\n                >\r\n                    Bezoekadres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"visitAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"visitAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                    disabled={initialContact.isParticipantPcrProject}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"visitAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Postadres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"postalAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"postalAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"postalAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\r\n                    Nota adres\r\n                </FormLabel>\r\n                <Row>\r\n                    <Col xs={12} sm={12}>\r\n                        <Field\r\n                            name=\"invoiceAddress.street\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street\"\r\n                                    placeholder={'Straat'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.number\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"street_number\"\r\n                                    placeholder={'Nummer'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.addition\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"addition\"\r\n                                    placeholder={'Toevoeging'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={4}>\r\n                        <Field\r\n                            name=\"invoiceAddress.postalCode\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"postal_code\"\r\n                                    placeholder={'Postcode'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.city\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"city\"\r\n                                    placeholder={'Plaats'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12} sm={8}>\r\n                        <Field\r\n                            name=\"invoiceAddress.countryId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"country_id\"\r\n                                    placeholder={'Selecteer uw land'}\r\n                                    options={Countries}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\r\n                    <>\r\n                        <FormLabel\r\n                            htmlFor=\"energy_supplier_id\"\r\n                            className={\r\n                                initialContact.isParticipantPcrProject ||\r\n                                projectTypeCodeRef === 'postalcode_link_capital'\r\n                                    ? 'field-label required'\r\n                                    : 'field-label'\r\n                            }\r\n                        >\r\n                            Huidige energie leverancier\r\n                        </FormLabel>\r\n                        <Row>\r\n                            <Col xs={12} sm={12} md={8}>\r\n                                <Field\r\n                                    name=\"primaryContactEnergySupplier.energySupplierId\"\r\n                                    render={({ field }) => (\r\n                                        <Select\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"energy_supplier_id\"\r\n                                            placeholder={'Selecteer uw leverancier'}\r\n                                            options={EnergySuppliers}\r\n                                            // disabled={\r\n                                            //     initialContact.primaryContactEnergySupplier &&\r\n                                            //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                            //     initialContact.isParticipant\r\n                                            // }\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {values.primaryContactEnergySupplier && values.primaryContactEnergySupplier.energySupplierId ? (\r\n                            <>\r\n                                <FormLabel\r\n                                    htmlFor=\"es_number\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    Klant nummer bij leverancier\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.esNumber\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"es_number\"\r\n                                                    placeholder={'Klant nummer bij leverancier'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.esNumber &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\r\n                                    Klant bij leverancier sinds\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.memberSince\"\r\n                                            render={({ field }) => (\r\n                                                <InputDate\r\n                                                    {...field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    onChangeAction={setFieldValue}\r\n                                                    id=\"member_since\"\r\n                                                    placeholder={'Klant sinds'}\r\n                                                    // readOnly={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.memberSince\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel\r\n                                    htmlFor=\"ean_electricity\"\r\n                                    className={\r\n                                        projectTypeCodeRef === 'postalcode_link_capital'\r\n                                            ? 'field-label required'\r\n                                            : 'field-label'\r\n                                    }\r\n                                >\r\n                                    EAN nummer electriciteit\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanElectricity\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_electricity\"\r\n                                                    placeholder={'EAN nummer electriciteit'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanElectricity &&\r\n                                                    //     initialContact.isParticipant\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\r\n                                    EAN nummer gas\r\n                                </FormLabel>\r\n                                <Row>\r\n                                    <Col xs={12} sm={12} md={8}>\r\n                                        <Field\r\n                                            name=\"primaryContactEnergySupplier.eanGas\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"ean_gas\"\r\n                                                    placeholder={'EAN nummer gas'}\r\n                                                    // disabled={\r\n                                                    //     initialContact.primaryContactEnergySupplier &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.energySupplierId &&\r\n                                                    //     initialContact.primaryContactEnergySupplier.eanGas\r\n                                                    // }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </>\r\n                ) : null}\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default DefaultContactOrganisationEdit;\r\n","import * as Yup from 'yup';\r\nimport * as ibantools from 'ibantools';\r\n\r\nexport default {\r\n    validationSchemaBasic: Yup.object().shape({\r\n        // TODO set more correct values for validation, only important fields are set now\r\n        didAgreeAvg: Yup.bool().test(\r\n            'didAgreeAvg',\r\n            'Je dient akkoord te gaan met privacybeleid!',\r\n            value => value === true\r\n        ),\r\n        organisation: Yup.object().shape({\r\n            name: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n        emailCorrespondence: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres')\r\n                .required('Verplicht'),\r\n        }),\r\n        emailInvoice: Yup.object().shape({\r\n            email: Yup.string()\r\n                .trim()\r\n                .email('Ongeldig e-mail adres'),\r\n        }),\r\n        postalAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        invoiceAddress: Yup.object().shape({\r\n            street: Yup.string().trim(),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                }),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        (this.parent.countryId !== 'NL' &&\r\n                            this.parent.countryId !== null &&\r\n                            this.parent.countryId != '') ||\r\n                        value.trim() == ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                }),\r\n            city: Yup.string().trim(),\r\n        }),\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        phoneNumberTwo: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\r\n        }),\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaAdditional: Yup.object().shape({\r\n        phoneNumberPrimary: Yup.object().shape({\r\n            number: Yup.string()\r\n                .trim()\r\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\r\n                .required('Verplicht'),\r\n        }),\r\n        iban: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n        ibanAttn: Yup.string()\r\n            .trim()\r\n            .nullable()\r\n            .required('Verplicht'),\r\n        visitAddress: Yup.object().shape({\r\n            street: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            number: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .test('number', 'Alleen nummers', value => {\r\n                    return Number.isInteger(+value);\r\n                })\r\n                .required('Verplicht'),\r\n            postalCode: Yup.string()\r\n                .trim()\r\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\r\n                    if (\r\n                        this.parent.countryId !== 'NL' &&\r\n                        this.parent.countryId !== null &&\r\n                        this.parent.countryId != ''\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\r\n                    }\r\n                })\r\n                .required('Verplicht'),\r\n            city: Yup.string()\r\n                .trim()\r\n                .required('Verplicht'),\r\n        }),\r\n    }),\r\n\r\n    validationSchemaPcrAdditional: Yup.object().shape({\r\n        primaryContactEnergySupplier: Yup.object().shape({\r\n            energySupplierId: Yup.string()\r\n                .nullable()\r\n                .required('Verplicht'),\r\n            esNumber: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .required('Verplicht'),\r\n            eanElectricity: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\r\n                .required('Verplicht'),\r\n            eanGas: Yup.string()\r\n                .nullable()\r\n                .trim()\r\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\r\n        }),\r\n    }),\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DefaultContactOrganisationView from './default-form-organisation/View';\r\nimport DefaultContactOrganisationEdit from './default-form-organisation/Edit';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaOrganisation from './../../helpers/ValidationSchemaOrganisation';\r\nimport { isEmpty } from 'lodash';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ContactDetailsOrganisation({\r\n    portalSettings,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    editButtonGroup,\r\n    editForm,\r\n    setEditForm,\r\n}) {\r\n    const validationSchema = initialContact.isParticipantPcrProject\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic\r\n              .concat(ValidationSchemaOrganisation.validationSchemaAdditional)\r\n              .concat(ValidationSchemaOrganisation.validationSchemaPcrAdditional)\r\n        : initialContact.isParticipant\r\n        ? ValidationSchemaOrganisation.validationSchemaBasic.concat(\r\n              ValidationSchemaOrganisation.validationSchemaAdditional\r\n          )\r\n        : ValidationSchemaOrganisation.validationSchemaBasic;\r\n\r\n    return (\r\n        <div>\r\n            {editForm ? (\r\n                <Formik\r\n                    initialValues={initialContact}\r\n                    enableReinitialize={true}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\r\n                    }}\r\n                    render={({ errors, touched, setFieldValue, isSubmitting, values, handleSubmit }) => {\r\n                        return (\r\n                            <Form>\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                />\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button\r\n                                                variant={'outline-dark'}\r\n                                                size=\"sm\"\r\n                                                onClick={function() {\r\n                                                    setEditForm(false);\r\n                                                }}\r\n                                            >\r\n                                                Annuleren\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met opslaan\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Opslaan'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichten velden zijn (juist) ingevuld!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        );\r\n                    }}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <DefaultContactOrganisationView portalSettings={portalSettings} initialContact={initialContact} />\r\n                    <Row>\r\n                        <Col>{editButtonGroup}</Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactDetailsOrganisation;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactDetailsPersonal from './Personal';\r\nimport ContactDetailsOrganisation from './Organisation';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst ContactDetails = function(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n    const [editForm, setEditForm] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const keys =\r\n            '?keys[]=portalName' +\r\n            '&keys[]=portalWebsite' +\r\n            '&keys[]=portalUrl' +\r\n            '&keys[]=responsibleUserId' +\r\n            '&keys[]=checkContactTaskResponsibleUserId' +\r\n            '&keys[]=linkPrivacyPolicy' +\r\n            '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n            '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n        PortalSettingsAPI.fetchPortalSettings(keys)\r\n            .then(payload => {\r\n                setPortalSettings({ ...payload.data });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ isLoading: false, hasError: true });\r\n            });\r\n\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n                props.updateNameSelectedContact(contactData.fullName);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, switchToView) {\r\n        const updatedContact = { ...contact, ...values };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                callFetchContact();\r\n                actions.setSubmitting(false);\r\n                switchToView();\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    const editButtonGroup = (\r\n        <ButtonGroup aria-label=\"Steps\" className={'float-right'}>\r\n            <Button\r\n                className={'w-button'}\r\n                size=\"sm\"\r\n                onClick={function() {\r\n                    setEditForm(true);\r\n                }}\r\n            >\r\n                Wijzig\r\n            </Button>\r\n        </ButtonGroup>\r\n    );\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <div className=\"content-container w-container\">\r\n                    <Row>\r\n                        <ButtonGroup aria-label=\"Steps\" className=\"float-left\">\r\n                            <Link to={`/inschrijven-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Inschrijven projecten\r\n                                </Button>\r\n                            </Link>\r\n                            &nbsp;\r\n                            <Link to={`/inschrijvingen-projecten`}>\r\n                                <Button className={'w-button'} size=\"sm\">\r\n                                    Huidige deelnames\r\n                                </Button>\r\n                            </Link>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    {editForm ? (\r\n                        <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                    ) : (\r\n                        <Row>\r\n                            <Col>\r\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\r\n                            </Col>\r\n                            <Col>{editButtonGroup}</Col>\r\n                        </Row>\r\n                    )}\r\n                    <div className=\"w-form\" />\r\n                    {/* If contact is person */}\r\n                    {contact.typeId === 'person' ? (\r\n                        <ContactDetailsPersonal\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                    {/* If contact is organisation */}\r\n                    {contact.typeId === 'organisation' ? (\r\n                        <ContactDetailsOrganisation\r\n                            portalSettings={portalSettings}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            editButtonGroup={editButtonGroup}\r\n                            editForm={editForm}\r\n                            setEditForm={setEditForm}\r\n                        />\r\n                    ) : null}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default function ContactDetailsWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact, updateNameSelectedContact }) => (\r\n                <ContactDetails\r\n                    {...props}\r\n                    currentSelectedContact={currentSelectedContact}\r\n                    updateNameSelectedContact={updateNameSelectedContact}\r\n                />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Field, FieldArray, Form, Formik } from 'formik';\r\nimport ButtonText from '../../components/button/ButtonText';\r\n\r\nconst MyAreasOfInterestForm = function({ handleSubmit, initialValues }) {\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            enableReinitialize={true}\r\n            onSubmit={(values, actions) => {\r\n                actions.setSubmitting(true);\r\n                console.log(values);\r\n            }}\r\n            render={({ errors, touched, setFieldValue, isSubmitting, values }) => {\r\n                return (\r\n                    <Form id=\"email-form\" name=\"email-form\">\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <h6 className=\"heading-content\">Mijn interessegebieden</h6>\r\n                                <FieldArray\r\n                                    name=\"myAreasOfInterest\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.myAreasOfInterest &&\r\n                                                values.myAreasOfInterest.map((myAreaOfInterest, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`myAreasOfInterest[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={myAreaOfInterest.name}\r\n                                                                        checked={myAreaOfInterest.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={myAreaOfInterest.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {myAreaOfInterest.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Deelname</h6>\r\n                                <FieldArray\r\n                                    name=\"participations\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.participations &&\r\n                                                values.participations.map((participation, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`participations[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={participation.name}\r\n                                                                        checked={participation.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={participation.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {participation.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <h6 className=\"heading-content\">Algemeen</h6>\r\n                                <FieldArray\r\n                                    name=\"generalOptions\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {values.generalOptions &&\r\n                                                values.generalOptions.map((generalOption, index) => (\r\n                                                    <div key={index}>\r\n                                                        <Field\r\n                                                            name={`generalOptions[${index}]['value']`}\r\n                                                            render={({ field }) => (\r\n                                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        {...field}\r\n                                                                        id={generalOption.name}\r\n                                                                        checked={generalOption.value}\r\n                                                                        className=\"w-checkbox-input checkbox\"\r\n                                                                    />\r\n                                                                    <span\r\n                                                                        htmlFor={generalOption.name}\r\n                                                                        className=\"checkbox-label w-form-label\"\r\n                                                                    >\r\n                                                                        {generalOption.name}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            )}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"w-row\">\r\n                            <div className=\"w-col w-col-6\">\r\n                                <ButtonText\r\n                                    buttonText={'Opslaan'}\r\n                                    buttonClassName={'save-btn w-button'}\r\n                                    type={'submit'}\r\n                                    loading={isSubmitting}\r\n                                />\r\n                            </div>\r\n                            <div className=\"w-col w-col-6\" />\r\n                        </div>\r\n                    </Form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterestForm;\r\n","import React from 'react';\r\nimport MyAreasOfInterestForm from './Form';\r\n\r\nconst MyAreasOfInterest = function() {\r\n    // TODO Fetch values from API\r\n    const initialValues = {\r\n        myAreasOfInterest: [\r\n            { id: 4, name: 'Gevel isolatie', value: true },\r\n            { id: 5, name: 'Zonnepanelen', value: false },\r\n            { id: 6, name: 'Dak isolatie', value: false },\r\n            { id: 7, name: 'Zonneboiler', value: true },\r\n        ],\r\n        participations: [{ id: 2, name: 'Test groep', value: true }, { id: 3, name: 'De leuke mensen', value: false }],\r\n        generalOptions: [{ id: 1, name: 'Test algemeen groep', value: false }],\r\n    };\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            <div className=\"content-container w-container\">\r\n                <h1 className=\"content-heading\">Instellingen</h1>\r\n                <div className=\"w-form\" />\r\n                <MyAreasOfInterestForm initialValues={initialValues} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyAreasOfInterest;\r\n","export default amount => {\r\n    if (!amount) amount = 0;\r\n    // if (isNaN(amount)) {\r\n    //     amount = amount.replace(',', '.');\r\n    // }\r\n    amount = parseFloat(amount * 100) / 100;\r\n\r\n    if (isNaN(amount)) return 'Ongeldig bedrag';\r\n\r\n    return `€ ${amount.toLocaleString('nl', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n    })}`;\r\n};\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepOneLoan({ next, project, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        amountOptioned: Yup.string()\r\n            .required('Verplicht')\r\n            .test('amountOptioned', 'Minimum van ' + project.minAmountLoan + ' nodig', value =>\r\n                value ? value.replace(',', '.') : 0 >= project.minAmountLoan\r\n            )\r\n            .test('amountOptioned', 'Maximum van ' + project.maxAmountLoan + ' bereikt', value =>\r\n                value ? value.replace(',', '.') : 0 <= project.maxAmountLoan\r\n            )\r\n            .matches(/^\\s*(?=.*[1-9])\\d*(?:\\.\\d{1,2})?\\s*$/, 'Fout bedrag'),\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues(values);\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n        >\r\n            {({ handleSubmit, values, touched, errors }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimaal bedrag</FormLabel>\r\n                                <TextBlock>{project.minAmountLoan}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximaal bedrag</FormLabel>\r\n                                <TextBlock>{project.maxAmountLoan}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>In te leggen bedrag</Form.Label>\r\n                                <Field\r\n                                    name=\"amountOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"amount_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Te betalen bedrag</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(values.amountOptioned)}</TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                            volgende stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneLoan;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepOneObligation({ next, project, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues(values);\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n        >\r\n            {({ handleSubmit, values, touched, errors }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal obligaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Nominale waarde per obligatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal obligaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Te betalen bedrag</FormLabel>\r\n                                <TextBlock>\r\n                                    {MoneyPresenter(values.participationsOptioned * project.participationWorth)}\r\n                                </TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                            volgende stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneObligation;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepOneCapital({ next, project, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues(values);\r\n                next();\r\n            }}\r\n            initialValues={initialRegisterValues}\r\n        >\r\n            {({ handleSubmit, values, touched, errors }) => (\r\n                <>\r\n                    <Form>\r\n                        <Row>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.minParticipations}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                <TextBlock>{project.maxParticipations}</TextBlock>\r\n                            </Col>\r\n\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Nominale waarde per participatie</FormLabel>\r\n                                <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <Form.Label className={'field-label'}>Gewenst aantal participaties</Form.Label>\r\n                                <Field\r\n                                    name=\"participationsOptioned\"\r\n                                    render={({ field }) => (\r\n                                        <InputText\r\n                                            field={field}\r\n                                            errors={errors}\r\n                                            touched={touched}\r\n                                            id=\"participations_optioned\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={12} md={6}>\r\n                                <FormLabel className={'field-label'}>Te betalen bedrag</FormLabel>\r\n                                <TextBlock>\r\n                                    {MoneyPresenter(values.participationsOptioned * project.participationWorth)}\r\n                                </TextBlock>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                        Ga naar gegevens\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        {!isEmpty(errors) ? (\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"alert-wrapper\">\r\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                            Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                            volgende stap!\r\n                                        </Alert>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : null}\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOneCapital;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepOnePcr({ portalSettings, next, project, initialContact, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        participationsOptioned: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .test(\r\n                'participationsOptioned',\r\n                'Minimum van ' + project.minParticipations + ' nodig',\r\n                value => value >= project.minParticipations\r\n            )\r\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrYearlyPowerKwhConsumption: Yup.number()\r\n            .typeError('Alleen nummers')\r\n            .positive('Getal moet groter zijn dan 0')\r\n            .required('Verplicht'),\r\n        pcrPostalCode: Yup.string()\r\n            .min(4, 'Minimum van ${min} postcode cijfers nodig')\r\n            .required('Verplicht')\r\n            .test(\r\n                'pcrPostalCode',\r\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                value => value && project.postalcodeLink && project.postalcodeLink.includes(value.substring(0, 4))\r\n            ),\r\n        pcrNumberOfSolarPanels: Yup.number().typeError('Alleen nummers'),\r\n        pcrInputGeneratedNumberOfKwh: Yup.number().typeError('Alleen nummers'),\r\n    });\r\n\r\n    // const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = 0.8;\r\n    const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = portalSettings['pcrPowerKwhConsumptionPercentage'];\r\n    // const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = 250;\r\n    const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = portalSettings['pcrGeneratingCapacityOneSolorPanel'];\r\n\r\n    function calculateEstimatedGeneratedNumberOfKwh(values) {\r\n        return values.pcrNumberOfSolarPanels\r\n            ? values.pcrNumberOfSolarPanels * PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n            : 0;\r\n    }\r\n    function calculateGeneratedNumberOfKwh(values) {\r\n        return values.pcrInputGeneratedNumberOfKwh && values.pcrInputGeneratedNumberOfKwh > 0\r\n            ? values.pcrInputGeneratedNumberOfKwh\r\n            : calculateEstimatedGeneratedNumberOfKwh(values)\r\n            ? calculateEstimatedGeneratedNumberOfKwh(values)\r\n            : 0;\r\n    }\r\n    function calculatePowerKwhConsumption(values) {\r\n        let extraPowerKwhConsumption =\r\n            values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values) > 0\r\n                ? values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values)\r\n                : 0;\r\n        return extraPowerKwhConsumption;\r\n    }\r\n    function calculateAdviseMaxNumberOfParticipations(values) {\r\n        let pcrAdviseMaxNumberOfParticipations =\r\n            calculatePowerKwhConsumption(values) > 0\r\n                ? Math.ceil(\r\n                      (calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE) /\r\n                          PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\r\n                  )\r\n                : 0;\r\n\r\n        if (pcrAdviseMaxNumberOfParticipations < project.minParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.minParticipations;\r\n        } else if (pcrAdviseMaxNumberOfParticipations > project.maxParticipations) {\r\n            pcrAdviseMaxNumberOfParticipations = project.maxParticipations;\r\n        }\r\n        return pcrAdviseMaxNumberOfParticipations;\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitRegisterValues({ ...values, powerKwhConsumption: calculatePowerKwhConsumption(values) });\r\n                next();\r\n            }}\r\n            initialValues={{\r\n                ...initialRegisterValues,\r\n            }}\r\n        >\r\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => {\r\n                let pcrEstimatedGeneratedNumberOfKwh = calculateEstimatedGeneratedNumberOfKwh(values);\r\n                let powerKwhConsumption = Math.ceil(\r\n                    calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE\r\n                );\r\n                let pcrAdviseMaxNumberOfParticipations = calculateAdviseMaxNumberOfParticipations(values);\r\n                return (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\r\n                                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                                </Col>\r\n\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Nominale waarde per participatie</FormLabel>\r\n                                    <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>Je postcode</Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrPostalCode\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_postal_code\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>Deelnemende postcodes</Form.Label>\r\n                                    <TextBlock>{project.postalcodeLink}</TextBlock>\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Je (geschatte) jaarlijks verbruik (in kWh)\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"pcrYearlyPowerKwhConsumption\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"pcr_yearly_power_kwh_consumption\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Heb je al zonnepanelen op je eigen dak of doe je mee in een ander project?\r\n                                    </Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrHasSolarPanels\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => setFieldValue('pcrHasSolarPanels', 'Y')}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_has_solar_panels_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrHasSolarPanels', 'N');\r\n                                                                setFieldValue('pcrNumberOfSolarPanels', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrHasSolarPanels === 'Y' ? (\r\n                                <Row>\r\n                                    <Col xs={12} md={6}>\r\n                                        <Form.Label className={'field-label'}>\r\n                                            Hoeveel zonnepanelen wekken al stroom voor je op\r\n                                        </Form.Label>\r\n                                        <Field\r\n                                            name=\"pcrNumberOfSolarPanels\"\r\n                                            render={({ field }) => (\r\n                                                <InputText\r\n                                                    field={field}\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    id=\"pcr_number_of_solar_panels\"\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Wij schatten in dat je panelen jaarlijks opwekken\r\n                                    </Form.Label>\r\n                                    <TextBlock id=\"pcr_input_estimated_generated_number_of_kwh\">\r\n                                        {pcrEstimatedGeneratedNumberOfKwh} kWh\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Form.Label className={'field-label'}>Klopt het geschatte opbrengst?</Form.Label>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"pcrEstimatedRevenueOk\"\r\n                                        render={({ field }) => (\r\n                                            <>\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_yes\"\r\n                                                            checked={field.value === 'Y'}\r\n                                                            value={'Y'}\r\n                                                            onChange={() => {\r\n                                                                setFieldValue('pcrEstimatedRevenueOk', 'Y');\r\n                                                                setFieldValue('pcrInputGeneratedNumberOfKwh', 0);\r\n                                                            }}\r\n                                                        />\r\n                                                        &nbsp;Ja\r\n                                                    </label>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <label className=\"radio-inline\">\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            {...field}\r\n                                                            id=\"pcr_estimated_revenue_ok_no\"\r\n                                                            checked={field.value === 'N'}\r\n                                                            value={'N'}\r\n                                                            onChange={() => setFieldValue('pcrEstimatedRevenueOk', 'N')}\r\n                                                        />\r\n                                                        &nbsp;Nee\r\n                                                    </label>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {values.pcrEstimatedRevenueOk === 'N' ? (\r\n                                <>\r\n                                    <Row>\r\n                                        <Col xs={12} md={6}>\r\n                                            <Form.Label className={'field-label'}>\r\n                                                Wat is de jaarlijkse opbrengst van jouw panelen (in kWh)\r\n                                            </Form.Label>\r\n                                            <Field\r\n                                                name=\"pcrInputGeneratedNumberOfKwh\"\r\n                                                render={({ field }) => (\r\n                                                    <InputText\r\n                                                        field={field}\r\n                                                        errors={errors}\r\n                                                        touched={touched}\r\n                                                        id=\"pcr_input_generated_number_of_kwh\"\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <p>\r\n                                        We adviseren tot {(PCR_POWER_KWH_CONSUMPTION_PERCENTAGE*100)}% van je jaarlijks verbruik minus de jaarlijkse opbrengsten\r\n                                        (in jouw geval {powerKwhConsumption} kWh) te dekken met participaties. In het\r\n                                        veld hier direct onder is voor je uitgerekend hoeveel participaties dat zijn.\r\n                                        Het is een advies, je mag er ook meer kopen. Dit kan echter slecht zijn voor je\r\n                                        rendement.\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label'}>\r\n                                        Advies maximaal aantal participaties\r\n                                    </Form.Label>\r\n                                    <TextBlock>{pcrAdviseMaxNumberOfParticipations}</TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={12} md={6}>\r\n                                    <Form.Label className={'field-label required'}>\r\n                                        Gewenst aantal participaties\r\n                                    </Form.Label>\r\n                                    <Field\r\n                                        name=\"participationsOptioned\"\r\n                                        render={({ field }) => (\r\n                                            <InputText\r\n                                                field={field}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                id=\"participations_optioned\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col xs={12} md={6}>\r\n                                    <FormLabel className={'field-label'}>Te betalen bedrag</FormLabel>\r\n                                    <TextBlock>\r\n                                        {MoneyPresenter(values.participationsOptioned * project.participationWorth)}\r\n                                    </TextBlock>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            Ga naar gegevens\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default StepOnePcr;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DefaultContactPersonalEdit from '../../contact-details/default-form-personal/Edit';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from '../../../helpers/ValidationSchemaPersonal';\r\nimport ValidationSchemaOrganisation from '../../../helpers/ValidationSchemaOrganisation';\r\nimport * as Yup from 'yup';\r\nimport DefaultContactOrganisationEdit from '../../contact-details/default-form-organisation/Edit';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepTwo({ portalSettings, previous, next, project, initialContact, handleSubmitContactValues }) {\r\n    initialContact.isParticipant = true;\r\n    const typeContact = initialContact.typeId ? initialContact.typeId : null;\r\n    const validationSchemaPcrPersonal = Yup.object().shape({\r\n        primaryAddress: Yup.object().shape({\r\n            postalCode: Yup.string().test(\r\n                'postal-code-primary-address-in-pcr-area',\r\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                function(value) {\r\n                    return project.postalcodeLink.includes(value.substring(0, 4));\r\n                }\r\n            ),\r\n        }),\r\n    });\r\n    const validationSchemaPcrOrganisation = Yup.object().shape({\r\n        visitAddress: Yup.object().shape({\r\n            postalCode: Yup.string()\r\n                .test(\r\n                    'postal-code-visit-address-in-pcr-area',\r\n                    'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\r\n                    function(value) {\r\n                        return project.postalcodeLink.includes(value.substring(0, 4));\r\n                    }\r\n                )\r\n                .required('Verplicht'),\r\n        }),\r\n    });\r\n\r\n    let validationSchema = null;\r\n    let validationSchemaBasic = null;\r\n    let validationSchemaAdditional = null;\r\n    let validationSchemaPcrAdditional = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            validationSchemaBasic = ValidationSchemaPersonal.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaPersonal.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n                validationSchema = validationSchema.concat(validationSchemaPcrPersonal);\r\n            }\r\n            break;\r\n        case 'organisation':\r\n            validationSchemaBasic = ValidationSchemaOrganisation.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaOrganisation.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n                validationSchema = validationSchema.concat(validationSchemaPcrOrganisation);\r\n            }\r\n            break;\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactValues(values, actions, next);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, values, handleSubmit }) => {\r\n                    // console.log(errors);\r\n                    return (\r\n                        <Form>\r\n                            {/* If contact is person */}\r\n                            {initialContact.typeId === 'person' ? (\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            {/* If contact is organisation */}\r\n                            {initialContact.typeId === 'organisation' ? (\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan en doorgaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepTwo;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepThree({ project, contactProjectData, previous, next, initialRegisterValues, handleSubmitRegisterValues }) {\r\n    const validationSchema = Yup.object({\r\n        didAcceptAgreement: Yup.bool().test(\r\n            'didAcceptAgreement',\r\n            'Je dient akkoord te gaan met de voorwaarden!',\r\n            value => value === true\r\n        ),\r\n        didUnderstandInfo: Yup.bool().test(\r\n            'didUnderstandInfo',\r\n            'Je dient te bevestigen, dat de projectinformatie gelezen en begrepen is!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                onSubmit={function(values, actions) {\r\n                    handleSubmitRegisterValues(values);\r\n                    next();\r\n                }}\r\n                initialValues={initialRegisterValues}\r\n            >\r\n                {({ handleSubmit, touched, errors, setFieldValue }) => (\r\n                    <>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <p>\r\n                                        Om deel te kunnen nemen dien je akkoord te gaan met de voorwaarden en dien je te\r\n                                        bevestigen dat je de projectinformatie hebt gelezen en begrepen.\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didAcceptAgreement\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_accept_agreement\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_accept_agreement\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                >\r\n                                                    Ik ga akkoord met de{' '}\r\n                                                    <a href={project.linkAgreeTerms} target=\"_blank\">\r\n                                                        voorwaarden\r\n                                                    </a>\r\n                                                </span>\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <Field\r\n                                        name=\"didUnderstandInfo\"\r\n                                        render={({ field }) => (\r\n                                            <label className=\"w-checkbox checkbox-fld\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    {...field}\r\n                                                    id=\"did_understand_info\"\r\n                                                    checked={field.value}\r\n                                                    className=\"w-checkbox-input checkbox\"\r\n                                                />\r\n                                                <span\r\n                                                    htmlFor=\"did_understand_info\"\r\n                                                    className=\"checkbox-label w-form-label\"\r\n                                                >\r\n                                                    Ik heb de{' '}\r\n                                                    <a href={`${project.linkUnderstandInfo}`} target=\"_blank\">\r\n                                                        projectinformatie\r\n                                                    </a>{' '}\r\n                                                    (inclusief de daarin beschreven risico’s) behorende bij het project\r\n                                                    gelezen en begrepen\r\n                                                </span>\r\n                                                {touched[field.name] && errors[field.name] ? (\r\n                                                    <div className={'error-message text-danger'}>\r\n                                                        {errors[field.name]}\r\n                                                    </div>\r\n                                                ) : null}\r\n                                            </label>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            {project.showQuestionAboutMembership ? (\r\n                                <>\r\n                                    <Row>\r\n                                        <Col xs={12} md={10}>\r\n                                            <p>\r\n                                                {contactProjectData.belongsToMembershipGroup\r\n                                                    ? contactProjectData.textIsMemberMerged\r\n                                                    : contactProjectData.textIsNoMemberMerged}\r\n                                            </p>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {!contactProjectData.belongsToMembershipGroup ? (\r\n                                        <Row>\r\n                                            <Col xs={12} md={10}>\r\n                                                <Field\r\n                                                    name=\"choiceMembership\"\r\n                                                    render={({ field }) => (\r\n                                                        <>\r\n                                                            <div className=\"form-check\">\r\n                                                                <label className=\"radio-inline\">\r\n                                                                    <input\r\n                                                                        type=\"radio\"\r\n                                                                        {...field}\r\n                                                                        id=\"choice_membership_yes\"\r\n                                                                        checked={field.value === 1}\r\n                                                                        value={1}\r\n                                                                        onChange={() =>\r\n                                                                            setFieldValue('choiceMembership', 1)\r\n                                                                        }\r\n                                                                    />\r\n                                                                    &nbsp;{contactProjectData.textBecomeMemberMerged}\r\n                                                                </label>\r\n                                                                <label className=\"radio-inline\">\r\n                                                                    <input\r\n                                                                        type=\"radio\"\r\n                                                                        {...field}\r\n                                                                        id=\"choice_membership_no\"\r\n                                                                        checked={field.value === 2}\r\n                                                                        value={2}\r\n                                                                        onChange={() => {\r\n                                                                            setFieldValue('choiceMembership', 2);\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    &nbsp;{contactProjectData.textBecomeNoMemberMerged}\r\n                                                                </label>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    )}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    ) : null}\r\n                                </>\r\n                            ) : null}\r\n                            <Row>\r\n                                <Col xs={12} md={10}>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\r\n                                            Ga naar inschrijfformulier\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepThree;\r\n","import React from 'react';\r\nimport Frame from 'react-frame-component';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ViewHtmlAsText = ({ id, value }) => {\r\n    const createMarkup = () => {\r\n        return { __html: value };\r\n    };\r\n\r\n    return (\r\n        <Frame>\r\n            <div id={id} dangerouslySetInnerHTML={createMarkup()} />\r\n        </Frame>\r\n    );\r\n};\r\n\r\nViewHtmlAsText.defaultProps = {\r\n    value: '',\r\n};\r\n\r\nViewHtmlAsText.propTypes = {\r\n    id: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default ViewHtmlAsText;\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    createParticipantProject: registerValues => {\r\n        const requestUrl = `/project/participant/create`;\r\n\r\n        return axiosInstance.post(requestUrl, registerValues);\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport ViewHtmlAsText from '../../../components/general/ViewHtmlAsText';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepFour({ previous, next, registerValues, setSucces }) {\r\n    const [contactDocument, setContactDocument] = useState('');\r\n    const [isLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        (function callFetchContact() {\r\n            setLoading(true);\r\n            ContactAPI.previewDocument(registerValues)\r\n                .then(payload => {\r\n                    setContactDocument(payload.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [registerValues]);\r\n\r\n    function handleSubmitRegisterValues(actions, next) {\r\n        ParticipantProjectAPI.createParticipantProject(registerValues)\r\n            .then(payload => {\r\n                // console.log(payload);\r\n                actions.setSubmitting(false);\r\n                setSucces(true);\r\n                next();\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        didAgreeRegistration: Yup.bool().test(\r\n            'didAgreeRegistration',\r\n            'Je dient akkoord te gaan met het inschrijfformulier!',\r\n            value => value === true\r\n        ),\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <Formik\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={function(values, actions) {\r\n                        handleSubmitRegisterValues(actions, next);\r\n                    }}\r\n                    initialValues={{ didAgreeRegistration: false }}\r\n                >\r\n                    {({ handleSubmit, touched, errors, isSubmitting }) => (\r\n                        <>\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ViewHtmlAsText value={contactDocument} />\r\n                                        <Field\r\n                                            name=\"didAgreeRegistration\"\r\n                                            render={({ field }) => (\r\n                                                <label className=\"w-checkbox checkbox-fld\">\r\n                                                    <input\r\n                                                        type=\"checkbox\"\r\n                                                        {...field}\r\n                                                        id=\"did_agree_registration\"\r\n                                                        checked={field.value}\r\n                                                        className=\"w-checkbox-input checkbox\"\r\n                                                    />\r\n                                                    <span\r\n                                                        htmlFor=\"did_agree_registration\"\r\n                                                        className=\"checkbox-label w-form-label\"\r\n                                                    >\r\n                                                        Ik ben akkoord met het inschrijfformulier\r\n                                                    </span>\r\n                                                    {touched[field.name] && errors[field.name] ? (\r\n                                                        <div className={'error-message text-danger'}>\r\n                                                            {errors[field.name]}\r\n                                                        </div>\r\n                                                    ) : null}\r\n                                                </label>\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <p>\r\n                                            Wanneer je akkoord gaat met het inschrijfformulier en de inschrijving\r\n                                            bevestigt, is je inschrijving definitief.\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col xs={12} md={10}>\r\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                            <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                                Terug\r\n                                            </Button>\r\n                                            <Button\r\n                                                className={'w-button'}\r\n                                                size=\"sm\"\r\n                                                onClick={handleSubmit}\r\n                                                disabled={isSubmitting}\r\n                                            >\r\n                                                {isSubmitting ? (\r\n                                                    <span>\r\n                                                        <ClipLoader color={'white'} size={14} />\r\n                                                        Bezig met verwerken\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    'Bevestigen inschrijving'\r\n                                                )}\r\n                                            </Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                {!isEmpty(errors) ? (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"alert-wrapper\">\r\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                    Niet alle verplichten velden zijn ingevuld om verder te gaan naar de\r\n                                                    volgende stap!\r\n                                                </Alert>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </Form>\r\n                        </>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StepFour;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction StepFive() {\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    <p>\r\n                        Bedankt voor je inschrijving! Je ontvangt van ons een e-mail met daarin alle gegevens van je\r\n                        inschrijving en informatie over de vervolgstappen die we nemen om jouw inschrijving definitief\r\n                        te maken.\r\n                        <br />\r\n                        Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van bijvoorbeeld Gmail\r\n                        en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of je onze mail daar terug vindt.\r\n                    </p>\r\n                    <p>Onder de menuknop “Huidige deelnames” vind je je inschrijving terug.</p>\r\n                    <p>Wil je je inschrijving aanpassen? Neem dan contact met ons op.</p>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={10}>\r\n                    <ButtonGroup className=\"float-right\">\r\n                        <Link to={`/inschrijvingen-projecten`}>\r\n                            <Button className={'w-button'} size=\"sm\">\r\n                                Naar mijn huidige deelnames\r\n                            </Button>\r\n                        </Link>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepFive;\r\n","import React from 'react';\r\nimport StepOneLoan from './StepOneLoan';\r\nimport StepOneObligation from './StepOneObligation';\r\nimport StepOneCapital from './StepOneCapital';\r\nimport StepOnePcr from './StepOnePcr';\r\nimport StepTwo from './StepTwo';\r\nimport StepThree from './StepThree';\r\nimport StepFour from './StepFour';\r\nimport StepFive from './StepFive';\r\n\r\nfunction Steps({\r\n    portalSettings,\r\n    currentStep,\r\n    previous,\r\n    next,\r\n    project,\r\n    contactProjectData,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    switch (currentStep) {\r\n        case 1:\r\n            switch (project.projectType.codeRef) {\r\n                case 'loan':\r\n                    return (\r\n                        <StepOneLoan\r\n                            next={next}\r\n                            project={project}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'obligation':\r\n                    return (\r\n                        <StepOneObligation\r\n                            next={next}\r\n                            project={project}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'capital':\r\n                    return (\r\n                        <StepOneCapital\r\n                            next={next}\r\n                            project={project}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                case 'postalcode_link_capital':\r\n                    return (\r\n                        <StepOnePcr\r\n                            portalSettings={portalSettings}\r\n                            next={next}\r\n                            project={project}\r\n                            initialContact={initialContact}\r\n                            initialRegisterValues={initialRegisterValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                        />\r\n                    );\r\n                default:\r\n                    return null;\r\n            }\r\n\r\n        case 2:\r\n            return (\r\n                <StepTwo\r\n                    portalSettings={portalSettings}\r\n                    previous={previous}\r\n                    next={next}\r\n                    project={project}\r\n                    initialContact={initialContact}\r\n                    handleSubmitContactValues={handleSubmitContactValues}\r\n                />\r\n            );\r\n        case 3:\r\n            return (\r\n                <StepThree\r\n                    project={project}\r\n                    contactProjectData={contactProjectData}\r\n                    previous={previous}\r\n                    next={next}\r\n                    initialRegisterValues={initialRegisterValues}\r\n                    handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                />\r\n            );\r\n        case 4:\r\n            return (\r\n                <StepFour\r\n                    previous={previous}\r\n                    next={next}\r\n                    registerValues={initialRegisterValues}\r\n                    setSucces={setSucces}\r\n                />\r\n            );\r\n        case 5:\r\n            return <StepFive />;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default Steps;\r\n","import React from 'react';\r\nimport Steps from './steps';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction MasterForm({\r\n    portalSettings,\r\n    project,\r\n    contactProjectData,\r\n    initialRegisterValues,\r\n    handleSubmitRegisterValues,\r\n    initialContact,\r\n    handleSubmitContactValues,\r\n    setSucces,\r\n}) {\r\n    const [currentStep, setStep] = React.useState(1);\r\n\r\n    function previous() {\r\n        setStep(currentStep <= 2 ? 1 : currentStep - 1);\r\n    }\r\n\r\n    function next() {\r\n        setStep(currentStep >= 4 ? 5 : currentStep + 1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {currentStep <= 4 ? (\r\n                <Row className={'mb-4'}>\r\n                    <Col>\r\n                        <div className={'arrow-steps clearfix'}>\r\n                            <div className={`step ${currentStep === 1 ? 'current' : ''}`}>1. Inschrijven</div>\r\n                            <div className={`step ${currentStep === 2 ? 'current' : ''}`}>2. Gegevens</div>\r\n                            <div className={`step ${currentStep === 3 ? 'current' : ''}`}>3. Voorwaarden</div>\r\n                            <div className={`step ${currentStep === 4 ? 'current' : ''}`}>4. Inschrijfformulier</div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            ) : null}\r\n            <Steps\r\n                portalSettings={portalSettings}\r\n                currentStep={currentStep}\r\n                previous={previous}\r\n                next={next}\r\n                project={project}\r\n                contactProjectData={contactProjectData}\r\n                initialRegisterValues={initialRegisterValues}\r\n                handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                initialContact={initialContact}\r\n                handleSubmitContactValues={handleSubmitContactValues}\r\n                setSucces={setSucces}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MasterForm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../api/project/ProjectAPI';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport MasterForm from './MasterForm';\r\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\r\nimport axios from 'axios';\r\n\r\nfunction RegisterProject({ match, currentSelectedContact }) {\r\n    const initialRegisterValues = {\r\n        contactId: null,\r\n        projectId: null,\r\n        participationsOptioned: 0,\r\n        powerKwhConsumption: 0,\r\n        amountOptioned: 0,\r\n        didAcceptAgreement: false,\r\n        didUnderstandInfo: false,\r\n        choiceMembership: 0,\r\n    };\r\n\r\n    const initialPcrValues = {\r\n        pcrYearlyPowerKwhConsumption: 0,\r\n        pcrPostalCode: '',\r\n        pcrHasSolarPanels: 'N',\r\n        pcrInputGeneratedNumberOfKwh: 0,\r\n        pcrEstimatedRevenueOk: 'Y',\r\n    };\r\n\r\n    const [registerValues, setRegisterValues] = useState(initialRegisterValues);\r\n\r\n    const [project, setProject] = useState({});\r\n    const [contact, setContact] = useState({});\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isSucces, setSucces] = useState(false);\r\n    const [isRegistered, setRegistered] = useState(false);\r\n    const [contactProjectData, setContactProjectData] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (currentSelectedContact.id) {\r\n            (function fetchContactAndProject() {\r\n                setLoading(true);\r\n\r\n                axios\r\n                    .all([\r\n                        ProjectAPI.fetchProject(match.params.id),\r\n                        ContactAPI.fetchContact(currentSelectedContact.id),\r\n                        ContactAPI.fetchContactProjectData(currentSelectedContact.id, match.params.id),\r\n                    ])\r\n                    .then(\r\n                        axios.spread((payloadProject, payloadContact, payloadContactProjectData) => {\r\n                            const contact = payloadContact.data.data;\r\n                            const project = payloadProject.data.data;\r\n                            setProject(project);\r\n                            const contactData = rebaseContact(contact);\r\n                            setContact(contactData);\r\n                            callFetchContactProjects();\r\n\r\n                            setContactProjectData(payloadContactProjectData.data);\r\n\r\n                            if (\r\n                                project &&\r\n                                project.projectType &&\r\n                                project.projectType.codeRef === 'postalcode_link_capital'\r\n                            ) {\r\n                                let pcrPostalCode = '';\r\n                                if (contactData.typeId === 'organisation') {\r\n                                    pcrPostalCode = contactData.visitAddress ? contactData.visitAddress.postalCode : '';\r\n                                } else {\r\n                                    pcrPostalCode = contactData.primaryAddress\r\n                                        ? contactData.primaryAddress.postalCode\r\n                                        : '';\r\n                                }\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\r\n                                    ...initialPcrValues,\r\n                                    pcrPostalCode,\r\n                                });\r\n                            } else {\r\n                                setRegisterValues({\r\n                                    ...registerValues,\r\n                                    projectId: match.params.id,\r\n                                    contactId: currentSelectedContact.id,\r\n                                    choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\r\n                                });\r\n                            }\r\n\r\n                            setLoading(false);\r\n                        })\r\n                    )\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })();\r\n        }\r\n\r\n        (function callFetchPortalSettings() {\r\n            setLoading(true);\r\n            const keys =\r\n                '?keys[]=portalName' +\r\n                '&keys[]=portalWebsite' +\r\n                '&keys[]=portalUrl' +\r\n                '&keys[]=responsibleUserId' +\r\n                '&keys[]=checkContactTaskResponsibleUserId' +\r\n                '&keys[]=linkPrivacyPolicy' +\r\n                '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n                '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n            PortalSettingsAPI.fetchPortalSettings(keys)\r\n                .then(payload => {\r\n                    setPortalSettings({ ...payload.data });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ isLoading: false, hasError: true });\r\n                });\r\n        })();\r\n    }, [match, currentSelectedContact]);\r\n\r\n    function callFetchContactProjects() {\r\n        ContactAPI.fetchContactWithParticipants(currentSelectedContact.id)\r\n            .then(payload => {\r\n                let contactProjecten = [];\r\n                payload.data.data.participations.map(item => contactProjecten.push(item.project.id));\r\n\r\n                const projectId = match.params.id;\r\n\r\n                if (contactProjecten.includes(Number(projectId))) {\r\n                    setRegistered(true);\r\n                } else {\r\n                    setRegistered(false);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    function handleSubmitRegisterValues(values) {\r\n        setRegisterValues({ ...registerValues, ...values });\r\n    }\r\n\r\n    function handleSubmitContactValues(values, actions, nextStep) {\r\n        const updatedContact = { ...contact, ...values };\r\n        ContactAPI.updateContact(updatedContact)\r\n            .then(payload => {\r\n                ContactAPI.fetchContact(currentSelectedContact.id)\r\n                    .then(payload => {\r\n                        const contactData = rebaseContact(payload.data.data);\r\n\r\n                        setContact(contactData);\r\n                        nextStep();\r\n                    })\r\n                    .catch(error => {\r\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                        setLoading(false);\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : isRegistered ? (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">\r\n                                <strong>{formatFullName(contact.fullName)}</strong> is al ingeschreven voor project{' '}\r\n                                <strong>{project.name}</strong>\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={10}>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijvingen-projecten`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Naar huidige deelnames\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            ) : (\r\n                <Row>\r\n                    <Col>\r\n                        {isSucces ? (\r\n                            <h1 className=\"content-heading\">\r\n                                Ingeschreven voor project <strong>{project.name}</strong>\r\n                            </h1>\r\n                        ) : (\r\n                            <h1 className=\"content-heading\">\r\n                                Schrijf <strong>{formatFullName(contact.fullName)}</strong> in voor project{' '}\r\n                                <strong>{project.name}</strong>\r\n                            </h1>\r\n                        )}\r\n                        <MasterForm\r\n                            portalSettings={portalSettings}\r\n                            project={project}\r\n                            contactProjectData={contactProjectData}\r\n                            initialRegisterValues={registerValues}\r\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\r\n                            initialContact={contact}\r\n                            handleSubmitContactValues={handleSubmitContactValues}\r\n                            setSucces={setSucces}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegisterProjectWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegisterProject {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../../api/project/ProjectAPI';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\n\r\nfunction ProjectList(props) {\r\n    const [contactProjectsArray, setContactProjectsArray] = useState([]);\r\n    const [contact, setContact] = useState({});\r\n    const [projectData, setProjectData] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        (function callFetchProjects() {\r\n            setLoading(true);\r\n            // Call Api if current selected contact id is filled\r\n            if (props.currentSelectedContact.id) {\r\n                // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n                if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                    callFetchContactProjects();\r\n                    callFetchContact();\r\n                }\r\n            }\r\n            ProjectAPI.fetchProjects()\r\n                .then(payload => {\r\n                    setProjectData(payload.data.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContactProjects() {\r\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                let contactProjecten = [];\r\n                payload.data.data.participations.map(item => contactProjecten.push(item.project.id));\r\n                setContactProjectsArray(contactProjecten);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function callFetchContact() {\r\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContact(payload.data.data);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        Overzicht projecten waarop <strong>{formatFullName(contact.fullName)}</strong> kan inschrijven.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <p>Klik op het project voor meer details.</p>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {isLoading ? (\r\n                        <LoadingView />\r\n                    ) : projectData.length === 0 ? (\r\n                        'Geen projecten beschikbaar om op in te schrijven.'\r\n                    ) : (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Project</th>\r\n                                    <th>Ingeschreven</th>\r\n                                    <th>Start inschrijving</th>\r\n                                    <th>Einde inschrijving</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {projectData.map(project => (\r\n                                    <tr key={project.id}>\r\n                                        <td>\r\n                                            {contactProjectsArray.includes(project.id) ? (\r\n                                                project.name\r\n                                            ) : (\r\n                                                <Link to={`/project/${project.id}`}>{project.name}</Link>\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            {contactProjectsArray.includes(project.id) ? (\r\n                                                <div className=\"text-success text-center\">✔</div>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            {project.dateStartRegistrations\r\n                                                ? moment(project.dateStartRegistrations).format('LL')\r\n                                                : ''}\r\n                                        </td>\r\n                                        <td>\r\n                                            {project.dateEndRegistrations\r\n                                                ? moment(project.dateEndRegistrations).format('LL')\r\n                                                : ''}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function ProjectListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => <ProjectList {...props} currentSelectedContact={currentSelectedContact} />}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction LoanDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                    <FormLabel>Lening nodig</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.amountOfLoanNeeded)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.minAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal bedrag per contact</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.maxAmountLoan)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoanDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction ObligationDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Nominale waarde per obligatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal obligaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal obligaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ObligationDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction CapitalDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Nominale waarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CapitalDetails;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport moment from 'moment';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\n\r\nfunction PcrDetails({ project }) {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Project</FormLabel>\r\n                    <TextBlock>{project.name}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Omschrijving project</FormLabel>\r\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\r\n                </Col>\r\n\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Nominale waarde per participatie</FormLabel>\r\n                    <TextBlock>{MoneyPresenter(project.participationWorth)}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Aantal participaties nodig</FormLabel>\r\n                    <TextBlock>{project.totalParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.minParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\r\n                    <TextBlock>{project.maxParticipations}</TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Start inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <FormLabel>Eind inschrijving</FormLabel>\r\n                    <TextBlock>\r\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\r\n                    </TextBlock>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PcrDetails;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ProjectAPI from '../../../api/project/ProjectAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport LoanDetails from './LoanDetails';\r\nimport ObligationDetails from './ObligationDetails';\r\nimport CapitalDetails from './CapitalDetails';\r\nimport PcrDetails from './PcrDetails';\r\nimport PortalSettingsAPI from '../../../api/portal-settings/PortalSettingsAPI';\r\n\r\nfunction ProjectDetails({ match }) {\r\n    const [portalSettings, setPortalSettings] = useState({});\r\n    const [project, setProject] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const keys =\r\n            '?keys[]=portalName' +\r\n            '&keys[]=portalWebsite' +\r\n            '&keys[]=portalUrl' +\r\n            '&keys[]=responsibleUserId' +\r\n            '&keys[]=checkContactTaskResponsibleUserId' +\r\n            '&keys[]=linkPrivacyPolicy' +\r\n            '&keys[]=pcrPowerKwhConsumptionPercentage' +\r\n            '&keys[]=pcrGeneratingCapacityOneSolorPanel';\r\n        PortalSettingsAPI.fetchPortalSettings(keys)\r\n            .then(payload => {\r\n                setPortalSettings({ ...payload.data });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ isLoading: false, hasError: true });\r\n            });\r\n\r\n        (function callFetchProject() {\r\n            setLoading(true);\r\n            ProjectAPI.fetchProject(match.params.id)\r\n                .then(payload => {\r\n                    setProject(payload.data.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                    setLoading(false);\r\n                });\r\n        })();\r\n    }, [match]);\r\n\r\n    function renderDetails() {\r\n        switch (project.projectType.codeRef) {\r\n            case 'loan':\r\n                return <LoanDetails project={project} />;\r\n            case 'obligation':\r\n                return <ObligationDetails project={project} />;\r\n            case 'capital':\r\n                return <CapitalDetails project={project} />;\r\n            case 'postalcode_link_capital':\r\n                return <PcrDetails project={project} />;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"content-heading\">Inschrijven project</h1>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {renderDetails()}\r\n\r\n                    <Row className={'mt-5'}>\r\n                        <Col>\r\n                            <p>\r\n                                Meer informatie over dit project vind je{' '}\r\n                                <a href={`${project.linkUnderstandInfo}`} target=\"_blank\">\r\n                                    hier\r\n                                </a>\r\n                            </p>\r\n                            <p>Wil je inschrijven op dit project. Klik dan op \"Ga naar inschrijven\".</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <ButtonGroup className=\"float-right\">\r\n                                <Link to={`/inschrijven/${project.id}`}>\r\n                                    <Button className={'w-button'} size=\"sm\">\r\n                                        Ga naar inschrijven\r\n                                    </Button>\r\n                                </Link>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ProjectDetails;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport ContactAPI from '../../../api/contact/ContactAPI';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\r\nimport moment from 'moment';\r\n\r\nfunction RegistrationList(props) {\r\n    const [contact, setContact] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setContact(payload.data.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    function formatFullName(fullName) {\r\n        if (fullName) {\r\n            if (fullName.search(',') < 0) {\r\n                return fullName;\r\n            } else {\r\n                const firstName = fullName.slice(fullName.search(',') + 2);\r\n                const lastName = fullName.slice(0, fullName.search(','));\r\n                return firstName + ' ' + lastName;\r\n            }\r\n        } else {\r\n            return ' ';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">\r\n                        De projecten waarin <strong>{formatFullName(contact.fullName)}</strong> deelneemt.\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {isLoading ? (\r\n                        <LoadingView />\r\n                    ) : contact.length === 0 ? (\r\n                        'Nog geen inschrijvingen.'\r\n                    ) : (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Project</th>\r\n                                    <th>Deelname</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {contact.participations.map(participation => {\r\n                                    if (\r\n                                        !participation.project.dateEnd ||\r\n                                        moment(participation.project.dateEnd).format('YYYY-MM-DD') >=\r\n                                            moment().format('YYYY-MM-DD')\r\n                                    ) {\r\n                                        return (\r\n                                            <tr key={participation.id}>\r\n                                                <td>{participation.project.name}</td>\r\n                                                <td>\r\n                                                    {participation.project.projectType.codeRef == 'loan' ? (\r\n                                                        <>\r\n                                                            {participation.amountInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountInteressed)}{' '}\r\n                                                                    <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountOptioned)}{' '}\r\n                                                                    <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening {MoneyPresenter(participation.amountGranted)}{' '}\r\n                                                                    <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.amountDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    Lening{' '}\r\n                                                                    {MoneyPresenter(participation.amountDefinitive)}{' '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'obligation' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' obligaties '} <em> (Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' obligaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' obligaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' obligaties '}\r\n                                                                    <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef == 'capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {participation.project.projectType.codeRef ==\r\n                                                    'postalcode_link_capital' ? (\r\n                                                        <>\r\n                                                            {participation.participationsInteressed != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsInteressed}\r\n                                                                    {' participaties '} <em>(Interesse)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsOptioned != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsOptioned}\r\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsGranted != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsGranted}\r\n                                                                    {' participaties '} <em>(Toegekend)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                            {participation.participationsDefinitive != 0 ? (\r\n                                                                <span>\r\n                                                                    {participation.participationsDefinitive}\r\n                                                                    {' participaties '} <em>(Definitief)</em>\r\n                                                                </span>\r\n                                                            ) : (\r\n                                                                ''\r\n                                                            )}\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function RegistrationListWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ currentSelectedContact }) => (\r\n                <RegistrationList {...props} currentSelectedContact={currentSelectedContact} />\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    personTitleId: Yup.string()\r\n        .nullable()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormPersonal = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            personTitleId: '',\r\n            personFirstName: '',\r\n            personLastName: '',\r\n        }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor jezelf</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonText\r\n                            buttonText={'Account aanmaken'}\r\n                            buttonClassName={'authorization-button'}\r\n                            size=\"sm\"\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                            disabled={showSuccessMessage}\r\n                        />\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormPersonal;\r\n","import React from 'react';\r\nimport InputText from '../../../components/form/InputText';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport Titles from '../../../data/Titles';\r\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\r\nimport Select from '../../../components/form/Select';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email()\r\n        .required('Verplicht'),\r\n    organisationName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personTitleId: Yup.string()\r\n        .nullable()\r\n        .required('Verplicht'),\r\n    personFirstName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n    personLastName: Yup.string()\r\n        .trim()\r\n        .required('Verplicht'),\r\n});\r\n\r\nconst NewAccountFormOrganisation = ({ handleSubmit, showSuccessMessage }) => (\r\n    <Formik\r\n        initialValues={{ email: '', organisationName: '', personTitleId: '', personFirstName: '', personLastName: '' }}\r\n        enableReinitialize={true}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, actions) => {\r\n            actions.setSubmitting(true);\r\n            handleSubmit(values, actions);\r\n        }}\r\n        render={({ isSubmitting, errors, touched }) => (\r\n            <Form>\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Account aanmaken voor je organisatie</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"organisationName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Naam Organisatie'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <p className={'authorization-text'}>Gegevens contactpersoon</p>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personTitleId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"title_id\"\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Aanhef'}\r\n                                    options={Titles}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personFirstName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"first_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Voornaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"personLastNamePrefixId\"\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name_prefix_id\"\r\n                                    options={LastNamePrefixes}\r\n                                    className={'select-field-transparent'}\r\n                                    placeholder={'Tussenvoegsel'}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name=\"personLastName\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                    id=\"last_name-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'Achternaam'}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Field\r\n                            name=\"email\"\r\n                            render={({ field }) => (\r\n                                <InputText\r\n                                    field={field}\r\n                                    id=\"email-new-acount\"\r\n                                    className={''}\r\n                                    placeholder={'E-mailadres'}\r\n                                    errors={errors}\r\n                                    touched={touched}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <ButtonText\r\n                            buttonText={'Account aanmaken'}\r\n                            buttonClassName={'authorization-button'}\r\n                            size=\"sm\"\r\n                            type={'submit'}\r\n                            loading={isSubmitting}\r\n                            loadingSpinnerColor={'#034b8c'}\r\n                            disabled={showSuccessMessage}\r\n                        />\r\n                    </Row>\r\n                </>\r\n            </Form>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default NewAccountFormOrganisation;\r\n","import React, { useState } from 'react';\r\nimport { GoogleReCaptchaProvider, useGoogleReCaptcha } from 'react-google-recaptcha-v3';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport NewAccountFormPersonal from './NewAccountFormPersonal';\r\nimport NewAccountFormOrganisation from './NewAccountFormOrganisation';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, ButtonToolbar } from 'react-bootstrap';\r\n\r\nconst NewAccount = props => {\r\n    const { executeRecaptcha } = useGoogleReCaptcha();\r\n    const [contactType, setContactType] = useState('person');\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    async function handleSubmit(values, actions) {\r\n        if (!executeRecaptcha) {\r\n            return;\r\n        }\r\n        const reCaptchaToken = await executeRecaptcha('signup_page');\r\n\r\n        AuthAPI.newAccount({ ...values, contactType: contactType, reCaptchaToken })\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If new account fails show error and then set submitting back to false\r\n                toggleError(true);\r\n                if (error.response && error.response.status === 404) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres.'\r\n                    );\r\n                } else if (error.response && error.response.status === 405) {\r\n                    setErrorMessage(\r\n                        'Er bestaat al een contact met het e-mailadres, voornaam en achternaam dat je hebt ingevuld. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres, voornaam of achternaam.'\r\n                    );\r\n                } else {\r\n                    setErrorMessage('Fout bij aanmaken nieuw account!');\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    function redirect() {\r\n        return <Redirect to={'nieuw-account-succes'} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"authorization-container\">\r\n            <Container fluid className=\"authorization-text\">\r\n                <Row className=\"justify-content-center align-content-start align-content-lg-center full-height p-2\">\r\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"4\" xl=\"4\">\r\n                        <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container-small\" />\r\n\r\n                        {showSuccessMessage ? (\r\n                            redirect()\r\n                        ) : (\r\n                            <>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <h3 className={'authorization-text'}>Nieuw account</h3>\r\n                                </Row>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <p className={'authorization-text'}>Maak binnen 2 minuten een account aan.</p>\r\n                                </Row>\r\n                                <br />\r\n                                <Row className=\"justify-content-center\">\r\n                                    <ButtonToolbar toggle>\r\n                                        <Col>\r\n                                            <Button\r\n                                                className={'authorization-button'}\r\n                                                variant={\r\n                                                    contactType === 'person'\r\n                                                        ? 'primary fixed-height'\r\n                                                        : 'light fixed-height'\r\n                                                }\r\n                                                block\r\n                                                onClick={() => setContactType('person')}\r\n                                            >\r\n                                                Voor jezelf\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                className={'authorization-button'}\r\n                                                variant={contactType === 'organisation' ? 'primary' : 'light'}\r\n                                                block\r\n                                                onClick={() => setContactType('organisation')}\r\n                                            >\r\n                                                Voor je organisatie\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </ButtonToolbar>\r\n                                </Row>\r\n                                <br />\r\n\r\n                                {contactType === 'person' ? (\r\n                                    <NewAccountFormPersonal\r\n                                        handleSubmit={handleSubmit}\r\n                                        showSuccessMessage={showSuccessMessage}\r\n                                    />\r\n                                ) : (\r\n                                    <NewAccountFormOrganisation\r\n                                        handleSubmit={handleSubmit}\r\n                                        showSuccessMessage={showSuccessMessage}\r\n                                    />\r\n                                )}\r\n                                <br />\r\n\r\n                                {showError ? (\r\n                                    <Row>\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            {errorMessage}\r\n                                        </Alert>\r\n                                    </Row>\r\n                                ) : null}\r\n                            </>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction NewAccountWithProvider() {\r\n    const RE_CAPTCHA_KEY = process.env.REACT_APP_RE_CAPTCHA_KEY;\r\n\r\n    return (\r\n        <GoogleReCaptchaProvider reCaptchaKey={RE_CAPTCHA_KEY} language={'nl'}>\r\n            <NewAccount />\r\n        </GoogleReCaptchaProvider>\r\n    );\r\n}\r\n\r\nexport default NewAccountWithProvider;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NewAccountSuccess = () => {\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src=\"images/logo.png\" alt=\"\" className=\"image logo-container\" />\r\n                    <div>\r\n                        <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                        <p className={'authorization-text'}>\r\n                            Binnen enkele minuten ontvang je een e-mail met een persoonlijke link. Via deze link kun je\r\n                            je account activeren.\r\n                            <br />\r\n                            Het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van bijvoorbeeld\r\n                            Gmail en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of je onze mail daar\r\n                            terug vindt.\r\n                        </p>\r\n                        <a onClick={window.close} href=\"#\" className=\"authorization-link\">\r\n                            Sluit venster\r\n                        </a>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NewAccountSuccess;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport TextBlock from '../../../components/general/TextBlock';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object({\r\n    email: Yup.string()\r\n        .email('Geen geldig e-mailadres')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountEmail() {\r\n    const [portalUserEmail, setPortalUserEmail] = useState('');\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (function callFetchUserEmail() {\r\n            PortalUserAPI.fetchPortalUserEmail()\r\n                .then(payload => {\r\n                    setPortalUserEmail(payload.data);\r\n                })\r\n                .catch(error => {\r\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                });\r\n        })();\r\n    }, []);\r\n    function handleSubmitChangeEmail(values, actions) {\r\n        PortalUserAPI.changeEmail(values)\r\n            .then(payload => {\r\n                setPortalUserEmail(values.email);\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', changePrimaryEmailAddress: false }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangeEmail(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Inlog e-mail is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit\r\n                            e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan\r\n                            alsjeblieft een ander e-mailadres.\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12}>\r\n                            <FormLabel className={'field-label'}>Huidig e-mailadres</FormLabel>\r\n                            <TextBlock>{portalUserEmail}</TextBlock>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label pt-1'}>Nieuw e-mailadres</Form.Label>\r\n                            <Field\r\n                                name=\"email\"\r\n                                render={({ field }) => (\r\n                                    <InputText field={field} errors={errors} touched={touched} id=\"email\" />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Field\r\n                                name=\"changePrimaryEmailAddress\"\r\n                                render={({ field }) => (\r\n                                    <label className=\"w-checkbox checkbox-fld\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            {...field}\r\n                                            id=\"change-primary-email-address\"\r\n                                            checked={field.value}\r\n                                            className=\"w-checkbox-input checkbox\"\r\n                                        />\r\n                                        <span\r\n                                            htmlFor=\"change-primary-email-address\"\r\n                                            className=\"checkbox-label w-form-label\"\r\n                                        >\r\n                                            Wijziging ook doorvoeren op huidig correspondentie e-mailadres?\r\n                                        </span>\r\n                                    </label>\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig e-mailadres'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountEmail;\r\n","import React, { useState } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport InputText from '../../../components/form/InputText';\r\nimport ButtonText from '../../../components/button/ButtonText';\r\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(10, 'Minimum van ${min} verplicht')\r\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\r\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\r\n        .required('Verplicht'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\r\n        .required('Verplicht'),\r\n});\r\n\r\nfunction ChangeAccountPassword() {\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [showError, toggleError] = useState(false);\r\n\r\n    function handleSubmitChangePassword(values, actions) {\r\n        PortalUserAPI.changePassword(values)\r\n            .then(payload => {\r\n                actions.resetForm();\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                actions.setSubmitting(false);\r\n                toggleError(true);\r\n                toggleSuccessMessage(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ password: '', passwordConfirmation: '' }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={function(values, actions) {\r\n                handleSubmitChangePassword(values, actions);\r\n            }}\r\n        >\r\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {showSuccessMessage ? (\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\r\n                                    Wachtwoord is succesvol gewijzigd!\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                    {showError ? (\r\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                            Fout bij wijzigen wachtwoord!\r\n                        </Alert>\r\n                    ) : null}\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label'}>Nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"password\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"password\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12} md={9}>\r\n                            <Form.Label className={'field-label mt-0'}>Herhaal nieuw wachtwoord</Form.Label>\r\n                            <Field\r\n                                name=\"passwordConfirmation\"\r\n                                render={({ field }) => (\r\n                                    <InputText\r\n                                        field={field}\r\n                                        id=\"passwordConfirmation\"\r\n                                        className={field.value ? 'content numeric-password' : 'content'}\r\n                                        placeholder={'Herhaal nieuw wachtwoord'}\r\n                                        errors={errors}\r\n                                        touched={touched}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={12} md={6}>\r\n                            <ButtonText\r\n                                buttonText={'Wijzig wachtwoord'}\r\n                                size=\"sm\"\r\n                                type={'submit'}\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default ChangeAccountPassword;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ChangeAccountEmail from './Email';\r\nimport ChangeAccountPassword from './Password';\r\n\r\nfunction ChangeAccount() {\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">Wijzig inloggegevens</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12} md={6} className={'mb-5'}>\r\n                    <h3 className={'h3'}>Wijzig inlog e-mailadres</h3>\r\n\r\n                    <ChangeAccountEmail />\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <h3 className={'h3'}>Wijzig wachtwoord</h3>\r\n\r\n                    <ChangeAccountPassword />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ChangeAccount;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch } from 'react-router-dom';\r\nimport ProtectedRoute from './route/ProtectedRoute';\r\nimport PublicRoute from './route/PublicRoute';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport { PortalUserProvider } from './context/PortalUserContext';\r\nimport Login from './container/authorization/login';\r\nimport Register from './container/authorization/register';\r\nimport Forgot from './container/authorization/forgot';\r\nimport Reset from './container/authorization/reset';\r\nimport ContactDetails from './container/contact-details';\r\nimport MyAreasOfInterest from './container/my-areas-of-interest';\r\nimport RegisterProject from './container/register';\r\nimport ProjectList from './container/project/list';\r\nimport ProjectDetails from './container/project/details';\r\nimport RegistrationList from './container/registration/list';\r\nimport NewAccount from './container/authorization/new-account';\r\nimport NewAccountSuccess from './container/authorization/new-account/NewAccountSuccess';\r\nimport ChangeAccount from './container/authorization/change-account';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n                <PortalUserProvider>\r\n                    <Switch>\r\n                        <ProtectedRoute exact path=\"/\" component={ContactDetails} />\r\n                        <ProtectedRoute path=\"/gegevens\" component={ContactDetails} />\r\n                        <ProtectedRoute path=\"/mijn-interessegebieden\" component={MyAreasOfInterest} />\r\n                        <ProtectedRoute path=\"/inschrijven/:id\" component={RegisterProject} />\r\n                        <ProtectedRoute path=\"/inschrijven-projecten\" component={ProjectList} />\r\n                        <ProtectedRoute path=\"/inschrijvingen-projecten\" component={RegistrationList} />\r\n                        <ProtectedRoute path=\"/project/:id\" component={ProjectDetails} />\r\n                        <ProtectedRoute path=\"/wijzig-inloggegevens\" component={ChangeAccount} />\r\n                        <PublicRoute path=\"/login\" component={Login} />\r\n                        <PublicRoute path=\"/activeer-registratie/:registrationCode/:email\" component={Register} />\r\n                        <PublicRoute path=\"/wachtwoord-vergeten\" component={Forgot} />\r\n                        <PublicRoute path=\"/wachtwoord-wijzigen/:token/:email\" component={Reset} />\r\n                        <PublicRoute path=\"/nieuw-account\" component={NewAccount} />\r\n                        <PublicRoute path=\"/nieuw-account-succes\" component={NewAccountSuccess} />\r\n                    </Switch>\r\n                </PortalUserProvider>\r\n            </AuthProvider>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/normalize.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-day-picker/lib/style.css';\r\nimport './css/webflow.css';\r\nimport './css/econobis.webflow.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'moment/locale/nl';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// Server data is set and can now removed\r\nvar serverDataScript = document.getElementById('server-data');\r\nserverDataScript.remove();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}