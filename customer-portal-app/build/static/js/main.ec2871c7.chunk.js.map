{"version":3,"sources":["context/AuthContext.js","context/PortalUserContext.js","context/ThemeSettingsContext.js","components/layout/Header.js","api/default-setup/AxiosInstance.js","api/portal-user/PortalUserAPI.js","route/ProtectedRoute.js","route/PublicRoute.js","components/form/InputText.js","components/button/ButtonText.js","container/authorization/login/Form.js","api/auth/AuthAPI.js","api/portal-settings/PortalSettingsAPI.js","api/general/MeAPI.js","container/authorization/login/index.js","container/authorization/two-factor/index.js","container/authorization/two-factor/recover.js","container/authorization/register/Form.js","container/authorization/register/index.js","container/authorization/forgot/Form.js","container/authorization/forgot/index.js","container/authorization/reset/Form.js","container/authorization/reset/index.js","components/general/LoadingView.js","api/contact/ContactAPI.js","helpers/RebaseContact.js","container/dashboard/widget/index.js","container/dashboard/widget/default.js","api/dashboard/DashboardSettingsAPI.js","container/dashboard/index.js","components/general/TextBlock.js","container/contact-details/default-form-personal/View.js","components/form/Select.js","data/Countries.js","data/EnergySuppliers.js","data/Titles.js","data/LastNamePrefixes.js","components/form/InputTextDate.js","container/contact-details/default-form-personal/Edit.js","helpers/ValidationSchemaPersonal.js","container/contact-details/Personal.js","container/contact-details/default-form-organisation/View.js","container/contact-details/default-form-organisation/Edit.js","helpers/ValidationSchemaOrganisation.js","container/contact-details/Organisation.js","container/contact-details/index.js","container/my-areas-of-interest/Form.js","container/my-areas-of-interest/index.js","api/project/ProjectAPI.js","helpers/MoneyPresenter.js","helpers/CalculateTransactionCosts.js","components/form/InputTextCurrency.js","container/register/steps/StepOneLoan.js","container/register/steps/StepOneObligation.js","container/register/steps/StepOneCapital.js","container/register/steps/StepOnePcr.js","container/register/steps/StepTwo.js","container/register/steps/StepThree.js","components/general/ViewHtmlAsText.js","api/participant-project/ParticipantProjectAPI.js","container/register/steps/StepFour.js","container/register/steps/StepFive.js","container/register/steps/index.js","container/register/MasterForm.js","container/register/index.js","container/project/list/address-person/Edit.js","container/project/list/address-organisation/Edit.js","container/project/list/index.js","container/project/details/LoanDetails.js","container/project/details/ObligationDetails.js","container/project/details/CapitalDetails.js","container/project/details/PcrDetails.js","container/project/details/index.js","container/registration/list/index.js","container/authorization/new-account/NewAccountFormPersonal.js","container/authorization/new-account/NewAccountFormOrganisation.js","container/authorization/new-account/index.js","container/authorization/new-account/NewAccountSuccess.js","container/authorization/change-account/Email.js","container/authorization/change-account/Password.js","container/authorization/change-account/TwoFactorSettings.js","container/authorization/change-account/index.js","container/about-us/list/index.js","container/registration/details/Title.js","helpers/ValueBasedOnTypePresenter.js","container/registration/details/project-table/index.js","helpers/classNameBasedOnTypePresenter.js","container/registration/details/mutation-table/index.js","container/registration/details/document-table/index.js","container/registration/details/index.js","container/financial-overview-documents/list/index.js","api/administration/AdministrationAPI.js","container/about-us/details/document-table/index.js","container/about-us/details/index.js","api/participant-mutation/ParticipantMutationAPI.js","container/register/mollie-redirect/index.js","api/quotation-request/QuotationRequestAPI.js","api/opportunity-status/OpportunityStatusAPI.js","container/inspect/list/index.js","container/inspect/details/document-table/index.js","container/inspect/details/index.js","container/availability/TableDragSelect.js","api/portal-user/ContactAvailabilityAPI.js","components/modal/Modal.js","container/availability/ContactAvailabilityDetailsPlanningCopyModal.js","container/availability/ContactAvailabilityDetailsPlanningPanel.js","container/availability/index.js","api/document/DocumentAPI.js","components/pdf/CustomNavigation.js","components/pdf/PdfViewer.js","container/inspect/details/document/index.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","localStorageToken","AuthProvider","props","useState","window","localStorage","getItem","checkIfAuth","isAuth","setAuth","Provider","value","login","payload","cbRedirect","token","access_token","removeItem","setItem","moment","format","logout","force","children","AuthConsumer","Consumer","PortalUserContext","user","setInitialUserData","PortalUserProvider","setUser","currentSelectedContact","setCurrentContact","selectedContactId","id","occupationUser","occupations","find","occupation","primaryContact","organisationUser","typeId","primary","switchCurrentContact","contact","resetCurrentUserToDefault","updateNameSelectedContact","fullNameFnf","firstName","lastNamePrefix","lastName","updatedOccupations","map","occupationContact","PortalUserConsumer","ThemeSettingsContext","defaultThemeSettings","setInitialThemeSettings","setCurrentThemeSettings","switchToDefaultThemeSettings","ThemeSettingsProvider","setDefaultThemeSettings","currentThemeSettings","Date","now","imageHash","useEffect","document","documentElement","style","setProperty","portal_image_bg_file_name_header","portal_main_background_color","portal_main_text_color","portal_background_color","portal_background_text_color","login_header_background_color","login_header_background_text_color","header_icons_color","login_field_background_color","login_field_background_text_color","button_color","button_text_color","ThemeSettingsConsumer","withRouter","location","history","menuOpen","updateStateMenu","closeMenu","formatProfilePicName","replace","redirect","to","push","ref","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","useOutsideAlerter","useRef","className","length","ReactHtmlParser","alignRight","Toggle","marginTop","Menu","Header","Item","onClick","active","occupationForPortal","key","xs","undefined","portal_logo_file_name_header","src","fontSize","marginLeft","padding","disabled","Divider","pathname","Button","right","width","isOpen","onStateChange","state","handleStateChange","customBurgerIcon","Fragment","hasFinancialOverviews","BASE_URL","__SERVER_DATA__","base_url","axiosInstance","axios","create","baseURL","interceptors","request","use","config","lastActivity","add","hash","startsWith","setTimeout","reload","checkTokenExpiration","AUTH_TOKEN","TWO_FACTOR_TOKEN","headers","Authorization","TwoFactorToken","error","Promise","reject","get","params","jory","fld","rlt","values","post","ProtectedRoute","Component","component","rest","useLocation","useHistory","useContext","PortalUserAPI","then","data","portalSettingsLayoutAssigned","catch","response","status","alert","code","includes","render","ProtectedRouteWithContext","PublicRoute","InputText","field","type","readOnly","placeholder","showErrorMessage","errors","touched","classNameErrorMessage","customOnChange","onChange","name","Boolean","defaultProps","ButtonText","buttonClassName","buttonText","onClickAction","loading","title","loadingSpinnerColor","size","color","validationSchema","Yup","shape","username","email","required","password","LoginForm","handleSubmit","initialValues","enableReinitialize","onSubmit","actions","setSubmitting","isSubmitting","AUTH_KEY","client_id","client_secret","client_key","grant_type","requestUrl","defaults","common","loginCredentials","keys","PasswordConfirmation","recovery_code","isLoading","setIsLoading","showError","toggleError","redirectToReferrer","toggleRedirect","from","portalActive","setPortalActive","showNewAtCooperativeLink","setShowNewAtCooperativeLink","newAtCooperativeLinkText","setNewAtCooperativeLinkText","AuthAPI","MeAPI","hasTwoFactorEnabled","hasValidToken","PortalSettingsAPI","fluid","sm","md","lg","xl","alt","variant","href","setCode","preventDefault","e","autoFocus","min","matches","passwordConfirmation","oneOf","RegisterForm","Register","match","showLoginLink","setLoginLink","errorMessage","setErrorMessage","showSuccessMessage","toggleSuccessMessage","registrationCode","decodeURIComponent","password_confirmation","message","RegisterWithContext","ForgotForm","Forgot","ResetForm","Reset","ResetWithContext","Loading","height","person","organisation","emailAddresses","phoneNumbers","addresses","country","primaryAddressEnergySupplierElectricity","energySupplier","flt","f","d","participations","project","projectType","administration","registerValues","contactId","projectId","responseType","contactData","emptyPrimaryAddressEnergySupplierElectricity","energySupplierId","esNumber","memberSince","emptyAddress","street","number","addition","postalCode","city","countryId","eanElectricity","eanGas","primaryAddress","visitAddress","postalAddress","invoiceAddress","address","emptyEmail","emailCorrespondence","emailAddress","emailInvoice","emptyPhoneNumber","phoneNumberPrimary","phoneNumber","phoneNumberTwo","filter","DashboardWidget","text","image","buttonLink","backgroundColorUsed","textColorUsed","externalLink","toLowerCase","Card","backgroundColor","CardImg","whiteSpace","ContactDetailsDashboardWidget","typeContact","isEmpty","SwitchContactDashboardWidget","display","justifyContent","overflowX","margin","Dashboard","setLoading","setContact","dashboardSettings","setDashboardSettings","prevCurrentSelectedContact","usePrevious","ContactAPI","rebaseContact","console","log","finally","DashboardSettingsAPI","LoadingView","welcomeTitle","welcomeMessage","widgets","w","sort","a","b","order","widget","codeRef","widgetImageFileName","defaultWidgetBackgroundColor","defaultWidgetTextColor","DashboardWithContext","TextBlock","showPlaceholder","DefaultContactPersonalView","portalSettings","initialContact","iban","ibanAttn","didAgreeAvg","dateDidAgreeAvg","initials","dateOfBirth","checked","htmlFor","Select","options","optionLabel","emptyOption","option","InputTextDate","max","step","DefaultContactPersonalEdit","projectTypeCodeRef","setFieldValue","memberSinceDisabledBefore","memberSinceDisabledAfter","endDatePrevious","memberSinceNext","subtract","Titles","disableChangeContactNameOnPortal","data-tip","data-for","effect","place","multiline","aria-haspopup","LastNamePrefixes","isParticipant","onChangeAction","blockChangeAddress","blockChangeAddressNumber","isParticipantSceProject","isParticipantPcrProject","isNaN","trim","Countries","toUpperCase","EnergySuppliers","validationSchemaBasic","test","nullable","Number","isInteger","this","parent","search","ibantools","validationSchemaAdditional","typeError","validationSchemaPcrAdditional","validationSchemaPostalCodeAndNumber","ContactDetailsPersonal","handleSubmitContactValues","editButtonGroup","editForm","setEditForm","ValidationSchemaPersonal","concat","aria-label","DefaultContactOrganisationView","primaryOccupations","chamberOfCommerceNumber","vatNumber","website","DefaultContactOrganisationEdit","ContactDetailsOrganisation","ValidationSchemaOrganisation","ContactDetails","setPortalSettings","callFetchContact","switchToView","updatedContact","setStatus","setState","hasError","ContactDetailsWithContext","MyAreasOfInterestForm","arrayHelpers","myAreasOfInterest","myAreaOfInterest","index","participation","generalOptions","generalOption","MyAreasOfInterest","and","o","documentAgreeTerms","documentUnderstandInfo","documentProjectInfo","amount","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","amountOptioned","participationsOptioned","transactionCosts","varAmountOptioned","toString","varParticipationsOptioned","toFixed","transactionCostsCodeRef","transactionCostsAmount","currentBookWorth","transactionCostsAmount3","transactionCostsPercentage3","transactionCostsAmount2","transactionCostsPercentage2","transactionCostsPercentage","transactionCostsAmountMin","transactionCostsAmountMax","InputTextCurrency","StepOneLoan","next","contactProjectData","initialRegisterValues","handleSubmitRegisterValues","transform","originalvalue","minAmountLoan","maxAmountLoan","choiceMembership","showQuestionAboutMembership","belongsToMembershipGroup","calculateAmount","calculateTransactionCostsAmount","useTransactionCostsWithMembership","calculateTransactionCosts","calculateTotalAmount","totalAmount","Label","MoneyPresenter","textIsMemberMerged","textIsNoMemberMerged","textBecomeMemberMerged","textBecomeNoMemberMerged","textTransactionCosts","StepOneObligation","integer","minParticipations","maxParticipations","positive","StepOneCapital","StepOnePcr","pcrYearlyPowerKwhConsumption","pcrPostalCode","checkPostalcodeLink","postalcodeLink","substring","pcrNumberOfSolarPanels","pcrInputGeneratedNumberOfKwh","PCR_POWER_KWH_CONSUMPTION_PERCENTAGE","PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL","calculateEstimatedGeneratedNumberOfKwh","calculateGeneratedNumberOfKwh","calculatePowerKwhConsumption","powerKwhConsumption","pcrEstimatedGeneratedNumberOfKwh","Math","ceil","pcrAdviseMaxNumberOfParticipations","calculateAdviseMaxNumberOfParticipations","pcrHasSolarPanels","pcrEstimatedRevenueOk","StepTwo","previous","StepThree","didAcceptAgreement","didUnderstandInfo","downloadFile","filename","ProjectAPI","fileDownload","dangerouslySetInnerHTML","__html","textAgreeTermsMerged","textLinkAgreeTermsMerged","textLinkUnderstandInfoMerged","usesMollie","ViewHtmlAsText","participantId","StepFour","setSucces","contactDocument","setContactDocument","didAgreeRegistration","contactDocumentOk","ParticipantProjectAPI","econobisPaymentLink","textAcceptAgreementMerged","textAcceptAgreementQuestionMerged","StepFive","textRegistrationFinishedMerged","split","item","Steps","currentStep","MasterForm","setStep","RegisterProject","initialPcrValues","setRegisterValues","setProject","isSucces","setContactProjectData","all","spread","payloadProject","payloadContact","payloadContactProjectData","projectRegisterIndicators","allowChangeParticipation","allowPayMollie","hasParticipation","allowRegisterToProject","nextStep","textNotAllowedRegisterToProject","RegisterProjectWithContext","PersonalAddressEdit","handleSubmitContactAddressValues","OrganisationAddressEdit","ProjectList","contactProjectsArray","setContactProjectsArray","sceOrPcrProjectsAvailable","setSceOrPcrProjectsAvailable","callFetchContactProjects","isSceOrPcrProject","noAddressesFound","responsive","administrationName","dateStartRegistrations","dateEndRegistrations","ProjectListWithContext","LoanDetails","amountOfLoanNeeded","description","ObligationDetails","totalParticipations","CapitalDetails","PcrDetails","ProjectDetails","renderDetails","linkProjectInfo","RegistrationList","dateEnd","amountInteressed","amountGranted","amountDefinitive","participationsInteressed","participationsGranted","participationsDefinitive","RegistrationListWithContext","personFirstName","personLastName","NewAccountFormPersonal","personTitleId","organisationName","NewAccountFormOrganisation","NewAccount","executeRecaptcha","useGoogleReCaptcha","contactType","setContactType","reCaptchaToken","ButtonToolbar","toggle","block","NewAccountWithProvider","reCaptchaKey","process","language","NewAccountSuccess","close","ChangeAccountEmail","portalUserEmail","setPortalUserEmail","changePrimaryEmailAddress","resetForm","handleSubmitChangeEmail","ChangeAccountPassword","handleSubmitChangePassword","TwoFactorSettings","activationCodeInput","setPassword","hasValidPassword","setHasValidPassword","setHasTwoFactorEnabled","activationQr","setActivationQr","isActivatingTwoFactor","setIsActivatingTwoFactor","activationCode","setActivationCode","recoveryCodes","setRecoveryCodes","fetchTwoFactorStatus","fetchQr","svg","fetchRecoveryCodes","confirm","focus","ChangeAccount","INITIAL_STATE","result","reducer","action","AboutUs","useReducer","dispatch","hasSingleRelatedAdministration","setHasSingleRelatedAdministration","singleRelatedAdministration","RegistrationDetailsTitle","contactName","projectName","moneyPresenter","RegistrationDetailsProjectTable","fields","label","dataTip","valueBasedOnTypePresenter","RegistrationDetailsMutationTable","participantMutations","classNameBasedOnTypePresenter","participantMutation","RegistrationDetailsDocumentTable","documents","relatedDocumentsOnPortal","relatedDocumentsProjectOnPortal","RegistrationDetails","basicInformation","FinancialOverviewDocuments","documentsOnPortal","administrationId","AboutUsDocumentTable","AdministrationAPI","AboutUsAdministration","setAdministration","websiteLink","setWebsiteLink","Body","kvkNumber","iBAN","btwNumber","ProjectMollieRedirect","setParticipantMutation","ParticipantMutationAPI","payloadParticipantMutation","isPaidByMollie","textRegistrationFinished","ProjectMollieRedirectWithContext","opportunityActionId","sorts","quotationRequest","quotationRequestId","Inspectlist","quotationRequestsArray","setQuotationRequestsArray","statuses","setStatuses","statusFilter","setStatusFilter","QuotationRequestAPI","OpportunityStatusAPI","colSpan","opportunity","parseInt","intake","fullName","streetPostalCodeCity","datePlanned","dateRecorded","dateApprovedProjectManager","dateReleased","dateApprovedClient","dateApprovedExternal","InspectlistWithContext","InspectDetailsDocumentTable","previewDocument","endsWith","InspectDetails","initialQuotationRequest","setInitialQuotationRequest","underReview","setUnderReview","approved","setApproved","notApproved","setNotApproved","pmApproved","setPmApproved","pmNotApproved","setPmNotApproved","opportunityAction","opportunityStatusId","externalpartyNote","quotationText","statusId","dateUnderReview","primaryphoneNumber","primaryEmailAddress","inspectionPersonTypeId","documentId","InspectDetailsWithContext","TableDragSelect","selectionStarted","startRow","startColumn","endRow","endColumn","addMode","componentDidMount","handleTouchEndWindow","componentWillUnmount","renderRows","Children","tr","i","cell","j","onTouchStart","handleTouchStartCell","onTouchMove","handleTouchMoveCell","selected","beingSelected","isCellBeingSelected","isLeftClick","button","isTouch","eventToCellLocation","row","column","onSelectionStart","nextRowCount","abs","nextColumnCount","maxRows","maxColumns","minRow","maxRow","minColumn","maxColumn","Infinity","onInput","Cell","shouldComponentUpdate","nextProps","td","handleTouchStart","passive","handleTouchMove","onMouseDown","onMouseMove","touches","touch","elementFromPoint","clientX","clientY","tagName","parentNode","rowIndex","cellIndex","startOfWeek","Modal","modalClassName","modalMainClassName","buttonCancelText","buttonConfirmText","closeModal","confirmAction","draggableDisabled","showConfirmAction","ContactAvailabilityDetailsPlanningCopyModal","weekOptions","copyFromWeek","showModal","setShowModal","copyToWeek","setCopyToWeek","numberOfWeeks","setNumberOfWeeks","currentIndex","findIndex","nextWeek","textAlign","ContactAvailabilityAPI","getNumberOfWeekOptions","ContactAvailabilityDetailsPlanningPanel","days","setDays","timeslots","setTimeslots","currentWeek","setCurrentWeek","availabilities","setAvailabilities","startOf","initTimeslots","initDays","temp","day","endOfWeek","clone","endOf","getTimeslotValue","timeslot","some","availability","formatMinutesToTime","minutes","hours","floor","minutesLeft","getWeekOptions","getPreviousWeek","getNextWeek","cells","subCells","getTableDragSelectCells","firstActiveIndex","saveTableDragSelectCells","AvailabilityDetails","CustomPrevButton","page","handlePrevClick","pages","cursor","marginRight","CustomNextButton","handleNextClick","CustomPages","CustomNavigation","PDFViewer","file","scale","propTypes","PropTypes","string","PdfViewer","navigation","DocumentPreview","setScale","setFile","initialDocument","setInitialDocument","DocumentAPI","App","exact","path","CoachInspectDetails","CoachInspectList","Login","TwoFactorConfirm","TwoFactorRecover","hostname","ReactDOM","getElementById","remove","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec2871c7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\n\nconst AuthContext = React.createContext();\n\nconst localStorageToken = '__customer-portal-econobis-token__';\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\n\nconst AuthProvider = function(props) {\n    const [isAuth, setAuth] = useState(checkIfAuth());\n\n    function login(payload, cbRedirect) {\n        const token = payload.access_token;\n        window.localStorage.removeItem(localStorageCurrentSelectedContact);\n        window.localStorage.setItem(localStorageToken, token);\n        localStorage.setItem(localStorageLastActivity, moment().format());\n        setAuth(true);\n        cbRedirect();\n    }\n\n    function logout(force = false) {\n        window.localStorage.removeItem(localStorageToken);\n        window.localStorage.removeItem(localStorageLastActivity);\n\n        /**\n         * De \"force\" parameter wordt meegegeven bij handmatig uitloggen door gebruiker.\n         * Op dat moment willen we ook dat bij volgende keer inloggen de twee factor code opnieuw moet worden ingevoerd.\n         * Als gebruiker wordt uitgelogd doordat de sessie is verlopen komt de code hier ook langs maar willen we niet dat de two factor code opnieuw moet worden ingevoerd bij volgende login.\n         */\n        if(force) {\n            window.localStorage.removeItem('portal_two_factor_token');\n        }\n\n        setAuth(false);\n    }\n\n    function checkIfAuth() {\n        const token = getToken();\n        if (!token) {\n            // Redirect to login\n            return false;\n        }\n        return true;\n    }\n\n    function getToken() {\n        return window.localStorage.getItem(localStorageToken);\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{\n                isAuth: isAuth,\n                login: login,\n                logout: logout,\n            }}\n        >\n            {props.children}\n        </AuthContext.Provider>\n    );\n};\n\nconst AuthConsumer = AuthContext.Consumer;\n\nexport { AuthProvider, AuthConsumer };\n","import React, { createContext, useState } from 'react';\n\nconst localStorageCurrentSelectedContact = '__customer-portal-econobis-current_selected_contact__';\n\nconst PortalUserContext = createContext({\n    user: {},\n    setInitialUserData: () => {},\n});\n\nconst PortalUserProvider = function(props) {\n    const [user, setUser] = useState({});\n    const [currentSelectedContact, setCurrentContact] = useState({});\n\n    function setInitialUserData(user) {\n        setUser(user);\n\n        const selectedContactId = window.localStorage.getItem(localStorageCurrentSelectedContact);\n\n        // When there is already a selected contact id then lookup the contact\n        // Selected contact could be the user or one of the occupations\n        if (selectedContactId) {\n            if (user.id == selectedContactId) {\n                setCurrentContact(user);\n            } else {\n                const occupationUser = user.occupations.find(\n                    occupation => occupation.primaryContact.id == selectedContactId\n                );\n\n                setCurrentContact(occupationUser.primaryContact);\n            }\n        } else {\n            // If there is no selected contact then set default the login user as selected contact.\n            // Except if the user has an organisation as occupation that is primary\n            const organisationUser = user.occupations.find(\n                occupation => occupation.primaryContact.typeId === 'organisation' && occupation.primary\n            );\n\n            if (organisationUser) {\n                setCurrentContact(organisationUser.primaryContact);\n                window.localStorage.setItem(localStorageCurrentSelectedContact, organisationUser.primaryContact.id);\n            } else {\n                setCurrentContact(user);\n                window.localStorage.setItem(localStorageCurrentSelectedContact, user.id);\n            }\n        }\n    }\n\n    function switchCurrentContact(contact) {\n        setCurrentContact(contact);\n        window.localStorage.setItem(localStorageCurrentSelectedContact, contact.id);\n    }\n\n    function resetCurrentUserToDefault() {\n        setUser({});\n        setCurrentContact({});\n    }\n\n    function updateNameSelectedContact(fullNameFnf, typeId, firstName, lastNamePrefix, lastName) {\n        setCurrentContact({ ...currentSelectedContact, fullNameFnf, typeId, firstName, lastNamePrefix, lastName });\n\n        if (user.id === currentSelectedContact.id) {\n            user.fullNameFnf = fullNameFnf;\n            user.typeId = typeId;\n            user.firstName = firstName;\n            user.lastNamePrefix = lastNamePrefix;\n            user.lastName = lastName;\n        }\n\n        const updatedOccupations = user.occupations.map(occupationContact => {\n            if (occupationContact.primaryContact.id === currentSelectedContact.id) {\n                occupationContact.primaryContact.fullNameFnf = fullNameFnf;\n                occupationContact.primaryContact.typeId = typeId;\n                occupationContact.primaryContact.firstName = firstName;\n                occupationContact.primaryContact.lastNamePrefix = lastNamePrefix;\n                occupationContact.primaryContact.lastName = lastName;\n            }\n            return occupationContact;\n        });\n\n        setUser({ ...user, occupations: updatedOccupations });\n    }\n\n    return (\n        <PortalUserContext.Provider\n            value={{\n                user: user,\n                setInitialUserData,\n                currentSelectedContact,\n                switchCurrentContact,\n                resetCurrentUserToDefault,\n                updateNameSelectedContact,\n            }}\n        >\n            {props.children}\n        </PortalUserContext.Provider>\n    );\n};\n\nconst PortalUserConsumer = PortalUserContext.Consumer;\n\nexport { PortalUserProvider, PortalUserConsumer, PortalUserContext };\n","import React, { createContext, useState, useEffect } from 'react';\n\nconst ThemeSettingsContext = createContext({\n    defaultThemeSettings: {},\n    setInitialThemeSettings: () => {},\n    setCurrentThemeSettings: () => {},\n    switchToDefaultThemeSettings: () => {},\n});\n\nconst ThemeSettingsProvider = function(props) {\n    const [defaultThemeSettings, setDefaultThemeSettings] = useState({});\n    const [currentThemeSettings, setCurrentThemeSettings] = useState({});\n    const [imageHash, setImageHash] = useState(Date.now());\n\n    useEffect(\n        function() {\n            if (currentThemeSettings.id) {\n                handleChangeCurrentThemeSettings();\n            }\n        },\n        [currentThemeSettings.id]\n    );\n\n    function setInitialThemeSettings(payload) {\n        setDefaultThemeSettings(payload);\n        setCurrentThemeSettings(payload);\n    }\n\n    function switchToDefaultThemeSettings() {\n        setCurrentThemeSettings(defaultThemeSettings);\n    }\n\n    function handleChangeCurrentThemeSettings() {\n        document.documentElement.style.setProperty(\n            '--main-header-background-image-url',\n            'url(images/' + currentThemeSettings.portal_image_bg_file_name_header + '?' + imageHash + ')'\n        );\n        document.documentElement.style.setProperty(\n            '--portal-main-background-color',\n            currentThemeSettings.portal_main_background_color\n        );\n        document.documentElement.style.setProperty(\n            '--portal-main-text-color',\n            currentThemeSettings.portal_main_text_color\n        );\n        document.documentElement.style.setProperty(\n            '--portal-background-color',\n            currentThemeSettings.portal_background_color\n        );\n        document.documentElement.style.setProperty(\n            '--portal-background-text-color',\n            currentThemeSettings.portal_background_text_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-primary-rgba',\n            currentThemeSettings.login_header_background_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-primary-rgba-text-color',\n            currentThemeSettings.login_header_background_text_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-header-portal-icon-color',\n            currentThemeSettings.header_icons_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-secondary-color',\n            currentThemeSettings.login_field_background_color\n        );\n        document.documentElement.style.setProperty(\n            '--main-secondary-text-color',\n            currentThemeSettings.login_field_background_text_color\n        );\n        document.documentElement.style.setProperty('--button-primary-color', currentThemeSettings.button_color);\n        document.documentElement.style.setProperty(\n            '--button-primary-text-color',\n            currentThemeSettings.button_text_color\n        );\n    }\n\n    return (\n        <ThemeSettingsContext.Provider\n            value={{\n                defaultThemeSettings,\n                setInitialThemeSettings,\n                setCurrentThemeSettings,\n                switchToDefaultThemeSettings,\n                currentThemeSettings,\n            }}\n        >\n            {props.children}\n        </ThemeSettingsContext.Provider>\n    );\n};\n\nconst ThemeSettingsConsumer = ThemeSettingsContext.Consumer;\n\nexport { ThemeSettingsProvider, ThemeSettingsConsumer, ThemeSettingsContext };\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { AuthConsumer } from '../../context/AuthContext';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport { ThemeSettingsConsumer } from '../../context/ThemeSettingsContext';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { FaHome, FaUser } from 'react-icons/fa';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nfunction Header({ location, history }) {\r\n    const [menuOpen, updateStateMenu] = useState(false);\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    // This keeps your state in sync with the opening/closing of the menu\r\n    // via the default means, e.g. clicking the X, pressing the ESC key etc.\r\n    function handleStateChange(state) {\r\n        updateStateMenu(state.isOpen);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function openMenu() {\r\n        updateStateMenu(true);\r\n    }\r\n\r\n    // This can be used to close the menu, e.g. when a user clicks a menu item\r\n    function closeMenu() {\r\n        updateStateMenu(false);\r\n    }\r\n\r\n    // This can be used to toggle the menu, e.g. when using a custom icon\r\n    // Tip: You probably want to hide either/both default icons if using a custom icon\r\n    // See https://github.com/negomi/react-burger-menu#custom-icons\r\n    function toggleMenu() {\r\n        updateStateMenu(!menuOpen);\r\n    }\r\n\r\n    function formatProfilePicName(currentSelectedContact) {\r\n        if (currentSelectedContact.typeId === 'person') {\r\n            return (\r\n                currentSelectedContact.firstName +\r\n                (currentSelectedContact.lastNamePrefix ? ' ' + currentSelectedContact.lastNamePrefix : '') +\r\n                (currentSelectedContact.firstName || currentSelectedContact.lastNamePrefix ? '<br>' : '') +\r\n                currentSelectedContact.lastName\r\n            );\r\n        } else if (currentSelectedContact.typeId === 'organisation') {\r\n            return currentSelectedContact.fullNameFnf.replace(/\\s(?=\\S*$)/, '<br>');\r\n        } else {\r\n            return '?';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hook that alerts clicks outside of the passed ref\r\n     */\r\n    function useOutsideAlerter(ref) {\r\n        /**\r\n         * Alert if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                updateStateMenu(false);\r\n            }\r\n        }\r\n\r\n        useEffect(() => {\r\n            // Bind the event listener\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n            return () => {\r\n                // Unbind the event listener on clean up\r\n                document.removeEventListener('mousedown', handleClickOutside);\r\n            };\r\n        });\r\n    }\r\n\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef);\r\n\r\n    function redirect(to) {\r\n        history.push(`/${to}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                <div className=\"header-portal\">\r\n                    <div className=\"profile-pic\">\r\n                        <PortalUserConsumer>\r\n                            {({ user, currentSelectedContact, switchCurrentContact, resetCurrentUserToDefault }) => {\r\n                                if (!user.occupations || user.occupations.length < 1) {\r\n                                    return <>{ReactHtmlParser(formatProfilePicName(currentSelectedContact))}</>;\r\n                                }\r\n\r\n                                return (\r\n                                    <Dropdown alignRight>\r\n                                        <Dropdown.Toggle style={{ marginTop: '0' }}>\r\n                                            {ReactHtmlParser(formatProfilePicName(currentSelectedContact))}\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                            <Dropdown.Header>Beheren van</Dropdown.Header>\r\n                                            <Dropdown.Item\r\n                                                onClick={() => {\r\n                                                    switchCurrentContact(user);\r\n                                                    redirect('dashboard');\r\n                                                }}\r\n                                                active={currentSelectedContact.id === user.id ? true : false}\r\n                                            >\r\n                                                {user.fullNameFnf}\r\n                                            </Dropdown.Item>\r\n                                            {user.occupations && user.occupations.length > 0\r\n                                                ? user.occupations.map(occupationContact =>\r\n                                                      (occupationContact.primaryContact.typeId === 'organisation' &&\r\n                                                          occupationContact.primary) ||\r\n                                                      (occupationContact.primaryContact.typeId === 'person' &&\r\n                                                          occupationContact.occupation.occupationForPortal) ? (\r\n                                                          <Dropdown.Item\r\n                                                              key={occupationContact.id}\r\n                                                              onClick={() => {\r\n                                                                  switchCurrentContact(\r\n                                                                      occupationContact.primaryContact\r\n                                                                  );\r\n                                                                  redirect('dashboard');\r\n                                                              }}\r\n                                                              active={\r\n                                                                  currentSelectedContact.id ===\r\n                                                                  occupationContact.primaryContact.id\r\n                                                              }\r\n                                                          >\r\n                                                              {occupationContact.primaryContact.fullNameFnf}\r\n                                                          </Dropdown.Item>\r\n                                                      ) : null\r\n                                                  )\r\n                                                : null}\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                );\r\n                            }}\r\n                        </PortalUserConsumer>\r\n                    </div>\r\n\r\n                    <Container>\r\n                        <Row>\r\n                            <Col xs={6}>\r\n                                <ThemeSettingsConsumer>\r\n                                    {({ currentThemeSettings }) => (\r\n                                        <div className=\"header-logo\">\r\n                                            {currentThemeSettings.portal_logo_file_name_header !== undefined && (\r\n                                                <Image\r\n                                                    src={`images/${currentThemeSettings.portal_logo_file_name_header}?${imageHash}`}\r\n                                                />\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                </ThemeSettingsConsumer>\r\n                            </Col>\r\n                            <Col xs={6}>\r\n                                <div className=\"d-flex justify-content-end\">\r\n                                    {/* Hambuger menu */}\r\n                                    <div className=\"bm-burger-button text-center\" onClick={openMenu}>\r\n                                        <span>\r\n                                            <span className=\"bm-burger-bars bm-burger-bar-1\" />\r\n                                            <span className=\"bm-burger-bars bm-burger-bar-2\" />\r\n                                            <span className=\"bm-burger-bars bm-burger-bar-3\" />\r\n                                        </span>\r\n                                        <br />\r\n                                        <small style={{ fontSize: '10px', marginLeft: '-3.5px' }}>MENU</small>\r\n                                    </div>\r\n                                    {/* User switch menu */}\r\n                                    <AuthConsumer>\r\n                                        {({ logout }) => {\r\n                                            return (\r\n                                                <PortalUserConsumer>\r\n                                                    {({\r\n                                                        user,\r\n                                                        currentSelectedContact,\r\n                                                        switchCurrentContact,\r\n                                                        resetCurrentUserToDefault,\r\n                                                    }) => {\r\n                                                        return (\r\n                                                            <Dropdown alignRight>\r\n                                                                <Dropdown.Toggle\r\n                                                                    id={'account-dropdown'}\r\n                                                                    style={{ padding: '0', marginTop: '14px' }}\r\n                                                                >\r\n                                                                    <FaUser />\r\n                                                                    <br />\r\n                                                                    <small\r\n                                                                        className={'account-dropdown-text'}\r\n                                                                        style={{ fontSize: '10px' }}\r\n                                                                    >\r\n                                                                        ACCOUNT\r\n                                                                    </small>\r\n                                                                </Dropdown.Toggle>\r\n                                                                <Dropdown.Menu>\r\n                                                                    <Dropdown.Header>Ingelogd als</Dropdown.Header>\r\n                                                                    <Dropdown.Item disabled>\r\n                                                                        {user.fullNameFnf}\r\n                                                                    </Dropdown.Item>\r\n                                                                    <Dropdown.Item>\r\n                                                                        <Link\r\n                                                                            to={'/wijzig-inloggegevens'}\r\n                                                                            className={'dropdown-link'}\r\n                                                                        >\r\n                                                                            Wijzig inloggegevens\r\n                                                                        </Link>\r\n                                                                    </Dropdown.Item>\r\n                                                                    <Dropdown.Item>\r\n                                                                        <Link\r\n                                                                            to={'/wijzig-inloggegevens'}\r\n                                                                            className={'dropdown-link'}\r\n                                                                        >\r\n                                                                            Twee factor authenticatie\r\n                                                                        </Link>\r\n                                                                    </Dropdown.Item>\r\n                                                                    <Dropdown.Divider />\r\n                                                                    <Dropdown.Item\r\n                                                                        onClick={() => {\r\n                                                                            logout(true);\r\n                                                                            resetCurrentUserToDefault();\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        Log uit\r\n                                                                    </Dropdown.Item>\r\n                                                                </Dropdown.Menu>\r\n                                                            </Dropdown>\r\n                                                        );\r\n                                                    }}\r\n                                                </PortalUserConsumer>\r\n                                            );\r\n                                        }}\r\n                                    </AuthConsumer>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        {location.pathname !== '/' && location.pathname !== '/dashboard' ? (\r\n                            <div className=\"header-dashboard-button\">\r\n                                <Button className={'w-button btn-sm'} onClick={() => history.push('/dashboard')}>\r\n                                    <FaHome />\r\n                                    &nbsp;Dashboard\r\n                                </Button>\r\n                            </div>\r\n                        ) : null}\r\n                    </Container>\r\n                </div>\r\n                {/* Sidebar menu */}\r\n                <Menu\r\n                    right\r\n                    width={'300px'}\r\n                    // noOverlay\r\n                    isOpen={menuOpen}\r\n                    onStateChange={state => handleStateChange(state)}\r\n                    customBurgerIcon={false}\r\n                >\r\n                    <div className={'sidebar-menu'}>\r\n                        <React.Fragment>\r\n                            <h6 className=\"heading in-menu\">MENU</h6>\r\n                            <Link\r\n                                to={'/inschrijvingen-projecten'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/inschrijvingen-projecten' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Huidige deelnames\r\n                            </Link>\r\n                            <Link\r\n                                to={'/gegevens'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/gegevens' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Gegevens\r\n                            </Link>\r\n                            <Link\r\n                                to={'/inschrijven-projecten'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/inschrijven-projecten' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Inschrijven projecten\r\n                            </Link>\r\n                            <PortalUserConsumer>\r\n                                {({\r\n                                    user,\r\n                                    currentSelectedContact,\r\n                                    switchCurrentContact,\r\n                                    resetCurrentUserToDefault,\r\n                                }) => {\r\n                                    if (currentSelectedContact && currentSelectedContact.hasFinancialOverviews) {\r\n                                        return (\r\n                                            <Link\r\n                                                to={'/waardestaat-documenten'}\r\n                                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                                    location.pathname === '/waardestaat-documenten' ? 'w--current' : ''\r\n                                                }`}\r\n                                                onClick={closeMenu}\r\n                                            >\r\n                                                Waardestaat\r\n                                            </Link>\r\n                                        );\r\n                                    }\r\n                                }}\r\n                            </PortalUserConsumer>\r\n                            <Link\r\n                                to={'/over-ons'}\r\n                                className={`nav-link w-nav-link w--nav-link-open ${\r\n                                    location.pathname === '/over-ons' ? 'w--current' : ''\r\n                                }`}\r\n                                onClick={closeMenu}\r\n                            >\r\n                                Over ons\r\n                            </Link>\r\n                        </React.Fragment>\r\n                    </div>\r\n                </Menu>\r\n            </header>\r\n            {location.pathname !== '/' && location.pathname !== '/dashboard' ? (\r\n                <div className={'floating-action-button'}>\r\n                    <Button className={'w-button'} onClick={() => history.push('/dashboard')}>\r\n                        <FaHome />\r\n                        &nbsp;Dashboard\r\n                    </Button>\r\n                </div>\r\n            ) : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import axios from 'axios';\nimport moment from 'moment';\n\nconst BASE_URL = window.__SERVER_DATA__.base_url;\nconst localStorageToken = '__customer-portal-econobis-token__';\nconst localStorageLastActivity = '__customer-portal-econobis-last-activity__';\n\nconst axiosInstance = axios.create({\n    baseURL: `${BASE_URL}`,\n});\n\naxiosInstance.interceptors.request.use(\n    function(config) {\n        // First check if token is expired or not\n        checkTokenExpiration();\n        // Do something before request is sent\n        const AUTH_TOKEN = 'Bearer ' + localStorage.getItem(localStorageToken);\n        const TWO_FACTOR_TOKEN = localStorage.getItem('portal_two_factor_token');\n        config.headers.Authorization = AUTH_TOKEN;\n        config.headers.TwoFactorToken = TWO_FACTOR_TOKEN;\n        return config;\n    },\n    function(error) {\n        // Do something with request error\n        return Promise.reject(error);\n    }\n);\n\n// Check token expiration and redirect if token is expired\nfunction checkTokenExpiration() {\n    const lastActivity = moment(localStorage.getItem(localStorageLastActivity));\n\n    if (\n        !localStorage.getItem(localStorageLastActivity) ||\n        lastActivity.add('30', 'minutes').format() < moment().format()\n    ) {\n        if (!window.location.hash.startsWith('#/login') && !window.location.hash.startsWith('#/loguit')) {\n            setTimeout(() => {\n                localStorage.removeItem(localStorageToken);\n                localStorage.removeItem(localStorageLastActivity);\n                window.location.reload();\n            }, 100);\n        }\n    } else {\n        localStorage.setItem(localStorageLastActivity, moment().format());\n    }\n}\n\nexport default axiosInstance;\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchPortalUserDetails: function() {\r\n        const requestUrl = `/me`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: [\r\n                        'id',\r\n                        'number',\r\n                        'fullNameFnf',\r\n                        'typeId',\r\n                        'firstName',\r\n                        'lastNamePrefix',\r\n                        'lastName',\r\n                        'hasFinancialOverviews',\r\n                        'singleRelatedAdministration',\r\n                        'iban',\r\n                        'ibanAttn',\r\n                        'didAgreeAvg',\r\n                        'dateDidAgreeAvg',\r\n                        'addressLines',\r\n                        'portalSettingsLayoutAssigned',\r\n                        'inspectionPersonTypeId',\r\n                    ],\r\n                    rlt: {\r\n                        occupations: {\r\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\r\n                            rlt: {\r\n                                occupation: {\r\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\r\n                                },\r\n                                primaryContact: {\r\n                                    fld: [\r\n                                        'id',\r\n                                        'typeId',\r\n                                        'fullNameFnf',\r\n                                        'firstName',\r\n                                        'lastNamePrefix',\r\n                                        'lastName',\r\n                                        'hasFinancialOverviews',\r\n                                        'singleRelatedAdministration',\r\n                                    ],\r\n                                },\r\n                                contact: {\r\n                                    fld: ['id', 'typeId', 'fullNameFnf', 'firstName', 'lastNamePrefix', 'lastName'],\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    fetchPortalUserEmail: function() {\r\n        return axiosInstance.get(`/portal-user-email`);\r\n    },\r\n\r\n    changeEmail: values => {\r\n        const requestUrl = `/portal-user/change-email`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n\r\n    changePassword: values => {\r\n        const requestUrl = `/portal-user/change-password`;\r\n\r\n        return axiosInstance.post(requestUrl, values);\r\n    },\r\n};\r\n","import React, { useEffect, useContext } from 'react';\nimport { Route, Redirect, useLocation, useHistory } from 'react-router-dom';\nimport { AuthConsumer } from '../context/AuthContext';\nimport Header from '../components/layout/Header';\nimport PortalUserAPI from '../api/portal-user/PortalUserAPI';\nimport { PortalUserConsumer } from '../context/PortalUserContext';\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\n\nconst ProtectedRoute = ({ component: Component, setInitialUserData, isAuth, ...rest }) => {\n    const location = useLocation();\n    const history = useHistory();\n    const { setInitialThemeSettings, switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\n\n    useEffect(() => {\n        if (isAuth) {\n            (function callFetchPortalUserDetails() {\n                PortalUserAPI.fetchPortalUserDetails()\n                    .then(payload => {\n                        setInitialUserData(payload.data.data);\n                        setInitialThemeSettings(payload.data.data.portalSettingsLayoutAssigned);\n                    })\n                    .catch(error => {\n                        if (error.response.status === 401) {\n                            if(error.response.data.code === 'two_factor_token_invalid') {\n                                history.push('/two-factor/confirm');\n                            }else{\n                                history.push('/login');\n                            }\n                            return;\n                        }\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuwd.');\n                    });\n            })();\n        }\n    }, [isAuth]);\n\n    useEffect(() => {\n        if (isAuth) {\n            if (\n                !location.pathname.includes('/project/') &&\n                !location.pathname.includes('/project-deelname/') &&\n                !location.pathname.includes('/inschrijven/') &&\n                !location.pathname.includes('/dashboard/')\n            ) {\n                switchToDefaultThemeSettings();\n            }\n        }\n    }, [location.pathname]);\n\n    return (\n        <AuthConsumer>\n            {({ isAuth }) => (\n                <div className=\"body-2\" id=\"body-2\">\n                    <Header />\n                    <Route render={props => (isAuth ? <Component {...props} /> : <Redirect to=\"/login\" />)} {...rest} />\n                </div>\n            )}\n        </AuthConsumer>\n    );\n};\n\nexport default function ProtectedRouteWithContext(props) {\n    return (\n        <AuthConsumer>\n            {({ isAuth }) => (\n                <PortalUserConsumer>\n                    {({ setInitialUserData }) => (\n                        <ProtectedRoute {...props} setInitialUserData={setInitialUserData} isAuth={isAuth} />\n                    )}\n                </PortalUserConsumer>\n            )}\n        </AuthConsumer>\n    );\n}\n","import React, { useContext, useEffect } from 'react';\nimport { Route, useLocation } from 'react-router-dom';\nimport { ThemeSettingsContext } from '../context/ThemeSettingsContext';\n\nconst PublicRoute = ({ component: Component, ...rest }) => {\n    const location = useLocation();\n    const { switchToDefaultThemeSettings } = useContext(ThemeSettingsContext);\n\n    useEffect(() => {\n        switchToDefaultThemeSettings();\n    }, [location.pathname]);\n\n    return <Route render={props => <Component {...props} />} {...rest} />;\n};\n\nexport default PublicRoute;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst InputText = ({\n    field,\n    type,\n    className,\n    id,\n    readOnly,\n    placeholder,\n    showErrorMessage,\n    errors,\n    touched,\n    classNameErrorMessage,\n    disabled,\n    customOnChange = null,\n}) => {\n    if (customOnChange) {\n        field.onChange = customOnChange;\n    }\n    return (\n        <>\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\n            ) : null}\n            <input\n                type={type}\n                className={`text-input w-input ${className} ${\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\n                } `}\n                id={id}\n                {...field}\n                readOnly={readOnly}\n                placeholder={placeholder}\n                disabled={disabled}\n            />\n        </>\n    );\n};\n\nInputText.defaultProps = {\n    type: 'text',\n    className: 'content',\n    readOnly: false,\n    placeholder: '',\n    showErrorMessage: true,\n    classNameErrorMessage: 'text-danger',\n    errors: {},\n    touched: {},\n};\n\nInputText.propTypes = {\n    field: PropTypes.object.isRequired,\n    type: PropTypes.string,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    readOnly: PropTypes.bool,\n    showErrorMessage: PropTypes.bool,\n    classNameErrorMessage: PropTypes.string,\n    placeholder: PropTypes.string,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n};\n\nexport default InputText;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ClipLoader } from 'react-spinners';\nimport Button from 'react-bootstrap/Button';\n\nconst ButtonText = ({\n    buttonClassName,\n    buttonText,\n    onClickAction,\n    type,\n    loading,\n    title,\n    loadingSpinnerColor,\n    disabled,\n}) => (\n    <Button\n        type={type}\n        className={`${buttonClassName}`}\n        onClick={onClickAction}\n        disabled={loading || disabled}\n        title={title}\n        size=\"sm\"\n    >\n        {loading ? <ClipLoader color={loadingSpinnerColor} size={17} /> : <span>{buttonText}</span>}\n    </Button>\n);\n\nButtonText.defaultProps = {\n    buttonClassName: '',\n    type: 'button',\n    title: '',\n    loading: false,\n    loadingSpinnerColor: 'white',\n    disabled: false,\n};\n\nButtonText.propTypes = {\n    buttonClassName: PropTypes.string,\n    buttonText: PropTypes.string.isRequired,\n    onClickAction: PropTypes.func,\n    type: PropTypes.string,\n    title: PropTypes.string,\n    loading: PropTypes.bool,\n    loadingSpinnerColor: PropTypes.string,\n    disabled: PropTypes.bool,\n};\n\nexport default ButtonText;\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ButtonText from '../../../components/button/ButtonText';\n\nconst validationSchema = Yup.object().shape({\n    username: Yup.string()\n        .email()\n        .required('Verplicht'),\n    password: Yup.string().required('Verplicht'),\n});\n\nconst LoginForm = function({ handleSubmit, login }) {\n    return (\n        <Formik\n            initialValues={{ username: '', password: '' }}\n            enableReinitialize={true}\n            validationSchema={validationSchema}\n            onSubmit={(values, actions) => {\n                actions.setSubmitting(true);\n                handleSubmit(values, actions, login);\n            }}\n            render={({ isSubmitting, errors, touched }) => {\n                return (\n                    <Form>\n                        <Field\n                            name=\"username\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"username\"\n                                    className={''}\n                                    placeholder={'E-mailadres'}\n                                    errors={errors}\n                                    touched={touched}\n                                    // showErrorMessage={false}\n                                />\n                            )}\n                        />\n                        <Field\n                            name=\"password\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"password\"\n                                    className={''}\n                                    placeholder={'Wachtwoord'}\n                                    type={'password'}\n                                    errors={errors}\n                                    touched={touched}\n                                    // showErrorMessage={false}\n                                />\n                            )}\n                        />\n                        <ButtonText\n                            buttonText={'Log in'}\n                            buttonClassName={'authorization-button'}\n                            type={'submit'}\n                            loading={isSubmitting}\n                            loadingSpinnerColor={'#034b8c'}\n                        />\n                    </Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default LoginForm;\n","import axios from 'axios';\n\nconst AUTH_KEY = {\n    client_id: window.__SERVER_DATA__.client_id,\n    client_secret: window.__SERVER_DATA__.client_key,\n    grant_type: 'password',\n};\n\nconst BASE_URL = window.__SERVER_DATA__.base_url;\n\nexport default {\n    newAccount: payload => {\n        const requestUrl = `${BASE_URL}/new-account`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, payload);\n    },\n    newAccountSuccess: payload => {\n        const requestUrl = `${BASE_URL}/new-account-success`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, payload);\n    },\n\n    login: loginCredentials => {\n        const requestUrl = `${BASE_URL}/oauth/token`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, { ...AUTH_KEY, ...loginCredentials });\n    },\n\n    register: payload => {\n        const requestUrl = `${BASE_URL}/register`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, payload);\n    },\n\n    forgot: email => {\n        const requestUrl = `${BASE_URL}/password/email`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, email);\n    },\n\n    reset: payload => {\n        const requestUrl = `${BASE_URL}/password/reset`;\n        delete axios.defaults.headers.common['Authorization'];\n\n        return axios.post(requestUrl, payload);\n    },\n};\n","import axiosInstance from '../default-setup/AxiosInstance';\n\nconst URL_PORTAL_SETTINGS = `setting`;\n\nexport default {\n    fetchPortalSettings: keys => {\n        const requestUrl = `${URL_PORTAL_SETTINGS}/multiple${keys}`;\n\n        return axiosInstance.get(requestUrl);\n    },\n    fetchPortalActive: () => {\n        const requestUrl = `${URL_PORTAL_SETTINGS}/portal-active`;\n\n        return axiosInstance.get(requestUrl);\n    },\n    fetchCooperativeName: () => {\n        const requestUrl = `${URL_PORTAL_SETTINGS}/cooperative-name`;\n\n        return axiosInstance.get(requestUrl);\n    },\n    fetchShowNewAtCooperativeLink: () => {\n        const requestUrl = `${URL_PORTAL_SETTINGS}/show-new-at-cooperative-link`;\n\n        return axiosInstance.get(requestUrl);\n    },\n    fetchNewAtCooperativeLinkText: () => {\n        const requestUrl = `${URL_PORTAL_SETTINGS}/new-at-cooperative-link-text`;\n\n        return axiosInstance.get(requestUrl);\n    },\n};\n","import axiosInstance from \"../default-setup/AxiosInstance\";\n\nexport default {\n    confirmTwoFactor: function (code) {\n        return axiosInstance.post(`me/confirmed-two-factor-authentication`, {\n            code\n        });\n    },\n\n    fetchTwoFactorQr: function (password) {\n        return axiosInstance.get(`me/two-factor-qr-code`, {\n            headers: {\n                PasswordConfirmation: password,\n            }\n        });\n    },\n\n    fetchTwoFactorRecoveryCodes: function (password) {\n        return axiosInstance.get(`me/two-factor-recovery-codes`, {\n            headers: {\n                PasswordConfirmation: password,\n            }\n        });\n    },\n\n    regenerateTwoFactorRecoveryCodes: function (password) {\n        return axiosInstance.post(`me/two-factor-recovery-codes`, {}, {\n            headers: {\n                PasswordConfirmation: password,\n            }\n        });\n    },\n\n    checkPassword: function (password) {\n        return axiosInstance.get(`me/check-password`, {\n            headers: {\n                PasswordConfirmation: password,\n            }\n        });\n    },\n\n    fetchTwoFactorStatus: function () {\n        return axiosInstance.get(`me/two-factor-status`);\n    },\n\n    enableTwoFactor: function (password) {\n        return axiosInstance.post(`me/two-factor-authentication`, {}, {\n            headers: {\n                PasswordConfirmation: password,\n            }\n        });\n    },\n\n    disableTwoFactor: function (password) {\n        return axiosInstance.post(`me/two-factor-authentication/delete`, {}, {\n            headers: {\n                PasswordConfirmation: password,\n            }\n        });\n    },\n\n    recoverTwoFactor: function (code) {\n        return axiosInstance.post(`me/two-factor-challenge`, {\n            recovery_code: code\n        });\n    },\n};\n","import React, { useEffect, useState } from 'react';\nimport {Link, Redirect, useHistory} from 'react-router-dom';\n\nimport { AuthConsumer } from '../../../context/AuthContext';\nimport LoginForm from './Form';\nimport AuthAPI from '../../../api/auth/AuthAPI';\nimport Alert from 'react-bootstrap/Alert';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport PortalSettingsAPI from '../../../api/portal-settings/PortalSettingsAPI';\nimport MeAPI from \"../../../api/general/MeAPI\";\n\nexport default props => {\n    const history = useHistory();\n    const [isLoading, setIsLoading] = useState(true);\n    const [showError, toggleError] = useState(false);\n\n    const [redirectToReferrer, toggleRedirect] = useState(false);\n    let { from } = props.location.state || { from: { pathname: '/dashboard' } };\n\n    const [portalActive, setPortalActive] = useState(false);\n    const [showNewAtCooperativeLink, setShowNewAtCooperativeLink] = useState(false);\n    const [newAtCooperativeLinkText, setNewAtCooperativeLinkText] = useState('');\n    const [imageHash, setImageHash] = useState(Date.now());\n\n    useEffect(() => {\n        (function callFetchPortalActive() {\n            PortalSettingsAPI.fetchPortalActive()\n                .then(payload => {\n                    setPortalActive(payload.data);\n                    setIsLoading(false);\n                })\n                .catch(error => {\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                    setIsLoading(false);\n                });\n        })();\n\n        (function callFetchShowNewAtCooperativeLink() {\n            PortalSettingsAPI.fetchShowNewAtCooperativeLink()\n                .then(payload => {\n                    setShowNewAtCooperativeLink(payload.data);\n                })\n                .catch(error => {\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                });\n        })();\n\n        (function callFetchNewAtCooperativeLinkText() {\n            PortalSettingsAPI.fetchNewAtCooperativeLinkText()\n                .then(payload => {\n                    setNewAtCooperativeLinkText(payload.data);\n                })\n                .catch(error => {\n                    // alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                });\n        })();\n    }, []);\n\n    function handleSubmit(values, actions, login) {\n        AuthAPI.login(values)\n            .then(payload => {\n                toggleError(false);\n                login(payload.data, () => {\n                    MeAPI.fetchTwoFactorStatus().then(payload => {\n                        if(payload.data.hasTwoFactorEnabled && !payload.data.hasValidToken) {\n                            history.push('/two-factor/confirm');\n                            return;\n                        }\n\n                        toggleRedirect(true)\n                    });\n                });\n            })\n            .catch(error => {\n                // If login fails show error and then set submitting back to false\n                toggleError(true);\n                actions.setSubmitting(false);\n            });\n    }\n\n    function redirect() {\n        return <Redirect to={from} />;\n    }\n\n    return (\n        <>\n            {redirectToReferrer ? (\n                redirect()\n            ) : (\n                <AuthConsumer>\n                    {({ isAuth, login }) => (\n                        <Container fluid className=\"authorization-container\">\n                            <Row className=\"justify-content-center align-content-center full-height\">\n                                <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\n                                    <img src={`images/logo.png?${imageHash}`} alt=\"\" className=\"image logo-container\" />\n                                    {isLoading ? (\n                                        <React.Fragment>\n                                            <Row className=\"justify-content-center\">\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                                    Applicatie wordt geladen...\n                                                </Alert>\n                                            </Row>\n                                        </React.Fragment>\n                                    ) : !portalActive ? (\n                                        <React.Fragment>\n                                            <Row className=\"justify-content-center\">\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                                    Deze applicatie kan op dit moment niet gebruikt worden.\n                                                </Alert>\n                                            </Row>\n                                        </React.Fragment>\n                                    ) : !isLoading ? (\n                                        <React.Fragment>\n                                            <LoginForm handleSubmit={handleSubmit} login={login} />\n                                            {showError ? (\n                                                <Row className=\"justify-content-center\">\n                                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                                        Gebruikte logingegevens zijn onjuist!\n                                                    </Alert>\n                                                </Row>\n                                            ) : null}\n                                            <Row className=\"justify-content-center\">\n                                                <Link to={'/wachtwoord-vergeten'} className=\"authorization-link\">\n                                                    Wachtwoord vergeten?\n                                                </Link>\n                                            </Row>\n                                            {showNewAtCooperativeLink ? (\n                                                <Row className=\"justify-content-center\">\n                                                    <a\n                                                        href={'/#/nieuw-account'}\n                                                        className=\"authorization-link\"\n                                                        target=\"_blank\"\n                                                    >\n                                                        {newAtCooperativeLinkText}\n                                                    </a>\n                                                </Row>\n                                            ) : null}\n                                        </React.Fragment>\n                                    ) : null}\n                                </Col>\n                            </Row>\n                        </Container>\n                    )}\n                </AuthConsumer>\n            )}\n        </>\n    );\n};\n","import React, {useState} from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport Alert from 'react-bootstrap/Alert';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport MeAPI from \"../../../api/general/MeAPI\";\nimport ButtonText from \"../../../components/button/ButtonText\";\n\nexport default () => {\n    const history = useHistory();\n    const [showError, toggleError] = useState(false);\n    const [code, setCode] = useState('');\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        toggleError(false);\n\n        MeAPI.confirmTwoFactor(code)\n            .then(payload => {\n                localStorage.setItem('portal_two_factor_token', payload.data.token);\n\n                history.push('/dashboard');\n            })\n            .catch(error => {\n                // If login fails show error and then set submitting back to false\n                toggleError(true);\n            });\n    }\n\n    return (\n        <>\n            <Container fluid className=\"authorization-container\">\n                <Row className=\"justify-content-center align-content-center full-height\">\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\n                        <img src={`images/logo.png`} alt=\"\" className=\"image logo-container\"/>\n                        <p>Account is beveiligd met twee factor authenticatie, voer hier onder de code uit uw authenticator app in.</p>\n                        <React.Fragment>\n                            <form onSubmit={handleSubmit}>\n                            <input\n                                type=\"text\"\n                                className={`text-input w-input`}\n                                placeholder=\"Twee factor code\"\n                                value={code}\n                                onChange={(e) => setCode(e.target.value)}\n                                autoFocus={true}\n                            />\n                            <ButtonText\n                                buttonText={'Bevestigen'}\n                                buttonClassName={'authorization-button'}\n                                type=\"submit\"\n                            />\n                            </form>\n\n                            {showError ? (\n                                <Row className=\"justify-content-center\">\n                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                        Code is onjuist\n                                    </Alert>\n                                </Row>\n                            ) : null}\n                            <Row className=\"justify-content-center\">\n                                <Link to={'/two-factor/recover'} className=\"authorization-link\">\n                                    Twee factor herstellen\n                                </Link>\n                            </Row>\n                        </React.Fragment>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    );\n};\n","import React, {useState} from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport Alert from 'react-bootstrap/Alert';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport MeAPI from \"../../../api/general/MeAPI\";\nimport ButtonText from \"../../../components/button/ButtonText\";\n\nexport default () => {\n    const history = useHistory();\n    const [showError, toggleError] = useState(false);\n    const [code, setCode] = useState('');\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        toggleError(false);\n\n        MeAPI.recoverTwoFactor(code).then(() => {\n            history.push('/dashboard');\n        }).catch(() => {\n            toggleError(true);\n        });\n    }\n\n    return (\n        <>\n            <Container fluid className=\"authorization-container\">\n                <Row className=\"justify-content-center align-content-center full-height\">\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\">\n                        <img src={`images/logo.png`} alt=\"\" className=\"image logo-container\"/>\n                        <p>Voer hier één van de recovery codes van de twee factor authenticatie in.</p>\n                        <React.Fragment>\n                            <form onSubmit={handleSubmit}>\n                            <input\n                                type=\"text\"\n                                className={`text-input w-input`}\n                                placeholder=\"Recovery code\"\n                                value={code}\n                                onChange={(e) => setCode(e.target.value)}\n                                autoFocus={true}\n                            />\n                            <ButtonText\n                                buttonText={'Herstellen'}\n                                buttonClassName={'authorization-button'}\n                                type=\"submit\"\n                            />\n                            </form>\n\n                            {showError ? (\n                                <Row className=\"justify-content-center\">\n                                    <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                        Code is onjuist\n                                    </Alert>\n                                </Row>\n                            ) : null}\n                            <Row className=\"justify-content-center\">\n                                <Link to={'/two-factor/confirm'} className=\"authorization-link\">\n                                    Terug\n                                </Link>\n                            </Row>\n                        </React.Fragment>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    );\n};\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ButtonText from '../../../components/button/ButtonText';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { GoogleReCaptchaProvider, GoogleReCaptcha } from 'react-google-recaptcha-v3';\n\nconst validationSchema = Yup.object().shape({\n    password: Yup.string()\n        .min(10, 'Minimum van ${min} verplicht')\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\n        .required('Verplicht'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\n        .required('Verplicht'),\n});\n\nconst RegisterForm = ({ handleSubmit, email }) => (\n    <Formik\n        initialValues={{ password: '', passwordConfirmation: '' }}\n        enableReinitialize={true}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true);\n            handleSubmit(values, actions);\n        }}\n        render={({ isSubmitting, errors, touched }) => (\n            <Form>\n                <div className=\"mb-3\">\n                    <p className={'authorization-text'}>\n                        Stel je wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\n                    </p>\n                </div>\n                <Row>\n                    <Col>\n                        <Field\n                            name=\"password\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"password\"\n                                    className={field.value ? 'numeric-password' : ''}\n                                    placeholder={'Nieuw wachtwoord'}\n                                    errors={errors}\n                                    touched={touched}\n                                    classNameErrorMessage={'authorization-text'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"mt-2\">\n                        <Field\n                            name=\"passwordConfirmation\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"passwordConfirmation\"\n                                    className={field.value ? 'numeric-password' : ''}\n                                    placeholder={'Herhaal nieuw wachtwoord'}\n                                    errors={errors}\n                                    touched={touched}\n                                    classNameErrorMessage={'authorization-text mb-3'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"my-3\">\n                        <small className={'authorization-text'}>\n                            Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1\n                            hoofdletter bevatten.\n                        </small>\n                    </Col>\n                </Row>\n                <ButtonText\n                    buttonText={'Verzenden'}\n                    buttonClassName={'authorization-button'}\n                    size=\"sm\"\n                    type={'submit'}\n                    loading={isSubmitting}\n                    loadingSpinnerColor={'#034b8c'}\n                />\n            </Form>\n        )}\n    />\n);\n\nexport default RegisterForm;\n","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport RegisterForm from './Form';\nimport AuthAPI from '../../../api/auth/AuthAPI';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { AuthConsumer } from '../../../context/AuthContext';\nimport ButtonText from '../../../components/button/ButtonText';\nimport Alert from 'react-bootstrap/Alert';\n\nconst Register = ({ location, match, login }) => {\n    const [showError, toggleError] = useState(false);\n    const [showLoginLink, setLoginLink] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n    const registrationCode = decodeURIComponent(match.params.registrationCode);\n    const email = decodeURIComponent(match.params.email);\n\n    const [redirectToReferrer, toggleRedirect] = useState(false);\n    let { from } = location.state || { from: { pathname: '/dashboard' } };\n    const [imageHash, setImageHash] = useState(Date.now());\n\n    function handleSubmit(values, actions) {\n        AuthAPI.register({\n            registrationCode,\n            email,\n            password: values.password,\n            password_confirmation: values.passwordConfirmation,\n        })\n            .then(payload => {\n                toggleSuccessMessage(true);\n                AuthAPI.login({ username: email, password: values.password })\n                    .then(payload => {\n                        toggleError(false);\n                        setLoginLink(false);\n                        setErrorMessage('');\n                        login(payload.data, () => {});\n\n                        setTimeout(() => {\n                            toggleRedirect(true);\n                        }, 15000);\n                    })\n                    .catch(error => {\n                        // If login fails show error and then set submitting back to false\n                        toggleError(true);\n                        setLoginLink(true);\n                        setErrorMessage('Er is iets fout gegaan bij automatisch inloggen na activeren.');\n                        actions.setSubmitting(false);\n                    });\n            })\n            .catch(error => {\n                // console.log(error.response.status);\n                // console.log(error.response.data.message);\n                toggleError(true);\n                if (\n                    error.response &&\n                    error.response.data &&\n                    error.response.data.message &&\n                    error.response.status === 423\n                ) {\n                    setLoginLink(true);\n                    setErrorMessage(error.response.data.message);\n                } else {\n                    setLoginLink(false);\n                    setErrorMessage(\n                        'Er is iets fout gegaan bij activeren. Controleer of de activatie link juist en volledig is.'\n                    );\n                }\n                // If login fails show error and then set submitting back to false\n                actions.setSubmitting(false);\n            });\n    }\n\n    function redirect() {\n        return <Redirect to={from} />;\n    }\n\n    return (\n        <>\n            {redirectToReferrer ? (\n                redirect()\n            ) : (\n                <Container fluid className=\"authorization-container\">\n                    <Row className=\"justify-content-center align-content-center full-height\">\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\n                            <img src={`images/logo.png?${imageHash}`} alt=\"\" className=\"image logo-container\" />\n                            {showSuccessMessage ? (\n                                <>\n                                    <h3 className={'authorization-text'}>Je account is geactiveerd</h3>\n                                    <p className={'authorization-text'}>Je bent nu ingelogd</p>\n                                    <ButtonText\n                                        buttonText={'Ga verder'}\n                                        onClickAction={toggleRedirect}\n                                        buttonClassName={'authorization-button'}\n                                        size=\"sm\"\n                                    />\n                                </>\n                            ) : (\n                                <>\n                                    <h3 className={'authorization-text'}>Account activeren</h3>\n                                    {!showLoginLink ? <RegisterForm handleSubmit={handleSubmit} email={email} /> : null}\n                                    {showError ? (\n                                        <Row className={'justify-content-center align-content-center '}>\n                                            <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                                {errorMessage}\n                                            </Alert>\n                                        </Row>\n                                    ) : null}\n                                </>\n                            )}\n                            {showLoginLink ? (\n                                <ButtonText\n                                    buttonText={'Ga naar loginscherm'}\n                                    onClickAction={toggleRedirect}\n                                    buttonClassName={'authorization-button'}\n                                    size=\"sm\"\n                                />\n                            ) : null}\n                        </Col>\n                    </Row>\n                </Container>\n            )}\n        </>\n    );\n};\n\nexport default function RegisterWithContext(props) {\n    return <AuthConsumer>{({ login }) => <Register {...props} login={login} />}</AuthConsumer>;\n}\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ButtonText from '../../../components/button/ButtonText';\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string()\n        .email()\n        .required('Verplicht'),\n});\n\nconst ForgotForm = ({ handleSubmit, showSuccessMessage }) => (\n    <Formik\n        initialValues={{ email: '' }}\n        enableReinitialize={true}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true);\n            handleSubmit(values, actions);\n        }}\n        render={({ isSubmitting, errors, touched }) => (\n            <Form>\n                <Field\n                    name=\"email\"\n                    render={({ field }) => (\n                        <InputText\n                            field={field}\n                            id=\"email\"\n                            className={''}\n                            placeholder={'E-mailadres'}\n                            errors={errors}\n                            touched={touched}\n                            // todo check waarom dit erin stond ?!\n                            // showErrorMessage={false}\n                        />\n                    )}\n                />\n                <ButtonText\n                    buttonText={showSuccessMessage ? 'E-mail is verstuurd!' : 'Verstuur wachtwoord reset link'}\n                    buttonClassName={'authorization-button'}\n                    size=\"sm\"\n                    type={'submit'}\n                    loading={isSubmitting}\n                    loadingSpinnerColor={'#034b8c'}\n                    disabled={showSuccessMessage}\n                />\n            </Form>\n        )}\n    />\n);\n\nexport default ForgotForm;\n","import React, { useState } from 'react';\r\n\r\nimport ForgotForm from './Form';\r\nimport AuthAPI from '../../../api/auth/AuthAPI';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Forgot = props => {\r\n    const [showError, toggleError] = useState(false);\r\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\r\n    const [imageHash, setImageHash] = useState(Date.now());\r\n\r\n    function handleSubmit(values, actions) {\r\n        AuthAPI.forgot(values)\r\n            .then(payload => {\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            })\r\n            .catch(error => {\r\n                // If forgot API fails show error and then set submitting back to false\r\n                // toggleError(true);\r\n                // If forgot API fails show succesmessage anyway\r\n                toggleError(false);\r\n                toggleSuccessMessage(true);\r\n                actions.setSubmitting(false);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Container fluid className=\"authorization-container\">\r\n            <Row className=\"justify-content-center align-content-center full-height\">\r\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                    <img src={`images/logo.png?${imageHash}`} alt=\"\" className=\"image logo-container\" />\r\n                    {showSuccessMessage ? (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Heb je een account voor jouw online portal? Dan ontvang je binnen enkele minuten een\r\n                                    e-mail met een persoonlijke link. Via deze link kun je een nieuw wachtwoord\r\n                                    instellen.\r\n                                    <br />\r\n                                    <br />\r\n                                    Is jouw online portal nog niet geactiveerd? Dan ontvang je ook geen e-mail. Neem\r\n                                    hiervoor contact op met ons.\r\n                                    <br />\r\n                                    <br />\r\n                                    Let op: het kan zijn dat de mail door een spamfilter is geblokkeerd. Spamfilters van\r\n                                    bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de Spam/Reclame of\r\n                                    je onze mail daar terug vindt.\r\n                                </p>\r\n                            </Row>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Row className={'justify-content-center '}>\r\n                                <h3 className={'authorization-text'}>Wachtwoord vergeten</h3>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <p className={'authorization-text'}>\r\n                                    Vul het e-mailadres in waarmee je inlogt en dat bij ons bekend is. Je ontvangt van ons een e-mail waarmee je een nieuw wachtwoord kunt instellen. Let op: dit werkt alleen als jouw online portal geactiveerd. Is deze nog niet geactiveerd? Ga dan terug naar de inlog pagina en kies voor het aanmaken van een nieuw account, als dit niet lukt neem dan contact met ons op.\r\n                                </p>\r\n                            </Row>\r\n                            <Row className={'justify-content-center '}>\r\n                                <Col xs={12} md={6}>\r\n                                    <ForgotForm handleSubmit={handleSubmit} showSuccessMessage={showSuccessMessage} />\r\n                                    {showError ? (\r\n                                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\r\n                                            E-mailadres is niet bekend!\r\n                                        </Alert>\r\n                                    ) : null}\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    )}\r\n                    <Row className={'justify-content-center '}>\r\n                        <Link to={'/login'} className=\"authorization-link\">\r\n                            Terug naar inloggen\r\n                        </Link>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Forgot;\r\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ButtonText from '../../../components/button/ButtonText';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nconst validationSchema = Yup.object().shape({\n    password: Yup.string()\n        .min(10, 'Minimum van ${min} verplicht')\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\n        .required('Verplicht'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\n        .required('Verplicht'),\n});\n\nconst ResetForm = ({ handleSubmit, email }) => (\n    <Formik\n        initialValues={{ password: '', passwordConfirmation: '' }}\n        enableReinitialize={true}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true);\n            handleSubmit(values, actions);\n        }}\n        render={({ isSubmitting, errors, touched }) => (\n            <Form>\n                <Row className=\"justify-content-center\">\n                    <p className={'authorization-text'}>\n                        Stel een nieuw wachtwoord in voor <strong>{email}</strong>. Daarna ben je direct ingelogd.\n                    </p>\n                </Row>\n                <Row className=\"justify-content-center\">\n                    <Field\n                        name=\"password\"\n                        render={({ field }) => (\n                            <InputText\n                                field={field}\n                                id=\"password\"\n                                className={field.value ? 'numeric-password' : ''}\n                                placeholder={'Nieuw wachtwoord'}\n                                errors={errors}\n                                touched={touched}\n                                classNameErrorMessage={'authorization-text'}\n                            />\n                        )}\n                    />\n                </Row>\n                <Row className=\"justify-content-center\">\n                    <Field\n                        name=\"passwordConfirmation\"\n                        render={({ field }) => (\n                            <InputText\n                                field={field}\n                                id=\"passwordConfirmation\"\n                                className={field.value ? 'numeric-password' : ''}\n                                placeholder={'Herhaal nieuw wachtwoord'}\n                                errors={errors}\n                                touched={touched}\n                                classNameErrorMessage={'authorization-text mb-3'}\n                            />\n                        )}\n                    />\n                </Row>\n                <Row className=\"justify-content-center\">\n                    <small className={'authorization-text'}>\n                        Het wachtwoord moet minimaal 10 karakters lang zijn en moet minimaal 1 cijfer en 1 hoofdletter\n                        bevatten.\n                    </small>\n                </Row>\n                <Row className=\"justify-content-center\">\n                    <ButtonText\n                        buttonText={'Verzenden'}\n                        buttonClassName={'authorization-button'}\n                        size=\"sm\"\n                        type={'submit'}\n                        loading={isSubmitting}\n                        loadingSpinnerColor={'#034b8c'}\n                    />\n                </Row>\n            </Form>\n        )}\n    />\n);\n\nexport default ResetForm;\n","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport ResetForm from './Form';\nimport AuthAPI from '../../../api/auth/AuthAPI';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { AuthConsumer } from '../../../context/AuthContext';\nimport ButtonText from '../../../components/button/ButtonText';\n\nconst Reset = ({ location, match, login }) => {\n    const [showError, toggleError] = useState(false);\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n    const token = decodeURIComponent(match.params.token);\n    const email = decodeURIComponent(match.params.email);\n\n    const [redirectToReferrer, toggleRedirect] = useState(false);\n    let { from } = location.state || { from: { pathname: '/dashboard' } };\n    const [imageHash, setImageHash] = useState(Date.now());\n\n    function handleSubmit(values, actions) {\n        AuthAPI.reset({ token, email, password: values.password, password_confirmation: values.passwordConfirmation })\n            .then(payload => {\n                toggleSuccessMessage(true);\n                AuthAPI.login({ username: email, password: values.password })\n                    .then(payload => {\n                        toggleError(false);\n                        login(payload.data, () => {});\n\n                        setTimeout(() => {\n                            toggleRedirect(true);\n                        }, 15000);\n                    })\n                    .catch(error => {\n                        // If login fails show error and then set submitting back to false\n                        toggleError(true);\n                        actions.setSubmitting(false);\n                    });\n            })\n            .catch(error => {\n                // If login fails show error and then set submitting back to false\n                actions.setSubmitting(false);\n            });\n    }\n\n    function redirect() {\n        return <Redirect to={from} />;\n    }\n\n    return (\n        <>\n            {redirectToReferrer ? (\n                redirect()\n            ) : (\n                <Container fluid className=\"authorization-container\">\n                    <Row className=\"justify-content-center align-content-center full-height\">\n                        <Col xs=\"12\" sm=\"8\" md=\"6\" lg=\"4\" xl=\"2\">\n                            <img src={`images/logo.png?${imageHash}`} alt=\"\" className=\"image logo-container\" />\n                            {showSuccessMessage ? (\n                                <>\n                                    <Row className=\"justify-content-center\">\n                                        <h3 className={'authorization-text'}>Je wachtwoord is ingesteld</h3>\n                                    </Row>\n                                    <Row className=\"justify-content-center\">\n                                        <p className={'authorization-text'}>Je bent nu ingelogd</p>\n                                    </Row>\n                                    <Row className=\"justify-content-center\">\n                                        <ButtonText\n                                            buttonText={'Ga verder'}\n                                            onClickAction={toggleRedirect}\n                                            buttonClassName={'authorization-button'}\n                                            size=\"sm\"\n                                        />\n                                    </Row>\n                                </>\n                            ) : (\n                                <>\n                                    <Row className=\"justify-content-center\">\n                                        <h3 className={'authorization-text'}>Wachtwoord wijzigen</h3>\n                                    </Row>\n                                    <ResetForm handleSubmit={handleSubmit} email={email} />\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Container>\n            )}\n        </>\n    );\n};\n\nexport default function ResetWithContext(props) {\n    return <AuthConsumer>{({ login }) => <Reset {...props} login={login} />}</AuthConsumer>;\n}\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport { ClipLoader } from 'react-spinners';\n\nfunction Loading() {\n    return (\n        <Row className=\"justify-content-center align-content-center flex-wrap\" style={{ height: '40vh' }}>\n            <ClipLoader color={'#3898EC'} size={48} />\n        </Row>\n    );\n}\n\nexport default Loading;\n","import axiosInstance from '../default-setup/AxiosInstance';\n\nexport default {\n    fetchContact: function(id) {\n        const requestUrl = `/jory/contact/${id}`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: [\n                        'id',\n                        'typeId',\n                        'number',\n                        'fullNameFnf',\n                        'firstName',\n                        'lastNamePrefix',\n                        'lastName',\n                        'hasFinancialOverviews',\n                        'iban',\n                        'ibanAttn',\n                        'didAgreeAvg',\n                        'dateDidAgreeAvg',\n                        'addressLines',\n                        'isParticipant',\n                        'disableChangeContactNameOnPortal',\n                        'noAddressesFound',\n                        'isParticipantPcrProject',\n                        'isParticipantSceProject',\n                        'blockChangeAddress',\n                        'blockChangeAddressNumber',\n                    ],\n                    rlt: {\n                        person: {\n                            fld: [\n                                'id',\n                                'firstName',\n                                'lastName',\n                                'initials',\n                                'titleId',\n                                'lastNamePrefix',\n                                'lastNamePrefixId',\n                                'dateOfBirth',\n                            ],\n                            rlt: {\n                                title: { fld: ['id', 'name'] },\n                            },\n                        },\n                        organisation: {\n                            fld: ['id', 'name', 'website', 'chamberOfCommerceNumber', 'vatNumber'],\n                        },\n                        emailAddresses: { fld: ['id', 'email', 'primary', 'typeId'] },\n                        phoneNumbers: { fld: ['id', 'number', 'primary', 'typeId'] },\n                        addresses: {\n                            fld: [\n                                'id',\n                                'street',\n                                'number',\n                                'addition',\n                                'postalCode',\n                                'city',\n                                'countryId',\n                                'primary',\n                                'typeId',\n                                'eanElectricity',\n                                'eanGas',\n                            ],\n                            rlt: {\n                                country: { fld: ['id', 'name'] },\n                                primaryAddressEnergySupplierElectricity: {\n                                    fld: [\n                                        'id',\n                                        'energySupplierId',\n                                        'esNumber',\n                                        'memberSince',\n                                        'isCurrentSupplier',\n                                        'endDatePrevious',\n                                        'memberSinceNext',\n                                    ],\n                                    rlt: { energySupplier: [] },\n                                    flt: {\n                                        f: 'isCurrentSupplier',\n                                        d: true,\n                                    },\n                                },\n                            },\n                        },\n                        occupations: {\n                            fld: ['id', 'occupationId', 'primaryContactId', 'contactId', 'primary'],\n                            rlt: {\n                                occupation: {\n                                    fld: ['id', 'primaryOccupation', 'secondaryOccupation', 'occupationForPortal'],\n                                },\n                                primaryContact: {\n                                    fld: ['id', 'fullNameFnf'],\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    },\n\n    fetchContactWithParticipants: function(id) {\n        const requestUrl = `/jory/contact/${id}`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: [\n                        'id',\n                        'typeId',\n                        'number',\n                        'fullNameFnf',\n                        'typeId',\n                        'firstName',\n                        'lastNamePrefix',\n                        'lastName',\n                        'iban',\n                        'ibanAttn',\n                        'didAgreeAvg',\n                        'dateDidAgreeAvg',\n                        'addressLines',\n                    ],\n                    rlt: {\n                        participations: {\n                            fld: [\n                                'id',\n                                'dateRegister',\n                                'didAcceptAgreement',\n                                'dateDidAcceptAgreement',\n                                'didUnderstandInfo',\n                                'dateDidUnderstandInfo',\n                                'participationsDefinitive',\n                                'participationsGranted',\n                                'participationsOptioned',\n                                'participationsInteressed',\n                                'amountDefinitive',\n                                'amountGranted',\n                                'amountOptioned',\n                                'amountInteressed',\n                                'powerKwhConsumption',\n                            ],\n                            rlt: {\n                                project: {\n                                    fld: [\n                                        'id',\n                                        'name',\n                                        'dateEnd',\n                                        'linkProjectInfo',\n                                        'linkUnderstandInfo',\n                                        'showQuestionAboutMembership',\n                                        'usesMollie',\n                                    ],\n                                    rlt: {\n                                        projectType: { fld: ['id', 'codeRef'] },\n                                        administration: { fld: ['name'] },\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    },\n\n    updateContact: contact => {\n        const requestUrl = `/contact/${contact.id}`;\n\n        return axiosInstance.post(requestUrl, contact);\n    },\n\n    previewDocument: registerValues => {\n        const requestUrl = `/contact/${registerValues.contactId}/${registerValues.projectId}/preview-document`;\n\n        return axiosInstance.post(requestUrl, registerValues);\n    },\n\n    fetchContactProjects: function(contactId, projectId) {\n        const requestUrl = `/contact/${contactId}/contact-projects`;\n\n        return axiosInstance.get(requestUrl);\n    },\n\n    fetchContactProjectData: function(contactId, projectId) {\n        const requestUrl = `/contact/${contactId}/${projectId}/contact-project-data`;\n\n        return axiosInstance.get(requestUrl);\n    },\n\n    fetchContactFinancialOverviewDocuments: function(contactId) {\n        const requestUrl = `/contact/${contactId}/financial-overview-documents`;\n\n        return axiosInstance.get(requestUrl);\n    },\n\n    financialOverviewContactDownload: function(id) {\n        const requestUrl = `/financial-overview-contact/${id}/download`;\n\n        return axiosInstance(requestUrl, { responseType: 'blob' });\n    },\n\n    fetchContactRelatedAdministrations: function(contactId) {\n        const requestUrl = `/contact/${contactId}/related-administrations`;\n\n        return axiosInstance.get(requestUrl);\n    },\n};\n","export default function(contactData) {\n    const typeContact = contactData.typeId ? contactData.typeId : null;\n\n    let emptyPrimaryAddressEnergySupplierElectricity = {\n        energySupplierId: null,\n        esNumber: '',\n        memberSince: '',\n    };\n    let emptyAddress = {\n        street: '',\n        number: '',\n        addition: '',\n        postalCode: '',\n        city: '',\n        countryId: null,\n        eanElectricity: '',\n        eanGas: '',\n        primaryAddressEnergySupplierElectricity: emptyPrimaryAddressEnergySupplierElectricity,\n    };\n    let primaryAddress = null;\n    let visitAddress = null;\n    let postalAddress = null;\n    let invoiceAddress = null;\n    switch (typeContact) {\n        case 'person':\n            // Set primary address\n            primaryAddress = contactData.addresses.find(address => address.primary);\n            contactData.primaryAddress = primaryAddress ? { ...emptyAddress, ...primaryAddress } : emptyAddress;\n            if (!contactData.primaryAddress.primaryAddressEnergySupplierElectricity) {\n                contactData.primaryAddress.primaryAddressEnergySupplierElectricity = {\n                    ...contactData.primaryAddress,\n                    emptyPrimaryAddressEnergySupplierElectricity,\n                };\n            }\n            break;\n        case 'organisation':\n            // Set visit, postal, invoice addresses\n            visitAddress = contactData.addresses.find(address => address.typeId === 'visit');\n            contactData.visitAddress = visitAddress ? { ...emptyAddress, ...visitAddress } : emptyAddress;\n            if (!contactData.visitAddress.primaryAddressEnergySupplierElectricity) {\n                contactData.visitAddress.primaryAddressEnergySupplierElectricity = {\n                    ...contactData.visitAddress,\n                    emptyPrimaryAddressEnergySupplierElectricity,\n                };\n            }\n            postalAddress = contactData.addresses.find(address => address.typeId === 'postal');\n            contactData.postalAddress = postalAddress ? { ...emptyAddress, ...postalAddress } : emptyAddress;\n            invoiceAddress = contactData.addresses.find(address => address.typeId === 'invoice');\n            contactData.invoiceAddress = invoiceAddress ? { ...emptyAddress, ...invoiceAddress } : emptyAddress;\n            break;\n    }\n\n    // Set correspondence email address\n    let emptyEmail = { email: '' };\n    const emailCorrespondence = contactData.emailAddresses.find(emailAddress => emailAddress.primary);\n    contactData.emailCorrespondence = emailCorrespondence ? { ...emptyEmail, ...emailCorrespondence } : emptyEmail;\n\n    // Set invoice email address\n    const emailInvoice = contactData.emailAddresses.find(\n        emailAddress => emailAddress.typeId === 'invoice' && !emailAddress.primary\n    );\n    contactData.emailInvoice = emailInvoice ? { ...emptyEmail, ...emailInvoice } : emptyEmail;\n\n    // Set primary phone number\n    let emptyPhoneNumber = { number: '' };\n    const phoneNumberPrimary = contactData.phoneNumbers.find(phoneNumber => phoneNumber.primary);\n    contactData.phoneNumberPrimary = phoneNumberPrimary\n        ? { ...emptyPhoneNumber, ...phoneNumberPrimary }\n        : emptyPhoneNumber;\n\n    // Set first phone number which is not primary\n    const phoneNumberTwo = contactData.phoneNumbers.filter(phoneNumber => !phoneNumber.primary)[0];\n    contactData.phoneNumberTwo = phoneNumberTwo ? { ...emptyPhoneNumber, ...phoneNumberTwo } : emptyPhoneNumber;\n\n    return contactData;\n}\n","import { Card, CardImg } from 'react-bootstrap';\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst DashboardWidget = function({\n    id,\n    title,\n    text,\n    image,\n    buttonText,\n    buttonLink,\n    backgroundColorUsed,\n    textColorUsed,\n}) {\n    const history = useHistory();\n    const key = 'widget-' + id;\n    const [imageHash, setImageHash] = useState(Date.now());\n\n    let externalLink = null;\n    if (buttonLink.toLowerCase().startsWith('www')) {\n        externalLink = 'https://' + buttonLink;\n    } else if (buttonLink.toLowerCase().startsWith('http') || buttonLink.toLowerCase().startsWith('https')) {\n        externalLink = buttonLink;\n    }\n\n    return (\n        <Card\n            key={key}\n            id={key}\n            style={{ marginTop: '30px', backgroundColor: backgroundColorUsed, color: textColorUsed }}\n        >\n            <CardImg\n                src={image && image.includes('images/') ? image + '?' + imageHash : 'images/' + image + '?' + imageHash}\n                variant={'top'}\n            />\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{title}</h5>\n                <p className=\"card-text\" style={{ whiteSpace: 'break-spaces' }}>\n                    {text}\n                </p>\n                {externalLink === null ? (\n                    <button className=\"w-button btn btn-primary btn-sm\" onClick={() => history.push(buttonLink)}>\n                        {buttonText}\n                    </button>\n                ) : (\n                    <a href={externalLink} target=\"_blank\">\n                        <button className=\"w-button btn btn-primary btn-sm\">{buttonText}</button>\n                    </a>\n                )}\n            </div>\n        </Card>\n    );\n};\n\nexport default DashboardWidget;\n","import { Button, Card } from 'react-bootstrap';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { isEmpty } from 'lodash';\n\nexport const ContactDetailsDashboardWidget = function({ contact, backgroundColorUsed, textColorUsed }) {\n    const history = useHistory();\n    const key = 'widget-' + 'contact-details';\n\n    const typeContact = contact.typeId ? contact.typeId : null;\n\n    return (\n        <Card\n            key={key}\n            id={key}\n            style={{ marginTop: '30px', backgroundColor: backgroundColorUsed, color: textColorUsed }}\n        >\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{contact.fullNameFnf}</h5>\n                <div className=\"card-text\">\n                    {typeContact === 'person' ? (\n                        <>\n                            {contact.primaryAddress !== undefined ? (\n                                <div>\n                                    <b>Adres</b>\n                                    <br />\n                                    {contact.primaryAddress.street} {contact.primaryAddress.number}\n                                    <br />\n                                    {contact.primaryAddress.postalCode} {contact.primaryAddress.city},{' '}\n                                    {contact.primaryAddress.country ? contact.primaryAddress.country.name : ''}\n                                </div>\n                            ) : (\n                                <></>\n                            )}\n                        </>\n                    ) : null}\n                    {typeContact === 'organisation' ? (\n                        <>\n                            {contact.visitAddress !== undefined ? (\n                                <div>\n                                    <b>Bezoekadres</b>\n                                    <br />\n                                    {contact.visitAddress.street} {contact.visitAddress.number}\n                                    <br />\n                                    {contact.visitAddress.postalCode} {contact.visitAddress.city},{' '}\n                                    {contact.visitAddress.country ? contact.visitAddress.country.name : ''}\n                                </div>\n                            ) : (\n                                <></>\n                            )}\n                            {contact.postalAddress !== undefined &&\n                            contact.postalAddress &&\n                            !isEmpty(contact.postalAddress.postalCode) ? (\n                                <div>\n                                    <b>Postadres</b>\n                                    <br />\n                                    {contact.postalAddress.street} {contact.postalAddress.number}\n                                    <br />\n                                    {contact.postalAddress.postalCode} {contact.postalAddress.city},{' '}\n                                    {contact.postalAddress.country ? contact.postalAddress.country.name : ''}\n                                </div>\n                            ) : (\n                                <></>\n                            )}\n                            {contact.invoiceAddress !== undefined &&\n                            contact.invoiceAddress &&\n                            !isEmpty(contact.invoiceAddress.postalCode) ? (\n                                <div>\n                                    <b>Nota adres</b>\n                                    <br />\n                                    {contact.invoiceAddress.street} {contact.invoiceAddress.number}\n                                    <br />\n                                    {contact.invoiceAddress.postalCode} {contact.invoiceAddress.city},{' '}\n                                    {contact.invoiceAddress.country ? contact.invoiceAddress.country.name : ''}\n                                </div>\n                            ) : (\n                                <></>\n                            )}\n                        </>\n                    ) : null}\n\n                    <div>\n                        <br />\n                        <b>Telefoon</b>\n                        <br />\n                        {contact.phoneNumberPrimary.number}\n                    </div>\n                    <div>\n                        <br />\n                        <b>E-mail</b>\n                        <br />\n                        {contact.emailCorrespondence.email}\n                    </div>\n                </div>\n                <br />\n                <button className=\"w-button btn btn-primary btn-sm\" onClick={() => history.push('/gegevens')}>\n                    Gegevens beheren\n                </button>\n            </div>\n        </Card>\n    );\n};\n\nexport const SwitchContactDashboardWidget = function({\n    user,\n    currentSelectedContact,\n    switchCurrentContact,\n    backgroundColorUsed,\n    textColorUsed,\n}) {\n    const history = useHistory();\n    const key = 'widget-' + 'switch-contact';\n\n    return (\n        <Card\n            key={key}\n            id={key}\n            style={{ marginTop: '30px', backgroundColor: backgroundColorUsed, color: textColorUsed }}\n        >\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">Wissel van contact</h5>\n                <div\n                    className=\"card-text\"\n                    style={{ display: 'flex', justifyContent: 'space-between', overflowX: 'auto' }}\n                >\n                    {user.occupations && user.occupations.length > 0 ? (\n                        <>\n                            <Button\n                                className=\"w-button btn btn-primary btn-sm\"\n                                key={'user-' + user.id}\n                                id={'user-' + user.id}\n                                onClick={() => {\n                                    switchCurrentContact(user);\n                                }}\n                                disabled={currentSelectedContact.id === user.id}\n                                style={{ margin: '5px' }}\n                            >\n                                {user.fullNameFnf}\n                            </Button>\n                            {user.occupations.map(occupationContact =>\n                                (occupationContact.primaryContact.typeId === 'organisation' &&\n                                    occupationContact.primary) ||\n                                (occupationContact.primaryContact.typeId === 'person' &&\n                                    occupationContact.occupation.occupationForPortal) ? (\n                                    <Button\n                                        className=\"w-button btn btn-primary btn-sm\"\n                                        key={'user-' + occupationContact.primaryContact.id}\n                                        id={'user-' + occupationContact.primaryContact.id}\n                                        onClick={() => {\n                                            switchCurrentContact(occupationContact.primaryContact);\n                                        }}\n                                        disabled={currentSelectedContact.id === occupationContact.primaryContact.id}\n                                        style={{ margin: '5px' }}\n                                    >\n                                        {occupationContact.primaryContact.fullNameFnf}\n                                    </Button>\n                                ) : null\n                            )}\n                        </>\n                    ) : null}\n                </div>\n            </div>\n        </Card>\n    );\n};\n","import axiosInstance from '../default-setup/AxiosInstance';\n\nconst URL_PORTAL_SETTINGS_DASHBOARD = `/portal-settings-dashboard`;\n\nexport default {\n    fetchDashboardSettings: (id, contactId) => {\n        const requestUrl = `${URL_PORTAL_SETTINGS_DASHBOARD}/${id}/${contactId}`;\n\n        return axiosInstance.get(requestUrl);\n    },\n};\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\r\nimport LoadingView from '../../components/general/LoadingView';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport ContactAPI from '../../api/contact/ContactAPI';\r\nimport rebaseContact from '../../helpers/RebaseContact';\r\nimport DashboardWidget from './widget';\r\nimport { ContactDetailsDashboardWidget, SwitchContactDashboardWidget } from './widget/default';\r\nimport DashboardSettingsAPI from '../../api/dashboard/DashboardSettingsAPI';\r\nimport { isEmpty } from 'lodash';\r\n\r\nconst Dashboard = function(props) {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [contact, setContact] = useState({});\r\n    const [dashboardSettings, setDashboardSettings] = useState({});\r\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\r\n\r\n    useEffect(() => {\r\n        // Call Api if current selected contact id is filled\r\n        if (props.currentSelectedContact.id) {\r\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\r\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\r\n                callFetchContact();\r\n            }\r\n        }\r\n    }, [props.currentSelectedContact]);\r\n\r\n    function callFetchContact() {\r\n        setLoading(true);\r\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                const contactData = rebaseContact(payload.data.data);\r\n\r\n                setContact(contactData);\r\n                props.updateNameSelectedContact(\r\n                    contactData.fullNameFnf,\r\n                    contactData.typeId,\r\n                    contactData.firstName,\r\n                    contactData.lastNamePrefix,\r\n                    contactData.lastName\r\n                );\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            })\r\n            .finally(() => callFetchDashboardSettings());\r\n    }\r\n\r\n    function callFetchDashboardSettings() {\r\n        setLoading(true);\r\n        // todo WM: check anders\r\n        //\r\n        const id = 1;\r\n        DashboardSettingsAPI.fetchDashboardSettings(id, props.currentSelectedContact.id)\r\n            .then(payload => {\r\n                setDashboardSettings(payload.data.data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function usePrevious(value) {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = value;\r\n        });\r\n        return ref.current;\r\n    }\r\n\r\n    return (\r\n        <div className=\"content-section\">\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <div className=\"content-container w-container\">\r\n                    <Row>\r\n                        <Col>\r\n                            {!isEmpty(dashboardSettings.welcomeTitle) ? (\r\n                                <h1 className=\"content-heading mt-0 text-center\">{dashboardSettings.welcomeTitle}</h1>\r\n                            ) : null}\r\n                            {!isEmpty(dashboardSettings.welcomeMessage) ? (\r\n                                <p className={'text-center'} style={{ whiteSpace: 'break-spaces' }}>\r\n                                    {dashboardSettings.welcomeMessage}\r\n                                </p>\r\n                            ) : null}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        {dashboardSettings.widgets\r\n                            .filter(w => w.active)\r\n                            .sort((a, b) => (a.order > b.order ? 1 : -1))\r\n                            .map(widget => (\r\n                                <Col md={6}>\r\n                                    <DashboardWidget\r\n                                        id={widget.codeRef}\r\n                                        image={widget.widgetImageFileName}\r\n                                        title={widget.title}\r\n                                        text={widget.text}\r\n                                        buttonText={widget.buttonText}\r\n                                        buttonLink={widget.buttonLink}\r\n                                        backgroundColorUsed={widget.backgroundColorUsed}\r\n                                        textColorUsed={widget.textColorUsed}\r\n                                    />\r\n                                </Col>\r\n                            ))}\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <ContactDetailsDashboardWidget\r\n                                contact={contact}\r\n                                backgroundColorUsed={dashboardSettings.defaultWidgetBackgroundColor}\r\n                                textColorUsed={dashboardSettings.defaultWidgetTextColor}\r\n                            />\r\n                        </Col>\r\n                        <PortalUserConsumer>\r\n                            {({ user, currentSelectedContact, switchCurrentContact }) => {\r\n                                if (user.occupations && user.occupations.length > 0) {\r\n                                    return (\r\n                                        <Col md={6}>\r\n                                            <SwitchContactDashboardWidget\r\n                                                user={user}\r\n                                                currentSelectedContact={currentSelectedContact}\r\n                                                switchCurrentContact={switchCurrentContact}\r\n                                                backgroundColorUsed={dashboardSettings.defaultWidgetBackgroundColor}\r\n                                                textColorUsed={dashboardSettings.defaultWidgetTextColor}\r\n                                            />\r\n                                        </Col>\r\n                                    );\r\n                                }\r\n                            }}\r\n                        </PortalUserConsumer>\r\n                    </Row>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default function DashboardWithContext(props) {\r\n    return (\r\n        <PortalUserConsumer>\r\n            {({ user, currentSelectedContact, updateNameSelectedContact }) => (\r\n                <>\r\n                    {user.id > 0 && (\r\n                        <Dashboard\r\n                            {...props}\r\n                            user={user}\r\n                            currentSelectedContact={currentSelectedContact}\r\n                            updateNameSelectedContact={updateNameSelectedContact}\r\n                        />\r\n                    )}\r\n                </>\r\n            )}\r\n        </PortalUserConsumer>\r\n    );\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TextBlock = ({ children, className, id, placeholder }) => {\n    const showPlaceholder = children === '' || children === null || children === undefined;\n\n    return (\n        <div className={`text-block ${className} ${showPlaceholder ? 'placeholder' : ''}`} id={id}>\n            {showPlaceholder ? <div className={'placeholder-message'}>{placeholder}</div> : children}\n        </div>\n    );\n};\n\nTextBlock.defaultProps = {\n    className: 'text-block',\n    id: '',\n    children: '',\n    placeholder: '',\n};\n\nTextBlock.propTypes = {\n    className: PropTypes.string,\n    id: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    placeholder: PropTypes.string,\n};\n\nexport default TextBlock;\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Row from 'react-bootstrap/Row';\nimport moment from 'moment';\n\nfunction DefaultContactPersonalView({ portalSettings, initialContact }) {\n    const {\n        person = {},\n        emailCorrespondence,\n        emailInvoice,\n        phoneNumberPrimary,\n        phoneNumberTwo,\n        primaryAddress,\n        iban,\n        ibanAttn,\n        didAgreeAvg,\n        dateDidAgreeAvg,\n        number,\n    } = initialContact;\n    return (\n        <Row>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label'}>Naam</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Aanhef'}>\n                        {person.title ? person.title.name : ''}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Initialen'}>\n                        {person.initials}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Voornaam'}>\n                        {person.firstName}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Tussenvoegsel'}>\n                        {person.lastNamePrefix}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Achternaam'}>\n                        {person.lastName}\n                    </TextBlock>\n                </Row>\n                <FormLabel className={'field-label'}>Geboortedatum</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Geboortedatum (dd-mm-jjjj)'}>\n                        {person.dateOfBirth ? moment(person.dateOfBirth).format('L') : ''}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\n                        {emailCorrespondence.email}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\n                        {emailInvoice.email}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\n                        {phoneNumberPrimary.number}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\n                        {phoneNumberTwo.number}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Adres</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\n                        {primaryAddress.street}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\n                        {primaryAddress.number}\n                    </TextBlock>\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\n                        {primaryAddress.addition}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\n                        {primaryAddress.postalCode}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\n                        {primaryAddress.city}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\n                        {primaryAddress.country ? primaryAddress.country.name : ''}\n                    </TextBlock>\n                </Row>\n                <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\n                        {primaryAddress.eanElectricity}\n                    </TextBlock>\n                </Row>\n                <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\n                        {primaryAddress.eanGas}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\n                </Row>\n            </Col>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\n                        {iban}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\n                        {ibanAttn}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\n                <Row>\n                    <div className={'col-12 col-sm-8'}>\n                        <input\n                            type=\"checkbox\"\n                            id=\"did_agree_avg\"\n                            checked={didAgreeAvg}\n                            className=\"w-checkbox-input checkbox\"\n                            disabled={true}\n                        />\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\n                            Ik ga akkoord met{' '}\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\n                                privacybeleid\n                            </a>{' '}\n                            {didAgreeAvg ? (\n                                <em>({dateDidAgreeAvg ? ' ' + moment(dateDidAgreeAvg).format('L') : ''})</em>\n                            ) : (\n                                ''\n                            )}\n                        </span>\n                    </div>\n                </Row>\n\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\n                        {primaryAddress.primaryAddressEnergySupplierElectricity.energySupplier\n                            ? primaryAddress.primaryAddressEnergySupplierElectricity.energySupplier.name\n                            : ''}\n                    </TextBlock>\n                </Row>\n\n                {primaryAddress.primaryAddressEnergySupplierElectricity &&\n                primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId ? (\n                    <>\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\n                                {primaryAddress.primaryAddressEnergySupplierElectricity.esNumber}\n                            </TextBlock>\n                        </Row>\n\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\n                                {primaryAddress.primaryAddressEnergySupplierElectricity.memberSince\n                                    ? moment(primaryAddress.primaryAddressEnergySupplierElectricity.memberSince).format(\n                                          'L'\n                                      )\n                                    : ''}\n                            </TextBlock>\n                        </Row>\n                    </>\n                ) : (\n                    ''\n                )}\n            </Col>\n        </Row>\n    );\n}\n\nexport default DefaultContactPersonalView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst Select = ({\n    field,\n    className,\n    id,\n    options,\n    optionLabel,\n    emptyOption,\n    placeholder,\n    showErrorMessage,\n    errors,\n    touched,\n    classNameErrorMessage,\n    disabled,\n    customOnChange = null,\n}) => {\n    if (customOnChange) {\n        field.onChange = customOnChange;\n    }\n    return (\n        <>\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\n            ) : null}\n            <select\n                className={`select-field w-select content ${className} ${\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\n                } `}\n                id={id}\n                {...field}\n                disabled={disabled}\n            >\n                {emptyOption ? <option value=\"\">{placeholder ? `-- ${placeholder} --` : ''}</option> : null}\n                {options.map(option => {\n                    return (\n                        <option key={option.id} value={option.id}>\n                            {option[optionLabel]}\n                        </option>\n                    );\n                })}\n            </select>\n        </>\n    );\n};\n\nSelect.defaultProps = {\n    className: '',\n    readOnly: false,\n    required: '',\n    optionLabel: 'name',\n    emptyOption: true,\n    placeholder: '',\n    showErrorMessage: true,\n    classNameErrorMessage: 'text-danger',\n    errors: {},\n    touched: {},\n};\n\nSelect.propTypes = {\n    field: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    options: PropTypes.array.isRequired,\n    optionLabel: PropTypes.string,\n    emptyOption: PropTypes.bool,\n    placeholder: PropTypes.string,\n    showErrorMessage: PropTypes.bool,\n    classNameErrorMessage: PropTypes.string,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n};\n\nexport default Select;\n","export default [\n    { id: 'AU', name: 'Australië' },\n    { id: 'BE', name: 'België' },\n    { id: 'CA', name: 'Canade' },\n    { id: 'DK', name: 'Denemarken' },\n    { id: 'DE', name: 'Duitsland' },\n    { id: 'FI', name: 'Finland' },\n    { id: 'FR', name: 'Frankrijk' },\n    { id: 'IE', name: 'Ierland' },\n    { id: 'IT', name: 'Italië' },\n    { id: 'LU', name: 'Luxemburg' },\n    { id: 'NL', name: 'Nederland' },\n    { id: 'NZ', name: 'Nieuw-Zeeland' },\n    { id: 'NO', name: 'Noorwegen' },\n    { id: 'AT', name: 'Oostenrijk' },\n    { id: 'PL', name: 'Polen' },\n    { id: 'PT', name: 'Portugal' },\n    { id: 'ES', name: 'Spanje' },\n    { id: 'CZ', name: 'Tsjechië' },\n    { id: 'GB', name: 'Verenigd Koninkrijk' },\n    { id: 'VS', name: 'Verenigde Staten' },\n    { id: 'SE', name: 'Zweden' },\n    { id: 'CH', name: 'Zwitserland' },\n];\n","export default [\r\n    { id: 26, name: 'Agem' },\r\n    // { id: 27, name: 'Anode Energie' },\r\n    { id: 66, name: 'ANWB Energie' },\r\n    { id: 24, name: 'Betuwe stroom' },\r\n    { id: 2, name: 'Budget Energie' },\r\n    { id: 58, name: 'CEN / WoonEnergie' },\r\n    { id: 54, name: 'Clean Energy' },\r\n    { id: 68, name: 'Coolblue Energie' },\r\n    { id: 28, name: 'De Groene Stroomfabriek' },\r\n    { id: 59, name: 'De Vrije Energie Producent' },\r\n    { id: 25, name: 'Delta Energie' },\r\n    { id: 50, name: 'DGB Energie' },\r\n    { id: 51, name: 'Discount Energie' },\r\n    { id: 46, name: 'Dorpstroom' },\r\n    { id: 53, name: 'DVEP Energie' },\r\n    { id: 3, name: 'E.on' },\r\n    { id: 45, name: 'Easyenergy' },\r\n    { id: 4, name: 'Eneco' },\r\n    { id: 19, name: 'Energie VanOns' },\r\n    { id: 42, name: 'Energiebesteding' },\r\n    { id: 5, name: 'Energiedirect' },\r\n    { id: 21, name: 'Energieflex' },\r\n    { id: 37, name: 'Energyhouse' },\r\n    { id: 49, name: 'EnergyZero' },\r\n    { id: 52, name: 'EnerZie' },\r\n    { id: 6, name: 'Engie' },\r\n    { id: 7, name: 'Essent' },\r\n    // { id: 35, name: 'Fenor energie' },\r\n    { id: 71, name: 'Frank energie' },\r\n    { id: 72, name: 'Gewoon Energie' },\r\n    { id: 56, name: 'Gezinsenergie' },\r\n    { id: 8, name: 'Greenchoice' },\r\n    { id: 43, name: 'GreenNL' },\r\n    { id: 40, name: 'Groenpand' },\r\n    { id: 44, name: 'Hezelaer' },\r\n    { id: 69, name: 'HollandsStroom' },\r\n    { id: 9, name: 'Holland Wind' },\r\n    { id: 20, name: 'Huismerk Energie' },\r\n    { id: 30, name: 'HVC Kringloop Energie' },\r\n    { id: 23, name: 'Innova Energie' },\r\n    { id: 10, name: 'Main energie' },\r\n    { id: 65, name: 'Mijn Domein Energie' },\r\n    { id: 74, name: 'NextEnergy' },\r\n    { id: 61, name: 'Nieuw Hollands Energiebedrijf' },\r\n    { id: 38, name: 'NieuweStroom' },\r\n    { id: 1, name: 'OM' },\r\n    { id: 18, name: 'Overig' },\r\n    { id: 14, name: 'Oxxio' },\r\n    { id: 39, name: 'ParkStroom' },\r\n    { id: 62, name: 'PostcodeStroom' },\r\n    { id: 36, name: 'Power peers' },\r\n    { id: 75, name: 'Prikenergie' },\r\n    { id: 15, name: 'Pure energie' },\r\n    { id: 63, name: 'PZEM' },\r\n    // { id: 16, name: 'Qurrent' },\r\n    { id: 48, name: 'Qwint' },\r\n    { id: 55, name: 'Samsam' },\r\n    { id: 60, name: 'Sefe energie' },\r\n    { id: 31, name: 'Sepa Green' },\r\n    { id: 32, name: 'Servicehouse' },\r\n    { id: 67, name: 'Shell Energie' },\r\n    { id: 70, name: 'Tibber' },\r\n    { id: 34, name: 'Total' },\r\n    { id: 22, name: 'United Consumers' },\r\n    { id: 17, name: 'VanDeBron' },\r\n    { id: 13, name: 'Vattenfall' },\r\n    { id: 64, name: 'Vrij Op Naam' },\r\n    { id: 47, name: 'Welkom Energie' },\r\n    { id: 41, name: 'Windcentrale' },\r\n    { id: 73, name: 'Zonneplan' },\r\n    { id: 57, name: 'Onbekend' },\r\n];\r\n","export default [\n    { id: 0, name: '' },\n    { id: 1, name: 'Dhr' },\n    { id: 2, name: 'Mevr' },\n    { id: 3, name: 'De heer, Mevrouw' },\n    { id: 4, name: 'Familie' },\n    { id: 5, name: 'De heer of mevrouw' },\n    { id: 6, name: 'De heren' },\n    { id: 7, name: 'De dames' },\n    { id: 8, name: 'Erven' },\n];\n","export default [\n    { id: 0, name: '' },\n    { id: 1, name: 'van' },\n    { id: 2, name: 'de' },\n    { id: 3, name: 'van der' },\n    { id: 4, name: 'van de' },\n    { id: 5, name: 'van den' },\n    { id: 6, name: 'den' },\n    { id: 7, name: 'ten' },\n    { id: 8, name: 'ter' },\n    { id: 9, name: 'te' },\n    { id: 10, name: \"van 't\" },\n    { id: 11, name: 'el' },\n    { id: 12, name: 'le' },\n    { id: 13, name: 'van het' },\n    { id: 14, name: \"in 't\" },\n    { id: 15, name: \"'t\" },\n    { id: 16, name: 'von' },\n    { id: 17, name: 'du' },\n    { id: 18, name: 'da' },\n    { id: 19, name: 'de la' },\n    { id: 20, name: 'la' },\n    { id: 21, name: 'der' },\n    { id: 22, name: 'van ter' },\n    { id: 23, name: \"op 't\" },\n    { id: 24, name: 'op den' },\n    { id: 25, name: 'op ten' },\n    { id: 26, name: 'op de' },\n    { id: 27, name: 'uit den' },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst InputTextDate = ({\n    field,\n    type,\n    min,\n    max,\n    step,\n    className,\n    id,\n    readOnly,\n    placeholder,\n    showErrorMessage,\n    errors,\n    touched,\n    classNameErrorMessage,\n    disabled,\n    customOnChange = null,\n}) => {\n    if (customOnChange) {\n        field.onChange = customOnChange;\n    }\n    return (\n        <>\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\n            ) : null}\n            {type == 'datetime-local' ? (\n                <input\n                    type={type}\n                    className={`text-input w-input ${className} ${\n                        Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\n                    } `}\n                    id={id}\n                    {...field}\n                    readOnly={readOnly}\n                    placeholder={placeholder}\n                    disabled={disabled}\n                    min={min}\n                    max={max}\n                    step={step}\n                    style={{ width: '200px' }}\n                />\n            ) : (\n                <input\n                    type={type}\n                    className={`text-input w-input ${className} ${\n                        Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\n                    } `}\n                    id={id}\n                    {...field}\n                    readOnly={readOnly}\n                    placeholder={placeholder}\n                    disabled={disabled}\n                    min={min}\n                    max={max}\n                    style={{ width: '200px' }}\n                />\n            )}\n        </>\n    );\n};\n\nInputTextDate.defaultProps = {\n    type: 'date',\n    className: 'content',\n    readOnly: false,\n    placeholder: '',\n    showErrorMessage: true,\n    classNameErrorMessage: 'text-danger',\n    min: '1900-01-01',\n    max: '2099-12-31',\n    step: '60',\n    errors: {},\n    touched: {},\n};\n\nInputTextDate.propTypes = {\n    field: PropTypes.object.isRequired,\n    type: PropTypes.string,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    readOnly: PropTypes.bool,\n    showErrorMessage: PropTypes.bool,\n    classNameErrorMessage: PropTypes.string,\n    placeholder: PropTypes.string,\n    min: PropTypes.string,\n    max: PropTypes.string,\n    step: PropTypes.string,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n};\n\nexport default InputTextDate;\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field } from 'formik';\nimport Select from '../../../components/form/Select';\nimport Countries from '../../../data/Countries';\nimport EnergySuppliers from '../../../data/EnergySuppliers';\nimport Titles from '../../../data/Titles';\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport Row from 'react-bootstrap/Row';\nimport TextBlock from '../../../components/general/TextBlock';\nimport moment from 'moment';\nimport { FaInfoCircle } from 'react-icons/fa';\nimport ReactTooltip from 'react-tooltip';\nimport InputTextDate from '../../../components/form/InputTextDate';\n\nconst DefaultContactPersonalEdit = function({\n    portalSettings,\n    initialContact,\n    projectTypeCodeRef,\n    errors,\n    touched,\n    values,\n    setFieldValue,\n}) {\n    // determine memberSince disabledBefore and after\n    let memberSinceDisabledBefore = '';\n    let memberSinceDisabledAfter = '';\n    if (initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId) {\n        if (\n            initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince &&\n            initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId !==\n                values.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId\n        ) {\n            memberSinceDisabledBefore = moment(\n                initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince\n            )\n                .add(1, 'day')\n                .format('YYYY-MM-DD');\n        } else if (initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.endDatePrevious) {\n            memberSinceDisabledBefore = moment(\n                initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.endDatePrevious\n            )\n                .add(1, 'day')\n                .format('YYYY-MM-DD');\n        }\n        if (initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.memberSinceNext) {\n            memberSinceDisabledAfter = moment(\n                initialContact.primaryAddress.primaryAddressEnergySupplierElectricity.memberSinceNext\n            )\n                .subtract(1, 'day')\n                .format('YYYY-MM-DD');\n        }\n    }\n\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\n    return (\n        <Row>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\n                <Row>\n                    <Col xs={12} sm={6}>\n                        <Field\n                            name=\"person.titleId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"title_id\"\n                                    placeholder={'Aanhef'}\n                                    options={Titles}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                        {initialContact.disableChangeContactNameOnPortal ? (\n                            <>\n                                <FaInfoCircle\n                                    color={'blue'}\n                                    size={'15px'}\n                                    data-tip={\n                                        'Je neemt deel aan een project waarvan de deelnemingen op naam zijn uitgegeven.<br />' +\n                                        'Daarom kun je jouw naam niet zelf wijzigen.<br />' +\n                                        'Overige contactgegevens kun je wel zelf aanpassen.<br />' +\n                                        'Een wijziging van rekeningnummer wordt door ons gecontroleerd.<br />' +\n                                        'Heb je vragen of wil je jouw gegevens door de beheerder laten wijzigen?<br />' +\n                                        'Kijk in het menu onder \"Over ons\" voor contact gegevens.'\n                                    }\n                                    data-for={`contact-${initialContact.id}`}\n                                />\n                                <ReactTooltip\n                                    id={`contact-${initialContact.id}`}\n                                    effect=\"float\"\n                                    place=\"right\"\n                                    multiline={true}\n                                    aria-haspopup=\"true\"\n                                />\n                            </>\n                        ) : (\n                            ''\n                        )}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"person.initials\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"initials\"\n                                    placeholder={'Initialen'}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"person.firstName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"first_name\"\n                                    placeholder={'Voornaam'}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"person.lastNamePrefixId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name_prefix_id\"\n                                    options={LastNamePrefixes}\n                                    placeholder={'Tussenvoegsel'}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"person.lastName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name\"\n                                    placeholder={'Achternaam'}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <FormLabel\n                    htmlFor=\"date_of_birth\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    Geboortedatum\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"person.dateOfBirth\"\n                            render={({ field }) => (\n                                <InputTextDate\n                                    field={field}\n                                    type=\"date\"\n                                    errors={errors}\n                                    touched={touched}\n                                    onChangeAction={setFieldValue}\n                                    id=\"date_of_birth\"\n                                    placeholder={'Geboortedatum'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\n                    E-mailadres correspondentie\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"emailCorrespondence.email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"email-correspondence\"\n                                    placeholder={'E-mailadres'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\n                    E-mailadres nota\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"emailInvoice.email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"email-invoice\"\n                                    placeholder={'E-mailadres'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel\n                    htmlFor=\"telephone-number-1\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    Telefoonnummer 1\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={10} md={6}>\n                        <Field\n                            name=\"phoneNumberPrimary.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"telephone-number-1\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\n                    Telefoonnummer 2\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={10} md={6}>\n                        <Field\n                            name=\"phoneNumberTwo.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"telephone-number-2\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel\n                    htmlFor=\"street\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    Adres\n                    {initialContact.blockChangeAddress ? (\n                        <>\n                            {' '}\n                            <FaInfoCircle\n                                color={'blue'}\n                                size={'15px'}\n                                data-tip={`Adres kan momenteel niet worden aangepast. Geef jouw adreswijziging per e-mail aan ons door.`}\n                                data-for={`participant-${initialContact.id}`}\n                            />\n                            <ReactTooltip\n                                id={`participant-${initialContact.id}`}\n                                effect=\"float\"\n                                place=\"bottom\"\n                                multiline={true}\n                                aria-haspopup=\"true\"\n                            />\n                        </>\n                    ) : initialContact.blockChangeAddressNumber ? (\n                        <>\n                            {' '}\n                            <FaInfoCircle\n                                color={'blue'}\n                                size={'15px'}\n                                data-tip={`Postcode en huisnummer is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied met huisnummerreeks`}\n                                data-for={`participant-${initialContact.id}`}\n                            />\n                            <ReactTooltip\n                                id={`participant-${initialContact.id}`}\n                                effect=\"float\"\n                                place=\"bottom\"\n                                multiline={true}\n                                aria-haspopup=\"true\"\n                            />\n                        </>\n                    ) : initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject ? (\n                        <>\n                            {' '}\n                            <FaInfoCircle\n                                color={'blue'}\n                                size={'15px'}\n                                data-tip={`Postcode is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied`}\n                                data-for={`participant-${initialContact.id}`}\n                            />\n                            <ReactTooltip\n                                id={`participant-${initialContact.id}`}\n                                effect=\"float\"\n                                place=\"bottom\"\n                                multiline={true}\n                                aria-haspopup=\"true\"\n                            />\n                        </>\n                    ) : (\n                        ''\n                    )}\n                </FormLabel>\n                {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\n                    (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\n                    values.primaryAddress.postalCode.trim() == '') &&\n                (values.primaryAddress.street.trim() != '' ||\n                    values.primaryAddress.number.trim() != '' ||\n                    values.primaryAddress.addition.trim() != '' ||\n                    values.primaryAddress.postalCode.trim() != '' ||\n                    values.primaryAddress.city.trim() != '') ? (\n                    <Row>\n                        <Col xs={12} sm={12}>\n                            <small className={'text-danger'}>\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\n                            </small>\n                        </Col>\n                    </Row>\n                ) : (\n                    ''\n                )}\n                <Row>\n                    <Col xs={12} sm={12}>\n                        <Field\n                            name=\"primaryAddress.street\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street\"\n                                    placeholder={'Straat'}\n                                    disabled={initialContact.blockChangeAddress}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"primaryAddress.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street_number\"\n                                    placeholder={'Nummer'}\n                                    disabled={\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\n                                    }\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"primaryAddress.addition\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"addition\"\n                                    placeholder={'Toevoeging'}\n                                    disabled={\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\n                                    }\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"primaryAddress.postalCode\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"postal_code\"\n                                    placeholder={'Postcode'}\n                                    disabled={\n                                        initialContact.blockChangeAddress ||\n                                        initialContact.isParticipantSceProject ||\n                                        initialContact.isParticipantPcrProject\n                                    }\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"primaryAddress.city\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"city\"\n                                    placeholder={'Plaats'}\n                                    disabled={initialContact.blockChangeAddress}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"primaryAddress.countryId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"country_id\"\n                                    placeholder={'Selecteer uw land'}\n                                    options={Countries}\n                                    disabled={initialContact.blockChangeAddress}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <FormLabel\n                    htmlFor=\"ean_electricity\"\n                    className={\n                        projectTypeCodeRef === 'postalcode_link_capital' ? 'field-label required' : 'field-label'\n                    }\n                >\n                    EAN nummer electriciteit\n                </FormLabel>\n                {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\n                    (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\n                    values.primaryAddress.postalCode.trim() == '') &&\n                values.primaryAddress.eanElectricity != null &&\n                values.primaryAddress.eanElectricity.trim() != '' ? (\n                    <Row>\n                        <Col xs={12} sm={12}>\n                            <small className={'text-danger'}>\n                                EAN nummer electriciteit wordt alleen opgeslagen als minimaal nummer en postcode zijn\n                                ingevuld bij adres.\n                            </small>\n                        </Col>\n                    </Row>\n                ) : (\n                    ''\n                )}\n                <Row>\n                    <Col xs={12} sm={10} md={6}>\n                        <Field\n                            name=\"primaryAddress.eanElectricity\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"eanElectricity\"\n                                    placeholder={'EAN nummer electriciteit'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\n                    EAN nummer gas\n                </FormLabel>\n                {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\n                    (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\n                    values.primaryAddress.postalCode.trim() == '') &&\n                values.primaryAddress.eanGas != null &&\n                values.primaryAddress.eanGas.trim() != '' ? (\n                    <Row>\n                        <Col xs={12} sm={12}>\n                            <small className={'text-danger'}>\n                                EAN nummer gas wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld bij\n                                adres.\n                            </small>\n                        </Col>\n                    </Row>\n                ) : (\n                    ''\n                )}\n                <Row>\n                    <Col xs={12} sm={10} md={6}>\n                        <Field\n                            name=\"primaryAddress.eanGas\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"eanGas\"\n                                    placeholder={'EAN nummer gas'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\n                </Row>\n            </Col>\n\n            <Col xs={12} md={6}>\n                <FormLabel\n                    htmlFor=\"iban\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    IBAN gegevens\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"iban\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"iban\"\n                                    placeholder={'Rekeningnummer (IBAN)'}\n                                    customOnChange={e => {\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\n                                    }}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"ibanAttn\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"iban_attn\"\n                                    placeholder={'IBAN te name van'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\n                    Akkoord privacybeleid\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"didAgreeAvg\"\n                            render={({ field }) => (\n                                <label className=\"w-checkbox checkbox-fld\">\n                                    <input\n                                        type=\"checkbox\"\n                                        {...field}\n                                        id=\"did_agree_avg\"\n                                        checked={field.value}\n                                        className=\"w-checkbox-input checkbox\"\n                                        disabled={initialContact.didAgreeAvg}\n                                    />\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\n                                        Ik ga akkoord met{' '}\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\n                                            privacybeleid\n                                        </a>{' '}\n                                        {values.didAgreeAvg ? (\n                                            <em>\n                                                (\n                                                {initialContact.dateDidAgreeAvg\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\n                                                    : moment().format('L')}\n                                                )\n                                            </em>\n                                        ) : (\n                                            ''\n                                        )}\n                                    </span>\n                                    {touched[field.name] && errors[field.name] ? (\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\n                                    ) : null}\n                                </label>\n                            )}\n                        />\n                    </Col>\n                </Row>\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\n                    <>\n                        <FormLabel\n                            htmlFor=\"energy_supplier_id\"\n                            className={\n                                initialContact.isParticipantPcrProject ||\n                                projectTypeCodeRef === 'postalcode_link_capital'\n                                    ? 'field-label required'\n                                    : 'field-label'\n                            }\n                        >\n                            Huidige energie leverancier\n                        </FormLabel>\n                        {((!isNaN(values.primaryAddress.number) && values.primaryAddress.number == 0) ||\n                            (isNaN(values.primaryAddress.number) && values.primaryAddress.number.trim() == '') ||\n                            values.primaryAddress.postalCode.trim() == '') &&\n                        (values.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId != null ||\n                            (values.primaryAddress.primaryAddressEnergySupplierElectricity.esNumber &&\n                                values.primaryAddress.primaryAddressEnergySupplierElectricity.esNumber.trim() != '') ||\n                            (values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince &&\n                                values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() !=\n                                    '')) ? (\n                            <Row>\n                                <Col xs={12} sm={12}>\n                                    <small className={'text-danger'}>\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als minimaal nummer\n                                        en postcode zijn ingevuld bij adres.\n                                    </small>\n                                </Col>\n                            </Row>\n                        ) : (\n                            ''\n                        )}\n                        {(!values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince ||\n                            values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() == '') &&\n                        ((values.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId != null &&\n                            values.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId != '') ||\n                            (values.primaryAddress.primaryAddressEnergySupplierElectricity.esNumber &&\n                                values.primaryAddress.primaryAddressEnergySupplierElectricity.esNumber.trim() != '') ||\n                            (values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince &&\n                                values.primaryAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() !=\n                                    '')) ? (\n                            <Row>\n                                <Col xs={12} sm={12}>\n                                    <small className={'text-danger'}>\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als Klant bij\n                                        leverancier sinds is ingevuld.\n                                    </small>\n                                </Col>\n                            </Row>\n                        ) : (\n                            ''\n                        )}\n                        <Row>\n                            <Col xs={12} sm={12} md={8}>\n                                <Field\n                                    name=\"primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId\"\n                                    render={({ field }) => (\n                                        <Select\n                                            field={field}\n                                            errors={errors}\n                                            touched={touched}\n                                            id=\"energy_supplier_id\"\n                                            placeholder={'Selecteer uw leverancier'}\n                                            options={EnergySuppliers}\n                                            customOnChange={e => {\n                                                setFieldValue(\n                                                    'primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId',\n                                                    e.target.value\n                                                );\n                                                setFieldValue(\n                                                    'primaryAddress.primaryAddressEnergySupplierElectricity.esNumber',\n                                                    ''\n                                                );\n                                                setFieldValue(\n                                                    'primaryAddress.primaryAddressEnergySupplierElectricity.memberSince',\n                                                    ''\n                                                );\n                                            }}\n                                        />\n                                    )}\n                                />\n                            </Col>\n                        </Row>\n\n                        {values.primaryAddress.primaryAddressEnergySupplierElectricity &&\n                        values.primaryAddress.primaryAddressEnergySupplierElectricity.energySupplierId ? (\n                            <>\n                                <FormLabel\n                                    htmlFor=\"es_number\"\n                                    className={\n                                        projectTypeCodeRef === 'postalcode_link_capital'\n                                            ? 'field-label required'\n                                            : 'field-label'\n                                    }\n                                >\n                                    Klant nummer bij leverancier\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"primaryAddress.primaryAddressEnergySupplierElectricity.esNumber\"\n                                            render={({ field }) => (\n                                                <InputText\n                                                    field={field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    id=\"es_number\"\n                                                    placeholder={'Klant nummer bij leverancier'}\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\n                                    Klant bij leverancier sinds\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"primaryAddress.primaryAddressEnergySupplierElectricity.memberSince\"\n                                            render={({ field }) => (\n                                                <InputTextDate\n                                                    field={field}\n                                                    type=\"date\"\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    onChangeAction={setFieldValue}\n                                                    min={memberSinceDisabledBefore}\n                                                    max={memberSinceDisabledAfter}\n                                                    id=\"member_since\"\n                                                    placeholder={'Klant sinds'}\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n                            </>\n                        ) : (\n                            ''\n                        )}\n                    </>\n                ) : null}\n            </Col>\n        </Row>\n    );\n};\n\nexport default DefaultContactPersonalEdit;\n","import * as Yup from 'yup';\nimport * as ibantools from 'ibantools';\nimport { isEmpty } from 'lodash';\n\nexport default {\n    validationSchemaBasic: Yup.object().shape({\n        didAgreeAvg: Yup.bool().test(\n            'didAgreeAvg',\n            'Je dient akkoord te gaan met privacybeleid!',\n            value => value === true\n        ),\n        person: Yup.object().shape({\n            lastName: Yup.string()\n                .trim()\n                .required('Verplicht'),\n        }),\n        emailCorrespondence: Yup.object().shape({\n            email: Yup.string()\n                .trim()\n                .email('Ongeldig e-mail adres')\n                .required('Verplicht'),\n        }),\n        emailInvoice: Yup.object().shape({\n            email: Yup.string()\n                .trim()\n                .email('Ongeldig e-mail adres'),\n        }),\n        primaryAddress: Yup.object().shape({\n            street: Yup.string().trim(),\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                }),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        (this.parent.countryId !== 'NL' &&\n                            this.parent.countryId !== null &&\n                            this.parent.countryId != '') ||\n                        value.trim() == ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                }),\n            city: Yup.string().trim(),\n            eanElectricity: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\n            eanGas: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\n        }),\n        phoneNumberPrimary: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\n        }),\n        phoneNumberTwo: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\n        }),\n        iban: Yup.string()\n            .nullable()\n            .trim()\n            .test(\n                'iban',\n                'Ongeldige IBAN of gebruik geen spaties.',\n                value => ibantools.isValidIBAN(value) || isEmpty(value)\n            ),\n    }),\n\n    validationSchemaAdditional: Yup.object().shape({\n        person: Yup.object().shape({\n            firstName: Yup.string()\n                .trim()\n                // .required('Verplicht'),\n                .test('initials-and-first-name-check', 'Voornaam of initialen verplicht', function(value) {\n                    if (value.trim() != '' || this.parent.initials.trim() != '') {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n            dateOfBirth: Yup.date()\n                .typeError('Verplicht of ongeldige datum')\n                .required('Verplicht'),\n        }),\n        phoneNumberPrimary: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\n                .required('Verplicht'),\n        }),\n        phoneNumberTwo: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\n        }),\n        primaryAddress: Yup.object().shape({\n            street: Yup.string()\n                .trim()\n                .required('Verplicht'),\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                })\n                .required('Verplicht'),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        this.parent.countryId !== 'NL' &&\n                        this.parent.countryId !== null &&\n                        this.parent.countryId != ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                })\n                .required('Verplicht'),\n            city: Yup.string()\n                .trim()\n                .required('Verplicht'),\n        }),\n        iban: Yup.string()\n            .trim()\n            .nullable()\n            .required('Verplicht')\n            .test('iban', 'Ongeldige IBAN of gebruik geen spaties.', value => ibantools.isValidIBAN(value)),\n        ibanAttn: Yup.string()\n            .trim()\n            .nullable()\n            .required('Verplicht'),\n    }),\n\n    validationSchemaPcrAdditional: Yup.object().shape({\n        primaryAddress: Yup.object().shape({\n            eanElectricity: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\n                .required('Verplicht'),\n            primaryAddressEnergySupplierElectricity: Yup.object().shape({\n                energySupplierId: Yup.string()\n                    .nullable()\n                    .required('Verplicht'),\n                esNumber: Yup.string()\n                    .nullable()\n                    .trim()\n                    .required('Verplicht'),\n            }),\n        }),\n    }),\n\n    validationSchemaPostalCodeAndNumber: Yup.object().shape({\n        primaryAddress: Yup.object().shape({\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .required('Verplicht')\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                }),\n            postalCode: Yup.string()\n                .trim()\n                .required('Verplicht')\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        (this.parent.countryId !== 'NL' &&\n                            this.parent.countryId !== null &&\n                            this.parent.countryId != '') ||\n                        value.trim() == ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                }),\n        }),\n    }),\n};\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport DefaultContactPersonalView from './default-form-personal/View';\nimport DefaultContactPersonalEdit from './default-form-personal/Edit';\nimport Col from 'react-bootstrap/Col';\nimport { Form, Formik } from 'formik';\nimport { ClipLoader } from 'react-spinners';\nimport ValidationSchemaPersonal from './../../helpers/ValidationSchemaPersonal';\nimport { isEmpty } from 'lodash';\nimport { Alert } from 'react-bootstrap';\n\nfunction ContactDetailsPersonal({\n    portalSettings,\n    initialContact,\n    handleSubmitContactValues,\n    editButtonGroup,\n    editForm,\n    setEditForm,\n}) {\n    const validationSchema = initialContact.isParticipantPcrProject\n        ? ValidationSchemaPersonal.validationSchemaBasic\n              .concat(ValidationSchemaPersonal.validationSchemaAdditional)\n              .concat(ValidationSchemaPersonal.validationSchemaPcrAdditional)\n        : initialContact.isParticipant\n        ? ValidationSchemaPersonal.validationSchemaBasic.concat(ValidationSchemaPersonal.validationSchemaAdditional)\n        : ValidationSchemaPersonal.validationSchemaBasic;\n    return (\n        <div>\n            {editForm ? (\n                <Formik\n                    initialValues={initialContact}\n                    enableReinitialize={true}\n                    validationSchema={validationSchema}\n                    onSubmit={(values, actions) => {\n                        actions.setSubmitting(true);\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\n                    }}\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\n                        return (\n                            <Form>\n                                <DefaultContactPersonalEdit\n                                    portalSettings={portalSettings}\n                                    initialContact={initialContact}\n                                    touched={touched}\n                                    errors={errors}\n                                    setFieldValue={setFieldValue}\n                                    values={values}\n                                />\n                                <Row>\n                                    <Col>\n                                        <ButtonGroup aria-label=\"personal\" className=\"float-right\">\n                                            <Button\n                                                variant={'outline-dark'}\n                                                size=\"sm\"\n                                                onClick={function() {\n                                                    setEditForm(false);\n                                                }}\n                                            >\n                                                Annuleren\n                                            </Button>\n                                            <Button\n                                                className={'w-button'}\n                                                size=\"sm\"\n                                                onClick={handleSubmit}\n                                                disabled={isSubmitting}\n                                            >\n                                                {isSubmitting ? (\n                                                    <span>\n                                                        <ClipLoader color={'white'} size={14} />\n                                                        Bezig met opslaan\n                                                    </span>\n                                                ) : (\n                                                    'Opslaan'\n                                                )}\n                                            </Button>\n                                        </ButtonGroup>\n                                    </Col>\n                                </Row>\n                                {!isEmpty(errors) ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                                {status && status.message ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\n                                                    {status.message}\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </Form>\n                        );\n                    }}\n                />\n            ) : (\n                <>\n                    <DefaultContactPersonalView portalSettings={portalSettings} initialContact={initialContact} />\n                    <Row>\n                        <Col>{editButtonGroup}</Col>\n                    </Row>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default ContactDetailsPersonal;\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Row from 'react-bootstrap/Row';\nimport moment from 'moment';\n\nfunction DefaultContactOrganisationView({ portalSettings, initialContact }) {\n    const {\n        organisation = {},\n        emailCorrespondence,\n        emailInvoice,\n        phoneNumberPrimary,\n        phoneNumberTwo,\n        visitAddress,\n        postalAddress,\n        invoiceAddress,\n        iban,\n        ibanAttn,\n        didAgreeAvg,\n        dateDidAgreeAvg,\n        number,\n        primaryOccupations,\n    } = initialContact;\n\n    return (\n        <Row>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label'}>Bedrijfsnaam</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Bedrijfsnaam'}>\n                        {organisation.name}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>KvK</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'KvK'}>\n                        {organisation.chamberOfCommerceNumber}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'BTW nummer'}>\n                        {organisation.vatNumber}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>IBAN gegevens</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Rekeningnummer (IBAN)'}>\n                        {iban}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'IBAN te name van'}>\n                        {ibanAttn}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Website</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Website'}>\n                        {organisation.website}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Akkoord privacybeleid</FormLabel>\n                <Row>\n                    <div className={'col-12 col-sm-8'}>\n                        <input\n                            type=\"checkbox\"\n                            id=\"did_agree_avg\"\n                            checked={didAgreeAvg}\n                            className=\"w-checkbox-input checkbox\"\n                            disabled={true}\n                        />\n                        <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\n                            Ik ga akkoord met{' '}\n                            <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\n                                privacybeleid\n                            </a>{' '}\n                            {didAgreeAvg ? <em>({dateDidAgreeAvg ? moment(dateDidAgreeAvg).format('L') : ''})</em> : ''}\n                        </span>\n                    </div>\n                </Row>\n\n                <FormLabel className={'field-label'}>E-mailadres correspondentie</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\n                        {emailCorrespondence.email}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>E-mailadres nota</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'E-mailadres'}>\n                        {emailInvoice.email}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Telefoonnummer 1</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\n                        {phoneNumberPrimary.number}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Telefoonnummer 2</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Telefoonnummer'}>\n                        {phoneNumberTwo.number}\n                    </TextBlock>\n                </Row>\n\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'}>{number}</TextBlock>\n                </Row>\n            </Col>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label'}>Bezoekadres</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\n                        {visitAddress.street}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\n                        {visitAddress.number}\n                    </TextBlock>\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\n                        {visitAddress.addition}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\n                        {visitAddress.postalCode}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\n                        {visitAddress.city}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\n                        {visitAddress.country ? visitAddress.country.name : ''}\n                    </TextBlock>\n                </Row>\n                <FormLabel className={'field-label'}>EAN nummer electriciteit</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer electriciteit'}>\n                        {visitAddress.eanElectricity}\n                    </TextBlock>\n                </Row>\n                <FormLabel className={'field-label'}>EAN nummer gas</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'EAN nummer gas'}>\n                        {visitAddress.eanGas}\n                    </TextBlock>\n                </Row>\n                <FormLabel className={'field-label'}>Huidige energie leverancier</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Energieleverancier'}>\n                        {visitAddress.primaryAddressEnergySupplierElectricity.energySupplier\n                            ? visitAddress.primaryAddressEnergySupplierElectricity.energySupplier.name\n                            : ''}\n                    </TextBlock>\n                </Row>\n                {visitAddress.primaryAddressEnergySupplierElectricity &&\n                visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId ? (\n                    <>\n                        <FormLabel className={'field-label'}>Klant nummer bij leverancier</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant nummer'}>\n                                {visitAddress.primaryAddressEnergySupplierElectricity.esNumber}\n                            </TextBlock>\n                        </Row>\n\n                        <FormLabel className={'field-label'}>Klant bij leverancier sinds</FormLabel>\n                        <Row>\n                            <TextBlock className={'col-12 col-sm-8'} placeholder={'Klant sinds'}>\n                                {visitAddress.primaryAddressEnergySupplierElectricity.memberSince\n                                    ? moment(visitAddress.primaryAddressEnergySupplierElectricity.memberSince).format(\n                                          'L'\n                                      )\n                                    : ''}\n                            </TextBlock>\n                        </Row>\n                    </>\n                ) : (\n                    ''\n                )}\n\n                <FormLabel className={'field-label'}>Postadres</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\n                        {postalAddress.street}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\n                        {postalAddress.number}\n                    </TextBlock>\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\n                        {postalAddress.addition}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\n                        {postalAddress.postalCode}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\n                        {postalAddress.city}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\n                        {postalAddress.country ? postalAddress.country.name : ''}\n                    </TextBlock>{' '}\n                </Row>\n                <FormLabel className={'field-label'}>Nota adres</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Straat'}>\n                        {invoiceAddress.street}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Nummer'}>\n                        {invoiceAddress.number}\n                    </TextBlock>\n                    <TextBlock className={'col-6 col-sm-4 '} placeholder={'Toevoeging'}>\n                        {invoiceAddress.addition}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-4'} placeholder={'Postcode'}>\n                        {invoiceAddress.postalCode}\n                    </TextBlock>\n                    <TextBlock className={'col-12 col-sm-6'} placeholder={'Plaats'}>\n                        {invoiceAddress.city}\n                    </TextBlock>\n                </Row>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'} placeholder={'Land'}>\n                        {invoiceAddress.country ? invoiceAddress.country.name : ''}\n                    </TextBlock>\n                </Row>\n            </Col>\n        </Row>\n    );\n}\n\nexport default DefaultContactOrganisationView;\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field } from 'formik';\nimport Select from '../../../components/form/Select';\nimport Countries from '../../../data/Countries';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport Row from 'react-bootstrap/Row';\nimport TextBlock from '../../../components/general/TextBlock';\nimport moment from 'moment';\nimport EnergySuppliers from '../../../data/EnergySuppliers';\nimport { FaInfoCircle } from 'react-icons/fa';\nimport ReactTooltip from 'react-tooltip';\nimport InputTextDate from '../../../components/form/InputTextDate';\n\nconst DefaultContactOrganisationEdit = function({\n    portalSettings,\n    initialContact,\n    projectTypeCodeRef,\n    errors,\n    touched,\n    values,\n    setFieldValue,\n}) {\n    // determine memberSince disabledBefore and after\n    let memberSinceDisabledBefore = '';\n    let memberSinceDisabledAfter = '';\n    if (initialContact.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId) {\n        if (\n            initialContact.visitAddress.primaryAddressEnergySupplierElectricity.memberSince &&\n            initialContact.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId !==\n                values.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId\n        ) {\n            memberSinceDisabledBefore = moment(\n                initialContact.visitAddress.primaryAddressEnergySupplierElectricity.memberSince\n            )\n                .add(1, 'day')\n                .format('YYYY-MM-DD');\n        } else if (initialContact.visitAddress.primaryAddressEnergySupplierElectricity.endDatePrevious) {\n            memberSinceDisabledBefore = moment(\n                initialContact.visitAddress.primaryAddressEnergySupplierElectricity.endDatePrevious\n            )\n                .add(1, 'day')\n                .format('YYYY-MM-DD');\n        }\n        if (initialContact.visitAddress.primaryAddressEnergySupplierElectricity.memberSinceNext) {\n            memberSinceDisabledAfter = moment(\n                initialContact.visitAddress.primaryAddressEnergySupplierElectricity.memberSinceNext\n            )\n                .subtract(1, 'day')\n                .format('YYYY-MM-DD');\n        }\n    }\n\n    // Handy to know: Edit person/organisation is done directly or in step 2 of register steps.\n    // When Edit person/organisation directly (not in step 2 of register steps) then projectTypeCodeRef = undefined\n    return (\n        <Row>\n            <Col xs={12} md={6}>\n                <FormLabel className={'field-label required'}>Naam</FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"organisation.name\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"name\"\n                                    placeholder={'Naam'}\n                                    disabled={initialContact.disableChangeContactNameOnPortal}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={4}>\n                        {initialContact.disableChangeContactNameOnPortal ? (\n                            <>\n                                <FaInfoCircle\n                                    color={'blue'}\n                                    size={'15px'}\n                                    data-tip={\n                                        'Je neemt deel aan een project waarvan de deelnemingen op naam zijn uitgegeven.<br />' +\n                                        'Daarom kun je jouw naam niet zelf wijzigen.<br />' +\n                                        'Overige contactgegevens kun je wel zelf aanpassen.<br />' +\n                                        'Een wijziging van rekeningnummer wordt door ons gecontroleerd.<br />' +\n                                        'Heb je vragen of wil je jouw gegevens door de beheerder laten wijzigen?<br />' +\n                                        'Kijk in het menu onder \"Over ons\" voor contact gegevens.'\n                                    }\n                                    data-for={`contact-${initialContact.id}`}\n                                />\n                                <ReactTooltip\n                                    id={`contact-${initialContact.id}`}\n                                    effect=\"float\"\n                                    place=\"right\"\n                                    multiline={true}\n                                    aria-haspopup=\"true\"\n                                />\n                            </>\n                        ) : (\n                            ''\n                        )}\n                    </Col>\n                </Row>\n\n                <FormLabel className={'field-label'}>KvK</FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"organisation.chamberOfCommerceNumber\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"chamber_of_commerce_number\"\n                                    placeholder={'KvK'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel className={'field-label'}>BTW nummer</FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"organisation.vatNumber\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"vat_number\"\n                                    placeholder={'BTW nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel\n                    htmlFor=\"iban\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    IBAN gegevens\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"iban\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"iban\"\n                                    placeholder={'Rekeningnummer (IBAN)'}\n                                    customOnChange={e => {\n                                        setFieldValue('iban', ('' + e.target.value).toUpperCase());\n                                    }}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"ibanAttn\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"iban_attn\"\n                                    placeholder={'IBAN te name van'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel className={'field-label'}>Website</FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"organisation.website\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"website\"\n                                    placeholder={'Website'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"did_agree_avg\" className={'field-label required'}>\n                    Akkoord privacybeleid\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"didAgreeAvg\"\n                            render={({ field }) => (\n                                <label className=\"w-checkbox checkbox-fld\">\n                                    <input\n                                        type=\"checkbox\"\n                                        {...field}\n                                        id=\"did_agree_avg\"\n                                        checked={field.value}\n                                        className=\"w-checkbox-input checkbox\"\n                                        disabled={initialContact.didAgreeAvg}\n                                    />\n                                    <span htmlFor=\"did_agree_avg\" className=\"checkbox-label w-form-label\">\n                                        Ik ga akkoord met{' '}\n                                        <a href={portalSettings['linkPrivacyPolicy']} target=\"_blank\">\n                                            privacybeleid\n                                        </a>{' '}\n                                        {values.didAgreeAvg ? (\n                                            <em>\n                                                (\n                                                {initialContact.dateDidAgreeAvg\n                                                    ? moment(initialContact.dateDidAgreeAvg).format('L')\n                                                    : moment().format('L')}\n                                                )\n                                            </em>\n                                        ) : (\n                                            ''\n                                        )}\n                                    </span>\n                                    {touched[field.name] && errors[field.name] ? (\n                                        <div className={'error-message text-danger'}>{errors[field.name]}</div>\n                                    ) : null}\n                                </label>\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"email-correspondence\" className={'field-label required'}>\n                    E-mailadres correspondentie\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"emailCorrespondence.email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"email-correspondence\"\n                                    placeholder={'E-mailadres'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"email-invoice\" className=\"field-label\">\n                    E-mailadres nota\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"emailInvoice.email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"email-invoice\"\n                                    placeholder={'E-mailadres'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel\n                    htmlFor=\"telephone-number-1\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    Telefoonnummer 1\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={10} md={6}>\n                        <Field\n                            name=\"phoneNumberPrimary.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"telephone-number-1\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"telephone-number-2\" className={'field-label'}>\n                    Telefoonnummer 2\n                </FormLabel>\n                <Row>\n                    <Col xs={12} sm={10} md={6}>\n                        <Field\n                            name=\"phoneNumberTwo.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"telephone-number-2\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel className={'field-label'}>Contactnummer</FormLabel>\n                <Row>\n                    <TextBlock className={'col-12 col-sm-8'}>{values.number}</TextBlock>\n                </Row>\n            </Col>\n\n            <Col xs={12} md={6}>\n                <FormLabel\n                    htmlFor=\"street\"\n                    className={initialContact.isParticipant ? 'field-label required' : 'field-label'}\n                >\n                    Bezoekadres\n                    {initialContact.blockChangeAddress ? (\n                        <>\n                            {' '}\n                            <FaInfoCircle\n                                color={'blue'}\n                                size={'15px'}\n                                data-tip={`Adres kan momenteel niet worden aangepast. Geef jouw adreswijziging per e-mail aan ons door.`}\n                                data-for={`participant-${initialContact.id}`}\n                            />\n                            <ReactTooltip\n                                id={`participant-${initialContact.id}`}\n                                effect=\"float\"\n                                place=\"bottom\"\n                                multiline={true}\n                                aria-haspopup=\"true\"\n                            />\n                        </>\n                    ) : initialContact.blockChangeAddressNumber ? (\n                        <>\n                            {' '}\n                            <FaInfoCircle\n                                color={'blue'}\n                                size={'15px'}\n                                data-tip={`Postcode en huisnummer is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied met huisnummerreeks`}\n                                data-for={`participant-${initialContact.id}`}\n                            />\n                            <ReactTooltip\n                                id={`participant-${initialContact.id}`}\n                                effect=\"float\"\n                                place=\"bottom\"\n                                multiline={true}\n                                aria-haspopup=\"true\"\n                            />\n                        </>\n                    ) : initialContact.isParticipantSceProject || initialContact.isParticipantPcrProject ? (\n                        <>\n                            {' '}\n                            <FaInfoCircle\n                                color={'blue'}\n                                size={'15px'}\n                                data-tip={`Postcode is niet meer wijzigen vanwege deelname aan project op een specifiek postcodegebied`}\n                                data-for={`participant-${initialContact.id}`}\n                            />\n                            <ReactTooltip\n                                id={`participant-${initialContact.id}`}\n                                effect=\"float\"\n                                place=\"bottom\"\n                                multiline={true}\n                                aria-haspopup=\"true\"\n                            />\n                        </>\n                    ) : (\n                        ''\n                    )}\n                </FormLabel>\n                {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\n                    (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\n                    values.visitAddress.postalCode.trim() == '') &&\n                (values.visitAddress.street.trim() != '' ||\n                    values.visitAddress.number.trim() != '' ||\n                    values.visitAddress.addition.trim() != '' ||\n                    values.visitAddress.postalCode.trim() != '' ||\n                    values.visitAddress.city.trim() != '') ? (\n                    <Row>\n                        <Col xs={12} sm={12}>\n                            <small className={'text-danger'}>\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\n                            </small>\n                        </Col>\n                    </Row>\n                ) : (\n                    ''\n                )}\n                <Row>\n                    <Col xs={12} sm={12}>\n                        <Field\n                            name=\"visitAddress.street\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street\"\n                                    placeholder={'Straat'}\n                                    disabled={initialContact.blockChangeAddress}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"visitAddress.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street_number\"\n                                    placeholder={'Nummer'}\n                                    disabled={\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\n                                    }\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"visitAddress.addition\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"addition\"\n                                    placeholder={'Toevoeging'}\n                                    disabled={\n                                        initialContact.blockChangeAddress || initialContact.blockChangeAddressNumber\n                                    }\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"visitAddress.postalCode\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"postal_code\"\n                                    placeholder={'Postcode'}\n                                    disabled={\n                                        initialContact.blockChangeAddress ||\n                                        initialContact.isParticipantSceProject ||\n                                        initialContact.isParticipantPcrProject\n                                    }\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"visitAddress.city\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"city\"\n                                    placeholder={'Plaats'}\n                                    disabled={initialContact.blockChangeAddress}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"visitAddress.countryId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"country_id\"\n                                    placeholder={'Selecteer uw land'}\n                                    options={Countries}\n                                    disabled={initialContact.blockChangeAddress}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <FormLabel\n                    htmlFor=\"ean_electricity\"\n                    className={\n                        projectTypeCodeRef === 'postalcode_link_capital' ? 'field-label required' : 'field-label'\n                    }\n                >\n                    EAN nummer electriciteit\n                </FormLabel>\n                {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\n                    (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\n                    values.visitAddress.postalCode.trim() == '') &&\n                values.visitAddress.eanElectricity != null &&\n                values.visitAddress.eanElectricity.trim() != '' ? (\n                    <Row>\n                        <Col xs={12} sm={12}>\n                            <small className={'text-danger'}>\n                                EAN nummer electriciteit wordt alleen opgeslagen als minimaal nummer en postcode zijn\n                                ingevuld bij bezoekadres.\n                            </small>\n                        </Col>\n                    </Row>\n                ) : (\n                    ''\n                )}\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"visitAddress.eanElectricity\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"ean_electricity\"\n                                    placeholder={'EAN nummer electriciteit'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                <FormLabel htmlFor=\"ean_gas\" className={'field-label'}>\n                    EAN nummer gas\n                </FormLabel>\n                {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\n                    (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\n                    values.visitAddress.postalCode.trim() == '') &&\n                values.visitAddress.eanGas != null &&\n                values.visitAddress.eanGas.trim() != '' ? (\n                    <Row>\n                        <Col xs={12} sm={12}>\n                            <small className={'text-danger'}>\n                                EAN nummer gas wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld bij\n                                bezoekadres.\n                            </small>\n                        </Col>\n                    </Row>\n                ) : (\n                    ''\n                )}\n                <Row>\n                    <Col xs={12} sm={12} md={8}>\n                        <Field\n                            name=\"visitAddress.eanGas\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"ean_gas\"\n                                    placeholder={'EAN nummer gas'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n\n                {projectTypeCodeRef === 'postalcode_link_capital' || projectTypeCodeRef === undefined ? (\n                    <>\n                        <FormLabel\n                            htmlFor=\"energy_supplier_id\"\n                            className={\n                                initialContact.isParticipantPcrProject ||\n                                projectTypeCodeRef === 'postalcode_link_capital'\n                                    ? 'field-label required'\n                                    : 'field-label'\n                            }\n                        >\n                            Huidige energie leverancier\n                        </FormLabel>\n                        {((!isNaN(values.visitAddress.number) && values.visitAddress.number == 0) ||\n                            (isNaN(values.visitAddress.number) && values.visitAddress.number.trim() == '') ||\n                            values.visitAddress.postalCode.trim() == '') &&\n                        (values.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId != null ||\n                            (values.visitAddress.primaryAddressEnergySupplierElectricity.esNumber &&\n                                values.visitAddress.primaryAddressEnergySupplierElectricity.esNumber.trim() != '') ||\n                            (values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince &&\n                                values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() !=\n                                    '')) ? (\n                            <Row>\n                                <Col xs={12} sm={12}>\n                                    <small className={'text-danger'}>\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als minimaal nummer\n                                        en postcode zijn ingevuld bij bezoekadres.\n                                    </small>\n                                </Col>\n                            </Row>\n                        ) : (\n                            ''\n                        )}\n                        {(!values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince ||\n                            values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() == '') &&\n                        ((values.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId != null &&\n                            values.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId != '') ||\n                            (values.visitAddress.primaryAddressEnergySupplierElectricity.esNumber &&\n                                values.visitAddress.primaryAddressEnergySupplierElectricity.esNumber.trim() != '') ||\n                            (values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince &&\n                                values.visitAddress.primaryAddressEnergySupplierElectricity.memberSince.trim() !=\n                                    '')) ? (\n                            <Row>\n                                <Col xs={12} sm={12}>\n                                    <small className={'text-danger'}>\n                                        Huidige energie leverancier gegevens wordt alleen opgeslagen als Klant bij\n                                        leverancier sinds is ingevuld.\n                                    </small>\n                                </Col>\n                            </Row>\n                        ) : (\n                            ''\n                        )}\n                        <Row>\n                            <Col xs={12} sm={12} md={8}>\n                                <Field\n                                    name=\"visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId\"\n                                    render={({ field }) => (\n                                        <Select\n                                            field={field}\n                                            errors={errors}\n                                            touched={touched}\n                                            id=\"energy_supplier_id\"\n                                            placeholder={'Selecteer uw leverancier'}\n                                            options={EnergySuppliers}\n                                            customOnChange={e => {\n                                                setFieldValue(\n                                                    'visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId',\n                                                    e.target.value\n                                                );\n                                                setFieldValue(\n                                                    'visitAddress.primaryAddressEnergySupplierElectricity.esNumber',\n                                                    ''\n                                                );\n                                                setFieldValue(\n                                                    'visitAddress.primaryAddressEnergySupplierElectricity.memberSince',\n                                                    ''\n                                                );\n                                            }}\n                                        />\n                                    )}\n                                />\n                            </Col>\n                        </Row>\n\n                        {values.visitAddress.primaryAddressEnergySupplierElectricity &&\n                        values.visitAddress.primaryAddressEnergySupplierElectricity.energySupplierId ? (\n                            <>\n                                <FormLabel\n                                    htmlFor=\"es_number\"\n                                    className={\n                                        projectTypeCodeRef === 'postalcode_link_capital'\n                                            ? 'field-label required'\n                                            : 'field-label'\n                                    }\n                                >\n                                    Klant nummer bij leverancier\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"visitAddress.primaryAddressEnergySupplierElectricity.esNumber\"\n                                            render={({ field }) => (\n                                                <InputText\n                                                    field={field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    id=\"es_number\"\n                                                    placeholder={'Klant nummer bij leverancier'}\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n\n                                <FormLabel htmlFor=\"member_since\" className={'field-label'}>\n                                    Klant bij leverancier sinds\n                                </FormLabel>\n                                <Row>\n                                    <Col xs={12} sm={12} md={8}>\n                                        <Field\n                                            name=\"visitAddress.primaryAddressEnergySupplierElectricity.memberSince\"\n                                            render={({ field }) => (\n                                                <InputTextDate\n                                                    field={field}\n                                                    type=\"date\"\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    onChangeAction={setFieldValue}\n                                                    min={memberSinceDisabledBefore}\n                                                    max={memberSinceDisabledAfter}\n                                                    id=\"member_since\"\n                                                    placeholder={'Klant sinds'}\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n                            </>\n                        ) : (\n                            ''\n                        )}\n                    </>\n                ) : null}\n\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\n                    Postadres\n                </FormLabel>\n                {((!isNaN(values.postalAddress.number) && values.postalAddress.number == 0) ||\n                    (isNaN(values.postalAddress.number) && values.postalAddress.number.trim() == '') ||\n                    values.postalAddress.postalCode.trim() == '') &&\n                (values.postalAddress.street.trim() != '' ||\n                    values.postalAddress.number.trim() != '' ||\n                    values.postalAddress.addition.trim() != '' ||\n                    values.postalAddress.postalCode.trim() != '' ||\n                    values.postalAddress.city.trim() != '') ? (\n                    <Row>\n                        <Col xs={12} sm={12}>\n                            <small className={'text-danger'}>\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\n                            </small>\n                        </Col>\n                    </Row>\n                ) : (\n                    ''\n                )}\n                <Row>\n                    <Col xs={12} sm={12}>\n                        <Field\n                            name=\"postalAddress.street\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street\"\n                                    placeholder={'Straat'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"postalAddress.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street_number\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"postalAddress.addition\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"addition\"\n                                    placeholder={'Toevoeging'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"postalAddress.postalCode\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"postal_code\"\n                                    placeholder={'Postcode'}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"postalAddress.city\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"city\"\n                                    placeholder={'Plaats'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"postalAddress.countryId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"country_id\"\n                                    placeholder={'Selecteer uw land'}\n                                    options={Countries}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <FormLabel htmlFor=\"street\" className=\"field-label\">\n                    Nota adres\n                </FormLabel>\n                {((!isNaN(values.invoiceAddress.number) && values.invoiceAddress.number == 0) ||\n                    (isNaN(values.invoiceAddress.number) && values.invoiceAddress.number.trim() == '') ||\n                    values.invoiceAddress.postalCode.trim() == '') &&\n                (values.invoiceAddress.street.trim() != '' ||\n                    values.invoiceAddress.number.trim() != '' ||\n                    values.invoiceAddress.addition.trim() != '' ||\n                    values.invoiceAddress.postalCode.trim() != '' ||\n                    values.invoiceAddress.city.trim() != '') ? (\n                    <Row>\n                        <Col xs={12} sm={12}>\n                            <small className={'text-danger'}>\n                                Adres wordt alleen opgeslagen als minimaal nummer en postcode zijn ingevuld.\n                            </small>\n                        </Col>\n                    </Row>\n                ) : (\n                    ''\n                )}\n                <Row>\n                    <Col xs={12} sm={12}>\n                        <Field\n                            name=\"invoiceAddress.street\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street\"\n                                    placeholder={'Straat'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"invoiceAddress.number\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"street_number\"\n                                    placeholder={'Nummer'}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"invoiceAddress.addition\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"addition\"\n                                    placeholder={'Toevoeging'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={4}>\n                        <Field\n                            name=\"invoiceAddress.postalCode\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"postal_code\"\n                                    placeholder={'Postcode'}\n                                />\n                            )}\n                        />\n                    </Col>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"invoiceAddress.city\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"city\"\n                                    placeholder={'Plaats'}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={8}>\n                        <Field\n                            name=\"invoiceAddress.countryId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"country_id\"\n                                    placeholder={'Selecteer uw land'}\n                                    options={Countries}\n                                />\n                            )}\n                        />\n                    </Col>\n                </Row>\n            </Col>\n        </Row>\n    );\n};\n\nexport default DefaultContactOrganisationEdit;\n","import * as Yup from 'yup';\nimport * as ibantools from 'ibantools';\nimport { isEmpty } from 'lodash';\n\nexport default {\n    validationSchemaBasic: Yup.object().shape({\n        didAgreeAvg: Yup.bool().test(\n            'didAgreeAvg',\n            'Je dient akkoord te gaan met privacybeleid!',\n            value => value === true\n        ),\n        organisation: Yup.object().shape({\n            name: Yup.string()\n                .trim()\n                .required('Verplicht'),\n        }),\n        emailCorrespondence: Yup.object().shape({\n            email: Yup.string()\n                .trim()\n                .email('Ongeldig e-mail adres')\n                .required('Verplicht'),\n        }),\n        emailInvoice: Yup.object().shape({\n            email: Yup.string()\n                .trim()\n                .email('Ongeldig e-mail adres'),\n        }),\n        postalAddress: Yup.object().shape({\n            street: Yup.string().trim(),\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                }),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        (this.parent.countryId !== 'NL' &&\n                            this.parent.countryId !== null &&\n                            this.parent.countryId != '') ||\n                        value.trim() == ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                }),\n            city: Yup.string().trim(),\n        }),\n        visitAddress: Yup.object().shape({\n            street: Yup.string().trim(),\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                }),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        (this.parent.countryId !== 'NL' &&\n                            this.parent.countryId !== null &&\n                            this.parent.countryId != '') ||\n                        value.trim() == ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                }),\n            city: Yup.string().trim(),\n            eanElectricity: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\n            eanGas: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig'),\n        }),\n        invoiceAddress: Yup.object().shape({\n            street: Yup.string().trim(),\n            number: Yup.string()\n                .nullable()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                }),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        (this.parent.countryId !== 'NL' &&\n                            this.parent.countryId !== null &&\n                            this.parent.countryId != '') ||\n                        value.trim() == ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                }),\n            city: Yup.string().trim(),\n        }),\n        phoneNumberPrimary: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\n        }),\n        phoneNumberTwo: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}|^$/, 'Minimaal 10 cijfers nodig'),\n        }),\n        iban: Yup.string()\n            .nullable()\n            .trim()\n            .test(\n                'iban',\n                'Ongeldige IBAN of gebruik geen spaties.',\n                value => ibantools.isValidIBAN(value) || isEmpty(value)\n            ),\n    }),\n\n    validationSchemaAdditional: Yup.object().shape({\n        phoneNumberPrimary: Yup.object().shape({\n            number: Yup.string()\n                .trim()\n                .matches(/(\\d.*){10}/, 'Minimaal 10 cijfers nodig')\n                .required('Verplicht'),\n        }),\n        visitAddress: Yup.object().shape({\n            street: Yup.string()\n                .trim()\n                .required('Verplicht'),\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                })\n                .required('Verplicht'),\n            postalCode: Yup.string()\n                .trim()\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        this.parent.countryId !== 'NL' &&\n                        this.parent.countryId !== null &&\n                        this.parent.countryId != ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                })\n                .required('Verplicht'),\n            city: Yup.string()\n                .trim()\n                .required('Verplicht'),\n        }),\n        iban: Yup.string()\n            .trim()\n            .nullable()\n            .required('Verplicht')\n            .test('iban', 'Ongeldige IBAN of gebruik geen spaties.', value => ibantools.isValidIBAN(value)),\n        ibanAttn: Yup.string()\n            .trim()\n            .nullable()\n            .required('Verplicht'),\n        organisation: Yup.object().shape({\n            chamberOfCommerceNumber: Yup.string()\n                .trim()\n                .required('Verplicht'),\n        }),\n    }),\n\n    validationSchemaPcrAdditional: Yup.object().shape({\n        visitAddress: Yup.object().shape({\n            eanElectricity: Yup.string()\n                .nullable()\n                .trim()\n                .matches(/(\\d.*){18}|^$/, 'Minimaal 18 cijfers nodig')\n                .required('Verplicht'),\n            primaryAddressEnergySupplierElectricity: Yup.object().shape({\n                energySupplierId: Yup.string()\n                    .nullable()\n                    .required('Verplicht'),\n                esNumber: Yup.string()\n                    .nullable()\n                    .trim()\n                    .required('Verplicht'),\n            }),\n        }),\n    }),\n\n    validationSchemaPostalCodeAndNumber: Yup.object().shape({\n        visitAddress: Yup.object().shape({\n            number: Yup.string()\n                .nullable()\n                .trim()\n                .required('Verplicht')\n                .test('number', 'Alleen nummers', value => {\n                    return Number.isInteger(+value);\n                }),\n            postalCode: Yup.string()\n                .trim()\n                .required('Verplicht')\n                .test('postal-code-nl-check', 'Formaat Nederlandse postcode is 1234 AB', function(value) {\n                    if (\n                        (this.parent.countryId !== 'NL' &&\n                            this.parent.countryId !== null &&\n                            this.parent.countryId != '') ||\n                        value.trim() == ''\n                    ) {\n                        return true;\n                    } else {\n                        return !value.search(/^[1-9][0-9]{3}[ ]?([A-RT-Za-rt-z][A-Za-z]|[sS][BCbcE-Re-rT-Zt-z])$/);\n                    }\n                }),\n        }),\n    }),\n};\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport DefaultContactOrganisationView from './default-form-organisation/View';\nimport DefaultContactOrganisationEdit from './default-form-organisation/Edit';\nimport Col from 'react-bootstrap/Col';\nimport { Form, Formik } from 'formik';\nimport { ClipLoader } from 'react-spinners';\nimport ValidationSchemaOrganisation from './../../helpers/ValidationSchemaOrganisation';\nimport { isEmpty } from 'lodash';\nimport { Alert } from 'react-bootstrap';\n\nfunction ContactDetailsOrganisation({\n    portalSettings,\n    initialContact,\n    handleSubmitContactValues,\n    editButtonGroup,\n    editForm,\n    setEditForm,\n}) {\n    const validationSchema = initialContact.isParticipantPcrProject\n        ? ValidationSchemaOrganisation.validationSchemaBasic\n              .concat(ValidationSchemaOrganisation.validationSchemaAdditional)\n              .concat(ValidationSchemaOrganisation.validationSchemaPcrAdditional)\n        : initialContact.isParticipant\n        ? ValidationSchemaOrganisation.validationSchemaBasic.concat(\n              ValidationSchemaOrganisation.validationSchemaAdditional\n          )\n        : ValidationSchemaOrganisation.validationSchemaBasic;\n\n    return (\n        <div>\n            {editForm ? (\n                <Formik\n                    initialValues={initialContact}\n                    enableReinitialize={true}\n                    validationSchema={validationSchema}\n                    onSubmit={(values, actions) => {\n                        actions.setSubmitting(true);\n                        handleSubmitContactValues(values, actions, () => setEditForm(false));\n                    }}\n                    render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\n                        return (\n                            <Form>\n                                <DefaultContactOrganisationEdit\n                                    portalSettings={portalSettings}\n                                    initialContact={initialContact}\n                                    touched={touched}\n                                    errors={errors}\n                                    setFieldValue={setFieldValue}\n                                    values={values}\n                                />\n                                <Row>\n                                    <Col>\n                                        <ButtonGroup aria-label=\"organisation\" className=\"float-right\">\n                                            <Button\n                                                variant={'outline-dark'}\n                                                size=\"sm\"\n                                                onClick={function() {\n                                                    setEditForm(false);\n                                                }}\n                                            >\n                                                Annuleren\n                                            </Button>\n                                            <Button\n                                                className={'w-button'}\n                                                size=\"sm\"\n                                                onClick={handleSubmit}\n                                                disabled={isSubmitting}\n                                            >\n                                                {isSubmitting ? (\n                                                    <span>\n                                                        <ClipLoader color={'white'} size={14} />\n                                                        Bezig met opslaan\n                                                    </span>\n                                                ) : (\n                                                    'Opslaan'\n                                                )}\n                                            </Button>\n                                        </ButtonGroup>\n                                    </Col>\n                                </Row>\n                                {!isEmpty(errors) ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                    Niet alle verplichte velden zijn (juist) ingevuld!\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                                {status && status.message ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\n                                                    {status.message}\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </Form>\n                        );\n                    }}\n                />\n            ) : (\n                <>\n                    <DefaultContactOrganisationView portalSettings={portalSettings} initialContact={initialContact} />\n                    <Row>\n                        <Col>{editButtonGroup}</Col>\n                    </Row>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default ContactDetailsOrganisation;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\nimport ContactAPI from '../../api/contact/ContactAPI';\nimport rebaseContact from '../../helpers/RebaseContact';\nimport LoadingView from '../../components/general/LoadingView';\nimport ContactDetailsPersonal from './Personal';\nimport ContactDetailsOrganisation from './Organisation';\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nconst ContactDetails = function(props) {\n    const [contact, setContact] = useState({});\n    const [portalSettings, setPortalSettings] = useState({});\n    const [isLoading, setLoading] = useState(true);\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\n    const [editForm, setEditForm] = useState(false);\n\n    useEffect(() => {\n        const keys =\n            '?keys[]=portalName' +\n            '&keys[]=portalWebsite' +\n            '&keys[]=portalUrl' +\n            '&keys[]=responsibleUserId' +\n            '&keys[]=checkContactTaskResponsibleUserId' +\n            '&keys[]=linkPrivacyPolicy' +\n            '&keys[]=pcrPowerKwhConsumptionPercentage' +\n            '&keys[]=pcrGeneratingCapacityOneSolorPanel';\n        PortalSettingsAPI.fetchPortalSettings(keys)\n            .then(payload => {\n                setPortalSettings({ ...payload.data });\n            })\n            .catch(error => {\n                this.setState({ isLoading: false, hasError: true });\n            });\n\n        // Call Api if current selected contact id is filled\n        if (props.currentSelectedContact.id) {\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\n                callFetchContact();\n            }\n        }\n    }, [props.currentSelectedContact]);\n\n    function callFetchContact() {\n        setLoading(true);\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\n            .then(payload => {\n                const contactData = rebaseContact(payload.data.data);\n\n                setContact(contactData);\n                props.updateNameSelectedContact(\n                    contactData.fullNameFnf,\n                    contactData.typeId,\n                    contactData.firstName,\n                    contactData.lastNamePrefix,\n                    contactData.lastName\n                );\n                setLoading(false);\n            })\n            .catch(error => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                setLoading(false);\n            });\n    }\n\n    function usePrevious(value) {\n        const ref = useRef();\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    }\n\n    function handleSubmitContactValues(values, actions, switchToView) {\n        const updatedContact = { ...contact, ...values, projectId: null };\n        ContactAPI.updateContact(updatedContact)\n            .then(payload => {\n                callFetchContact();\n                actions.setSubmitting(false);\n                switchToView();\n            })\n            .catch(error => {\n                actions.setSubmitting(false);\n                actions.setStatus({\n                    message: error.response.data.message,\n                });\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\n            });\n    }\n\n    const editButtonGroup = (\n        <ButtonGroup aria-label=\"contact-details\" className={'float-right'}>\n            <Button\n                className={'w-button'}\n                size=\"sm\"\n                onClick={function() {\n                    setEditForm(true);\n                }}\n            >\n                Wijzig\n            </Button>\n        </ButtonGroup>\n    );\n\n    return (\n        <div className=\"content-section\">\n            {isLoading ? (\n                <LoadingView />\n            ) : (\n                <div className=\"content-container w-container\">\n                    {editForm ? (\n                        <Row>\n                            <Col>\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\n                            </Col>\n                        </Row>\n                    ) : (\n                        <Row>\n                            <Col>\n                                <h1 className=\"content-heading mt-0\">Contactgegevens</h1>\n                            </Col>\n                            <Col>{editButtonGroup}</Col>\n                        </Row>\n                    )}\n                    <div className=\"w-form\" />\n                    {/* If contact is person */}\n                    {contact.typeId === 'person' ? (\n                        <ContactDetailsPersonal\n                            portalSettings={portalSettings}\n                            initialContact={contact}\n                            handleSubmitContactValues={handleSubmitContactValues}\n                            editButtonGroup={editButtonGroup}\n                            editForm={editForm}\n                            setEditForm={setEditForm}\n                        />\n                    ) : null}\n                    {/* If contact is organisation */}\n                    {contact.typeId === 'organisation' ? (\n                        <ContactDetailsOrganisation\n                            portalSettings={portalSettings}\n                            initialContact={contact}\n                            handleSubmitContactValues={handleSubmitContactValues}\n                            editButtonGroup={editButtonGroup}\n                            editForm={editForm}\n                            setEditForm={setEditForm}\n                        />\n                    ) : null}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default function ContactDetailsWithContext(props) {\n    return (\n        <PortalUserConsumer>\n            {({ currentSelectedContact, updateNameSelectedContact }) => (\n                <ContactDetails\n                    {...props}\n                    currentSelectedContact={currentSelectedContact}\n                    updateNameSelectedContact={updateNameSelectedContact}\n                />\n            )}\n        </PortalUserConsumer>\n    );\n}\n","import React from 'react';\nimport { Field, FieldArray, Form, Formik } from 'formik';\nimport ButtonText from '../../components/button/ButtonText';\n\nconst MyAreasOfInterestForm = function({ handleSubmit, initialValues }) {\n    return (\n        <Formik\n            initialValues={initialValues}\n            enableReinitialize={true}\n            onSubmit={(values, actions) => {\n                actions.setSubmitting(true);\n                console.log(values);\n            }}\n            render={({ errors, touched, setFieldValue, isSubmitting, values }) => {\n                return (\n                    <Form id=\"email-form\" name=\"email-form\">\n                        <div className=\"w-row\">\n                            <div className=\"w-col w-col-6\">\n                                <h6 className=\"heading-content\">Mijn interessegebieden</h6>\n                                <FieldArray\n                                    name=\"myAreasOfInterest\"\n                                    render={arrayHelpers => (\n                                        <div>\n                                            {values.myAreasOfInterest &&\n                                                values.myAreasOfInterest.map((myAreaOfInterest, index) => (\n                                                    <div key={index}>\n                                                        <Field\n                                                            name={`myAreasOfInterest[${index}]['value']`}\n                                                            render={({ field }) => (\n                                                                <label className=\"w-checkbox checkbox-fld\">\n                                                                    <input\n                                                                        type=\"checkbox\"\n                                                                        {...field}\n                                                                        id={myAreaOfInterest.name}\n                                                                        checked={myAreaOfInterest.value}\n                                                                        className=\"w-checkbox-input checkbox\"\n                                                                    />\n                                                                    <span\n                                                                        htmlFor={myAreaOfInterest.name}\n                                                                        className=\"checkbox-label w-form-label\"\n                                                                    >\n                                                                        {myAreaOfInterest.name}\n                                                                    </span>\n                                                                </label>\n                                                            )}\n                                                        />\n                                                    </div>\n                                                ))}\n                                        </div>\n                                    )}\n                                />\n\n                                <h6 className=\"heading-content\">Deelname</h6>\n                                <FieldArray\n                                    name=\"participations\"\n                                    render={arrayHelpers => (\n                                        <div>\n                                            {values.participations &&\n                                                values.participations.map((participation, index) => (\n                                                    <div key={index}>\n                                                        <Field\n                                                            name={`participations[${index}]['value']`}\n                                                            render={({ field }) => (\n                                                                <label className=\"w-checkbox checkbox-fld\">\n                                                                    <input\n                                                                        type=\"checkbox\"\n                                                                        {...field}\n                                                                        id={participation.name}\n                                                                        checked={participation.value}\n                                                                        className=\"w-checkbox-input checkbox\"\n                                                                    />\n                                                                    <span\n                                                                        htmlFor={participation.name}\n                                                                        className=\"checkbox-label w-form-label\"\n                                                                    >\n                                                                        {participation.name}\n                                                                    </span>\n                                                                </label>\n                                                            )}\n                                                        />\n                                                    </div>\n                                                ))}\n                                        </div>\n                                    )}\n                                />\n\n                                <h6 className=\"heading-content\">Algemeen</h6>\n                                <FieldArray\n                                    name=\"generalOptions\"\n                                    render={arrayHelpers => (\n                                        <div>\n                                            {values.generalOptions &&\n                                                values.generalOptions.map((generalOption, index) => (\n                                                    <div key={index}>\n                                                        <Field\n                                                            name={`generalOptions[${index}]['value']`}\n                                                            render={({ field }) => (\n                                                                <label className=\"w-checkbox checkbox-fld\">\n                                                                    <input\n                                                                        type=\"checkbox\"\n                                                                        {...field}\n                                                                        id={generalOption.name}\n                                                                        checked={generalOption.value}\n                                                                        className=\"w-checkbox-input checkbox\"\n                                                                    />\n                                                                    <span\n                                                                        htmlFor={generalOption.name}\n                                                                        className=\"checkbox-label w-form-label\"\n                                                                    >\n                                                                        {generalOption.name}\n                                                                    </span>\n                                                                </label>\n                                                            )}\n                                                        />\n                                                    </div>\n                                                ))}\n                                        </div>\n                                    )}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"w-row\">\n                            <div className=\"w-col w-col-6\">\n                                <ButtonText\n                                    buttonText={'Opslaan'}\n                                    buttonClassName={'save-btn w-button'}\n                                    type={'submit'}\n                                    loading={isSubmitting}\n                                />\n                            </div>\n                            <div className=\"w-col w-col-6\" />\n                        </div>\n                    </Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MyAreasOfInterestForm;\n","import React from 'react';\nimport MyAreasOfInterestForm from './Form';\n\nconst MyAreasOfInterest = function() {\n    // TODO Fetch values from API\n    const initialValues = {\n        myAreasOfInterest: [\n            { id: 4, name: 'Gevel isolatie', value: true },\n            { id: 5, name: 'Zonnepanelen', value: false },\n            { id: 6, name: 'Dak isolatie', value: false },\n            { id: 7, name: 'Zonneboiler', value: true },\n        ],\n        participations: [{ id: 2, name: 'Test groep', value: true }, { id: 3, name: 'De leuke mensen', value: false }],\n        generalOptions: [{ id: 1, name: 'Test algemeen groep', value: false }],\n    };\n\n    return (\n        <div className=\"content-section\">\n            <div className=\"content-container w-container\">\n                <h1 className=\"content-heading\">Instellingen</h1>\n                <div className=\"w-form\" />\n                <MyAreasOfInterestForm initialValues={initialValues} />\n            </div>\n        </div>\n    );\n};\n\nexport default MyAreasOfInterest;\n","import axiosInstance from '../default-setup/AxiosInstance';\nimport moment from 'moment';\n\nexport default {\n    fetchProjects: function() {\n        const requestUrl = `/jory/project`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: ['id', 'name', 'dateStartRegistrations', 'dateEndRegistrations'],\n                    flt: {\n                        and: [\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\n                        ],\n                    },\n                    rlt: {\n                        administration: { fld: ['id', 'name'] },\n                    },\n                },\n            },\n        });\n    },\n\n    fetchProject: function(id) {\n        const requestUrl = `/jory/project/${id}`;\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: [\n                        'id',\n                        'name',\n                        'description',\n                        'dateStartRegistrations',\n                        'dateEndRegistrations',\n                        'dateEndRegistrations',\n                        'minParticipations',\n                        'maxParticipations',\n                        'totalParticipations',\n                        'participationWorth',\n                        'currentBookWorth',\n                        'amountOfLoanNeeded',\n                        'minAmountLoan',\n                        'maxAmountLoan',\n                        'isSceProject',\n                        'checkPostalcodeLink',\n                        'postalcodeLink',\n                        'linkAgreeTerms',\n                        'linkProjectInfo',\n                        'linkUnderstandInfo',\n                        'showQuestionAboutMembership',\n                        'useTransactionCostsWithMembership',\n                        'usesMollie',\n                        'textTransactionCosts',\n                        'transactionCostsCodeRef',\n                        'transactionCostsAmountMin',\n                        'transactionCostsAmountMax',\n                        'transactionCostsAmount',\n                        'transactionCostsPercentage',\n                        'transactionCostsAmount2',\n                        'transactionCostsPercentage2',\n                        'transactionCostsAmount3',\n                        'transactionCostsPercentage3',\n                    ],\n                    flt: {\n                        and: [\n                            { f: 'dateStartRegistrations', o: '<=', d: moment().format('YYYY-MM-DD') },\n                            { f: 'dateEndRegistrations', o: '>=', d: moment().format('YYYY-MM-DD') },\n                        ],\n                    },\n                    rlt: {\n                        projectType: { fld: ['id', 'codeRef'] },\n                        administration: { fld: ['id', 'name', 'portalSettingsLayoutAssigned'] },\n                        documentAgreeTerms: { fld: ['id', 'filename'] },\n                        documentUnderstandInfo: { fld: ['id', 'filename'] },\n                        documentProjectInfo: { fld: ['id', 'filename'] },\n                    },\n                },\n            },\n        });\n    },\n\n    documentDownload: function(projectId, id) {\n        const requestUrl = `/project/${projectId}/document/${id}/download`;\n\n        return axiosInstance.get(requestUrl, { responseType: 'blob' });\n    },\n};\n","export default amount => {\n    if (!amount) amount = 0;\n    // if (isNaN(amount)) {\n    //     amount = amount.replace(',', '.');\n    // }\n    amount = parseFloat(amount * 100) / 100;\n\n    if (isNaN(amount)) return 'Ongeldig bedrag';\n\n    return `€ ${amount.toLocaleString('nl', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n    })}`;\n};\n","export default function(project, amountOptioned, participationsOptioned) {\n    let transactionCosts = 0;\n    let varAmountOptioned = amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\n    let varParticipationsOptioned = participationsOptioned ? parseFloat(participationsOptioned).toFixed(0) : 0;\n    switch (project.transactionCostsCodeRef) {\n        case 'amount-once':\n            transactionCosts = project.transactionCostsAmount;\n            break;\n        case 'amount':\n            if (project.projectType.codeRef === 'loan') {\n                transactionCosts = project.transactionCostsAmount;\n            } else {\n                transactionCosts = project.transactionCostsAmount * varParticipationsOptioned;\n            }\n            break;\n        case 'percentage':\n            let amount = 0;\n            if (project.projectType.codeRef === 'loan') {\n                amount = varAmountOptioned;\n            } else {\n                amount = varParticipationsOptioned * project.currentBookWorth;\n            }\n            if (amount != 0) {\n                if (project.transactionCostsAmount3 !== null && amount >= project.transactionCostsAmount3) {\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage3) / 100).toFixed(2));\n                } else if (project.transactionCostsAmount2 !== null && amount >= project.transactionCostsAmount2) {\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage2) / 100).toFixed(2));\n                } else if (project.transactionCostsAmount !== null && amount >= project.transactionCostsAmount) {\n                    transactionCosts = parseFloat(((amount * project.transactionCostsPercentage) / 100).toFixed(2));\n                } else {\n                    transactionCosts = 0;\n                }\n            }\n            break;\n        default:\n            transactionCosts = 0;\n    }\n    if (project.transactionCostsCodeRef !== 'none') {\n        if (project.transactionCostsAmountMin !== null && transactionCosts < project.transactionCostsAmountMin) {\n            transactionCosts = project.transactionCostsAmountMin;\n        }\n        if (project.transactionCostsAmountMax !== null && transactionCosts > project.transactionCostsAmountMax) {\n            transactionCosts = project.transactionCostsAmountMax;\n        }\n    }\n\n    return transactionCosts;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst InputTextCurrency = ({\n    field,\n    type,\n    className,\n    id,\n    readOnly,\n    placeholder,\n    showErrorMessage,\n    errors,\n    touched,\n    classNameErrorMessage,\n    disabled,\n    customOnChange = null,\n}) => {\n    if (customOnChange) {\n        field.onChange = customOnChange;\n    }\n    return (\n        <>\n            {get(errors, field.name, '') && get(touched, field.name, '') && showErrorMessage ? (\n                <small className={`${classNameErrorMessage}`}>{get(errors, field.name, '')}</small>\n            ) : null}\n            <input\n                type={type}\n                className={`text-input w-input ${className} ${\n                    Boolean(get(errors, field.name, '') && get(touched, field.name, '')) ? 'has-error mb-0' : ''\n                } `}\n                id={id}\n                {...field}\n                value={field.value.toString().replace('.', ',')}\n                readOnly={readOnly}\n                placeholder={placeholder}\n                disabled={disabled}\n            />\n        </>\n    );\n};\n\nInputTextCurrency.defaultProps = {\n    type: 'text',\n    className: 'content',\n    readOnly: false,\n    placeholder: '',\n    showErrorMessage: true,\n    classNameErrorMessage: 'text-danger',\n    errors: {},\n    touched: {},\n};\n\nInputTextCurrency.propTypes = {\n    field: PropTypes.object.isRequired,\n    type: PropTypes.string,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    readOnly: PropTypes.bool,\n    showErrorMessage: PropTypes.bool,\n    classNameErrorMessage: PropTypes.string,\n    placeholder: PropTypes.string,\n    errors: PropTypes.object,\n    touched: PropTypes.object,\n};\n\nexport default InputTextCurrency;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Alert } from 'react-bootstrap';\nimport { get, isEmpty } from 'lodash';\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\nimport InputTextCurrency from '../../../components/form/InputTextCurrency';\n\nfunction StepOneLoan({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\n    const validationSchema = Yup.object({\n        amountOptioned: Yup.string()\n            .required('Verplicht')\n            .transform(function(value, originalvalue) {\n                return value ? value.replace(',', '.') : 0;\n            })\n            .test(\n                'amountOptioned',\n                'Minimum van ' + project.minAmountLoan + ' nodig',\n                value => value >= project.minAmountLoan\n            )\n            .test(\n                'amountOptioned',\n                'Maximum van ' + project.maxAmountLoan + ' bereikt',\n                value => value <= project.maxAmountLoan\n            )\n            .matches(/^\\s*(?=.*[1-9])\\d*(?:\\.\\d{1,2})?\\s*$/, 'Fout bedrag'),\n        choiceMembership: Yup.number().test(\n            'choiceMembership',\n            'Verplicht',\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\n        ),\n    });\n\n    function setAmountOptioned(amountOptioned) {\n        return amountOptioned ? amountOptioned.toString().replace(',', '.') : '';\n    }\n    function calculateAmount(amountOptioned) {\n        return amountOptioned ? parseFloat(amountOptioned.toString().replace(',', '.')) : 0;\n    }\n    function calculateTransactionCostsAmount(amountOptioned, choiceMembership) {\n        if (!project.useTransactionCostsWithMembership) {\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\n                return 0;\n            }\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\n                return 0;\n            }\n        }\n        return calculateTransactionCosts(project, amountOptioned, null);\n    }\n    function calculateTotalAmount(amountOptioned, choiceMembership) {\n        return (\n            calculateAmount(amountOptioned) + calculateTransactionCostsAmount(amountOptioned, choiceMembership)\n        ).toFixed(2);\n    }\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitRegisterValues({\n                    ...values,\n                    amountOptioned: setAmountOptioned(values.amountOptioned),\n                    amount: calculateAmount(values.amountOptioned),\n                    transactionCostsAmount: calculateTransactionCostsAmount(\n                        values.amountOptioned,\n                        values.choiceMembership\n                    ),\n                    totalAmount: calculateTotalAmount(values.amountOptioned, values.choiceMembership),\n                });\n                next();\n            }}\n            initialValues={initialRegisterValues}\n            enableReinitialize={true}\n        >\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\n                <>\n                    <Form>\n                        <Row>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Minimaal bedrag</FormLabel>\n                                <TextBlock>{project.minAmountLoan}</TextBlock>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Maximaal bedrag</FormLabel>\n                                <TextBlock>{project.maxAmountLoan}</TextBlock>\n                            </Col>\n\n                            <Col xs={12} md={6}>\n                                <Form.Label className={'field-label'}>In te leggen bedrag</Form.Label>\n                                <Field\n                                    name=\"amountOptioned\"\n                                    render={({ field }) => (\n                                        <InputTextCurrency\n                                            field={field}\n                                            errors={errors}\n                                            touched={touched}\n                                            id=\"amount_optioned\"\n                                        />\n                                    )}\n                                />\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\n                                </FormLabel>\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.amountOptioned))}</TextBlock>\n                            </Col>\n                        </Row>\n                        {project.showQuestionAboutMembership ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <p>\n                                            {contactProjectData.belongsToMembershipGroup\n                                                ? contactProjectData.textIsMemberMerged\n                                                : contactProjectData.textIsNoMemberMerged}\n                                        </p>\n                                    </Col>\n                                </Row>\n                                {!contactProjectData.belongsToMembershipGroup ? (\n                                    <Row>\n                                        <Col xs={12} md={10}>\n                                            <Field\n                                                name=\"choiceMembership\"\n                                                render={({ field }) => (\n                                                    <>\n                                                        {get(errors, field.name, '') &&\n                                                            get(touched, field.name, '') && (\n                                                                <small className=\"text-danger\">\n                                                                    {get(errors, field.name, '')}\n                                                                </small>\n                                                            )}\n                                                        <div className=\"form-check\">\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_yes\"\n                                                                    checked={field.value === 1}\n                                                                    value={1}\n                                                                    onChange={() =>\n                                                                        setFieldValue('choiceMembership', 1)\n                                                                    }\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\n                                                            </label>\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_no\"\n                                                                    checked={field.value === 2}\n                                                                    value={2}\n                                                                    onChange={() => {\n                                                                        setFieldValue('choiceMembership', 2);\n                                                                    }}\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\n                                                            </label>\n                                                        </div>\n                                                    </>\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </>\n                        ) : null}\n\n                        {project.transactionCostsCodeRef !== 'none' ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTransactionCostsAmount(\n                                                    values.amountOptioned,\n                                                    values.choiceMembership\n                                                )\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTotalAmount(values.amountOptioned, values.choiceMembership)\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                </Row>\n                            </>\n                        ) : null}\n\n                        <Row>\n                            <Col>\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\n                                        Ga naar gegevens\n                                    </Button>\n                                </ButtonGroup>\n                            </Col>\n                        </Row>\n                        {!isEmpty(errors) ? (\n                            <Row>\n                                <Col>\n                                    <div className=\"alert-wrapper\">\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\n                                            stap!\n                                        </Alert>\n                                    </div>\n                                </Col>\n                            </Row>\n                        ) : null}\n                    </Form>\n                </>\n            )}\n        </Formik>\n    );\n}\n\nexport default StepOneLoan;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from '../../../components/form/InputText';\nimport { Alert } from 'react-bootstrap';\nimport { get, isEmpty } from 'lodash';\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\n\nfunction StepOneObligation({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\n    const validationSchema = Yup.object({\n        participationsOptioned: Yup.number()\n            .integer('Alleen gehele aantallen')\n            .typeError('Alleen nummers')\n            .test(\n                'participationsOptioned',\n                'Minimum van ' + project.minParticipations + ' nodig',\n                value => value >= project.minParticipations\n            )\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\n            .positive('Getal moet groter zijn dan 0')\n            .required('Verplicht'),\n        choiceMembership: Yup.number().test(\n            'choiceMembership',\n            'Verplicht',\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\n        ),\n    });\n\n    function calculateAmount(participationsOptioned) {\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\n    }\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\n        if (!project.useTransactionCostsWithMembership) {\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\n                return 0;\n            }\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\n                return 0;\n            }\n        }\n        return calculateTransactionCosts(project, null, participationsOptioned);\n    }\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\n        return (\n            calculateAmount(participationsOptioned) +\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\n        ).toFixed(2);\n    }\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitRegisterValues({\n                    ...values,\n                    amount: calculateAmount(values.participationsOptioned),\n                    transactionCostsAmount: calculateTransactionCostsAmount(\n                        values.participationsOptioned,\n                        values.choiceMembership\n                    ),\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\n                });\n                next();\n            }}\n            initialValues={initialRegisterValues}\n            enableReinitialize={true}\n        >\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\n                <>\n                    <Form>\n                        <Row>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Minimale aantal obligaties</FormLabel>\n                                <TextBlock>{project.minParticipations}</TextBlock>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Maximale aantal obligaties</FormLabel>\n                                <TextBlock>{project.maxParticipations}</TextBlock>\n                            </Col>\n\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Huidige hoofdsom per obligatie</FormLabel>\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <Form.Label className={'field-label'}>Gewenst aantal obligaties</Form.Label>\n                                <Field\n                                    name=\"participationsOptioned\"\n                                    render={({ field }) => (\n                                        <InputText\n                                            field={field}\n                                            errors={errors}\n                                            touched={touched}\n                                            id=\"participations_optioned\"\n                                        />\n                                    )}\n                                />\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\n                                </FormLabel>\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\n                            </Col>\n                        </Row>\n                        {project.showQuestionAboutMembership ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <p>\n                                            {contactProjectData.belongsToMembershipGroup\n                                                ? contactProjectData.textIsMemberMerged\n                                                : contactProjectData.textIsNoMemberMerged}\n                                        </p>\n                                    </Col>\n                                </Row>\n                                {!contactProjectData.belongsToMembershipGroup ? (\n                                    <Row>\n                                        <Col xs={12} md={10}>\n                                            <Field\n                                                name=\"choiceMembership\"\n                                                render={({ field }) => (\n                                                    <>\n                                                        {get(errors, field.name, '') &&\n                                                            get(touched, field.name, '') && (\n                                                                <small className=\"text-danger\">\n                                                                    {get(errors, field.name, '')}\n                                                                </small>\n                                                            )}\n                                                        <div className=\"form-check\">\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_yes\"\n                                                                    checked={field.value === 1}\n                                                                    value={1}\n                                                                    onChange={() =>\n                                                                        setFieldValue('choiceMembership', 1)\n                                                                    }\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\n                                                            </label>\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_no\"\n                                                                    checked={field.value === 2}\n                                                                    value={2}\n                                                                    onChange={() => {\n                                                                        setFieldValue('choiceMembership', 2);\n                                                                    }}\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\n                                                            </label>\n                                                        </div>\n                                                    </>\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </>\n                        ) : null}\n\n                        {project.transactionCostsCodeRef !== 'none' ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTransactionCostsAmount(\n                                                    values.participationsOptioned,\n                                                    values.choiceMembership\n                                                )\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTotalAmount(\n                                                    values.participationsOptioned,\n                                                    values.choiceMembership\n                                                )\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                </Row>\n                            </>\n                        ) : null}\n\n                        <Row>\n                            <Col>\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\n                                        Ga naar gegevens\n                                    </Button>\n                                </ButtonGroup>\n                            </Col>\n                        </Row>\n                        {!isEmpty(errors) ? (\n                            <Row>\n                                <Col>\n                                    <div className=\"alert-wrapper\">\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\n                                            stap!\n                                        </Alert>\n                                    </div>\n                                </Col>\n                            </Row>\n                        ) : null}\n                    </Form>\n                </>\n            )}\n        </Formik>\n    );\n}\n\nexport default StepOneObligation;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from '../../../components/form/InputText';\nimport { Alert } from 'react-bootstrap';\nimport { get, isEmpty } from 'lodash';\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\n\nfunction StepOneCapital({ next, project, contactProjectData, initialRegisterValues, handleSubmitRegisterValues }) {\n    const validationSchema = Yup.object({\n        participationsOptioned: Yup.number()\n            .integer('Alleen gehele aantallen')\n            .typeError('Alleen nummers')\n            .test(\n                'participationsOptioned',\n                'Minimum van ' + project.minParticipations + ' nodig',\n                value => value >= project.minParticipations\n            )\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\n            .positive('Getal moet groter zijn dan 0')\n            .required('Verplicht'),\n        choiceMembership: Yup.number().test(\n            'choiceMembership',\n            'Verplicht',\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\n        ),\n    });\n\n    function calculateAmount(participationsOptioned) {\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\n    }\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\n        if (!project.useTransactionCostsWithMembership) {\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\n                return 0;\n            }\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\n                return 0;\n            }\n        }\n        return calculateTransactionCosts(project, null, participationsOptioned);\n    }\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\n        return (\n            calculateAmount(participationsOptioned) +\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\n        ).toFixed(2);\n    }\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitRegisterValues({\n                    ...values,\n                    amount: calculateAmount(values.participationsOptioned),\n                    transactionCostsAmount: calculateTransactionCostsAmount(\n                        values.participationsOptioned,\n                        values.choiceMembership\n                    ),\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\n                });\n                next();\n            }}\n            initialValues={initialRegisterValues}\n            enableReinitialize={true}\n        >\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => (\n                <>\n                    <Form>\n                        <Row>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\n                                <TextBlock>{project.minParticipations}</TextBlock>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\n                                <TextBlock>{project.maxParticipations}</TextBlock>\n                            </Col>\n\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\n                                <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <Form.Label className={'field-label'}>Gewenst aantal participaties</Form.Label>\n                                <Field\n                                    name=\"participationsOptioned\"\n                                    render={({ field }) => (\n                                        <InputText\n                                            field={field}\n                                            errors={errors}\n                                            touched={touched}\n                                            id=\"participations_optioned\"\n                                        />\n                                    )}\n                                />\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <FormLabel className={'field-label'}>\n                                    {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\n                                </FormLabel>\n                                <TextBlock>{MoneyPresenter(calculateAmount(values.participationsOptioned))}</TextBlock>\n                            </Col>\n                        </Row>\n                        {project.showQuestionAboutMembership ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <p>\n                                            {contactProjectData.belongsToMembershipGroup\n                                                ? contactProjectData.textIsMemberMerged\n                                                : contactProjectData.textIsNoMemberMerged}\n                                        </p>\n                                    </Col>\n                                </Row>\n                                {!contactProjectData.belongsToMembershipGroup ? (\n                                    <Row>\n                                        <Col xs={12} md={10}>\n                                            <Field\n                                                name=\"choiceMembership\"\n                                                render={({ field }) => (\n                                                    <>\n                                                        {get(errors, field.name, '') &&\n                                                            get(touched, field.name, '') && (\n                                                                <small className=\"text-danger\">\n                                                                    {get(errors, field.name, '')}\n                                                                </small>\n                                                            )}\n                                                        <div className=\"form-check\">\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_yes\"\n                                                                    checked={field.value === 1}\n                                                                    value={1}\n                                                                    onChange={() =>\n                                                                        setFieldValue('choiceMembership', 1)\n                                                                    }\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeMemberMerged}\n                                                            </label>\n                                                            <label className=\"radio-inline\">\n                                                                <input\n                                                                    type=\"radio\"\n                                                                    {...field}\n                                                                    id=\"choice_membership_no\"\n                                                                    checked={field.value === 2}\n                                                                    value={2}\n                                                                    onChange={() => {\n                                                                        setFieldValue('choiceMembership', 2);\n                                                                    }}\n                                                                />\n                                                                &nbsp;{contactProjectData.textBecomeNoMemberMerged}\n                                                            </label>\n                                                        </div>\n                                                    </>\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </>\n                        ) : null}\n\n                        {project.transactionCostsCodeRef !== 'none' ? (\n                            <>\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>{project.textTransactionCosts}</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTransactionCostsAmount(\n                                                    values.participationsOptioned,\n                                                    values.choiceMembership\n                                                )\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                    <Col xs={12} md={6}>\n                                        <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\n                                        <TextBlock>\n                                            {MoneyPresenter(\n                                                calculateTotalAmount(\n                                                    values.participationsOptioned,\n                                                    values.choiceMembership\n                                                )\n                                            )}\n                                        </TextBlock>\n                                    </Col>\n                                </Row>\n                            </>\n                        ) : null}\n\n                        <Row>\n                            <Col>\n                                <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                    <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\n                                        Ga naar gegevens\n                                    </Button>\n                                </ButtonGroup>\n                            </Col>\n                        </Row>\n                        {!isEmpty(errors) ? (\n                            <Row>\n                                <Col>\n                                    <div className=\"alert-wrapper\">\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                            Niet alle verplichte velden zijn ingevuld om verder te gaan naar de volgende\n                                            stap!\n                                        </Alert>\n                                    </div>\n                                </Col>\n                            </Row>\n                        ) : null}\n                    </Form>\n                </>\n            )}\n        </Formik>\n    );\n}\n\nexport default StepOneCapital;\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\nimport TextBlock from '../../../components/general/TextBlock';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from '../../../components/form/InputText';\nimport { Alert } from 'react-bootstrap';\nimport { get, isEmpty } from 'lodash';\nimport calculateTransactionCosts from '../../../helpers/CalculateTransactionCosts';\n\nfunction StepOnePcr({\n    portalSettings,\n    next,\n    project,\n    contactProjectData,\n    initialContact,\n    initialRegisterValues,\n    handleSubmitRegisterValues,\n}) {\n    const validationSchema = Yup.object({\n        participationsOptioned: Yup.number()\n            .integer('Alleen gehele aantallen')\n            .typeError('Alleen nummers')\n            .test(\n                'participationsOptioned',\n                'Minimum van ' + project.minParticipations + ' nodig',\n                value => value >= project.minParticipations\n            )\n            .max(project.maxParticipations, 'Maximum van ${max} bereikt')\n            .positive('Getal moet groter zijn dan 0')\n            .required('Verplicht'),\n        pcrYearlyPowerKwhConsumption: Yup.number()\n            .typeError('Alleen nummers')\n            .positive('Getal moet groter zijn dan 0')\n            .required('Verplicht'),\n        pcrPostalCode: Yup.string()\n            .min(4, 'Minimum van ${min} postcode cijfers nodig')\n            .required('Verplicht')\n            .test(\n                'pcrPostalCode',\n                'Helaas je postcode ligt niet binnen het gebied van potentiele deelnemers',\n                value =>\n                    value &&\n                    (!project.checkPostalcodeLink ||\n                        (project.postalcodeLink && project.postalcodeLink.includes(value.substring(0, 4))))\n            ),\n        pcrNumberOfSolarPanels: Yup.number().typeError('Alleen nummers'),\n        pcrInputGeneratedNumberOfKwh: Yup.number().typeError('Alleen nummers'),\n        choiceMembership: Yup.number().test(\n            'choiceMembership',\n            'Verplicht',\n            value => !project.showQuestionAboutMembership || contactProjectData.belongsToMembershipGroup || value != 0\n        ),\n    });\n\n    // const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = 0.8;\n    const PCR_POWER_KWH_CONSUMPTION_PERCENTAGE = portalSettings['pcrPowerKwhConsumptionPercentage'];\n    // const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = 250;\n    const PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL = portalSettings['pcrGeneratingCapacityOneSolorPanel'];\n\n    function calculateEstimatedGeneratedNumberOfKwh(values) {\n        return values.pcrNumberOfSolarPanels\n            ? values.pcrNumberOfSolarPanels * PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\n            : 0;\n    }\n    function calculateGeneratedNumberOfKwh(values) {\n        return values.pcrInputGeneratedNumberOfKwh && values.pcrInputGeneratedNumberOfKwh > 0\n            ? values.pcrInputGeneratedNumberOfKwh\n            : calculateEstimatedGeneratedNumberOfKwh(values)\n            ? calculateEstimatedGeneratedNumberOfKwh(values)\n            : 0;\n    }\n    function calculatePowerKwhConsumption(values) {\n        let extraPowerKwhConsumption =\n            values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values) > 0\n                ? values.pcrYearlyPowerKwhConsumption - calculateGeneratedNumberOfKwh(values)\n                : 0;\n        return extraPowerKwhConsumption;\n    }\n    function calculateAdviseMaxNumberOfParticipations(values) {\n        let pcrAdviseMaxNumberOfParticipations =\n            calculatePowerKwhConsumption(values) > 0\n                ? Math.ceil(\n                      (calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE) /\n                          PCR_GENERATING_CAPACITY_ONE_SOLAR_PANEL\n                  )\n                : 0;\n\n        if (pcrAdviseMaxNumberOfParticipations < project.minParticipations) {\n            pcrAdviseMaxNumberOfParticipations = project.minParticipations;\n        } else if (pcrAdviseMaxNumberOfParticipations > project.maxParticipations) {\n            pcrAdviseMaxNumberOfParticipations = project.maxParticipations;\n        }\n        return pcrAdviseMaxNumberOfParticipations;\n    }\n\n    function calculateAmount(participationsOptioned) {\n        return participationsOptioned ? participationsOptioned * project.currentBookWorth : 0;\n    }\n    function calculateTransactionCostsAmount(participationsOptioned, choiceMembership) {\n        if (!project.useTransactionCostsWithMembership) {\n            if (project.showQuestionAboutMembership && contactProjectData.belongsToMembershipGroup) {\n                return 0;\n            }\n            if (project.showQuestionAboutMembership && choiceMembership === 1) {\n                return 0;\n            }\n        }\n        return calculateTransactionCosts(project, null, participationsOptioned);\n    }\n    function calculateTotalAmount(participationsOptioned, choiceMembership) {\n        return (\n            calculateAmount(participationsOptioned) +\n            calculateTransactionCostsAmount(participationsOptioned, choiceMembership)\n        ).toFixed(2);\n    }\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitRegisterValues({\n                    ...values,\n                    powerKwhConsumption: calculatePowerKwhConsumption(values),\n                    amount: calculateAmount(values.participationsOptioned),\n                    transactionCostsAmount: calculateTransactionCostsAmount(\n                        values.participationsOptioned,\n                        values.choiceMembership\n                    ),\n                    totalAmount: calculateTotalAmount(values.participationsOptioned, values.choiceMembership),\n                });\n                next();\n            }}\n            initialValues={{\n                ...initialRegisterValues,\n            }}\n            enableReinitialize={true}\n        >\n            {({ handleSubmit, values, touched, errors, setFieldValue }) => {\n                let pcrEstimatedGeneratedNumberOfKwh = calculateEstimatedGeneratedNumberOfKwh(values);\n                let powerKwhConsumption = Math.ceil(\n                    calculatePowerKwhConsumption(values) * PCR_POWER_KWH_CONSUMPTION_PERCENTAGE\n                );\n                let pcrAdviseMaxNumberOfParticipations = calculateAdviseMaxNumberOfParticipations(values);\n                return (\n                    <>\n                        <Form>\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <FormLabel className={'field-label'}>Minimale aantal participaties</FormLabel>\n                                    <TextBlock>{project.minParticipations}</TextBlock>\n                                </Col>\n                                <Col xs={12} md={6}>\n                                    <FormLabel className={'field-label'}>Maximale aantal participaties</FormLabel>\n                                    <TextBlock>{project.maxParticipations}</TextBlock>\n                                </Col>\n\n                                <Col xs={12} md={6}>\n                                    <FormLabel className={'field-label'}>Huidige boekwaarde per participatie</FormLabel>\n                                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label required'}>Je postcode</Form.Label>\n                                    <Field\n                                        name=\"pcrPostalCode\"\n                                        render={({ field }) => (\n                                            <InputText\n                                                field={field}\n                                                errors={errors}\n                                                touched={touched}\n                                                id=\"pcr_postal_code\"\n                                            />\n                                        )}\n                                    />\n                                </Col>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label'}>Deelnemende postcodes</Form.Label>\n                                    <TextBlock>{project.postalcodeLink}</TextBlock>\n                                </Col>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label required'}>\n                                        Je (geschatte) jaarlijks verbruik (in kWh)\n                                    </Form.Label>\n                                    <Field\n                                        name=\"pcrYearlyPowerKwhConsumption\"\n                                        render={({ field }) => (\n                                            <InputText\n                                                field={field}\n                                                errors={errors}\n                                                touched={touched}\n                                                id=\"pcr_yearly_power_kwh_consumption\"\n                                            />\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Form.Label className={'field-label'}>\n                                        Heb je al zonnepanelen op je eigen dak of doe je mee in een ander project?\n                                    </Form.Label>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Field\n                                        name=\"pcrHasSolarPanels\"\n                                        render={({ field }) => (\n                                            <>\n                                                <div className=\"form-check form-check-inline\">\n                                                    <label className=\"radio-inline\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            {...field}\n                                                            id=\"pcr_has_solar_panels_yes\"\n                                                            checked={field.value === 'Y'}\n                                                            value={'Y'}\n                                                            onChange={() => setFieldValue('pcrHasSolarPanels', 'Y')}\n                                                        />\n                                                        &nbsp;Ja\n                                                    </label>\n                                                    &nbsp;&nbsp;\n                                                    <label className=\"radio-inline\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            {...field}\n                                                            id=\"pcr_has_solar_panels_no\"\n                                                            checked={field.value === 'N'}\n                                                            value={'N'}\n                                                            onChange={() => {\n                                                                setFieldValue('pcrHasSolarPanels', 'N');\n                                                                setFieldValue('pcrNumberOfSolarPanels', 0);\n                                                            }}\n                                                        />\n                                                        &nbsp;Nee\n                                                    </label>\n                                                </div>\n                                            </>\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n\n                            {values.pcrHasSolarPanels === 'Y' ? (\n                                <Row>\n                                    <Col xs={12} md={6}>\n                                        <Form.Label className={'field-label'}>\n                                            Hoeveel zonnepanelen wekken al stroom voor je op\n                                        </Form.Label>\n                                        <Field\n                                            name=\"pcrNumberOfSolarPanels\"\n                                            render={({ field }) => (\n                                                <InputText\n                                                    field={field}\n                                                    errors={errors}\n                                                    touched={touched}\n                                                    id=\"pcr_number_of_solar_panels\"\n                                                />\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n                            ) : (\n                                ''\n                            )}\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label'}>\n                                        Wij schatten in dat je panelen jaarlijks opwekken\n                                    </Form.Label>\n                                    <TextBlock id=\"pcr_input_estimated_generated_number_of_kwh\">\n                                        {pcrEstimatedGeneratedNumberOfKwh} kWh\n                                    </TextBlock>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Form.Label className={'field-label'}>Klopt het geschatte opbrengst?</Form.Label>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Field\n                                        name=\"pcrEstimatedRevenueOk\"\n                                        render={({ field }) => (\n                                            <>\n                                                <div className=\"form-check form-check-inline\">\n                                                    <label className=\"radio-inline\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            {...field}\n                                                            id=\"pcr_estimated_revenue_ok_yes\"\n                                                            checked={field.value === 'Y'}\n                                                            value={'Y'}\n                                                            onChange={() => {\n                                                                setFieldValue('pcrEstimatedRevenueOk', 'Y');\n                                                                setFieldValue('pcrInputGeneratedNumberOfKwh', 0);\n                                                            }}\n                                                        />\n                                                        &nbsp;Ja\n                                                    </label>\n                                                    &nbsp;&nbsp;\n                                                    <label className=\"radio-inline\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            {...field}\n                                                            id=\"pcr_estimated_revenue_ok_no\"\n                                                            checked={field.value === 'N'}\n                                                            value={'N'}\n                                                            onChange={() => setFieldValue('pcrEstimatedRevenueOk', 'N')}\n                                                        />\n                                                        &nbsp;Nee\n                                                    </label>\n                                                </div>\n                                            </>\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n\n                            {values.pcrEstimatedRevenueOk === 'N' ? (\n                                <>\n                                    <Row>\n                                        <Col xs={12} md={6}>\n                                            <Form.Label className={'field-label'}>\n                                                Wat is de jaarlijkse opbrengst van jouw panelen (in kWh)\n                                            </Form.Label>\n                                            <Field\n                                                name=\"pcrInputGeneratedNumberOfKwh\"\n                                                render={({ field }) => (\n                                                    <InputText\n                                                        field={field}\n                                                        errors={errors}\n                                                        touched={touched}\n                                                        id=\"pcr_input_generated_number_of_kwh\"\n                                                    />\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </>\n                            ) : (\n                                ''\n                            )}\n\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <p>\n                                        We adviseren tot {PCR_POWER_KWH_CONSUMPTION_PERCENTAGE * 100}% van je jaarlijks\n                                        verbruik minus de jaarlijkse opbrengsten (in jouw geval {powerKwhConsumption}{' '}\n                                        kWh) te dekken met participaties. In het veld hier direct onder is voor je\n                                        uitgerekend hoeveel participaties dat zijn. Het is een advies, je mag er ook\n                                        meer kopen. Dit kan echter slecht zijn voor je rendement.\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label'}>\n                                        Advies maximaal aantal participaties\n                                    </Form.Label>\n                                    <TextBlock>{pcrAdviseMaxNumberOfParticipations}</TextBlock>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <Form.Label className={'field-label required'}>\n                                        Gewenst aantal participaties\n                                    </Form.Label>\n                                    <Field\n                                        name=\"participationsOptioned\"\n                                        render={({ field }) => (\n                                            <InputText\n                                                field={field}\n                                                errors={errors}\n                                                touched={touched}\n                                                id=\"participations_optioned\"\n                                            />\n                                        )}\n                                    />\n                                </Col>\n                                <Col xs={12} md={6}>\n                                    <FormLabel className={'field-label'}>\n                                        {project.transactionCostsCodeRef === 'none' ? 'Te betalen bedrag' : 'Bedrag'}\n                                    </FormLabel>\n                                    <TextBlock>\n                                        {MoneyPresenter(calculateAmount(values.participationsOptioned))}\n                                    </TextBlock>\n                                </Col>\n                            </Row>\n                            {project.showQuestionAboutMembership ? (\n                                <>\n                                    <hr />\n                                    <Row>\n                                        <Col xs={12} md={10}>\n                                            <p>\n                                                {contactProjectData.belongsToMembershipGroup\n                                                    ? contactProjectData.textIsMemberMerged\n                                                    : contactProjectData.textIsNoMemberMerged}\n                                            </p>\n                                        </Col>\n                                    </Row>\n                                    {!contactProjectData.belongsToMembershipGroup ? (\n                                        <Row>\n                                            <Col xs={12} md={10}>\n                                                <Field\n                                                    name=\"choiceMembership\"\n                                                    render={({ field }) => (\n                                                        <>\n                                                            {get(errors, field.name, '') &&\n                                                                get(touched, field.name, '') && (\n                                                                    <small className=\"text-danger\">\n                                                                        {get(errors, field.name, '')}\n                                                                    </small>\n                                                                )}\n                                                            <div className=\"form-check\">\n                                                                <label className=\"radio-inline\">\n                                                                    <input\n                                                                        type=\"radio\"\n                                                                        {...field}\n                                                                        id=\"choice_membership_yes\"\n                                                                        checked={field.value === 1}\n                                                                        value={1}\n                                                                        onChange={() =>\n                                                                            setFieldValue('choiceMembership', 1)\n                                                                        }\n                                                                    />\n                                                                    &nbsp;{contactProjectData.textBecomeMemberMerged}\n                                                                </label>\n                                                                <label className=\"radio-inline\">\n                                                                    <input\n                                                                        type=\"radio\"\n                                                                        {...field}\n                                                                        id=\"choice_membership_no\"\n                                                                        checked={field.value === 2}\n                                                                        value={2}\n                                                                        onChange={() => {\n                                                                            setFieldValue('choiceMembership', 2);\n                                                                        }}\n                                                                    />\n                                                                    &nbsp;{contactProjectData.textBecomeNoMemberMerged}\n                                                                </label>\n                                                            </div>\n                                                        </>\n                                                    )}\n                                                />\n                                            </Col>\n                                        </Row>\n                                    ) : null}\n                                </>\n                            ) : null}\n\n                            {project.transactionCostsCodeRef !== 'none' ? (\n                                <>\n                                    <hr />\n                                    <Row>\n                                        <Col xs={12} md={6}>\n                                            <FormLabel className={'field-label'}>\n                                                {project.textTransactionCosts}\n                                            </FormLabel>\n                                            <TextBlock>\n                                                {MoneyPresenter(\n                                                    calculateTransactionCostsAmount(\n                                                        values.participationsOptioned,\n                                                        values.choiceMembership\n                                                    )\n                                                )}\n                                            </TextBlock>\n                                        </Col>\n                                        <Col xs={12} md={6}>\n                                            <FormLabel className={'field-label'}>Totaal te betalen</FormLabel>\n                                            <TextBlock>\n                                                {MoneyPresenter(\n                                                    calculateTotalAmount(\n                                                        values.participationsOptioned,\n                                                        values.choiceMembership\n                                                    )\n                                                )}\n                                            </TextBlock>\n                                        </Col>\n                                    </Row>\n                                </>\n                            ) : null}\n\n                            <Row>\n                                <Col>\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\n                                            Ga naar gegevens\n                                        </Button>\n                                    </ButtonGroup>\n                                </Col>\n                            </Row>\n                            {!isEmpty(errors) ? (\n                                <Row>\n                                    <Col>\n                                        <div className=\"alert-wrapper\">\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\n                                                volgende stap!\n                                            </Alert>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                        </Form>\n                    </>\n                );\n            }}\n        </Formik>\n    );\n}\n\nexport default StepOnePcr;\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DefaultContactPersonalEdit from '../../contact-details/default-form-personal/Edit';\r\nimport { Form, Formik } from 'formik';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport ValidationSchemaPersonal from '../../../helpers/ValidationSchemaPersonal';\r\nimport ValidationSchemaOrganisation from '../../../helpers/ValidationSchemaOrganisation';\r\nimport DefaultContactOrganisationEdit from '../../contact-details/default-form-organisation/Edit';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { isEmpty } from 'lodash';\r\n\r\nfunction StepTwo({ portalSettings, previous, next, project, initialContact, handleSubmitContactValues }) {\r\n    initialContact.isParticipant = true;\r\n    const typeContact = initialContact.typeId ? initialContact.typeId : null;\r\n\r\n    let validationSchema = null;\r\n    let validationSchemaBasic = null;\r\n    let validationSchemaAdditional = null;\r\n    let validationSchemaPcrAdditional = null;\r\n    switch (typeContact) {\r\n        case 'person':\r\n            validationSchemaBasic = ValidationSchemaPersonal.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaPersonal.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaPersonal.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n            }\r\n            break;\r\n        case 'organisation':\r\n            validationSchemaBasic = ValidationSchemaOrganisation.validationSchemaBasic;\r\n            validationSchemaAdditional = ValidationSchemaOrganisation.validationSchemaAdditional;\r\n            validationSchemaPcrAdditional = ValidationSchemaOrganisation.validationSchemaPcrAdditional;\r\n            validationSchema = validationSchemaBasic.concat(validationSchemaAdditional);\r\n            if (project.projectType.codeRef === 'postalcode_link_capital') {\r\n                validationSchema = validationSchema.concat(validationSchemaPcrAdditional);\r\n            }\r\n            break;\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialContact}\r\n                enableReinitialize={true}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                    actions.setSubmitting(true);\r\n                    handleSubmitContactValues(values, actions, next);\r\n                }}\r\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\r\n                    return (\r\n                        <Form>\r\n                            {/* If contact is person */}\r\n                            {initialContact.typeId === 'person' ? (\r\n                                <DefaultContactPersonalEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            {/* If contact is organisation */}\r\n                            {initialContact.typeId === 'organisation' ? (\r\n                                <DefaultContactOrganisationEdit\r\n                                    portalSettings={portalSettings}\r\n                                    initialContact={initialContact}\r\n                                    projectTypeCodeRef={project.projectType.codeRef}\r\n                                    setFieldValue={setFieldValue}\r\n                                    values={values}\r\n                                    touched={touched}\r\n                                    errors={errors}\r\n                                />\r\n                            ) : null}\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\r\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\r\n                                            Terug\r\n                                        </Button>\r\n                                        <Button\r\n                                            className={'w-button'}\r\n                                            size=\"sm\"\r\n                                            onClick={handleSubmit}\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            {isSubmitting ? (\r\n                                                <span>\r\n                                                    <ClipLoader color={'white'} size={14} />\r\n                                                    Bezig met opslaan\r\n                                                </span>\r\n                                            ) : (\r\n                                                'Opslaan en doorgaan'\r\n                                            )}\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            {!isEmpty(errors) ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\r\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\r\n                                                volgende stap!\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                            {status && status.message ? (\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"alert-wrapper\">\r\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\r\n                                                {status.message}\r\n                                            </Alert>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null}\r\n                        </Form>\r\n                    );\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepTwo;\r\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Col from 'react-bootstrap/Col';\nimport { Alert } from 'react-bootstrap';\nimport { isEmpty } from 'lodash';\nimport ProjectAPI from '../../../api/project/ProjectAPI';\nimport fileDownload from 'js-file-download';\nimport { FaFileDownload } from 'react-icons/all';\n\nfunction StepThree({ project, contactProjectData, previous, next, initialRegisterValues, handleSubmitRegisterValues }) {\n    const validationSchema = Yup.object({\n        didAcceptAgreement: Yup.bool().test(\n            'didAcceptAgreement',\n            'Je dient akkoord te gaan met de voorwaarden!',\n            value => value === true\n        ),\n        didUnderstandInfo: Yup.bool().test(\n            'didUnderstandInfo',\n            'Je dient te bevestigen, dat de project informatie gelezen en begrepen is!',\n            value => value === true\n        ),\n    });\n\n    function downloadFile(e, id, filename) {\n        e.preventDefault();\n\n        ProjectAPI.documentDownload(project.id, id)\n            .then(payload => {\n                fileDownload(payload.data, filename);\n            })\n            .catch(() => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n            });\n    }\n\n    return (\n        <div>\n            <Formik\n                validationSchema={validationSchema}\n                onSubmit={function(values, actions) {\n                    handleSubmitRegisterValues(values);\n                    next();\n                }}\n                initialValues={initialRegisterValues}\n            >\n                {({ handleSubmit, touched, errors }) => (\n                    <>\n                        <Form>\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <p>\n                                        <span\n                                            dangerouslySetInnerHTML={{\n                                                __html: contactProjectData.textAgreeTermsMerged.replace(\n                                                    /\\n/g,\n                                                    '<br />'\n                                                ),\n                                            }}\n                                        />\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Field\n                                        name=\"didAcceptAgreement\"\n                                        render={({ field }) => (\n                                            <label className=\"w-checkbox checkbox-fld\">\n                                                <input\n                                                    type=\"checkbox\"\n                                                    {...field}\n                                                    id=\"did_accept_agreement\"\n                                                    checked={field.value}\n                                                    className=\"w-checkbox-input checkbox\"\n                                                />\n                                                <span\n                                                    htmlFor=\"did_accept_agreement\"\n                                                    className=\"checkbox-label w-form-label\"\n                                                    dangerouslySetInnerHTML={{\n                                                        __html: contactProjectData.textLinkAgreeTermsMerged.replace(\n                                                            /\\n/g,\n                                                            '<br />'\n                                                        ),\n                                                    }}\n                                                />\n                                                {project.documentAgreeTerms ? (\n                                                    <>\n                                                        {' '}\n                                                        <a\n                                                            href=\"#\"\n                                                            onClick={e =>\n                                                                downloadFile(\n                                                                    e,\n                                                                    project.documentAgreeTerms.id,\n                                                                    project.documentAgreeTerms.filename\n                                                                )\n                                                            }\n                                                        >\n                                                            <FaFileDownload /> downloaden\n                                                        </a>\n                                                    </>\n                                                ) : null}\n                                                {touched[field.name] && errors[field.name] ? (\n                                                    <div className={'error-message text-danger'}>\n                                                        {errors[field.name]}\n                                                    </div>\n                                                ) : null}\n                                            </label>\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <Field\n                                        name=\"didUnderstandInfo\"\n                                        render={({ field }) => (\n                                            <label className=\"w-checkbox checkbox-fld\">\n                                                <input\n                                                    type=\"checkbox\"\n                                                    {...field}\n                                                    id=\"did_understand_info\"\n                                                    checked={field.value}\n                                                    className=\"w-checkbox-input checkbox\"\n                                                />\n                                                <span\n                                                    htmlFor=\"did_understand_info\"\n                                                    className=\"checkbox-label w-form-label\"\n                                                    dangerouslySetInnerHTML={{\n                                                        __html: contactProjectData.textLinkUnderstandInfoMerged.replace(\n                                                            /\\n/g,\n                                                            '<br />'\n                                                        ),\n                                                    }}\n                                                />\n                                                {project.documentUnderstandInfo ? (\n                                                    <>\n                                                        {' '}\n                                                        <a\n                                                            href=\"#\"\n                                                            onClick={e =>\n                                                                downloadFile(\n                                                                    e,\n                                                                    project.documentUnderstandInfo.id,\n                                                                    project.documentUnderstandInfo.filename\n                                                                )\n                                                            }\n                                                        >\n                                                            <FaFileDownload /> downloaden\n                                                        </a>\n                                                    </>\n                                                ) : null}{' '}\n                                                {touched[field.name] && errors[field.name] ? (\n                                                    <div className={'error-message text-danger'}>\n                                                        {errors[field.name]}\n                                                    </div>\n                                                ) : null}\n                                            </label>\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                        <Button className={'w-button'} size=\"sm\" onClick={previous}>\n                                            Terug\n                                        </Button>\n                                        <Button className={'w-button'} size=\"sm\" onClick={handleSubmit}>\n                                            {project.usesMollie ? (\n                                                <>Ga naar bevestigen en betalen</>\n                                            ) : (\n                                                <>Ga naar bevestigen</>\n                                            )}\n                                        </Button>\n                                    </ButtonGroup>\n                                </Col>\n                            </Row>\n                            {!isEmpty(errors) ? (\n                                <Row>\n                                    <Col>\n                                        <div className=\"alert-wrapper\">\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\n                                                volgende stap!\n                                            </Alert>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                        </Form>\n                    </>\n                )}\n            </Formik>\n        </div>\n    );\n}\n\nexport default StepThree;\n","import React from 'react';\nimport Frame from 'react-frame-component';\nimport PropTypes from 'prop-types';\n\nconst ViewHtmlAsText = ({ id, value }) => {\n    const createMarkup = () => {\n        return { __html: value };\n    };\n\n    return (\n        <Frame>\n            <div id={id} dangerouslySetInnerHTML={createMarkup()} />\n        </Frame>\n    );\n};\n\nViewHtmlAsText.defaultProps = {\n    value: '',\n};\n\nViewHtmlAsText.propTypes = {\n    id: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport default ViewHtmlAsText;\n","import axiosInstance from '../default-setup/AxiosInstance';\n\nexport default {\n    createParticipantProject: registerValues => {\n        const requestUrl = `/project/participant/create`;\n\n        return axiosInstance.post(requestUrl, registerValues);\n    },\n\n    show: id => {\n        const requestUrl = `/project/participant/${id}`;\n\n        return axiosInstance.get(requestUrl);\n    },\n\n    participantDocumentDownload: function(participantId, id) {\n        const requestUrl = `/project/participant/${participantId}/document/${id}/download`;\n\n        return axiosInstance.get(requestUrl, { responseType: 'blob' });\n    },\n};\n","import React, { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ContactAPI from '../../../api/contact/ContactAPI';\nimport ViewHtmlAsText from '../../../components/general/ViewHtmlAsText';\nimport Col from 'react-bootstrap/Col';\nimport LoadingView from '../../../components/general/LoadingView';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\nimport { ClipLoader } from 'react-spinners';\nimport { Alert } from 'react-bootstrap';\nimport { isEmpty } from 'lodash';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport TextBlock from '../../../components/general/TextBlock';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\n\nfunction StepFour({ project, contactProjectData, previous, next, registerValues, setSucces }) {\n    const [contactDocument, setContactDocument] = useState('');\n    const [isLoading, setLoading] = useState(true);\n    useEffect(() => {\n        (function callFetchContact() {\n            setLoading(true);\n            ContactAPI.previewDocument(registerValues)\n                .then(payload => {\n                    setContactDocument(payload.data);\n                    setLoading(false);\n                })\n                .catch(error => {\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                    setLoading(false);\n                });\n        })();\n    }, [registerValues]);\n\n    function handleSubmitRegisterValues(actions, next) {\n        ParticipantProjectAPI.createParticipantProject(registerValues)\n            .then(payload => {\n                actions.setSubmitting(false);\n\n                /**\n                 * Als Mollie is ingeschakeld voor het project wordt er een betaallink gereturned.\n                 * In dat geval huidige scherm verlaten en door naar mollie.\n                 */\n                if (payload.data.econobisPaymentLink) {\n                    window.location.href = payload.data.econobisPaymentLink;\n                    return;\n                }\n\n                setSucces(true);\n                next();\n            })\n            .catch(error => {\n                alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\n                actions.setSubmitting(false);\n            });\n    }\n\n    const validationSchema = Yup.object({\n        didAgreeRegistration: Yup.bool().test(\n            'didAgreeRegistration',\n            'Je dient akkoord te gaan met het inschrijfformulier!',\n            value => value === true\n        ),\n    });\n\n    let contactDocumentOk = false;\n    if (!isEmpty('' + contactDocument)) {\n        contactDocumentOk = true;\n    }\n\n    return (\n        <>\n            {isLoading ? (\n                <LoadingView />\n            ) : !contactDocumentOk ? (\n                <>\n                    <Row>\n                        <Col>Er ging iets mis bij het maken van het bevestingsformulier voorbeeld.</Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={10}>\n                            <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                <Button className={'w-button'} size=\"sm\" onClick={previous}>\n                                    Terug\n                                </Button>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            ) : (\n                <Formik\n                    validationSchema={validationSchema}\n                    onSubmit={function(values, actions) {\n                        handleSubmitRegisterValues(actions, next);\n                    }}\n                    initialValues={{ didAgreeRegistration: false }}\n                >\n                    {({ handleSubmit, touched, errors, isSubmitting, status }) => (\n                        <>\n                            <Form>\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <FormLabel className={'field-label'}>Controleer de inschrijving</FormLabel>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <ViewHtmlAsText value={contactDocument} />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} md={3}>\n                                        <FormLabel className={'field-label-text'}>\n                                            {project.transactionCostsCodeRef === 'none'\n                                                ? 'Te betalen bedrag'\n                                                : 'Bedrag'}\n                                        </FormLabel>\n                                    </Col>\n                                    <Col xs={12} md={3}>\n                                        <TextBlock className={'float-right'}>\n                                            {MoneyPresenter(registerValues.amount)}\n                                        </TextBlock>\n                                    </Col>\n                                </Row>\n                                {project.transactionCostsCodeRef !== 'none' ? (\n                                    <>\n                                        <Row>\n                                            <Col xs={12} md={3}>\n                                                <FormLabel className={'field-label-text'}>\n                                                    {project.textTransactionCosts}\n                                                </FormLabel>\n                                            </Col>\n                                            <Col xs={12} md={3}>\n                                                <TextBlock className={'float-right'}>\n                                                    {MoneyPresenter(registerValues.transactionCostsAmount)}\n                                                </TextBlock>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col xs={12} md={3}>\n                                                <FormLabel className={'field-label-text'}>Totaal te betalen</FormLabel>\n                                            </Col>\n                                            <Col xs={12} md={3}>\n                                                <TextBlock className={'float-right'}>\n                                                    {MoneyPresenter(registerValues.totalAmount)}\n                                                </TextBlock>\n                                            </Col>\n                                        </Row>\n                                    </>\n                                ) : null}\n                                <hr />\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <p\n                                            dangerouslySetInnerHTML={{\n                                                __html: contactProjectData.textAcceptAgreementMerged.replace(\n                                                    /\\n/g,\n                                                    '<br />'\n                                                ),\n                                            }}\n                                        />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <Field\n                                            name=\"didAgreeRegistration\"\n                                            render={({ field }) => (\n                                                <label className=\"w-checkbox checkbox-fld\">\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        {...field}\n                                                        id=\"did_agree_registration\"\n                                                        checked={field.value}\n                                                        className=\"w-checkbox-input checkbox\"\n                                                    />\n                                                    <span\n                                                        htmlFor=\"did_agree_registration\"\n                                                        className=\"checkbox-label w-form-label\"\n                                                    >\n                                                        {contactProjectData.textAcceptAgreementQuestionMerged}\n                                                    </span>\n                                                    {touched[field.name] && errors[field.name] ? (\n                                                        <div className={'error-message text-danger'}>\n                                                            {errors[field.name]}\n                                                        </div>\n                                                    ) : null}\n                                                </label>\n                                            )}\n                                        />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} md={10}>\n                                        <ButtonGroup aria-label=\"Steps\" className=\"float-right\">\n                                            <Button className={'w-button'} size=\"sm\" onClick={previous}>\n                                                Terug\n                                            </Button>\n                                            <Button\n                                                className={'w-button'}\n                                                size=\"sm\"\n                                                onClick={handleSubmit}\n                                                disabled={isSubmitting}\n                                            >\n                                                {isSubmitting ? (\n                                                    <span>\n                                                        <ClipLoader color={'white'} size={14} />\n                                                        Bezig met verwerken\n                                                    </span>\n                                                ) : (\n                                                    <>\n                                                        {project.usesMollie ? (\n                                                            <>Betaal en bevestig de inschrijving</>\n                                                        ) : (\n                                                            <>Bevestig inschrijving</>\n                                                        )}\n                                                    </>\n                                                )}\n                                            </Button>\n                                        </ButtonGroup>\n                                    </Col>\n                                </Row>\n                                {!isEmpty(errors) ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                    Niet alle verplichte velden zijn ingevuld om verder te gaan naar de\n                                                    volgende stap!\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                                {status && status.message ? (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert-wrapper\">\n                                                <Alert key={'form-general-error-alert'} variant={'danger'}>\n                                                    {status.message}\n                                                </Alert>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ) : null}\n                            </Form>\n                        </>\n                    )}\n                </Formik>\n            )}\n        </>\n    );\n}\n\nexport default StepFour;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from 'react-router-dom';\nimport { Form } from 'formik';\n\nfunction StepFive({ contactProjectData }) {\n    return (\n        <div>\n            <Row>\n                <Col xs={12} md={10}>\n                    {contactProjectData.textRegistrationFinishedMerged.split('\\n').map((item, key) => {\n                        return (\n                            <span key={key}>\n                                {item}\n                                <br />\n                            </span>\n                        );\n                    })}\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={12} md={10}>\n                    <ButtonGroup className=\"float-right\">\n                        <Link to={`/inschrijvingen-projecten`}>\n                            <Button className={'w-button'} size=\"sm\">\n                                Naar mijn huidige deelnames\n                            </Button>\n                        </Link>\n                    </ButtonGroup>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nexport default StepFive;\n","import React from 'react';\nimport StepOneLoan from './StepOneLoan';\nimport StepOneObligation from './StepOneObligation';\nimport StepOneCapital from './StepOneCapital';\nimport StepOnePcr from './StepOnePcr';\nimport StepTwo from './StepTwo';\nimport StepThree from './StepThree';\nimport StepFour from './StepFour';\nimport StepFive from './StepFive';\nimport { isEmpty } from 'lodash';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction Steps({\n    portalSettings,\n    currentStep,\n    previous,\n    next,\n    project,\n    contactProjectData,\n    initialRegisterValues,\n    handleSubmitRegisterValues,\n    initialContact,\n    handleSubmitContactValues,\n    setSucces,\n}) {\n    if (isEmpty(project)) {\n        return (\n            <Container className={'content-section'}>\n                <Row>\n                    <Col>\n                        <p>Fout bij ophalen project. Inschrijving niet (meer) mogelijk op dit moment.</p>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n    switch (currentStep) {\n        case 1:\n            switch (project.projectType.codeRef) {\n                case 'loan':\n                    return (\n                        <StepOneLoan\n                            next={next}\n                            project={project}\n                            contactProjectData={contactProjectData}\n                            initialRegisterValues={initialRegisterValues}\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\n                        />\n                    );\n                case 'obligation':\n                    return (\n                        <StepOneObligation\n                            next={next}\n                            project={project}\n                            contactProjectData={contactProjectData}\n                            initialRegisterValues={initialRegisterValues}\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\n                        />\n                    );\n                case 'capital':\n                    return (\n                        <StepOneCapital\n                            next={next}\n                            project={project}\n                            contactProjectData={contactProjectData}\n                            initialRegisterValues={initialRegisterValues}\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\n                        />\n                    );\n                case 'postalcode_link_capital':\n                    return (\n                        <StepOnePcr\n                            portalSettings={portalSettings}\n                            next={next}\n                            project={project}\n                            contactProjectData={contactProjectData}\n                            initialContact={initialContact}\n                            initialRegisterValues={initialRegisterValues}\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\n                        />\n                    );\n                default:\n                    return null;\n            }\n\n        case 2:\n            return (\n                <StepTwo\n                    portalSettings={portalSettings}\n                    previous={previous}\n                    next={next}\n                    project={project}\n                    initialContact={initialContact}\n                    handleSubmitContactValues={handleSubmitContactValues}\n                />\n            );\n        case 3:\n            return (\n                <StepThree\n                    project={project}\n                    contactProjectData={contactProjectData}\n                    previous={previous}\n                    next={next}\n                    initialRegisterValues={initialRegisterValues}\n                    handleSubmitRegisterValues={handleSubmitRegisterValues}\n                />\n            );\n        case 4:\n            return (\n                <StepFour\n                    project={project}\n                    contactProjectData={contactProjectData}\n                    previous={previous}\n                    next={next}\n                    registerValues={initialRegisterValues}\n                    setSucces={setSucces}\n                />\n            );\n        case 5:\n            return <StepFive contactProjectData={contactProjectData} />;\n        default:\n            return null;\n    }\n}\n\nexport default Steps;\n","import React from 'react';\nimport Steps from './steps';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction MasterForm({\n    portalSettings,\n    project,\n    contactProjectData,\n    initialRegisterValues,\n    handleSubmitRegisterValues,\n    initialContact,\n    handleSubmitContactValues,\n    setSucces,\n}) {\n    const [currentStep, setStep] = React.useState(1);\n\n    function previous() {\n        setStep(currentStep <= 2 ? 1 : currentStep - 1);\n    }\n\n    function next() {\n        setStep(currentStep >= 4 ? 5 : currentStep + 1);\n    }\n\n    return (\n        <>\n            {currentStep <= 4 ? (\n                <Row className={'mb-4'}>\n                    <Col>\n                        <div className={'arrow-steps clearfix'}>\n                            <div className={`step ${currentStep === 1 ? 'current' : ''}`}>1. Inschrijven</div>\n                            <div className={`step ${currentStep === 2 ? 'current' : ''}`}>2. Gegevens</div>\n                            <div className={`step ${currentStep === 3 ? 'current' : ''}`}>3. Voorwaarden</div>\n                            <div className={`step ${currentStep === 4 ? 'current' : ''}`}>\n                                {\n                                    project.usesMollie ? (\n                                        <>4. Bevestigen en betalen</>\n                                    ) : (\n                                        <>4. Bevestigen</>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            ) : null}\n            <Steps\n                portalSettings={portalSettings}\n                currentStep={currentStep}\n                previous={previous}\n                next={next}\n                project={project}\n                contactProjectData={contactProjectData}\n                initialRegisterValues={initialRegisterValues}\n                handleSubmitRegisterValues={handleSubmitRegisterValues}\n                initialContact={initialContact}\n                handleSubmitContactValues={handleSubmitContactValues}\n                setSucces={setSucces}\n            />\n        </>\n    );\n}\n\nexport default MasterForm;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ProjectAPI from '../../api/project/ProjectAPI';\nimport LoadingView from '../../components/general/LoadingView';\nimport ContactAPI from '../../api/contact/ContactAPI';\nimport rebaseContact from '../../helpers/RebaseContact';\nimport { PortalUserConsumer } from '../../context/PortalUserContext';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport MasterForm from './MasterForm';\nimport PortalSettingsAPI from '../../api/portal-settings/PortalSettingsAPI';\nimport axios from 'axios';\nimport { ThemeSettingsContext } from '../../context/ThemeSettingsContext';\nimport { Alert } from 'react-bootstrap';\n\nfunction RegisterProject({ match, currentSelectedContact }) {\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\n\n    const initialRegisterValues = {\n        contactId: null,\n        projectId: null,\n        participationsOptioned: 0,\n        powerKwhConsumption: 0,\n        amountOptioned: 0,\n        didAcceptAgreement: false,\n        didUnderstandInfo: false,\n        choiceMembership: 0,\n    };\n\n    const initialPcrValues = {\n        pcrYearlyPowerKwhConsumption: 0,\n        pcrPostalCode: '',\n        pcrHasSolarPanels: 'N',\n        pcrInputGeneratedNumberOfKwh: 0,\n        pcrEstimatedRevenueOk: 'Y',\n    };\n\n    const [registerValues, setRegisterValues] = useState(initialRegisterValues);\n\n    const [project, setProject] = useState({});\n    const [contact, setContact] = useState({});\n    const [portalSettings, setPortalSettings] = useState({});\n    const [isLoading, setLoading] = useState(true);\n    const [isSucces, setSucces] = useState(false);\n    const [contactProjectData, setContactProjectData] = useState({});\n\n    useEffect(() => {\n        if (currentSelectedContact.id) {\n            (function fetchContactAndProject() {\n                setLoading(true);\n\n                axios\n                    .all([\n                        ProjectAPI.fetchProject(match.params.id),\n                        ContactAPI.fetchContact(currentSelectedContact.id),\n                        ContactAPI.fetchContactProjectData(currentSelectedContact.id, match.params.id),\n                    ])\n                    .then(\n                        axios.spread((payloadProject, payloadContact, payloadContactProjectData) => {\n                            const contact = payloadContact.data.data;\n                            const project = payloadProject.data.data;\n                            setProject(project);\n                            setCurrentThemeSettings(project.administration.portalSettingsLayoutAssigned);\n                            const contactData = rebaseContact(contact);\n                            setContact(contactData);\n\n                            setContactProjectData(payloadContactProjectData.data);\n\n                            if (\n                                project &&\n                                project.projectType &&\n                                project.projectType.codeRef === 'postalcode_link_capital'\n                            ) {\n                                let pcrPostalCode = '';\n                                if (contactData.typeId === 'organisation') {\n                                    pcrPostalCode = contactData.visitAddress ? contactData.visitAddress.postalCode : '';\n                                } else {\n                                    pcrPostalCode = contactData.primaryAddress\n                                        ? contactData.primaryAddress.postalCode\n                                        : '';\n                                }\n                                setRegisterValues({\n                                    ...registerValues,\n                                    projectId: match.params.id,\n                                    contactId: currentSelectedContact.id,\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\n                                    ...initialPcrValues,\n                                    pcrPostalCode,\n                                });\n                            } else {\n                                setRegisterValues({\n                                    ...registerValues,\n                                    projectId: match.params.id,\n                                    contactId: currentSelectedContact.id,\n                                    // choiceMembership: payloadContactProjectData.data.belongsToMembershipGroup ? 0 : 1,\n                                });\n                            }\n\n                            if (\n                                payloadContactProjectData.data.projectRegisterIndicators.allowChangeParticipation &&\n                                payloadContactProjectData.data.projectRegisterIndicators.allowPayMollie\n                            ) {\n                                /**\n                                 * Er is wel ingeschreven maar nog niet betaald, dan mag het formulier\n                                 * wel geopend worden en stellen we de eerder ingevoerde gegevens in. projectRegisterIndicators\n                                 */\n                                setRegisterValues(current => {\n                                    return {\n                                        ...current,\n                                        participationsOptioned:\n                                            payloadContactProjectData.data.projectRegisterIndicators\n                                                .participationsOptioned,\n                                        amountOptioned:\n                                            payloadContactProjectData.data.projectRegisterIndicators.amountOptioned,\n                                        pcrYearlyPowerKwhConsumption:\n                                            payloadContactProjectData.data.projectRegisterIndicators\n                                                .powerKwhConsumption,\n                                        didAcceptAgreement: true,\n                                        didUnderstandInfo: true,\n                                    };\n                                });\n                            }\n\n                            setLoading(false);\n                        })\n                    )\n                    .catch(error => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setLoading(false);\n                    });\n            })();\n        }\n\n        (function callFetchPortalSettings() {\n            setLoading(true);\n            const keys =\n                '?keys[]=portalName' +\n                '&keys[]=portalWebsite' +\n                '&keys[]=portalUrl' +\n                '&keys[]=responsibleUserId' +\n                '&keys[]=checkContactTaskResponsibleUserId' +\n                '&keys[]=linkPrivacyPolicy' +\n                '&keys[]=pcrPowerKwhConsumptionPercentage' +\n                '&keys[]=pcrGeneratingCapacityOneSolorPanel';\n            PortalSettingsAPI.fetchPortalSettings(keys)\n                .then(payload => {\n                    setPortalSettings({ ...payload.data });\n                })\n                .catch(error => {\n                    this.setState({ isLoading: false, hasError: true });\n                });\n        })();\n    }, [match, currentSelectedContact]);\n\n    function handleSubmitRegisterValues(values) {\n        setRegisterValues({ ...registerValues, ...values });\n    }\n\n    function handleSubmitContactValues(values, actions, nextStep) {\n        const updatedContact = { ...contact, ...values, projectId: project.id };\n        ContactAPI.updateContact(updatedContact)\n            .then(payload => {\n                ContactAPI.fetchContact(currentSelectedContact.id)\n                    .then(payload => {\n                        const contactData = rebaseContact(payload.data.data);\n\n                        setContact(contactData);\n                        nextStep();\n                    })\n                    .catch(error => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setLoading(false);\n                    });\n            })\n            .catch(error => {\n                actions.setSubmitting(false);\n                actions.setStatus({\n                    message: error.response.data.message,\n                });\n                // alert('Er is iets misgegaan met opslaan! Herlaad de pagina opnieuw.');\n            });\n    }\n\n    return (\n        <Container className={'content-section'}>\n            {isLoading ? (\n                <LoadingView />\n            ) : !contactProjectData.projectRegisterIndicators.hasParticipation &&\n              !contactProjectData.projectRegisterIndicators.allowRegisterToProject ? (\n                <>\n                    <Row>\n                        <Col>\n                            <h1 className=\"content-heading\">\n                                Inschrijving voor project <strong>{project.name}</strong>\n                            </h1>\n                            <Row className={'mb-4'}>\n                                <Col>\n                                    <div className=\"alert-wrapper\">\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                            {contactProjectData.projectRegisterIndicators.textNotAllowedRegisterToProject\n                                                .split('<br />')\n                                                .map((item, key) => {\n                                                    return (\n                                                        <span key={key}>\n                                                            {item}\n                                                            <br />\n                                                        </span>\n                                                    );\n                                                })}\n                                        </Alert>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={10}>\n                            <ButtonGroup className=\"float-right\">\n                                <Link to={`/inschrijvingen-projecten`}>\n                                    <Button className={'w-button'} size=\"sm\">\n                                        Naar huidige deelnames\n                                    </Button>\n                                </Link>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            ) : contactProjectData.projectRegisterIndicators.hasParticipation &&\n              !contactProjectData.projectRegisterIndicators.allowChangeParticipation ? (\n                <>\n                    <Row>\n                        <Col>\n                            <h1 className=\"content-heading\">\n                                <strong>{contact.fullNameFnf}</strong> is al ingeschreven voor project{' '}\n                                <strong>{project.name}</strong>\n                            </h1>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={10}>\n                            <ButtonGroup className=\"float-right\">\n                                <Link to={`/inschrijvingen-projecten`}>\n                                    <Button className={'w-button'} size=\"sm\">\n                                        Naar huidige deelnames\n                                    </Button>\n                                </Link>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            ) : (\n                <Row>\n                    <Col>\n                        {isSucces ? (\n                            <h1 className=\"content-heading\">\n                                Ingeschreven voor project <strong>{project.name}</strong>\n                            </h1>\n                        ) : (\n                            <>\n                                <Row>\n                                    <ButtonGroup aria-label=\"register\" className=\"w-button-group-left\">\n                                        <Link to={`/inschrijven-projecten`}>\n                                            <Button className={'w-button'} size=\"sm\">\n                                                Inschrijven projecten\n                                            </Button>\n                                        </Link>\n                                    </ButtonGroup>\n                                </Row>\n                                <h1 className=\"content-heading\">\n                                    Schrijf <strong>{contact.fullNameFnf}</strong> in voor project{' '}\n                                    <strong>{project.name}</strong>\n                                </h1>\n                            </>\n                        )}\n                        <MasterForm\n                            portalSettings={portalSettings}\n                            project={project}\n                            contactProjectData={contactProjectData}\n                            initialRegisterValues={registerValues}\n                            handleSubmitRegisterValues={handleSubmitRegisterValues}\n                            initialContact={contact}\n                            handleSubmitContactValues={handleSubmitContactValues}\n                            setSucces={setSucces}\n                        />\n                    </Col>\n                </Row>\n            )}\n        </Container>\n    );\n}\n\nexport default function RegisterProjectWithContext(props) {\n    return (\n        <PortalUserConsumer>\n            {({ currentSelectedContact }) => (\n                <RegisterProject {...props} currentSelectedContact={currentSelectedContact} />\n            )}\n        </PortalUserConsumer>\n    );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport { Form, Formik } from 'formik';\nimport { ClipLoader } from 'react-spinners';\nimport ValidationSchemaPersonal from './../../../../helpers/ValidationSchemaPersonal';\nimport { isEmpty } from 'lodash';\nimport { Alert } from 'react-bootstrap';\nimport InputText from '../../../../components/form/InputText';\nimport { Field } from 'formik';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport { Link } from 'react-router-dom';\n\nfunction PersonalAddressEdit({ initialContact, handleSubmitContactAddressValues }) {\n    const validationSchema = ValidationSchemaPersonal.validationSchemaPostalCodeAndNumber;\n    return (\n        <div>\n            <Formik\n                initialValues={initialContact}\n                enableReinitialize={true}\n                validationSchema={validationSchema}\n                onSubmit={(values, actions) => {\n                    actions.setSubmitting(true);\n                    handleSubmitContactAddressValues(values, actions);\n                }}\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\n                    return (\n                        <Form>\n                            <Row>\n                                <Col>\n                                    <div className=\"alert-wrapper\">\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                            Op dit moment zijn je adresgegevens nog niet bij ons bekend.\n                                            <br />\n                                            Er zijn projecten waarop je kan inschrijven die afhankelijk van je adres\n                                            zijn.\n                                        </Alert>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={12}>\n                                    <FormLabel className={'field-label'}>Postcode en huisnummer</FormLabel>\n                                    <Row>\n                                        <Col xs={12} sm={4}>\n                                            <Field\n                                                name=\"primaryAddress.postalCode\"\n                                                render={({ field }) => (\n                                                    <InputText\n                                                        field={field}\n                                                        errors={errors}\n                                                        touched={touched}\n                                                        id=\"postal_code\"\n                                                        placeholder={'Postcode'}\n                                                    />\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col xs={12} sm={4}>\n                                            <Field\n                                                name=\"primaryAddress.number\"\n                                                render={({ field }) => (\n                                                    <InputText\n                                                        field={field}\n                                                        errors={errors}\n                                                        touched={touched}\n                                                        id=\"street_number\"\n                                                        placeholder={'Nummer'}\n                                                    />\n                                                )}\n                                            />\n                                        </Col>\n                                        <Col xs={12} sm={4}>\n                                            <Field\n                                                name=\"primaryAddress.addition\"\n                                                render={({ field }) => (\n                                                    <InputText\n                                                        field={field}\n                                                        errors={errors}\n                                                        touched={touched}\n                                                        id=\"addition\"\n                                                        placeholder={'Toevoeging'}\n                                                    />\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col>\n                                    <ButtonGroup aria-label=\"address-person\" className=\"float-right\">\n                                        <Link to={`/`}>\n                                            <Button variant={'outline-dark'} size=\"sm\">\n                                                Annuleren\n                                            </Button>\n                                        </Link>\n                                        <Button\n                                            className={'w-button'}\n                                            size=\"sm\"\n                                            onClick={handleSubmit}\n                                            disabled={isSubmitting}\n                                        >\n                                            {isSubmitting ? (\n                                                <span>\n                                                    <ClipLoader color={'white'} size={14} />\n                                                    Bezig met opslaan\n                                                </span>\n                                            ) : (\n                                                'Opslaan'\n                                            )}\n                                        </Button>\n                                    </ButtonGroup>\n                                </Col>\n                            </Row>\n                            {!isEmpty(errors) ? (\n                                <Row>\n                                    <Col>\n                                        <div className=\"alert-wrapper\">\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                Niet alle verplichte velden zijn (juist) ingevuld!\n                                            </Alert>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                            {status && status.message ? (\n                                <Row>\n                                    <Col>\n                                        <div className=\"alert-wrapper\">\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\n                                                {status.message}\n                                            </Alert>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                        </Form>\n                    );\n                }}\n            />\n        </div>\n    );\n}\n\nexport default PersonalAddressEdit;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport { Form, Formik } from 'formik';\nimport { ClipLoader } from 'react-spinners';\nimport ValidationSchemaOrganisation from '../../../../helpers/ValidationSchemaOrganisation';\nimport { isEmpty } from 'lodash';\nimport { Alert } from 'react-bootstrap';\nimport InputText from '../../../../components/form/InputText';\nimport { Field } from 'formik';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport { Link } from 'react-router-dom';\n\nfunction OrganisationAddressEdit({ initialContact, handleSubmitContactAddressValues }) {\n    const validationSchema = ValidationSchemaOrganisation.validationSchemaPostalCodeAndNumber;\n    return (\n        <div>\n            <Formik\n                initialValues={initialContact}\n                enableReinitialize={true}\n                validationSchema={validationSchema}\n                onSubmit={(values, actions) => {\n                    actions.setSubmitting(true);\n                    handleSubmitContactAddressValues(values, actions);\n                }}\n                render={({ errors, touched, setFieldValue, isSubmitting, status, values, handleSubmit }) => {\n                    return (\n                        <Form>\n                            <Row>\n                                <Col>\n                                    <div className=\"alert-wrapper\">\n                                        <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                            Op dit moment zijn je adresgegevens nog niet bij ons bekend.\n                                            <br />\n                                            Er zijn projecten waarop je kan inschrijven die afhankelijk van je adres\n                                            zijn.\n                                        </Alert>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={12}>\n                                    <FormLabel className={'field-label'}>Postcode en huisnummer</FormLabel>\n                                    <Row>\n                                        <Col xs={12} sm={4}>\n                                            <Field\n                                                name=\"visitAddress.postalCode\"\n                                                render={({ field }) => (\n                                                    <InputText\n                                                        field={field}\n                                                        errors={errors}\n                                                        touched={touched}\n                                                        id=\"postal_code\"\n                                                        placeholder={'Postcode'}\n                                                    />\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col xs={12} sm={4}>\n                                            <Field\n                                                name=\"visitAddress.number\"\n                                                render={({ field }) => (\n                                                    <InputText\n                                                        field={field}\n                                                        errors={errors}\n                                                        touched={touched}\n                                                        id=\"street_number\"\n                                                        placeholder={'Nummer'}\n                                                    />\n                                                )}\n                                            />\n                                        </Col>\n                                        <Col xs={12} sm={4}>\n                                            <Field\n                                                name=\"visitAddress.addition\"\n                                                render={({ field }) => (\n                                                    <InputText\n                                                        field={field}\n                                                        errors={errors}\n                                                        touched={touched}\n                                                        id=\"addition\"\n                                                        placeholder={'Toevoeging'}\n                                                    />\n                                                )}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col>\n                                    <ButtonGroup aria-label=\"address-organistation\" className=\"float-right\">\n                                        <Link to={`/`}>\n                                            <Button variant={'outline-dark'} size=\"sm\">\n                                                Annuleren\n                                            </Button>\n                                        </Link>\n                                        <Button\n                                            className={'w-button'}\n                                            size=\"sm\"\n                                            onClick={handleSubmit}\n                                            disabled={isSubmitting}\n                                        >\n                                            {isSubmitting ? (\n                                                <span>\n                                                    <ClipLoader color={'white'} size={14} />\n                                                    Bezig met opslaan\n                                                </span>\n                                            ) : (\n                                                'Opslaan'\n                                            )}\n                                        </Button>\n                                    </ButtonGroup>\n                                </Col>\n                            </Row>\n                            {!isEmpty(errors) ? (\n                                <Row>\n                                    <Col>\n                                        <div className=\"alert-wrapper\">\n                                            <Alert key={'form-general-error-alert'} variant={'warning'}>\n                                                Niet alle verplichte velden zijn (juist) ingevuld!\n                                            </Alert>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                            {status && status.message ? (\n                                <Row>\n                                    <Col>\n                                        <div className=\"alert-wrapper\">\n                                            <Alert key={'form-general-error-alert'} variant={'danger'}>\n                                                {status.message}\n                                            </Alert>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                        </Form>\n                    );\n                }}\n            />\n        </div>\n    );\n}\n\nexport default OrganisationAddressEdit;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\nimport LoadingView from '../../../components/general/LoadingView';\nimport ContactAPI from '../../../api/contact/ContactAPI';\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\nimport { FaInfoCircle } from 'react-icons/fa';\nimport ReactTooltip from 'react-tooltip';\nimport rebaseContact from '../../../helpers/RebaseContact';\nimport PersonalAddressEdit from './address-person/Edit';\nimport OrganisationAddressEdit from './address-organisation/Edit';\n\nfunction ProjectList(props) {\n    const [contact, setContact] = useState({});\n    const [contactProjectsArray, setContactProjectsArray] = useState([]);\n    const [sceOrPcrProjectsAvailable, setSceOrPcrProjectsAvailable] = useState(false);\n    const [isLoading, setLoading] = useState(true);\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\n\n    useEffect(() => {\n        (function callFetchProjects() {\n            setLoading(true);\n            // Call Api if current selected contact id is filled\n            if (props.currentSelectedContact.id) {\n                // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\n                if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\n                    callFetchContact();\n                    callFetchContactProjects();\n                }\n            }\n        })();\n    }, [props.currentSelectedContact]);\n\n    useEffect(() => {\n        (function determineSceOrPcrProjectsAvailable() {\n            if (contactProjectsArray.length > 0) {\n                contactProjectsArray.find(function(project) {\n                    return project.isSceOrPcrProject && setSceOrPcrProjectsAvailable(true);\n                });\n            }\n        })();\n    }, [contactProjectsArray.length > 0]);\n\n    function callFetchContact() {\n        setLoading(true);\n        ContactAPI.fetchContact(props.currentSelectedContact.id)\n            .then(payload => {\n                const contactData = rebaseContact(payload.data.data);\n\n                setContact(contactData);\n            })\n            .catch(error => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                setLoading(false);\n            });\n    }\n\n    function callFetchContactProjects() {\n        ContactAPI.fetchContactProjects(props.currentSelectedContact.id)\n            .then(payload => {\n                setContactProjectsArray(payload.data);\n                setLoading(false);\n            })\n            .catch(error => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                setLoading(false);\n            });\n    }\n\n    function usePrevious(value) {\n        const ref = useRef();\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    }\n\n    function handleSubmitContactAddressValues(values, actions) {\n        const updatedContact = { ...contact, ...values, projectId: null };\n        ContactAPI.updateContact(updatedContact)\n            .then(payload => {\n                actions.setSubmitting(false);\n                callFetchContact();\n                callFetchContactProjects();\n            })\n            .catch(error => {\n                actions.setSubmitting(false);\n                actions.setStatus({\n                    message: error.response.data.message,\n                });\n            });\n    }\n\n    return (\n        <Container className={'content-section'}>\n            <Row>\n                <Col>\n                    <h1 className=\"content-heading\">\n                        Overzicht projecten waarop <strong>{props.currentSelectedContact.fullNameFnf}</strong> kan\n                        inschrijven.\n                    </h1>\n                </Col>\n            </Row>\n            {sceOrPcrProjectsAvailable && contact.noAddressesFound && contact.typeId === 'person' ? (\n                <PersonalAddressEdit\n                    initialContact={contact}\n                    handleSubmitContactAddressValues={handleSubmitContactAddressValues}\n                />\n            ) : sceOrPcrProjectsAvailable && contact.noAddressesFound && contact.typeId === 'organisation' ? (\n                <OrganisationAddressEdit\n                    initialContact={contact}\n                    handleSubmitContactAddressValues={handleSubmitContactAddressValues}\n                />\n            ) : (\n                <>\n                    <Row>\n                        <Col>\n                            <p>Klik op het project voor meer details.</p>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            {isLoading ? (\n                                <LoadingView />\n                            ) : contactProjectsArray.length === 0 ? (\n                                'Geen projecten beschikbaar om op in te schrijven.'\n                            ) : (\n                                <Table responsive>\n                                    <thead>\n                                        <tr>\n                                            <th>Organisatie</th>\n                                            <th>Project</th>\n                                            <th>Ingeschreven</th>\n                                            <th>Start inschrijving</th>\n                                            <th>Einde inschrijving</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {contactProjectsArray.map(project => (\n                                            <tr key={project.id}>\n                                                <td>{project.administrationName}</td>\n                                                <td>\n                                                    {project.allowChangeParticipation ? (\n                                                        <>\n                                                            {project.name} (\n                                                            <Link to={`/project/${project.id}`}>\n                                                                wijzig inschrijving\n                                                            </Link>\n                                                            )\n                                                        </>\n                                                    ) : (\n                                                        <>\n                                                            {!project.hasParticipation &&\n                                                            project.allowRegisterToProject ? (\n                                                                <Link to={`/project/${project.id}`}>\n                                                                    {project.name}\n                                                                </Link>\n                                                            ) : (\n                                                                <span className={'text-muted'}>{project.name}</span>\n                                                            )}\n                                                        </>\n                                                    )}\n                                                </td>\n                                                <td>\n                                                    {project.hasParticipation ? (\n                                                        <>\n                                                            {project.allowPayMollie ? (\n                                                                <div className=\"text-center\">\n                                                                    Nog niet betaald,\n                                                                    <br />\n                                                                    <a href={project.econobisPaymentLink}>betaal nu</a>\n                                                                </div>\n                                                            ) : (\n                                                                <div className=\"text-success text-center\">✔</div>\n                                                            )}\n                                                        </>\n                                                    ) : (\n                                                        <div className=\"text-center\">\n                                                            {!project.allowRegisterToProject ? (\n                                                                <>\n                                                                    <FaInfoCircle\n                                                                        color={'blue'}\n                                                                        size={'15px'}\n                                                                        data-tip={`${project.textNotAllowedRegisterToProject}`}\n                                                                        data-for={`project-${project.id}`}\n                                                                    />\n                                                                    <ReactTooltip\n                                                                        id={`project-${project.id}`}\n                                                                        effect=\"float\"\n                                                                        place=\"bottom\"\n                                                                        multiline={true}\n                                                                        aria-haspopup=\"true\"\n                                                                    />\n                                                                </>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                        </div>\n                                                    )}\n                                                </td>\n                                                <td>\n                                                    {project.dateStartRegistrations\n                                                        ? moment(project.dateStartRegistrations).format('LL')\n                                                        : ''}\n                                                </td>\n                                                <td>\n                                                    {project.dateEndRegistrations\n                                                        ? moment(project.dateEndRegistrations).format('LL')\n                                                        : ''}\n                                                </td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            )}\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default function ProjectListWithContext(props) {\n    return (\n        <PortalUserConsumer>\n            {({ currentSelectedContact }) => <ProjectList {...props} currentSelectedContact={currentSelectedContact} />}\n        </PortalUserConsumer>\n    );\n}\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport moment from 'moment';\nimport TextBlock from '../../../components/general/TextBlock';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\n\nfunction LoanDetails({ project }) {\n    return (\n        <>\n            <Row>\n                <Col xs={12} md={6}>\n                    <FormLabel>Project</FormLabel>\n                    <TextBlock>{project.name}</TextBlock>\n                    <FormLabel>Lening nodig</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.amountOfLoanNeeded)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Omschrijving project</FormLabel>\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Minimaal bedrag per contact</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.minAmountLoan)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Maximaal bedrag per contact</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.maxAmountLoan)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Start inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Eind inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default LoanDetails;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport moment from 'moment';\nimport TextBlock from '../../../components/general/TextBlock';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\n\nfunction ObligationDetails({ project }) {\n    return (\n        <>\n            <Row>\n                <Col xs={12} md={6}>\n                    <FormLabel>Project</FormLabel>\n                    <TextBlock>{project.name}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Omschrijving project</FormLabel>\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\n                </Col>\n\n                <Col xs={12} md={6}>\n                    <FormLabel>Huidige hoofdsom per obligatie</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Aantal obligaties nodig</FormLabel>\n                    <TextBlock>{project.totalParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Minimaal aantal obligaties per contact</FormLabel>\n                    <TextBlock>{project.minParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Maximaal aantal obligaties per contact</FormLabel>\n                    <TextBlock>{project.maxParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Start inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Eind inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default ObligationDetails;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport moment from 'moment';\nimport TextBlock from '../../../components/general/TextBlock';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\n\nfunction CapitalDetails({ project }) {\n    return (\n        <>\n            <Row>\n                <Col xs={12} md={6}>\n                    <FormLabel>Project</FormLabel>\n                    <TextBlock>{project.name}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Omschrijving project</FormLabel>\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\n                </Col>\n\n                <Col xs={12} md={6}>\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Aantal participaties nodig</FormLabel>\n                    <TextBlock>{project.totalParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\n                    <TextBlock>{project.minParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\n                    <TextBlock>{project.maxParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Start inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Eind inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default CapitalDetails;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport moment from 'moment';\nimport TextBlock from '../../../components/general/TextBlock';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\n\nfunction PcrDetails({ project }) {\n    return (\n        <>\n            <Row>\n                <Col xs={12} md={6}>\n                    <FormLabel>Project</FormLabel>\n                    <TextBlock>{project.name}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Omschrijving project</FormLabel>\n                    <TextBlock>{project.description ? project.description : ' '}</TextBlock>\n                </Col>\n\n                <Col xs={12} md={6}>\n                    <FormLabel>Huidige boekwaarde per participatie</FormLabel>\n                    <TextBlock>{MoneyPresenter(project.currentBookWorth)}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Aantal participaties nodig</FormLabel>\n                    <TextBlock>{project.totalParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Minimaal aantal participaties per contact</FormLabel>\n                    <TextBlock>{project.minParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Maximaal aantal participaties per contact</FormLabel>\n                    <TextBlock>{project.maxParticipations}</TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Start inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateStartRegistrations ? moment(project.dateStartRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n                <Col xs={12} md={6}>\n                    <FormLabel>Eind inschrijving</FormLabel>\n                    <TextBlock>\n                        {project.dateEndRegistrations ? moment(project.dateEndRegistrations).format('LL') : ''}\n                    </TextBlock>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default PcrDetails;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ProjectAPI from '../../../api/project/ProjectAPI';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport LoadingView from '../../../components/general/LoadingView';\nimport LoanDetails from './LoanDetails';\nimport ObligationDetails from './ObligationDetails';\nimport CapitalDetails from './CapitalDetails';\nimport PcrDetails from './PcrDetails';\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\nimport { PortalUserContext } from '../../../context/PortalUserContext';\nimport { isEmpty } from 'lodash';\nimport fileDownload from 'js-file-download';\nimport { FaFileDownload } from 'react-icons/all';\n\nfunction ProjectDetails({ match }) {\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\n    const { currentSelectedContact } = useContext(PortalUserContext);\n    const [project, setProject] = useState({});\n    const [isLoading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if (currentSelectedContact.id) {\n            (function callFetchProject() {\n                setLoading(true);\n                ProjectAPI.fetchProject(match.params.id)\n                    .then(payload => {\n                        setProject(payload.data.data);\n                        setCurrentThemeSettings(payload.data.data.administration.portalSettingsLayoutAssigned);\n                        setLoading(false);\n                    })\n                    .catch(error => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setLoading(false);\n                    });\n            })();\n        }\n    }, [match, currentSelectedContact]);\n\n    function downloadFile(e, id, filename) {\n        e.preventDefault();\n\n        ProjectAPI.documentDownload(project.id, id)\n            .then(payload => {\n                fileDownload(payload.data, filename);\n            })\n            .catch(() => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n            });\n    }\n\n    function renderDetails() {\n        switch (project.projectType.codeRef) {\n            case 'loan':\n                return <LoanDetails project={project} />;\n            case 'obligation':\n                return <ObligationDetails project={project} />;\n            case 'capital':\n                return <CapitalDetails project={project} />;\n            case 'postalcode_link_capital':\n                return <PcrDetails project={project} />;\n            default:\n                return null;\n        }\n    }\n    if (isEmpty(project)) {\n        return (\n            <Container className={'content-section'}>\n                {isLoading ? (\n                    <LoadingView />\n                ) : (\n                    <Row>\n                        <Col>\n                            <p>Geen projectdetails bekend</p>\n                        </Col>\n                    </Row>\n                )}\n            </Container>\n        );\n    }\n\n    return (\n        <Container className={'content-section'}>\n            {isLoading ? (\n                <LoadingView />\n            ) : (\n                <>\n                    <Row>\n                        <ButtonGroup aria-label=\"project-details\" className=\"w-button-group-left\">\n                            <Link to={`/inschrijven-projecten`}>\n                                <Button className={'w-button'} size=\"sm\">\n                                    Inschrijven projecten\n                                </Button>\n                            </Link>\n                        </ButtonGroup>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <h1 className=\"content-heading\">Inschrijven project</h1>\n                            <div className=\"content-subheading\">Organisatie {project.administration.name}</div>\n                        </Col>\n                    </Row>\n\n                    {renderDetails()}\n\n                    <Row className={'mt-5'}>\n                        <Col>\n                            <p>\n                                {project.documentProjectInfo ? (\n                                    <>\n                                        {'Meer informatie over dit project kan je hier '}\n                                        <a\n                                            href=\"#\"\n                                            onClick={e =>\n                                                downloadFile(\n                                                    e,\n                                                    project.documentProjectInfo.id,\n                                                    project.documentProjectInfo.filename\n                                                )\n                                            }\n                                        >\n                                            <FaFileDownload /> downloaden\n                                        </a>\n                                    </>\n                                ) : project.linkProjectInfo != null ? (\n                                    <>\n                                        {'Meer informatie over dit project vind je '}\n                                        <a href={`${project.linkProjectInfo}`} target=\"_blank\">\n                                            hier\n                                        </a>\n                                    </>\n                                ) : null}\n                            </p>\n                            <p>Wil je inschrijven op dit project. Klik dan op \"Ga naar inschrijven\".</p>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <ButtonGroup className=\"float-right\">\n                                <Link to={`/inschrijven/${project.id}`}>\n                                    <Button className={'w-button'} size=\"sm\">\n                                        Ga naar inschrijven\n                                    </Button>\n                                </Link>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default ProjectDetails;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport LoadingView from '../../../components/general/LoadingView';\nimport ContactAPI from '../../../api/contact/ContactAPI';\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\nimport MoneyPresenter from '../../../helpers/MoneyPresenter';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\n\nfunction RegistrationList(props) {\n    const [contact, setContact] = useState({});\n    const [isLoading, setLoading] = useState(true);\n    const prevCurrentSelectedContact = usePrevious(props.currentSelectedContact);\n\n    useEffect(() => {\n        // Call Api if current selected contact id is filled\n        if (props.currentSelectedContact.id) {\n            // If there is no previous selected contact OR previous selected contact is not the same as current selected contact\n            if (!prevCurrentSelectedContact || prevCurrentSelectedContact.id != props.currentSelectedContact.id) {\n                callFetchContact();\n            }\n        }\n    }, [props.currentSelectedContact]);\n\n    function callFetchContact() {\n        setLoading(true);\n        ContactAPI.fetchContactWithParticipants(props.currentSelectedContact.id)\n            .then(payload => {\n                setContact(payload.data.data);\n                setLoading(false);\n            })\n            .catch(error => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                setLoading(false);\n            });\n    }\n\n    function usePrevious(value) {\n        const ref = useRef();\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    }\n\n    return (\n        <Container className={'content-section'}>\n            <Row>\n                <Col>\n                    <h1 className=\"content-heading\">\n                        De projecten waarin <strong>{contact.fullNameFnf}</strong> deelneemt.\n                    </h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {isLoading ? (\n                        <LoadingView />\n                    ) : contact.participations.length === 0 ? (\n                        'Geen huidige deelnames aanwezig.'\n                    ) : (\n                        <Table responsive>\n                            <thead>\n                                <tr>\n                                    <th>Organisatie</th>\n                                    <th>Project</th>\n                                    <th>Deelname</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {contact.participations.map(participation => {\n                                    if (\n                                        !participation.project.dateEnd ||\n                                        moment(participation.project.dateEnd).format('YYYY-MM-DD') >=\n                                            moment().format('YYYY-MM-DD')\n                                    ) {\n                                        return (\n                                            <tr key={participation.id}>\n                                                <td>{participation.project.administration.name}</td>\n                                                <td>\n                                                    <Link to={`/project-deelname/${participation.id}`}>\n                                                        {participation.project.name}\n                                                    </Link>\n                                                </td>\n                                                <td>\n                                                    {participation.project.projectType.codeRef == 'loan' ? (\n                                                        <>\n                                                            {participation.amountInteressed != 0 ? (\n                                                                <span>\n                                                                    Lening{' '}\n                                                                    {MoneyPresenter(participation.amountInteressed)}{' '}\n                                                                    <em>(Interesse)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.amountOptioned != 0 ? (\n                                                                <span>\n                                                                    Lening{' '}\n                                                                    {MoneyPresenter(participation.amountOptioned)}{' '}\n                                                                    <em>(Ingeschreven)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.amountGranted != 0 ? (\n                                                                <span>\n                                                                    Lening {MoneyPresenter(participation.amountGranted)}{' '}\n                                                                    <em>(Toegekend)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.amountDefinitive != 0 ? (\n                                                                <span>\n                                                                    Lening{' '}\n                                                                    {MoneyPresenter(participation.amountDefinitive)}{' '}\n                                                                    <em>(Definitief)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                        </>\n                                                    ) : (\n                                                        ''\n                                                    )}\n\n                                                    {participation.project.projectType.codeRef == 'obligation' ? (\n                                                        <>\n                                                            {participation.participationsInteressed != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsInteressed}\n                                                                    {' obligaties '} <em> (Interesse)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsOptioned != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsOptioned}\n                                                                    {' obligaties '} <em>(Ingeschreven)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsGranted != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsGranted}\n                                                                    {' obligaties '} <em>(Toegekend)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsDefinitive != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsDefinitive}\n                                                                    {' obligaties '}\n                                                                    <em>(Definitief)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                        </>\n                                                    ) : (\n                                                        ''\n                                                    )}\n\n                                                    {participation.project.projectType.codeRef == 'capital' ? (\n                                                        <>\n                                                            {participation.participationsInteressed != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsInteressed}\n                                                                    {' participaties '} <em>(Interesse)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsOptioned != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsOptioned}\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsGranted != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsGranted}\n                                                                    {' participaties '} <em>(Toegekend)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsDefinitive != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsDefinitive}\n                                                                    {' participaties '} <em>(Definitief)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                        </>\n                                                    ) : (\n                                                        ''\n                                                    )}\n\n                                                    {participation.project.projectType.codeRef ==\n                                                    'postalcode_link_capital' ? (\n                                                        <>\n                                                            {participation.participationsInteressed != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsInteressed}\n                                                                    {' participaties '} <em>(Interesse)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsOptioned != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsOptioned}\n                                                                    {' participaties '} <em>(Ingeschreven)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsGranted != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsGranted}\n                                                                    {' participaties '} <em>(Toegekend)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                            {participation.participationsDefinitive != 0 ? (\n                                                                <span>\n                                                                    {participation.participationsDefinitive}\n                                                                    {' participaties '} <em>(Definitief)</em>\n                                                                </span>\n                                                            ) : (\n                                                                ''\n                                                            )}\n                                                        </>\n                                                    ) : (\n                                                        ''\n                                                    )}\n                                                </td>\n                                            </tr>\n                                        );\n                                    }\n                                    return null;\n                                })}\n                            </tbody>\n                        </Table>\n                    )}\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default function RegistrationListWithContext(props) {\n    return (\n        <PortalUserConsumer>\n            {({ currentSelectedContact }) => (\n                <RegistrationList {...props} currentSelectedContact={currentSelectedContact} />\n            )}\n        </PortalUserConsumer>\n    );\n}\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Row from 'react-bootstrap/Row';\nimport ButtonText from '../../../components/button/ButtonText';\nimport Titles from '../../../data/Titles';\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\nimport Select from '../../../components/form/Select';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string()\n        .email()\n        .required('Verplicht'),\n    personFirstName: Yup.string()\n        .trim()\n        .required('Verplicht'),\n    personLastName: Yup.string()\n        .trim()\n        .required('Verplicht'),\n});\n\nconst NewAccountFormPersonal = ({ handleSubmit, showSuccessMessage }) => (\n    <Formik\n        initialValues={{\n            email: '',\n            personTitleId: '',\n            personFirstName: '',\n            personLastName: '',\n        }}\n        enableReinitialize={true}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true);\n            handleSubmit(values, actions);\n        }}\n        render={({ isSubmitting, errors, touched }) => (\n            <Form>\n                <>\n                    <Row className=\"justify-content-center\">\n                        <p className={'authorization-text'}>Account aanmaken voor jezelf</p>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <p className={'authorization-text'}>Gegevens</p>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personTitleId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"title_id\"\n                                    className={'select-field-transparent'}\n                                    placeholder={'Aanhef'}\n                                    options={Titles}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personFirstName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"first_name-new-acount\"\n                                    className={''}\n                                    placeholder={'Voornaam'}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personLastNamePrefixId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name_prefix_id\"\n                                    options={LastNamePrefixes}\n                                    className={'select-field-transparent'}\n                                    placeholder={'Tussenvoegsel'}\n                                />\n                            )}\n                        />\n                        <Field\n                            name=\"personLastName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name-new-acount\"\n                                    className={''}\n                                    placeholder={'Achternaam'}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"email-new-acount\"\n                                    className={''}\n                                    placeholder={'E-mailadres'}\n                                    errors={errors}\n                                    touched={touched}\n                                />\n                            )}\n                        />\n                    </Row>\n\n                    <Row className=\"justify-content-center\">\n                        <ButtonGroup aria-label=\"create-account\" className=\"w-button-group\">\n                            <ButtonText\n                                buttonText={'Account aanmaken'}\n                                buttonClassName={'authorization-button'}\n                                size=\"sm\"\n                                type={'submit'}\n                                loading={isSubmitting}\n                                loadingSpinnerColor={'#034b8c'}\n                                disabled={showSuccessMessage}\n                            />\n                        </ButtonGroup>\n                    </Row>\n                </>\n            </Form>\n        )}\n    />\n);\n\nexport default NewAccountFormPersonal;\n","import React from 'react';\nimport InputText from '../../../components/form/InputText';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonText from '../../../components/button/ButtonText';\nimport Titles from '../../../data/Titles';\nimport LastNamePrefixes from '../../../data/LastNamePrefixes';\nimport Select from '../../../components/form/Select';\nimport { Link } from 'react-router-dom';\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string()\n        .email()\n        .required('Verplicht'),\n    organisationName: Yup.string()\n        .trim()\n        .required('Verplicht'),\n    personFirstName: Yup.string()\n        .trim()\n        .required('Verplicht'),\n    personLastName: Yup.string()\n        .trim()\n        .required('Verplicht'),\n});\n\nconst NewAccountFormOrganisation = ({ handleSubmit, showSuccessMessage }) => (\n    <Formik\n        initialValues={{ email: '', organisationName: '', personTitleId: '', personFirstName: '', personLastName: '' }}\n        enableReinitialize={true}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true);\n            handleSubmit(values, actions);\n        }}\n        render={({ isSubmitting, errors, touched }) => (\n            <Form>\n                <>\n                    <Row className=\"justify-content-center\">\n                        <p className={'authorization-text'}>Account aanmaken voor je organisatie</p>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"organisationName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"name-new-acount\"\n                                    className={''}\n                                    placeholder={'Naam Organisatie'}\n                                    errors={errors}\n                                    touched={touched}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <p className={'authorization-text'}>Gegevens contactpersoon</p>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personTitleId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"title_id\"\n                                    className={'select-field-transparent'}\n                                    placeholder={'Aanhef'}\n                                    options={Titles}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personFirstName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"first_name-new-acount\"\n                                    className={''}\n                                    placeholder={'Voornaam'}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"personLastNamePrefixId\"\n                            render={({ field }) => (\n                                <Select\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name_prefix_id\"\n                                    options={LastNamePrefixes}\n                                    className={'select-field-transparent'}\n                                    placeholder={'Tussenvoegsel'}\n                                />\n                            )}\n                        />\n                        <Field\n                            name=\"personLastName\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    errors={errors}\n                                    touched={touched}\n                                    id=\"last_name-new-acount\"\n                                    className={''}\n                                    placeholder={'Achternaam'}\n                                />\n                            )}\n                        />\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <Field\n                            name=\"email\"\n                            render={({ field }) => (\n                                <InputText\n                                    field={field}\n                                    id=\"email-new-acount\"\n                                    className={''}\n                                    placeholder={'E-mailadres'}\n                                    errors={errors}\n                                    touched={touched}\n                                />\n                            )}\n                        />\n                    </Row>\n\n                    <Row className=\"justify-content-center\">\n                        <ButtonText\n                            buttonText={'Account aanmaken'}\n                            buttonClassName={'authorization-button'}\n                            size=\"sm\"\n                            type={'submit'}\n                            loading={isSubmitting}\n                            loadingSpinnerColor={'#034b8c'}\n                            disabled={showSuccessMessage}\n                        />\n                    </Row>\n                </>\n            </Form>\n        )}\n    />\n);\n\nexport default NewAccountFormOrganisation;\n","import React, { useState } from 'react';\nimport { GoogleReCaptchaProvider, useGoogleReCaptcha } from 'react-google-recaptcha-v3';\nimport AuthAPI from '../../../api/auth/AuthAPI';\nimport Alert from 'react-bootstrap/Alert';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport NewAccountFormPersonal from './NewAccountFormPersonal';\nimport NewAccountFormOrganisation from './NewAccountFormOrganisation';\nimport { Link, Redirect } from 'react-router-dom';\nimport { Button, ButtonToolbar } from 'react-bootstrap';\nimport ButtonText from '../../../components/button/ButtonText';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nconst NewAccount = props => {\n    const { executeRecaptcha } = useGoogleReCaptcha();\n    const [contactType, setContactType] = useState('person');\n    const [showError, toggleError] = useState(false);\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [redirectToReferrer, toggleRedirect] = useState(false);\n    const [imageHash, setImageHash] = useState(Date.now());\n\n    async function handleSubmit(values, actions) {\n        if (!executeRecaptcha) {\n            return;\n        }\n        const reCaptchaToken = await executeRecaptcha('signup_page');\n\n        AuthAPI.newAccount({ ...values, contactType: contactType, reCaptchaToken })\n            .then(payload => {\n                toggleError(false);\n                toggleSuccessMessage(true);\n                actions.setSubmitting(false);\n            })\n            .catch(error => {\n                // If new account fails show error and then set submitting back to false\n                toggleError(true);\n                if (error.response && error.response.status === 404) {\n                    setErrorMessage(\n                        <p>\n                            {'U heeft al een account, klik op '}\n                            <Link to={'/wachtwoord-vergeten'} className=\"authorization-link\">\n                                wachtwoord vergeten?\n                            </Link>\n                            {' om een nieuwe wachtwoord aan te vragen.'}\n                        </p>\n                    );\n                } else if (error.response && error.response.status === 405) {\n                    setErrorMessage(\n                        'Er bestaat al een contact met het e-mailadres, voornaam en achternaam dat je hebt ingevuld. Wil je een nieuw account aanmaken? Gebruik dan alsjeblieft een ander e-mailadres, voornaam of achternaam.'\n                    );\n                } else {\n                    setErrorMessage('Fout bij aanmaken nieuw account!');\n                }\n\n                actions.setSubmitting(false);\n            });\n    }\n\n    function redirect(from) {\n        return <Redirect to={from} />;\n    }\n\n    return (\n        <>\n            {redirectToReferrer && !showSuccessMessage ? (\n                redirect('/dashboard')\n            ) : (\n                <div className=\"authorization-container\">\n                    <Container fluid className=\"authorization-text\">\n                        <Row className=\"justify-content-center align-content-start align-content-lg-center full-height p-2\">\n                            <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"4\" xl=\"4\">\n                                <img\n                                    src={`images/logo.png?${imageHash}`}\n                                    alt=\"\"\n                                    className=\"image logo-container-small\"\n                                />\n\n                                {showSuccessMessage ? (\n                                    redirect('nieuw-account-succes')\n                                ) : (\n                                    <>\n                                        <Row className=\"justify-content-center\">\n                                            <h3 className={'authorization-text'}>Nieuw account</h3>\n                                        </Row>\n                                        <Row className=\"justify-content-center\">\n                                            <p className={'authorization-text'}>\n                                                Maak binnen 2 minuten een account aan.\n                                            </p>\n                                        </Row>\n                                        <br />\n                                        <Row className=\"justify-content-center\">\n                                            <ButtonToolbar toggle>\n                                                <Col>\n                                                    <Button\n                                                        className={'authorization-button'}\n                                                        variant={\n                                                            contactType === 'person'\n                                                                ? 'primary fixed-height'\n                                                                : 'light fixed-height'\n                                                        }\n                                                        block\n                                                        onClick={() => setContactType('person')}\n                                                    >\n                                                        Voor jezelf\n                                                    </Button>\n                                                </Col>\n                                                <Col>\n                                                    <Button\n                                                        className={'authorization-button'}\n                                                        variant={contactType === 'organisation' ? 'primary' : 'light'}\n                                                        block\n                                                        onClick={() => setContactType('organisation')}\n                                                    >\n                                                        Voor je organisatie\n                                                    </Button>\n                                                </Col>\n                                            </ButtonToolbar>\n                                        </Row>\n                                        <br />\n\n                                        {contactType === 'person' ? (\n                                            <NewAccountFormPersonal\n                                                handleSubmit={handleSubmit}\n                                                showSuccessMessage={showSuccessMessage}\n                                            />\n                                        ) : (\n                                            <NewAccountFormOrganisation\n                                                handleSubmit={handleSubmit}\n                                                showSuccessMessage={showSuccessMessage}\n                                            />\n                                        )}\n                                        {showError ? (\n                                            <Row className=\"justify-content-center\">\n                                                <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                                                    {errorMessage}\n                                                </Alert>\n                                            </Row>\n                                        ) : null}\n                                        <Row className=\"justify-content-center\">\n                                            <ButtonGroup aria-label=\"redirect-to-login\" className=\"w-button-group\">\n                                                <Col>\n                                                    <ButtonText\n                                                        buttonText={'Heb je al een account ?'}\n                                                        onClickAction={toggleRedirect}\n                                                        buttonClassName={'authorization-button'}\n                                                        size=\"sm\"\n                                                    />\n                                                </Col>\n                                            </ButtonGroup>\n                                        </Row>\n                                    </>\n                                )}\n                            </Col>\n                        </Row>\n                    </Container>\n                </div>\n            )}\n        </>\n    );\n};\n\nfunction NewAccountWithProvider() {\n    const RE_CAPTCHA_KEY = process.env.REACT_APP_RE_CAPTCHA_KEY;\n\n    return (\n        <GoogleReCaptchaProvider reCaptchaKey={RE_CAPTCHA_KEY} language={'nl'}>\n            <NewAccount />\n        </GoogleReCaptchaProvider>\n    );\n}\n\nexport default NewAccountWithProvider;\n","import React, { useEffect, useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from 'react-router-dom';\n\nconst NewAccountSuccess = () => {\n    const [imageHash, setImageHash] = useState(Date.now());\n\n    return (\n        <Container fluid className=\"authorization-container\">\n            <Row className=\"justify-content-center align-content-center full-height\">\n                <Col xs=\"12\" sm=\"10\" md=\"8\" lg=\"6\" xl=\"4\">\n                    <img src={`images/logo.png?${imageHash}`} alt=\"\" className=\"image logo-container\" />\n                    <div>\n                        <h3 className={'authorization-text'}>Een E-mail is onderweg!</h3>\n                        <p className={'authorization-text'}>\n                            Binnen enkele minuten ontvang je een e-mail met een persoonlijke link. Via deze link kun je\n                            je account activeren.\n                            <br />\n                            <br />\n                            <strong>Let op:</strong> Het kan zijn dat de mail door een spamfilter is geblokkeerd.\n                            Spamfilters van bijvoorbeeld Gmail en Hotmail staan erg \"scherp\". Kijk even bij de\n                            Spam/Reclame of je onze mail daar terug vindt.\n                        </p>\n                        <a onClick={window.close} href=\"#\" className=\"authorization-link\">\n                            Sluit venster\n                        </a>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default NewAccountSuccess;\n","import React, { useEffect, useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from '../../../components/form/InputText';\nimport ButtonText from '../../../components/button/ButtonText';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport TextBlock from '../../../components/general/TextBlock';\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\nimport Alert from 'react-bootstrap/Alert';\n\nconst validationSchema = Yup.object({\n    email: Yup.string()\n        .email('Geen geldig e-mailadres')\n        .required('Verplicht'),\n});\n\nfunction ChangeAccountEmail() {\n    const [portalUserEmail, setPortalUserEmail] = useState('');\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n    const [showError, toggleError] = useState(false);\n\n    useEffect(() => {\n        (function callFetchUserEmail() {\n            PortalUserAPI.fetchPortalUserEmail()\n                .then(payload => {\n                    setPortalUserEmail(payload.data);\n                })\n                .catch(error => {\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                });\n        })();\n    }, []);\n    function handleSubmitChangeEmail(values, actions) {\n        PortalUserAPI.changeEmail(values)\n            .then(payload => {\n                setPortalUserEmail(values.email);\n                actions.resetForm();\n                toggleError(false);\n                toggleSuccessMessage(true);\n                actions.setSubmitting(false);\n            })\n            .catch(error => {\n                actions.setSubmitting(false);\n                toggleError(true);\n                toggleSuccessMessage(false);\n            });\n    }\n\n    return (\n        <Formik\n            initialValues={{ email: '', changePrimaryEmailAddress: false }}\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitChangeEmail(values, actions);\n            }}\n        >\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\n                <Form onSubmit={handleSubmit}>\n                    {showSuccessMessage ? (\n                        <Row>\n                            <Col xs={12}>\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\n                                    Inlog e-mail is succesvol gewijzigd!\n                                </Alert>\n                            </Col>\n                        </Row>\n                    ) : null}\n                    {showError ? (\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                            Er bestaat al een account met het e-mailadres dat je hebt ingevuld. Je kunt met dit\n                            e-mailadres inloggen als bestaand contact. Wil je een nieuw account aanmaken? Gebruik dan\n                            alsjeblieft een ander e-mailadres.\n                        </Alert>\n                    ) : null}\n\n                    <Row>\n                        <Col xs={12}>\n                            <FormLabel className={'field-label'}>Huidig e-mailadres</FormLabel>\n                            <TextBlock>{portalUserEmail}</TextBlock>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={9}>\n                            <Form.Label className={'field-label pt-1'}>Nieuw e-mailadres</Form.Label>\n                            <Field\n                                name=\"email\"\n                                render={({ field }) => (\n                                    <InputText field={field} errors={errors} touched={touched} id=\"email\" />\n                                )}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={9}>\n                            <Field\n                                name=\"changePrimaryEmailAddress\"\n                                render={({ field }) => (\n                                    <label className=\"w-checkbox checkbox-fld\">\n                                        <input\n                                            type=\"checkbox\"\n                                            {...field}\n                                            id=\"change-primary-email-address\"\n                                            checked={field.value}\n                                            className=\"w-checkbox-input checkbox\"\n                                        />\n                                        <span\n                                            htmlFor=\"change-primary-email-address\"\n                                            className=\"checkbox-label w-form-label\"\n                                        >\n                                            Wijziging ook doorvoeren op huidig correspondentie e-mailadres?\n                                        </span>\n                                    </label>\n                                )}\n                            />\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col xs={12} md={6}>\n                            <ButtonText\n                                buttonText={'Wijzig e-mailadres'}\n                                size=\"sm\"\n                                type={'submit'}\n                                loading={isSubmitting}\n                            />\n                        </Col>\n                    </Row>\n                </Form>\n            )}\n        </Formik>\n    );\n}\n\nexport default ChangeAccountEmail;\n","import React, { useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport InputText from '../../../components/form/InputText';\nimport ButtonText from '../../../components/button/ButtonText';\nimport PortalUserAPI from '../../../api/portal-user/PortalUserAPI';\nimport Alert from 'react-bootstrap/Alert';\n\nconst validationSchema = Yup.object().shape({\n    password: Yup.string()\n        .min(10, 'Minimum van ${min} verplicht')\n        .matches(/([0-9])/, 'Minimaal 1 cijfer is verplicht')\n        .matches(/([A-Z])/, 'Minimaal 1 hoofdletter is verplicht')\n        .required('Verplicht'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Wachtwoorden moeten gelijk zijn')\n        .required('Verplicht'),\n});\n\nfunction ChangeAccountPassword() {\n    const [showSuccessMessage, toggleSuccessMessage] = useState(false);\n    const [showError, toggleError] = useState(false);\n\n    function handleSubmitChangePassword(values, actions) {\n        PortalUserAPI.changePassword(values)\n            .then(payload => {\n                actions.resetForm();\n                toggleError(false);\n                toggleSuccessMessage(true);\n                actions.setSubmitting(false);\n            })\n            .catch(error => {\n                actions.setSubmitting(false);\n                toggleError(true);\n                toggleSuccessMessage(false);\n            });\n    }\n\n    return (\n        <Formik\n            initialValues={{ password: '', passwordConfirmation: '' }}\n            validationSchema={validationSchema}\n            onSubmit={function(values, actions) {\n                handleSubmitChangePassword(values, actions);\n            }}\n        >\n            {({ touched, errors, isSubmitting, handleSubmit }) => (\n                <Form onSubmit={handleSubmit}>\n                    {showSuccessMessage ? (\n                        <Row>\n                            <Col xs={12}>\n                                <Alert className={'p-1 m-1 text-success'} variant={'success'}>\n                                    Wachtwoord is succesvol gewijzigd!\n                                </Alert>\n                            </Col>\n                        </Row>\n                    ) : null}\n                    {showError ? (\n                        <Alert className={'p-1 m-1 text-danger'} variant={'danger'}>\n                            Fout bij wijzigen wachtwoord!\n                        </Alert>\n                    ) : null}\n\n                    <Row>\n                        <Col xs={12} md={9}>\n                            <Form.Label className={'field-label'}>Nieuw wachtwoord</Form.Label>\n                            <Field\n                                name=\"password\"\n                                render={({ field }) => (\n                                    <InputText\n                                        field={field}\n                                        id=\"password\"\n                                        className={field.value ? 'content numeric-password' : 'content'}\n                                        placeholder={'Nieuw wachtwoord'}\n                                        errors={errors}\n                                        touched={touched}\n                                    />\n                                )}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={9}>\n                            <Form.Label className={'field-label mt-0'}>Herhaal nieuw wachtwoord</Form.Label>\n                            <Field\n                                name=\"passwordConfirmation\"\n                                render={({ field }) => (\n                                    <InputText\n                                        field={field}\n                                        id=\"passwordConfirmation\"\n                                        className={field.value ? 'content numeric-password' : 'content'}\n                                        placeholder={'Herhaal nieuw wachtwoord'}\n                                        errors={errors}\n                                        touched={touched}\n                                    />\n                                )}\n                            />\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col xs={12} md={6}>\n                            <ButtonText\n                                buttonText={'Wijzig wachtwoord'}\n                                size=\"sm\"\n                                type={'submit'}\n                                loading={isSubmitting}\n                            />\n                        </Col>\n                    </Row>\n                </Form>\n            )}\n        </Formik>\n    );\n}\n\nexport default ChangeAccountPassword;\n","import React, {useRef, useState} from 'react';\nimport MeAPI from \"../../../api/general/MeAPI\";\nimport {Alert} from \"react-bootstrap\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst TwoFactorSettings = function () {\n    const activationCodeInput = useRef(null);\n    const [password, setPassword] = useState('');\n    const [hasValidPassword, setHasValidPassword] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [hasTwoFactorEnabled, setHasTwoFactorEnabled] = useState(false);\n    const [activationQr, setActivationQr] = useState(null);\n    const [isActivatingTwoFactor, setIsActivatingTwoFactor] = useState(false);\n    const [activationCode, setActivationCode] = useState('');\n    const [recoveryCodes, setRecoveryCodes] = useState([]);\n\n    const checkPasswordHandler = (event) => {\n        event.preventDefault();\n\n        setErrorMessage('');\n        MeAPI.checkPassword(password).then(payload => {\n            setHasValidPassword(true);\n\n            fetchTwoFactorStatus();\n        }).catch(error => {\n            setErrorMessage('Het wachtwoord is onjuist');\n        });\n    }\n\n    const enableTwoFactorHandler = () => {\n        MeAPI.enableTwoFactor(password).then(payload => {\n            setIsActivatingTwoFactor(true);\n            activationCodeInput.current.focus();\n            fetchQr();\n        });\n    }\n\n    const disableTwoFactorHandler = () => {\n        if(!window.confirm('Weet u zeker dat u twee factor authenticatie wilt uitschakelen.')) {\n            return;\n        }\n\n        MeAPI.disableTwoFactor(password).then(payload => {\n            setHasTwoFactorEnabled(false);\n            localStorage.removeItem('portal_two_factor_token');\n        });\n    }\n\n    const fetchTwoFactorStatus = () => {\n        MeAPI.fetchTwoFactorStatus().then(payload => {\n            setHasTwoFactorEnabled(payload.data.hasTwoFactorEnabled);\n        });\n    }\n\n    const fetchQr = () => {\n        MeAPI.fetchTwoFactorQr(password).then(payload => {\n            setActivationQr(payload.data.svg);\n        });\n    }\n\n    const confirmTwoFactorHandler = () => {\n        setErrorMessage('');\n\n        MeAPI.confirmTwoFactor(activationCode).then(payload => {\n            setIsActivatingTwoFactor(false);\n            setHasTwoFactorEnabled(true);\n            setActivationCode('');\n            fetchRecoveryCodes();\n\n            localStorage.setItem('portal_two_factor_token', payload.data.token);\n        }).catch(() => {\n            setErrorMessage('De code is onjuist');\n        });\n    }\n\n    const fetchRecoveryCodes = () => {\n        MeAPI.fetchTwoFactorRecoveryCodes(password).then(payload => {\n            setRecoveryCodes(payload.data);\n        });\n    }\n\n    const regenerateRecoveryCodes = () => {\n        if(!window.confirm('Weet u zeker dat u nieuwe recovery code wilt genereren? De huidige code is daarna niet meer geldig.')) {\n            return;\n        }\n\n        MeAPI.regenerateTwoFactorRecoveryCodes(password).then(payload => {\n            fetchRecoveryCodes();\n        });\n    }\n\n    return (\n        <Row>\n            <Col xs={12} md={9}>\n            {errorMessage && (<>\n                <Alert variant={'danger'}>\n                    {errorMessage}\n                </Alert>\n            </>)}\n\n            {hasValidPassword ? (\n                <>\n                    {hasTwoFactorEnabled ? (\n                        <>\n                            <p>U heeft twee factor authenticatie geactiveerd.</p>\n                            <button onClick={disableTwoFactorHandler} className=\"btn btn-primary btn-sm\">Twee factor uitschakelen</button>\n                            <br/><br/>\n                            <strong>Recovery code</strong>\n                            <p><small>De recovery code kunt u gebruiken om uw account te herstellen bij problemen met uw authenticator app\n                                of verlies van uw telefoon. Sla deze op een veilige plek op.</small></p>\n\n                            {recoveryCodes.length ? (<>\n                                <ul>\n                                    {recoveryCodes.map((code) => {\n                                        return (\n                                            <li key={code} style={{'font-family': 'courier'}}>{code}</li>\n                                        );\n                                    })}\n                                </ul>\n                                <button onClick={() => setRecoveryCodes([])} className=\"btn btn-sm\">Verbergen</button>\n                                <button onClick={regenerateRecoveryCodes} className=\"btn btn-sm btn-primary\">Vernieuwen</button>\n                            </>) : (<>\n                                <button onClick={fetchRecoveryCodes} className=\"btn btn-primary btn-sm\">Toon recovery code</button>\n                            </>)}\n                        </>) : (\n                        <>\n                            {isActivatingTwoFactor ? (\n                                <>\n                                    <p>Scan onderstaande QR met uw authenticator app en voer de zescijferige code\n                                        in.</p>\n                                    <div dangerouslySetInnerHTML={{__html: activationQr}}/>\n                                    <br/>\n                                    <input ref={activationCodeInput} placeholder=\"Code\" className=\"text-input w-input content\" type=\"text\" value={activationCode}\n                                           onChange={(e) => setActivationCode(e.target.value)}/>\n                                    <button onClick={() => setIsActivatingTwoFactor(false)} className=\"btn btn-sm btn-light\">Annuleren</button>\n                                    <button onClick={confirmTwoFactorHandler} className=\"btn btn-primary btn-sm\">Bevestigen</button>\n                                </>\n                            ) : (\n                                <>\n                                    <p>U heeft twee factor authenticatie <strong>niet</strong> geactiveerd.</p>\n                                    <button onClick={enableTwoFactorHandler} className=\"btn btn-primary btn-sm\">Twee factor inschakelen</button>\n                                </>\n                            )}\n                        </>\n                    )\n                    }\n                </>\n            ) : (\n                <>\n                    <form onSubmit={checkPasswordHandler}>\n                    Voer uw wachtwoord in om de twee factor instellingen te wijzigen.<br/>\n                    <input placeholder=\"Wachtwoord\" className=\"text-input w-input content\" type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\n                    <button type=\"submit\" className=\"btn btn-primary btn-sm\">Ontgrendel</button>\n                    </form>\n                </>\n            )}\n            </Col>\n        </Row>\n    );\n};\n\nexport default TwoFactorSettings;","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ChangeAccountEmail from './Email';\nimport ChangeAccountPassword from './Password';\nimport TwoFactorSettings from \"./TwoFactorSettings\";\n\nfunction ChangeAccount() {\n    return (\n        <Container className={'content-section'}>\n            <Row>\n                <Col>\n                    <h1 className=\"content-heading\">Wijzig inloggegevens</h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={12} md={6} className={'mb-5'}>\n                    <h3 className={'h3'}>Wijzig inlog e-mailadres</h3>\n\n                    <ChangeAccountEmail />\n                </Col>\n                <Col xs={12} md={6}>\n                    <h3 className={'h3'}>Wijzig wachtwoord</h3>\n\n                    <ChangeAccountPassword />\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={12} md={6} style={{marginTop: '24px'}}>\n                    <h3 className={'h3'}>Twee factor authenticatie</h3>\n\n                    <TwoFactorSettings/>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default ChangeAccount;\n","import React, { useEffect, useReducer, useContext, useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link, Redirect } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport LoadingView from '../../../components/general/LoadingView';\nimport ContactAPI from '../../../api/contact/ContactAPI';\nimport { PortalUserContext } from '../../../context/PortalUserContext';\n\nconst INITIAL_STATE = {\n    result: [],\n    isLoading: true,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'updateIsLoading':\n            return {\n                ...state,\n                isLoading: action.payload,\n            };\n        case 'updateResult':\n            return {\n                ...state,\n                result: action.payload,\n            };\n        default:\n            return INITIAL_STATE;\n    }\n};\n\nfunction AboutUs() {\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n    const { currentSelectedContact } = useContext(PortalUserContext);\n    const [hasSingleRelatedAdministration, setHasSingleRelatedAdministration] = useState(false);\n\n    useEffect(\n        function() {\n            if (currentSelectedContact.id) {\n                if (currentSelectedContact.singleRelatedAdministration) {\n                    setIsLoading(false);\n                    setHasSingleRelatedAdministration(true);\n                } else {\n                    ContactAPI.fetchContactRelatedAdministrations(currentSelectedContact.id)\n                        .then(payload => {\n                            dispatch({\n                                type: 'updateResult',\n                                payload: payload.data.data,\n                            });\n                            setIsLoading(false);\n                        })\n                        .catch(() => {\n                            alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                            setIsLoading(false);\n                        });\n                }\n            }\n        },\n        [currentSelectedContact.id]\n    );\n\n    function setIsLoading(isLoading) {\n        dispatch({\n            type: 'updateIsLoading',\n            payload: isLoading,\n        });\n    }\n\n    return (\n        <>\n            {hasSingleRelatedAdministration ? (\n                <Redirect to={`/over-ons-organisatie/${currentSelectedContact.singleRelatedAdministration}`} />\n            ) : (\n                <Container className={'content-section'}>\n                    <Row>\n                        <Col>\n                            <h1 className=\"content-heading\">\n                                Overzicht organisaties waar <strong>{currentSelectedContact.fullNameFnf}</strong> een\n                                relatie mee heeft.\n                            </h1>\n                        </Col>\n                    </Row>\n                    {state.isLoading ? (\n                        <Row>\n                            <Col>\n                                <LoadingView />\n                            </Col>\n                        </Row>\n                    ) : state.result.length === 0 ? (\n                        <Row>\n                            <Col>Geen informatie organisaties beschikbaar waar contact een relatie mee heeft.</Col>\n                        </Row>\n                    ) : (\n                        <>\n                            <Row>\n                                <Col>\n                                    <p>Klik op de organisatie voor meer details.</p>\n                                </Col>\n                            </Row>\n                            <Table responsive>\n                                <thead>\n                                    <tr>\n                                        <th>Naam</th>\n                                        <th>Adres</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {state.result.map(item => (\n                                        <tr key={item.id}>\n                                            <td>\n                                                <Link to={`/over-ons-organisatie/${item.id}`}>{item.name}</Link>\n                                            </td>\n                                            <td>\n                                                {item.address}, {item.city}\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                        </>\n                    )}\n                </Container>\n            )}\n        </>\n    );\n}\n\nexport default AboutUs;\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nfunction RegistrationDetailsTitle({ contactName, projectName, administrationName }) {\n    return (\n        <Row>\n            <Col>\n                <h1 className=\"content-heading\">\n                    Deelname van {contactName} in de {projectName}\n                </h1>\n                <div className=\"content-subheading\">Organisatie {administrationName}</div>\n            </Col>\n        </Row>\n    );\n}\n\nexport default RegistrationDetailsTitle;\n","import moneyPresenter from './MoneyPresenter';\nimport moment from 'moment';\n\nexport default field => {\n    switch (field.type) {\n        case 'date':\n            return field.value ? moment(field.value).format('L') : '';\n        case 'decimal':\n            return field.value\n                ? field.value.toLocaleString('nl', {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                  })\n                : '';\n        case 'money':\n            return moneyPresenter(field.value);\n        case 'string':\n        case 'integer':\n        default:\n            return field.value;\n    }\n};\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\r\nimport {FaInfoCircle} from \"react-icons/fa\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nfunction RegistrationDetailsProjectTable({ fields }) {\r\n    if (!fields || fields.length === 0) return <p>Geen projectdetails bekend</p>;\r\n\r\n    return (\r\n        <Table>\r\n            <tbody>\r\n                {fields.map((field, index) => (\r\n                    <tr key={index}>\r\n                        <td>\r\n                            <strong>{field.label}</strong>\r\n                            &nbsp;\r\n                            {field.dataTip ? (\r\n                                <>\r\n                                    <FaInfoCircle\r\n                                        color={'blue'}\r\n                                        size={'15px'}\r\n                                        data-tip={`${field.dataTip}`}\r\n                                        data-for={`deelname-${index}`}\r\n                                    />\r\n                                    <ReactTooltip\r\n                                        id={`deelname-${index}`}\r\n                                        effect=\"float\"\r\n                                        place=\"right\"\r\n                                        multiline={true}\r\n                                        aria-haspopup=\"true\"\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                        </td>\r\n                        <td>{valueBasedOnTypePresenter(field)}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsProjectTable;\r\n","export default field => {\n    switch (field.type) {\n        case 'date':\n        case 'string':\n            return 'text-left';\n        case 'decimal':\n        case 'money':\n        case 'integer':\n            return 'text-right';\n        default:\n            return 'text-left';\n    }\n};\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport valueBasedOnTypePresenter from '../../../../helpers/ValueBasedOnTypePresenter';\r\nimport classNameBasedOnTypePresenter from '../../../../helpers/classNameBasedOnTypePresenter';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction RegistrationDetailsMutationTable({ participantMutations }) {\r\n    if (!participantMutations || participantMutations.length === 0) return <p>Geen mutaties bekend</p>;\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col>\r\n                    <div className=\"content-subheading\">Mutaties</div>\r\n                </Col>\r\n            </Row>\r\n            <Table responsive={true}>\r\n                <thead>\r\n                    <tr>\r\n                        {participantMutations[0].fields.map((field, index) => (\r\n                            <th className={classNameBasedOnTypePresenter(field)} key={index}>\r\n                                {field.label}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {participantMutations.map((participantMutation, index) => (\r\n                        <tr key={index}>\r\n                            {participantMutation.fields.map((field, index) => (\r\n                                <td className={classNameBasedOnTypePresenter(field)} key={index}>\r\n                                    {valueBasedOnTypePresenter(field)}\r\n                                </td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RegistrationDetailsMutationTable;\r\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { FaFileDownload } from 'react-icons/all';\nimport fileDownload from 'js-file-download';\nimport ParticipantProjectAPI from '../../../../api/participant-project/ParticipantProjectAPI';\n\nfunction RegistrationDetailsDocumentTable({ participantId, documents }) {\n    function downloadFile(e, id, filename) {\n        e.preventDefault();\n\n        ParticipantProjectAPI.participantDocumentDownload(participantId, id)\n            .then(payload => {\n                fileDownload(payload.data, filename);\n            })\n            .catch(() => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n            });\n    }\n\n    if (\n        (documents && documents.relatedDocumentsOnPortal && documents.relatedDocumentsOnPortal.length !== 0) ||\n        (documents &&\n            documents.relatedDocumentsProjectOnPortal &&\n            documents.relatedDocumentsProjectOnPortal.length !== 0)\n    ) {\n        return (\n            <>\n                <Row>\n                    <Col>\n                        <div className=\"content-subheading\">Documenten</div>\n                    </Col>\n                </Row>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Naam</th>\n                            <th>Omschrijving</th>\n                            <th>Downloaden</th>\n                        </tr>\n                    </thead>\n                    {documents &&\n                    documents.relatedDocumentsOnPortal &&\n                    documents.relatedDocumentsOnPortal.length !== 0 ? (\n                        <tbody>\n                            {documents.relatedDocumentsOnPortal.map(item => (\n                                <tr key={item.id}>\n                                    <td>{item.filename}</td>\n                                    <td>{item.description}</td>\n                                    <td>\n                                        <a href=\"#\" onClick={e => downloadFile(e, item.id, item.filename)}>\n                                            <FaFileDownload /> downloaden\n                                        </a>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    ) : null}\n                    {documents &&\n                    documents.relatedDocumentsProjectOnPortal &&\n                    documents.relatedDocumentsProjectOnPortal.length !== 0 ? (\n                        <tbody>\n                            {documents.relatedDocumentsProjectOnPortal.map(item => (\n                                <tr key={item.id}>\n                                    <td>{item.filename}</td>\n                                    <td>{item.description}</td>\n                                    <td>\n                                        <a href=\"#\" onClick={e => downloadFile(e, item.id, item.filename)}>\n                                            <FaFileDownload /> downloaden\n                                        </a>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    ) : null}\n                </Table>\n            </>\n        );\n    }\n\n    return null;\n}\n\nexport default RegistrationDetailsDocumentTable;\n","import React, { useEffect, useReducer, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport ParticipantProjectAPI from '../../../api/participant-project/ParticipantProjectAPI';\nimport LoadingView from '../../../components/general/LoadingView';\nimport RegistrationDetailsTitle from './Title';\nimport RegistrationDetailsProjectTable from './project-table';\nimport RegistrationDetailsMutationTable from './mutation-table';\nimport Row from 'react-bootstrap/Row';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport { ThemeSettingsContext } from '../../../context/ThemeSettingsContext';\nimport { PortalUserContext } from '../../../context/PortalUserContext';\nimport Col from 'react-bootstrap/Col';\nimport RegistrationDetailsDocumentTable from './document-table';\n\nconst INITIAL_STATE = {\n    result: [],\n    isLoading: true,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'updateIsLoading':\n            return {\n                ...state,\n                isLoading: action.payload,\n            };\n        case 'updateResult':\n            return {\n                ...state,\n                result: action.payload,\n            };\n        default:\n            return INITIAL_STATE;\n    }\n};\n\nfunction RegistrationDetails({ match: { params } }) {\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n    const { setCurrentThemeSettings } = useContext(ThemeSettingsContext);\n    const { currentSelectedContact } = useContext(PortalUserContext);\n\n    useEffect(() => {\n        if (currentSelectedContact.id) {\n            (function() {\n                ParticipantProjectAPI.show(params.id)\n                    .then(payload => {\n                        dispatch({\n                            type: 'updateResult',\n                            payload: payload.data.data,\n                        });\n                        setCurrentThemeSettings(payload.data.data.basicInformation.portalSettingsLayoutAssigned);\n                        setIsLoading(false);\n                    })\n                    .catch(() => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setIsLoading(false);\n                    });\n            })();\n        }\n    }, [params.id, currentSelectedContact]);\n\n    function setIsLoading(isLoading) {\n        dispatch({\n            type: 'updateIsLoading',\n            payload: isLoading,\n        });\n    }\n\n    return (\n        <Container className={'content-section'}>\n            {state.isLoading ? (\n                <LoadingView />\n            ) : (\n                <>\n                    <Row>\n                        <ButtonGroup aria-label=\"current-participations\" className=\"w-button-group-left\">\n                            <Link to={`/inschrijvingen-projecten`}>\n                                <Button className={'w-button'} size=\"sm\">\n                                    Huidige deelnames\n                                </Button>\n                            </Link>\n                        </ButtonGroup>\n                    </Row>\n                    <RegistrationDetailsTitle {...state.result.basicInformation} />\n                    {state.result.length === 0 ? (\n                        <Row>\n                            <Col>Geen huidige deelname aanwezig.</Col>\n                        </Row>\n                    ) : (\n                        <>\n                            <RegistrationDetailsProjectTable fields={state.result.fields} />\n                            <RegistrationDetailsMutationTable\n                                participantMutations={state.result.participantMutations}\n                            />\n                            <RegistrationDetailsDocumentTable\n                                participantId={params.id}\n                                documents={state.result.documents}\n                            />\n                        </>\n                    )}\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default RegistrationDetails;\n","import React, { useEffect, useReducer, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport LoadingView from '../../../components/general/LoadingView';\nimport ContactAPI from '../../../api/contact/ContactAPI';\nimport { PortalUserContext } from '../../../context/PortalUserContext';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Table from 'react-bootstrap/Table';\nimport { FaFileDownload } from 'react-icons/all';\nimport fileDownload from 'js-file-download';\n\nconst INITIAL_STATE = {\n    result: [],\n    isLoading: true,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'updateIsLoading':\n            return {\n                ...state,\n                isLoading: action.payload,\n            };\n        case 'updateResult':\n            return {\n                ...state,\n                result: action.payload,\n            };\n        default:\n            return INITIAL_STATE;\n    }\n};\n\nfunction FinancialOverviewDocuments() {\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n    const { currentSelectedContact } = useContext(PortalUserContext);\n\n    useEffect(\n        function() {\n            if (currentSelectedContact.id) {\n                ContactAPI.fetchContactFinancialOverviewDocuments(currentSelectedContact.id)\n                    .then(payload => {\n                        dispatch({\n                            type: 'updateResult',\n                            payload: payload.data.data,\n                        });\n                        setIsLoading(false);\n                    })\n                    .catch(() => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setIsLoading(false);\n                    });\n            }\n        },\n        [currentSelectedContact.id]\n    );\n\n    function setIsLoading(isLoading) {\n        dispatch({\n            type: 'updateIsLoading',\n            payload: isLoading,\n        });\n    }\n\n    function downloadFile(e, id) {\n        e.preventDefault();\n\n        ContactAPI.financialOverviewContactDownload(id)\n            .then(payload => {\n                fileDownload(payload.data, payload.headers['x-filename']);\n            })\n            .catch(() => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                setIsLoading(false);\n            });\n    }\n\n    return (\n        <Container className={'content-section'}>\n            {state.isLoading ? (\n                <LoadingView />\n            ) : (\n                <>\n                    <Row>\n                        <Col>\n                            <h1 className=\"content-heading mt-0\">Waardestaat documenten</h1>\n                        </Col>\n                    </Row>\n                    {state.result.length === 0 ? (\n                        <Row>\n                            <Col>Geen waardestaat documenten aanwezig om te tonen.</Col>\n                        </Row>\n                    ) : (\n                        <Table>\n                            <thead>\n                                <tr>\n                                    <th>Naam</th>\n                                    <th>Omschrijving</th>\n                                    <th>Downloaden</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {state.result.map(item => (\n                                    <tr key={item.id}>\n                                        <td>{item.name}</td>\n                                        <td>{item.description}</td>\n                                        <td>\n                                            <a href=\"#\" onClick={e => downloadFile(e, item.id)}>\n                                                <FaFileDownload /> downloaden\n                                            </a>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default FinancialOverviewDocuments;\n","import axiosInstance from '../default-setup/AxiosInstance';\nimport moment from 'moment';\n\nexport default {\n    fetchAdministration: function(id) {\n        const requestUrl = `/jory/administration/${id}`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: [\n                        'id',\n                        'name',\n                        'address',\n                        'postalCode',\n                        'city',\n                        'kvkNumber',\n                        'iBAN',\n                        'ibanAttn',\n                        'btwNumber',\n                        'website',\n                        'email',\n                    ],\n                    rlt: {\n                        country: { fld: ['name'] },\n                        documentsOnPortal: { fld: ['id', 'filename', 'description'] },\n                    },\n                },\n            },\n        });\n    },\n    documentDownload: function(administrationId, id) {\n        const requestUrl = `/administration/${administrationId}/document/${id}/download`;\n\n        return axiosInstance.get(requestUrl, { responseType: 'blob' });\n    },\n};\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { FaFileDownload } from 'react-icons/all';\nimport fileDownload from 'js-file-download';\nimport AdministrationAPI from '../../../../api/administration/AdministrationAPI';\n\nfunction AboutUsDocumentTable({ administrationId, documents }) {\n    function downloadFile(e, id, filename) {\n        e.preventDefault();\n\n        AdministrationAPI.documentDownload(administrationId, id)\n            .then(payload => {\n                fileDownload(payload.data, filename);\n            })\n            .catch(() => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n            });\n    }\n\n    if (documents && documents.length !== 0) {\n        return (\n            <>\n                <Row>\n                    <Col>\n                        <div className=\"content-subheading\">Documenten</div>\n                    </Col>\n                </Row>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Naam</th>\n                            <th>Omschrijving</th>\n                            <th>Downloaden</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {documents.map(item => (\n                            <tr key={item.id}>\n                                <td>{item.filename}</td>\n                                <td>{item.description}</td>\n                                <td>\n                                    <a href=\"#\" onClick={e => downloadFile(e, item.id, item.filename)}>\n                                        <FaFileDownload /> downloaden\n                                    </a>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </>\n        );\n    }\n\n    return null;\n}\n\nexport default AboutUsDocumentTable;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport LoadingView from '../../../components/general/LoadingView';\nimport { PortalUserContext } from '../../../context/PortalUserContext';\nimport { Card, Table } from 'react-bootstrap';\nimport AdministrationAPI from '../../../api/administration/AdministrationAPI';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport AboutUsDocumentTable from './document-table';\n\nfunction AboutUsAdministration({ match }) {\n    const { currentSelectedContact } = useContext(PortalUserContext);\n    const [administration, setAdministration] = useState({});\n    const [websiteLink, setWebsiteLink] = useState(null);\n    const [isLoading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if (currentSelectedContact.id) {\n            (function callFetchAdministration() {\n                setLoading(true);\n                // console.log(match);\n                AdministrationAPI.fetchAdministration(match.params.id)\n                    .then(payload => {\n                        setAdministration(payload.data.data);\n                        setLoading(false);\n                    })\n                    .catch(error => {\n                        alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                        setLoading(false);\n                    });\n            })();\n        }\n    }, [match, currentSelectedContact]);\n\n    useEffect(() => {\n        if (administration.id && administration.website) {\n            if (\n                administration.website.toLowerCase().startsWith('http') ||\n                administration.website.toLowerCase().startsWith('https')\n            ) {\n                setWebsiteLink(administration.website);\n            } else {\n                setWebsiteLink('https://' + administration.website);\n            }\n        }\n    }, [administration]);\n\n    return (\n        <Container className={'content-section'}>\n            {isLoading ? (\n                <LoadingView />\n            ) : (\n                <>\n                    <Row>\n                        <ButtonGroup aria-label=\"about-us\" className=\"w-button-group-left\">\n                            <Link to={`/over-ons`}>\n                                <Button className={'w-button'} size=\"sm\">\n                                    Over ons\n                                </Button>\n                            </Link>\n                        </ButtonGroup>\n                    </Row>\n                    <Row className={'justify-content-center align-content-center flex-wrap'}>\n                        <Col xs={12} lg={6} className={'mb-3'}>\n                            <Card>\n                                <Card.Header className={'card-header_title'}>\n                                    Informatie over {administration.name}\n                                </Card.Header>\n                                <Card.Body>\n                                    <Table responsive>\n                                        <tbody>\n                                            <tr>\n                                                <td>\n                                                    <strong>Naam</strong>\n                                                </td>\n                                                <td>{administration.name}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>Adres</strong>\n                                                </td>\n                                                <td>{administration.address}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>Postcode / Plaats</strong>\n                                                </td>\n                                                <td>\n                                                    {administration.postalCode} {administration.city}\n                                                </td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>Kvk</strong>\n                                                </td>\n                                                <td>{administration.kvkNumber}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>Website</strong>\n                                                </td>\n                                                <td>\n                                                    {administration.website && (\n                                                        <a href={websiteLink} target=\"_blank\">\n                                                            <button className=\"w-button btn btn-primary btn-sm\">\n                                                                {administration.website}\n                                                            </button>\n                                                        </a>\n                                                    )}\n                                                </td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>E-mail</strong>\n                                                </td>\n                                                <td>{administration.email}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>IBAN</strong>\n                                                </td>\n                                                <td>{administration.iBAN}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>IBAN t.n.v.</strong>\n                                                </td>\n                                                <td>{administration.ibanAttn}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>\n                                                    <strong>BTW nummer</strong>\n                                                </td>\n                                                <td>{administration.btwNumber}</td>\n                                            </tr>\n                                        </tbody>\n                                    </Table>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    <AboutUsDocumentTable\n                        administrationId={match.params.id}\n                        documents={administration.documentsOnPortal}\n                    />\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default AboutUsAdministration;\n","import axiosInstance from '../default-setup/AxiosInstance';\n\nexport default {\n    fetchByCode: code => {\n        const requestUrl = `/jory/participant-mutation`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    flt: {\n                        f: 'code',\n                        d: code,\n                    },\n                    fld: ['econobisPaymentLink', 'isPaidByMollie'],\n                    rlt: {\n                        participation: {\n                            rlt: {\n                                project: {\n                                    fld: ['name', 'textRegistrationFinished'],\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        });\n    },\n};\n","import React, {useEffect, useState} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ParticipantMutationAPI from '../../../api/participant-mutation/ParticipantMutationAPI';\nimport LoadingView from '../../../components/general/LoadingView';\nimport {PortalUserConsumer} from '../../../context/PortalUserContext';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport {Link} from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\n\nfunction ProjectMollieRedirect({match, currentSelectedContact}) {\n    const [participantMutation, setParticipantMutation] = useState({});\n    const [isLoading, setLoading] = useState(true);\n\n    const handlePaymentRetry = () => {\n        window.location.href = participantMutation.econobisPaymentLink;\n    }\n\n    useEffect(() => {\n        (function fetchContactAndProject() {\n            setLoading(true);\n\n            axios\n                .all([\n                    ParticipantMutationAPI.fetchByCode(match.params.code),\n                ])\n                .then(\n                    axios.spread((payloadParticipantMutation) => {\n                        if(payloadParticipantMutation.data.data.length !== 1){\n                            alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                            setLoading(false);\n                            return;\n                        }\n\n                        setParticipantMutation(payloadParticipantMutation.data.data[0]);\n                        setLoading(false);\n                    })\n                )\n                .catch(error => {\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n                    setLoading(false);\n                });\n        })();\n    }, [match]);\n\n    return (\n        <Container className={'content-section'}>\n            {isLoading ? (\n                <LoadingView/>\n            ) : (\n                <>\n                    <Row className={'mb-4'}>\n                        <Col>\n                            <h1 className=\"content-heading\">\n                                {\n                                    participantMutation.isPaidByMollie ? (\n                                        <>Ingeschreven voor\n                                            project <strong>{participantMutation.participation.project.name}</strong></>\n                                    ) : (\n                                        <>Betaling voor\n                                            project <strong>{participantMutation.participation.project.name}</strong> nog\n                                            niet gelukt.</>\n                                    )\n                                }\n\n                            </h1>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={10}>\n                            {participantMutation.isPaidByMollie ? (\n                                <>\n                                    <p>\n                                        { participantMutation.participation.project.textRegistrationFinished.split('\\n').map((item, key) => {\n                                            return <span key={key}>{item}<br/></span>\n                                        }) }\n                                    </p>\n                                </>\n                            ) : (\n                                <>\n                                    <p>\n                                        Uw inschrijving kon nog niet worden afgerond doordat de betaling niet is gelukt,\n                                        gebruik onderstaande betaal button om de betaling alsnog uit te voeren.</p>\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={10}>\n                            <ButtonGroup className=\"float-right\">\n                                <Link to={`/inschrijvingen-projecten`}>\n                                    <Button className={'w-button'} size=\"sm\">\n                                        Naar mijn huidige deelnames\n                                    </Button>\n                                </Link>\n                                {!participantMutation.isPaidByMollie && (\n                                    <Button className={'w-button'} size=\"sm\" onClick={handlePaymentRetry}>\n                                        Betalen\n                                    </Button>\n                                )}\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default function ProjectMollieRedirectWithContext(props) {\n    return (\n        <PortalUserConsumer>\n            {({currentSelectedContact}) => (\n                <ProjectMollieRedirect {...props} currentSelectedContact={currentSelectedContact}/>\n            )}\n        </PortalUserConsumer>\n    );\n}\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchAll: function() {\r\n        return axiosInstance.get('me/quotation-request');\r\n    },\r\n\r\n    fetchById: function(id) {\r\n        return axiosInstance.get('quotation-request/' + id);\r\n    },\r\n\r\n    fetchQuotationRequestStatus: function(opportunityActionId) {\r\n        const requestUrl = `jory/quotation-request-status`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: ['id', 'name', 'codeRef', 'opportunityActionId', 'order'],\r\n                    flt: {\r\n                        f: 'opportunityActionId',\r\n                        d: opportunityActionId,\r\n                    },\r\n                    sorts: ['order'],\r\n                },\r\n            },\r\n        });\r\n    },\r\n\r\n    update: function(quotationRequest) {\r\n        return axiosInstance.post('quotation-request/' + quotationRequest.id, quotationRequest);\r\n    },\r\n\r\n    quotationRequestDownloadDocument: function(quotationRequestId, id) {\r\n        const requestUrl = `quotation-request/${quotationRequestId}/document/${id}/download`;\r\n\r\n        return axiosInstance.get(requestUrl, { responseType: 'blob' });\r\n    },\r\n};\r\n","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchOpportunityStatus: () => {\r\n        const requestUrl = `jory/opportunity-status`;\r\n\r\n        return axiosInstance.get(requestUrl, {\r\n            params: {\r\n                jory: {\r\n                    fld: ['id', 'name', 'active'],\r\n                },\r\n            },\r\n        });\r\n    },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\nimport QuotationRequestAPI from '../../../api/quotation-request/QuotationRequestAPI';\r\nimport OpportunityStatusAPI from \"../../../api/opportunity-status/OpportunityStatusAPI\";\r\nimport {get} from \"lodash\";\r\n\r\nfunction Inspectlist(props) {\r\n    const [quotationRequestsArray, setQuotationRequestsArray] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [statuses, setStatuses] = useState([]);\r\n    const [statusFilter, setStatusFilter] = useState('');\r\n\r\n    useEffect(() => {\r\n        QuotationRequestAPI.fetchAll(props.user.id).then(response => {\r\n            setQuotationRequestsArray(response.data);\r\n\r\n            setIsLoading(false);\r\n        });\r\n\r\n        OpportunityStatusAPI.fetchOpportunityStatus()\r\n            .then(payload => {\r\n                setStatuses(payload.data.data);\r\n            });\r\n    }, [props.user]);\r\n\r\n    const getFilteredQuotationRequests = () => {\r\n        if (statusFilter) {\r\n            return quotationRequestsArray.filter(quotationRequest => {\r\n                return quotationRequest.opportunity.status.id === parseInt(statusFilter);\r\n            });\r\n        }\r\n\r\n        return quotationRequestsArray;\r\n    }\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"content-heading\">Overzicht buurtaanpak</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    {isLoading ? (\r\n                        <LoadingView />\r\n                    ) : quotationRequestsArray.length === 0 ? (\r\n                        'Geen gegevens beschikbaar.'\r\n                    ) : (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Naam</th>\r\n                                    <th>Adres</th>\r\n                                    <th>Status</th>\r\n                                    <th>Datum afspraak</th>\r\n                                    <th>Datum opname</th>\r\n                                    <th>Akkoord projectleider</th>\r\n                                    <th>Datum uitgebracht</th>\r\n                                    <th>Akkoord bewoner</th>\r\n                                    <th>Datum akkoord extern</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th colSpan={2}></th>\r\n                                    <th colSpan={1}>\r\n                                        <select\r\n                                            className=\"select-field w-select content\"\r\n                                            value={statusFilter}\r\n                                            onChange={e => setStatusFilter(e.target.value)}\r\n                                            style={{width: '150px'}}\r\n                                        >\r\n                                            <option/>\r\n                                            {statuses.filter(status => {\r\n                                                return status.active;\r\n                                            }).map(option => {\r\n                                                return (\r\n                                                    <option key={option.id} value={option.id}>\r\n                                                        {option.name}\r\n                                                    </option>\r\n                                                );\r\n                                            })}\r\n                                        </select>\r\n                                    </th>\r\n                                    <th colSpan={6}></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {getFilteredQuotationRequests().map(quotationRequest => (\r\n                                    <tr key={quotationRequest.id}>\r\n                                        <td>{quotationRequest.opportunity.intake.contact.fullName}</td>\r\n                                        <td>\r\n                                            <Link to={`/schouwen/${quotationRequest.id}`}>\r\n                                                {quotationRequest.opportunity.intake.address.streetPostalCodeCity}\r\n                                            </Link>\r\n                                        </td>\r\n                                        <td>{quotationRequest.opportunity.status.name}</td>\r\n                                        <td>\r\n                                            {quotationRequest.datePlanned\r\n                                                ? moment(quotationRequest.datePlanned).format('L HH:mm')\r\n                                                : ''}\r\n                                        </td>\r\n                                        <td>\r\n                                            {quotationRequest.dateRecorded\r\n                                                ? moment(quotationRequest.dateRecorded).format('L HH:mm')\r\n                                                : ''}\r\n                                        </td>\r\n                                        <td>\r\n                                            {quotationRequest.dateApprovedProjectManager\r\n                                                ? moment(quotationRequest.dateApprovedProjectManager).format('L')\r\n                                                : ''}\r\n                                        </td>\r\n                                        <td>\r\n                                            {quotationRequest.dateReleased\r\n                                                ? moment(quotationRequest.dateReleased).format('L HH:mm')\r\n                                                : ''}\r\n                                        </td>\r\n                                        <td>\r\n                                            {quotationRequest.dateApprovedClient\r\n                                                ? moment(quotationRequest.dateApprovedClient).format('L')\r\n                                                : ''}\r\n                                        </td>\r\n                                        <td>\r\n                                            {quotationRequest.dateApprovedExternal\r\n                                                ? moment(quotationRequest.dateApprovedExternal).format('L')\r\n                                                : ''}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function InspectlistWithContext(props) {\r\n    return <PortalUserConsumer>{({ user }) => <Inspectlist {...props} user={user} />}</PortalUserConsumer>;\r\n}\r\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { FaFileDownload, FiZoomIn } from 'react-icons/all';\nimport fileDownload from 'js-file-download';\nimport QuotationRequestAPI from '../../../../api/quotation-request/QuotationRequestAPI';\n\nfunction InspectDetailsDocumentTable({ quotationRequestId, documents, previewDocument }) {\n    function downloadFile(e, id, filename) {\n        e.preventDefault();\n\n        QuotationRequestAPI.quotationRequestDownloadDocument(quotationRequestId, id)\n            .then(payload => {\n                fileDownload(payload.data, filename);\n            })\n            .catch(() => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n            });\n    }\n\n    if (documents && documents.length !== 0) {\n        return (\n            <>\n                <Row>\n                    <Col>\n                        <div className=\"content-subheading\">Documenten</div>\n                    </Col>\n                </Row>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Naam</th>\n                            <th>Omschrijving</th>\n                            <th>Downloaden</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {documents.map(item => (\n                            <tr key={item.id}>\n                                <td>{item.filename}</td>\n                                <td>{item.description}</td>\n                                <td>\n                                    {item.filename && item.filename.toLowerCase().endsWith('.pdf') ? (\n                                        <>\n                                            <a href=\"#\" onClick={e => previewDocument(e, item.id)}>\n                                                <FiZoomIn /> preview\n                                            </a>\n                                            <br />\n                                        </>\n                                    ) : null}\n                                    <a href=\"#\" onClick={e => downloadFile(e, item.id, item.filename)}>\n                                        <FaFileDownload /> downloaden\n                                    </a>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </>\n        );\n    }\n\n    return null;\n}\n\nexport default InspectDetailsDocumentTable;\n","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport LoadingView from '../../../components/general/LoadingView';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport * as Yup from 'yup';\r\nimport QuotationRequestAPI from '../../../api/quotation-request/QuotationRequestAPI';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport InputTextDate from '../../../components/form/InputTextDate';\r\nimport InspectDetailsDocumentTable from './document-table';\r\nimport { PortalUserConsumer } from '../../../context/PortalUserContext';\r\nimport Select from '../../../components/form/Select';\r\nimport moment from 'moment/moment';\r\n\r\nfunction InspectDetails({ match, history, user }) {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [initialQuotationRequest, setInitialQuotationRequest] = useState({});\r\n    const [statuses, setStatuses] = useState([]);\r\n    const [underReview, setUnderReview] = useState(false);\r\n    const [approved, setApproved] = useState(false);\r\n    const [notApproved, setNotApproved] = useState(false);\r\n    const [pmApproved, setPmApproved] = useState(false);\r\n    const [pmNotApproved, setPmNotApproved] = useState(false);\r\n\r\n    const validationSchema = Yup.object().shape({});\r\n\r\n    const handleSubmit = (values, actions) => {\r\n        QuotationRequestAPI.update({\r\n            id: match.params.id,\r\n            dateRecorded: values.dateRecorded,\r\n            datePlanned: values.datePlanned,\r\n            dateReleased: values.dateReleased,\r\n            dateApprovedProjectManager: values.dateApprovedProjectManager,\r\n            dateApprovedExternal: values.dateApprovedExternal,\r\n            opportunityStatusId: values.opportunity.status.id,\r\n            opportunityActionId: values.opportunityAction.id,\r\n            externalpartyNote: values.externalpartyNote,\r\n            quotationText: values.quotationText,\r\n            statusId: values.status.id,\r\n            dateUnderReview: values.dateUnderReview,\r\n        }).then(response => {\r\n            history.push('/schouwen');\r\n        });\r\n    };\r\n\r\n    const previewDocument = (event, documentId) => {\r\n        event.preventDefault();\r\n        history.push(`/schouwen/${match.params.id}/document/${documentId}`);\r\n    };\r\n\r\n    useEffect(() => {\r\n        QuotationRequestAPI.fetchById(match.params.id).then(response => {\r\n            setInitialQuotationRequest(response.data);\r\n            QuotationRequestAPI.fetchQuotationRequestStatus(response.data.opportunityAction.id).then(payload => {\r\n                setStatuses(payload.data.data);\r\n            });\r\n            setLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    const getStatusOptions = () => {\r\n        return statuses.map(status => {\r\n            return {\r\n                id: status.id,\r\n                name: initialQuotationRequest?.opportunityAction.name + ' - ' + status.name,\r\n            };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Container className={'content-section'}>\r\n            {isLoading ? (\r\n                <LoadingView />\r\n            ) : (\r\n                <>\r\n                    <div>\r\n                        <Formik\r\n                            initialValues={initialQuotationRequest}\r\n                            enableReinitialize={true}\r\n                            validationSchema={validationSchema}\r\n                            onSubmit={handleSubmit}\r\n                            render={({\r\n                                errors,\r\n                                touched,\r\n                                setFieldValue,\r\n                                isSubmitting,\r\n                                status,\r\n                                values,\r\n                                handleSubmit,\r\n                            }) => {\r\n                                return (\r\n                                    <Form>\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <FormLabel className={'field-label'}>Naam</FormLabel>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={`text-input w-input content`}\r\n                                                    value={initialQuotationRequest.opportunity.intake.contact.fullName}\r\n                                                    readOnly={true}\r\n                                                />\r\n                                                <FormLabel className={'field-label'}>Adres</FormLabel>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={`text-input w-input content`}\r\n                                                    value={\r\n                                                        initialQuotationRequest.opportunity.intake.address\r\n                                                            .streetPostalCodeCity\r\n                                                    }\r\n                                                    readOnly={true}\r\n                                                />\r\n                                                <FormLabel className={'field-label'}>Telefoon</FormLabel>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={`text-input w-input content`}\r\n                                                    value={\r\n                                                        initialQuotationRequest.opportunity.intake.contact\r\n                                                            .primaryphoneNumber\r\n                                                    }\r\n                                                    readOnly={true}\r\n                                                />\r\n                                                <FormLabel className={'field-label'}>Email</FormLabel>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={`text-input w-input content`}\r\n                                                    value={\r\n                                                        initialQuotationRequest.opportunity.intake.contact\r\n                                                            .primaryEmailAddress\r\n                                                    }\r\n                                                    readOnly={true}\r\n                                                />\r\n                                                <FormLabel className={'field-label'}>Status</FormLabel>\r\n                                                {user.inspectionPersonTypeId === 'coach' ? (\r\n                                                    <Field\r\n                                                        name=\"status.id\"\r\n                                                        render={({ field }) => (\r\n                                                            <Select\r\n                                                                name=\"status.id\"\r\n                                                                field={field}\r\n                                                                errors={errors}\r\n                                                                touched={touched}\r\n                                                                id=\"status_id\"\r\n                                                                placeholder={'Status'}\r\n                                                                options={getStatusOptions()}\r\n                                                                emptyOption={false}\r\n                                                            />\r\n                                                        )}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={`text-input w-input content`}\r\n                                                        value={\r\n                                                            initialQuotationRequest.opportunityAction.name +\r\n                                                            ' - ' +\r\n                                                            initialQuotationRequest.status.name\r\n                                                        }\r\n                                                        readOnly={true}\r\n                                                    />\r\n                                                )}\r\n                                                {user.inspectionPersonTypeId === 'externalparty' ? (\r\n                                                    <>\r\n                                                        <FormLabel className={'field-label'}>Omschrijving</FormLabel>\r\n                                                        {initialQuotationRequest.quotationText}\r\n                                                    </>\r\n                                                ) : user.inspectionPersonTypeId === 'projectmanager' ? (\r\n                                                    <>\r\n                                                        <FormLabel className={'field-label'}>Omschrijving</FormLabel>\r\n                                                        <Field\r\n                                                            name=\"quotationText\"\r\n                                                            component=\"textarea\"\r\n                                                            className=\"form-control input-sm mb-2\"\r\n                                                        />\r\n                                                    </>\r\n                                                ) : null}\r\n                                                {user.inspectionPersonTypeId === 'coach' ||\r\n                                                initialQuotationRequest.opportunityAction.codeRef === 'visit' ? (\r\n                                                    <>\r\n                                                        <FormLabel htmlFor=\"date_planned\" className={'field-label'}>\r\n                                                            Datum afspraak\r\n                                                        </FormLabel>\r\n                                                        <Field\r\n                                                            name=\"datePlanned\"\r\n                                                            render={({ field }) => (\r\n                                                                <InputTextDate\r\n                                                                    name=\"datePlanned\"\r\n                                                                    field={field}\r\n                                                                    type=\"datetime-local\"\r\n                                                                    errors={errors}\r\n                                                                    touched={touched}\r\n                                                                    onChangeAction={setFieldValue}\r\n                                                                    id=\"date_planned\"\r\n                                                                    placeholder={'Datum afspraak'}\r\n                                                                    step=\"900\"\r\n                                                                />\r\n                                                            )}\r\n                                                        />\r\n                                                    </>\r\n                                                ) : null}\r\n                                                {(user.inspectionPersonTypeId === 'coach' &&\r\n                                                    initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                        'quotation-request') ||\r\n                                                initialQuotationRequest.opportunityAction.codeRef === 'visit' ? (\r\n                                                    <>\r\n                                                        <FormLabel htmlFor=\"date_recorded\" className={'field-label'}>\r\n                                                            Datum opname\r\n                                                        </FormLabel>\r\n                                                        <Field\r\n                                                            name=\"dateRecorded\"\r\n                                                            render={({ field }) => (\r\n                                                                <InputTextDate\r\n                                                                    name=\"dateRecorded\"\r\n                                                                    field={field}\r\n                                                                    type=\"datetime-local\"\r\n                                                                    errors={errors}\r\n                                                                    touched={touched}\r\n                                                                    onChangeAction={setFieldValue}\r\n                                                                    id=\"date_recorded\"\r\n                                                                    placeholder={'Datum opname'}\r\n                                                                    step=\"900\"\r\n                                                                />\r\n                                                            )}\r\n                                                        />\r\n                                                    </>\r\n                                                ) : null}\r\n\r\n                                                {(user.inspectionPersonTypeId === 'coach' &&\r\n                                                    initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                        'quotation-request') ||\r\n                                                (user.inspectionPersonTypeId === 'projectmanager' &&\r\n                                                    initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                        'subsidy-request') ? (\r\n                                                    <>\r\n                                                        <FormLabel htmlFor=\"date_released\" className={'field-label'}>\r\n                                                            Datum uitgebracht\r\n                                                        </FormLabel>\r\n                                                        <Field\r\n                                                            name=\"dateReleased\"\r\n                                                            render={({ field }) => (\r\n                                                                <InputTextDate\r\n                                                                    name=\"dateReleased\"\r\n                                                                    field={field}\r\n                                                                    type=\"datetime-local\"\r\n                                                                    errors={errors}\r\n                                                                    touched={touched}\r\n                                                                    onChangeAction={setFieldValue}\r\n                                                                    id=\"date_released\"\r\n                                                                    placeholder={'Datum uitgebracht'}\r\n                                                                    readOnly={user.inspectionPersonTypeId !== 'coach'}\r\n                                                                    step=\"900\"\r\n                                                                />\r\n                                                            )}\r\n                                                        />\r\n                                                    </>\r\n                                                ) : null}\r\n\r\n                                                {user.inspectionPersonTypeId === 'projectmanager' &&\r\n                                                initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                    'subsidy-request' ? (\r\n                                                    <>\r\n                                                        <FormLabel\r\n                                                            htmlFor=\"date_approved_client\"\r\n                                                            className={'field-label'}\r\n                                                        >\r\n                                                            Datum akkoord bewoner\r\n                                                        </FormLabel>\r\n                                                        <Field\r\n                                                            name=\"dateApprovedClient\"\r\n                                                            render={({ field }) => (\r\n                                                                <InputTextDate\r\n                                                                    field={field}\r\n                                                                    type=\"date\"\r\n                                                                    id=\"date_approved_client\"\r\n                                                                    placeholder={'Datum akkoord bewoner'}\r\n                                                                    readOnly={true}\r\n                                                                />\r\n                                                            )}\r\n                                                        />\r\n                                                    </>\r\n                                                ) : null}\r\n                                                {user.inspectionPersonTypeId === 'projectmanager' ? (\r\n                                                    <>\r\n                                                        {initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                        'subsidy-request' ? (\r\n                                                            <>\r\n                                                                <FormLabel\r\n                                                                    htmlFor=\"date_approved_project_manager\"\r\n                                                                    className={'field-label'}\r\n                                                                >\r\n                                                                    Datum akkoord projectleider\r\n                                                                </FormLabel>\r\n                                                                <div style={{ display: 'flex' }}>\r\n                                                                    <div>\r\n                                                                        <Field\r\n                                                                            name=\"dateApprovedProjectManager\"\r\n                                                                            render={({ field }) => (\r\n                                                                                <InputTextDate\r\n                                                                                    field={field}\r\n                                                                                    type=\"date\"\r\n                                                                                    errors={errors}\r\n                                                                                    touched={touched}\r\n                                                                                    onChangeAction={setFieldValue}\r\n                                                                                    id=\"date_approved_project_manager\"\r\n                                                                                    placeholder={\r\n                                                                                        'Datum akkoord projectleider'\r\n                                                                                    }\r\n                                                                                    readOnly={\r\n                                                                                        // pmApproved &&\r\n                                                                                        user.inspectionPersonTypeId ===\r\n                                                                                        'projectmanager'\r\n                                                                                            ? false\r\n                                                                                            : true\r\n                                                                                    }\r\n                                                                                />\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                    {user.inspectionPersonTypeId ===\r\n                                                                    'projectmanager' ? (\r\n                                                                        <div>\r\n                                                                            <Button\r\n                                                                                variant={\r\n                                                                                    pmApproved ||\r\n                                                                                    values.status?.codeRef ===\r\n                                                                                        'pm-approved'\r\n                                                                                        ? 'dark'\r\n                                                                                        : 'outline-dark'\r\n                                                                                }\r\n                                                                                size=\"sm\"\r\n                                                                                onClick={() => {\r\n                                                                                    setPmApproved(true);\r\n                                                                                    setFieldValue(\r\n                                                                                        'dateApprovedProjectManager',\r\n                                                                                        moment().format('YYYY-MM-DD')\r\n                                                                                    );\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {pmApproved ||\r\n                                                                                values.status?.codeRef === 'pm-approved'\r\n                                                                                    ? 'Goedgekeurd'\r\n                                                                                    : 'Goedkeuren'}\r\n                                                                            </Button>\r\n                                                                            <Button\r\n                                                                                variant={\r\n                                                                                    pmNotApproved ||\r\n                                                                                    values.status?.codeRef ===\r\n                                                                                        'pm-not-approved'\r\n                                                                                        ? 'dark'\r\n                                                                                        : 'outline-dark'\r\n                                                                                }\r\n                                                                                size=\"sm\"\r\n                                                                                onClick={() => {\r\n                                                                                    setPmNotApproved(true);\r\n                                                                                    setFieldValue(\r\n                                                                                        'dateApprovedProjectManager',\r\n                                                                                        ''\r\n                                                                                    );\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {pmNotApproved ||\r\n                                                                                values.status?.codeRef ===\r\n                                                                                    'pm-not-approved'\r\n                                                                                    ? 'Afgekeurd'\r\n                                                                                    : 'Niet Goedkeuren'}\r\n                                                                            </Button>\r\n                                                                        </div>\r\n                                                                    ) : null}\r\n                                                                </div>\r\n                                                            </>\r\n                                                        ) : null}\r\n                                                    </>\r\n                                                ) : null}\r\n                                                {user.inspectionPersonTypeId === 'projectmanager' ||\r\n                                                user.inspectionPersonTypeId === 'externalparty' ? (\r\n                                                    <>\r\n                                                        {initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                            'quotation-request' ||\r\n                                                        initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                            'subsidy-request' ? (\r\n                                                            <>\r\n                                                                <FormLabel\r\n                                                                    htmlFor=\"date_under_review\"\r\n                                                                    className={'field-label'}\r\n                                                                >\r\n                                                                    Datum in behandeling\r\n                                                                </FormLabel>\r\n                                                                <div style={{ display: 'flex' }}>\r\n                                                                    <div>\r\n                                                                        <Field\r\n                                                                            name=\"dateUnderReview\"\r\n                                                                            render={({ field }) => (\r\n                                                                                <InputTextDate\r\n                                                                                    field={field}\r\n                                                                                    type=\"date\"\r\n                                                                                    errors={errors}\r\n                                                                                    touched={touched}\r\n                                                                                    onChangeAction={setFieldValue}\r\n                                                                                    id=\"date_under_review\"\r\n                                                                                    placeholder={'Datum in behandeling'}\r\n                                                                                    readOnly={\r\n                                                                                        user.inspectionPersonTypeId !==\r\n                                                                                            'projectmanager' &&\r\n                                                                                        (underReview ||\r\n                                                                                            values.status?.codeRef ===\r\n                                                                                                'under-review')\r\n                                                                                            ? false\r\n                                                                                            : true\r\n                                                                                    }\r\n                                                                                />\r\n                                                                            )}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                    {user.inspectionPersonTypeId === 'externalparty' ? (\r\n                                                                        <div>\r\n                                                                            <Button\r\n                                                                                variant={\r\n                                                                                    underReview ||\r\n                                                                                    values.status?.codeRef ===\r\n                                                                                        'under-review'\r\n                                                                                        ? 'dark'\r\n                                                                                        : 'outline-dark'\r\n                                                                                }\r\n                                                                                size=\"sm\"\r\n                                                                                onClick={() => {\r\n                                                                                    setUnderReview(true);\r\n                                                                                    setFieldValue(\r\n                                                                                        'dateUnderReview',\r\n                                                                                        moment().format('YYYY-MM-DD')\r\n                                                                                    );\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {underReview ||\r\n                                                                                values.status?.codeRef ===\r\n                                                                                    'under-review'\r\n                                                                                    ? 'In behandeling'\r\n                                                                                    : 'In behandeling nemen'}\r\n                                                                            </Button>\r\n                                                                        </div>\r\n                                                                    ) : null}\r\n                                                                </div>\r\n                                                            </>\r\n                                                        ) : null}\r\n                                                    </>\r\n                                                ) : null}\r\n                                                {(user.inspectionPersonTypeId === 'coach' &&\r\n                                                    initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                        'quotation-request') ||\r\n                                                (user.inspectionPersonTypeId === 'projectmananger' &&\r\n                                                    initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                        'subsidy-request') ||\r\n                                                (user.inspectionPersonTypeId === 'externalparty' &&\r\n                                                    initialQuotationRequest.opportunityAction.codeRef !== 'visit') ? (\r\n                                                    <>\r\n                                                        <FormLabel\r\n                                                            htmlFor=\"date_approved_external\"\r\n                                                            className={'field-label'}\r\n                                                        >\r\n                                                            Datum akkoord extern\r\n                                                        </FormLabel>\r\n                                                        <div style={{ display: 'flex' }}>\r\n                                                            <div>\r\n                                                                <Field\r\n                                                                    name=\"dateApprovedExternal\"\r\n                                                                    render={({ field }) => (\r\n                                                                        <InputTextDate\r\n                                                                            field={field}\r\n                                                                            type=\"date\"\r\n                                                                            errors={errors}\r\n                                                                            touched={touched}\r\n                                                                            onChangeAction={setFieldValue}\r\n                                                                            id=\"date_approved_external\"\r\n                                                                            placeholder={'Datum akkoord extern'}\r\n                                                                            readOnly={\r\n                                                                                ((user.inspectionPersonTypeId ===\r\n                                                                                    'coach' &&\r\n                                                                                    initialQuotationRequest\r\n                                                                                        .opportunityAction.codeRef ===\r\n                                                                                        'quotation-request') ||\r\n                                                                                    (user.inspectionPersonTypeId ===\r\n                                                                                        'externalparty' &&\r\n                                                                                        initialQuotationRequest\r\n                                                                                            .opportunityAction\r\n                                                                                            .codeRef !== 'visit')) &&\r\n                                                                                (approved ||\r\n                                                                                    values.status?.codeRef ===\r\n                                                                                        'approved')\r\n                                                                                    ? false\r\n                                                                                    : true\r\n                                                                            }\r\n                                                                        />\r\n                                                                    )}\r\n                                                                />\r\n                                                            </div>\r\n                                                            {user.inspectionPersonTypeId === 'externalparty' ? (\r\n                                                                <div>\r\n                                                                    <Button\r\n                                                                        variant={\r\n                                                                            approved ||\r\n                                                                            values.status?.codeRef === 'approved'\r\n                                                                                ? 'dark'\r\n                                                                                : 'outline-dark'\r\n                                                                        }\r\n                                                                        size=\"sm\"\r\n                                                                        onClick={() => {\r\n                                                                            setApproved(true);\r\n                                                                            setFieldValue(\r\n                                                                                'dateApprovedExternal',\r\n                                                                                moment().format('YYYY-MM-DD')\r\n                                                                            );\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {approved ||\r\n                                                                        values.status?.codeRef === 'approved'\r\n                                                                            ? 'Goedgekeurd'\r\n                                                                            : 'Goedkeuren'}\r\n                                                                    </Button>\r\n\r\n                                                                    <Button\r\n                                                                        variant={\r\n                                                                            notApproved ||\r\n                                                                            values.status?.codeRef === 'not-approved'\r\n                                                                                ? 'dark'\r\n                                                                                : 'outline-dark'\r\n                                                                        }\r\n                                                                        size=\"sm\"\r\n                                                                        onClick={() => {\r\n                                                                            setNotApproved(true);\r\n                                                                            setFieldValue('dateApprovedExternal', '');\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {notApproved ||\r\n                                                                        values.status?.codeRef === 'not-approved'\r\n                                                                            ? 'Afgekeurd'\r\n                                                                            : 'Niet Goedkeuren'}\r\n                                                                    </Button>\r\n                                                                </div>\r\n                                                            ) : null}\r\n                                                        </div>\r\n                                                    </>\r\n                                                ) : null}\r\n\r\n                                                {user.inspectionPersonTypeId === 'externalparty' &&\r\n                                                (initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                    'quotation-request' ||\r\n                                                    initialQuotationRequest.opportunityAction.codeRef ===\r\n                                                        'subsidy-request') ? (\r\n                                                    <>\r\n                                                        <FormLabel className={'field-label'}>Opmerkingen</FormLabel>\r\n                                                        <Field\r\n                                                            name=\"externalpartyNote\"\r\n                                                            component=\"textarea\"\r\n                                                            className=\"form-control input-sm mb-2\"\r\n                                                        />\r\n                                                    </>\r\n                                                ) : null}\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <ButtonGroup className=\"float-right\">\r\n                                                    <Button\r\n                                                        variant={'outline-dark'}\r\n                                                        size=\"sm\"\r\n                                                        onClick={function() {\r\n                                                            history.push(`/schouwen`);\r\n                                                        }}\r\n                                                    >\r\n                                                        Annuleren\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        className={'w-button'}\r\n                                                        size=\"sm\"\r\n                                                        onClick={handleSubmit}\r\n                                                        disabled={isSubmitting}\r\n                                                    >\r\n                                                        {isSubmitting ? (\r\n                                                            <span>\r\n                                                                <ClipLoader color={'white'} size={14} />\r\n                                                                Bezig met opslaan\r\n                                                            </span>\r\n                                                        ) : (\r\n                                                            'Opslaan'\r\n                                                        )}\r\n                                                    </Button>\r\n                                                </ButtonGroup>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Form>\r\n                                );\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <InspectDetailsDocumentTable\r\n                        quotationRequestId={match.params.id}\r\n                        documents={initialQuotationRequest.documents}\r\n                        previewDocument={previewDocument}\r\n                    />\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default function InspectDetailsWithContext(props) {\r\n    return <PortalUserConsumer>{({ user }) => <InspectDetails {...props} user={user} />}</PortalUserConsumer>;\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * Gekopieerd van deprecated package\r\n * @see https://github.com/mcjohnalds/react-table-drag-select\r\n *\r\n * Hebben wat dingen moeten tweaken om het werkend te maken specifiek voor ContactAvailability (toevoeging header row).\r\n * Voor gebruik op andere plekken is het waarschijnlijk beter om weer aparte kopie van het origineel te maken ipv deze generiek te gebruiken.\r\n */\r\nexport default class TableDragSelect extends React.Component {\r\n    static propTypes = {\r\n        value: props => {\r\n            const error = new Error(\r\n                \"Invalid prop `value` supplied to `TableDragSelect`. Validation failed.\"\r\n            );\r\n            if (!Array.isArray(props.value)) {\r\n                return error;\r\n            }\r\n            if (props.value.length === 0) {\r\n                return;\r\n            }\r\n            const columnCount = props.value[0].length;\r\n            for (const row of props.value) {\r\n                if (!Array.isArray(row) || row.length !== columnCount) {\r\n                    return error;\r\n                }\r\n                for (const cell of row) {\r\n                    if (typeof cell !== \"boolean\") {\r\n                        return error;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        maxRows: PropTypes.number,\r\n        maxColumns: PropTypes.number,\r\n        onSelectionStart: PropTypes.func,\r\n        onInput: PropTypes.func,\r\n        onChange: PropTypes.func,\r\n        children: props => {\r\n            if (TableDragSelect.propTypes.value(props)) {\r\n                return; // Let error be handled elsewhere\r\n            }\r\n            const error = new Error(\r\n                \"Invalid prop `children` supplied to `TableDragSelect`. Validation failed.\"\r\n            );\r\n            const trs = React.Children.toArray(props.children);\r\n            const rowCount = props.value.length;\r\n            const columnCount = props.value.length === 0 ? 0 : props.value[0].length;\r\n            if (trs.length !== rowCount) {\r\n                return error;\r\n            }\r\n            for (const tr of trs) {\r\n                const tds = React.Children.toArray(tr.props.children);\r\n                if (tr.type !== \"tr\" || tds.length !== columnCount) {\r\n                    return error;\r\n                }\r\n                for (const td of tds) {\r\n                    if (td.type !== \"td\") {\r\n                        return error;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    static defaultProps = {\r\n        value: [],\r\n        maxRows: Infinity,\r\n        maxColumns: Infinity,\r\n        onSelectionStart: () => {\r\n        },\r\n        onInput: () => {\r\n        },\r\n        onChange: () => {\r\n        }\r\n    };\r\n\r\n    state = {\r\n        selectionStarted: false,\r\n        startRow: null,\r\n        startColumn: null,\r\n        endRow: null,\r\n        endColumn: null,\r\n        addMode: null\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        window.addEventListener(\"mouseup\", this.handleTouchEndWindow);\r\n        window.addEventListener(\"touchend\", this.handleTouchEndWindow);\r\n    };\r\n\r\n    componentWillUnmount = () => {\r\n        window.removeEventListener(\"mouseup\", this.handleTouchEndWindow);\r\n        window.removeEventListener(\"touchend\", this.handleTouchEndWindow);\r\n    };\r\n\r\n    render = () => {\r\n        // Aangepast om handmatig <table> tag met header er omheen te kunnen zetten in de parent\r\n        return (\r\n            <tbody>{this.renderRows()}</tbody>\r\n        );\r\n    };\r\n\r\n    renderRows = () =>\r\n        React.Children.map(this.props.children, (tr, i) => {\r\n            return (\r\n                <tr key={i} {...tr.props}>\r\n                    {React.Children.map(tr.props.children, (cell, j) => (\r\n                        <Cell\r\n                            key={j}\r\n                            onTouchStart={this.handleTouchStartCell}\r\n                            onTouchMove={this.handleTouchMoveCell}\r\n                            selected={this.props.value[i][j]}\r\n                            beingSelected={this.isCellBeingSelected(i, j)}\r\n                            {...cell.props}\r\n                        >\r\n                            {cell.props.children}\r\n                        </Cell>\r\n                    ))}\r\n                </tr>\r\n            );\r\n        });\r\n\r\n    handleTouchStartCell = e => {\r\n        const isLeftClick = e.button === 0;\r\n        const isTouch = e.type !== \"mousedown\";\r\n        if (!this.state.selectionStarted && (isLeftClick || isTouch)) {\r\n            e.preventDefault();\r\n            const {row, column} = eventToCellLocation(e);\r\n            this.props.onSelectionStart({row, column});\r\n            this.setState({\r\n                selectionStarted: true,\r\n                startRow: row,\r\n                startColumn: column,\r\n                endRow: row,\r\n                endColumn: column,\r\n                addMode: !this.props.value[row][column]\r\n            });\r\n        }\r\n    };\r\n\r\n    handleTouchMoveCell = e => {\r\n        if (this.state.selectionStarted) {\r\n            e.preventDefault();\r\n            const {row, column} = eventToCellLocation(e);\r\n            const {startRow, startColumn, endRow, endColumn} = this.state;\r\n\r\n            if (endRow !== row || endColumn !== column) {\r\n                const nextRowCount =\r\n                    startRow === null && endRow === null\r\n                        ? 0\r\n                        : Math.abs(row - startRow) + 1;\r\n                const nextColumnCount =\r\n                    startColumn === null && endColumn === null\r\n                        ? 0\r\n                        : Math.abs(column - startColumn) + 1;\r\n\r\n                if (nextRowCount <= this.props.maxRows) {\r\n                    this.setState({endRow: row});\r\n                }\r\n\r\n                if (nextColumnCount <= this.props.maxColumns) {\r\n                    this.setState({endColumn: column});\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    handleTouchEndWindow = e => {\r\n        const isLeftClick = e.button === 0;\r\n        const isTouch = e.type !== \"mousedown\";\r\n        if (this.state.selectionStarted && (isLeftClick || isTouch)) {\r\n            const value = [...this.props.value]; // Aangepast om clone dependency te kunnen verwijderen\r\n            const minRow = Math.min(this.state.startRow, this.state.endRow);\r\n            const maxRow = Math.max(this.state.startRow, this.state.endRow);\r\n            for (let row = minRow; row <= maxRow; row++) {\r\n                const minColumn = Math.min(\r\n                    this.state.startColumn,\r\n                    this.state.endColumn\r\n                );\r\n                const maxColumn = Math.max(\r\n                    this.state.startColumn,\r\n                    this.state.endColumn\r\n                );\r\n                for (let column = minColumn; column <= maxColumn; column++) {\r\n                    value[row][column] = this.state.addMode;\r\n                }\r\n            }\r\n            this.setState({selectionStarted: false});\r\n            this.props.onChange(value);\r\n        }\r\n    };\r\n\r\n    isCellBeingSelected = (row, column) => {\r\n        const minRow = Math.min(this.state.startRow, this.state.endRow);\r\n        const maxRow = Math.max(this.state.startRow, this.state.endRow);\r\n        const minColumn = Math.min(this.state.startColumn, this.state.endColumn);\r\n        const maxColumn = Math.max(this.state.startColumn, this.state.endColumn);\r\n\r\n        return (\r\n            this.state.selectionStarted &&\r\n            (row >= minRow &&\r\n                row <= maxRow &&\r\n                column >= minColumn &&\r\n                column <= maxColumn)\r\n        );\r\n    };\r\n}\r\n\r\nclass Cell extends React.Component {\r\n    // This optimization gave a 10% performance boost while drag-selecting\r\n    // cells\r\n    shouldComponentUpdate = nextProps =>\r\n        this.props.beingSelected !== nextProps.beingSelected ||\r\n        this.props.selected !== nextProps.selected;\r\n\r\n    componentDidMount = () => {\r\n        // We need to call addEventListener ourselves so that we can pass\r\n        // {passive: false}\r\n        this.td.addEventListener(\"touchstart\", this.handleTouchStart, {\r\n            passive: false\r\n        });\r\n        this.td.addEventListener(\"touchmove\", this.handleTouchMove, {\r\n            passive: false\r\n        });\r\n    };\r\n\r\n    componentWillUnmount = () => {\r\n        this.td.removeEventListener(\"touchstart\", this.handleTouchStart);\r\n        this.td.removeEventListener(\"touchmove\", this.handleTouchMove);\r\n    };\r\n\r\n    render = () => {\r\n        let {\r\n            className = \"\",\r\n            disabled,\r\n            beingSelected,\r\n            selected,\r\n            onTouchStart,\r\n            onTouchMove,\r\n            ...props\r\n        } = this.props;\r\n        if (disabled) {\r\n            className += \" cell-disabled\";\r\n        } else {\r\n            className += \" cell-enabled\";\r\n            if (selected) {\r\n                className += \" cell-selected\";\r\n            }\r\n            if (beingSelected) {\r\n                className += \" cell-being-selected\";\r\n            }\r\n        }\r\n        return (\r\n            <td\r\n                ref={td => (this.td = td)}\r\n                className={className}\r\n                onMouseDown={this.handleTouchStart}\r\n                onMouseMove={this.handleTouchMove}\r\n                {...props}\r\n            >\r\n                {this.props.children || <span>&nbsp;</span>}\r\n            </td>\r\n        );\r\n    };\r\n\r\n    handleTouchStart = e => {\r\n        if (!this.props.disabled) {\r\n            this.props.onTouchStart(e);\r\n        }\r\n    };\r\n\r\n    handleTouchMove = e => {\r\n        if (!this.props.disabled) {\r\n            this.props.onTouchMove(e);\r\n        }\r\n    };\r\n}\r\n\r\n// Takes a mouse or touch event and returns the corresponding row and cell.\r\n// Example:\r\n//\r\n// eventToCellLocation(event);\r\n// {row: 2, column: 3}\r\nconst eventToCellLocation = e => {\r\n    let target;\r\n    // For touchmove and touchend events, e.target and e.touches[n].target are\r\n    // wrong, so we have to rely on elementFromPoint(). For mouse clicks, we have\r\n    // to use e.target.\r\n    if (e.touches) {\r\n        const touch = e.touches[0];\r\n        target = document.elementFromPoint(touch.clientX, touch.clientY);\r\n    } else {\r\n        target = e.target;\r\n        while (target.tagName !== \"TD\") {\r\n            target = target.parentNode;\r\n        }\r\n    }\r\n    return {\r\n        row: target.parentNode.rowIndex - 1, // Aangepast i.v.m. toevoegen van header row in parent.\r\n        column: target.cellIndex\r\n    };\r\n};","import axiosInstance from '../default-setup/AxiosInstance';\r\n\r\nexport default {\r\n    fetchContactAvailabilitiesByWeek: (startOfWeek) => {\r\n        return axiosInstance.get(`portal-user/availability/by-week`, {\r\n            params: {\r\n                startOfWeek: startOfWeek,\r\n            },\r\n        }).then(payload => {\r\n            return payload.data;\r\n        });\r\n    },\r\n\r\n    updateContactAvailabilities: (data) => {\r\n        return axiosInstance.post(`portal-user/availability`, data);\r\n    },\r\n\r\n    copyAvailabilities: (data) => {\r\n        return axiosInstance.post(`portal-user/availability/copy-weeks`, data);\r\n    },\r\n};\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Modal extends Component {\r\n\r\n    render() {\r\n        const {\r\n            modalClassName,\r\n            modalMainClassName,\r\n            buttonClassName,\r\n            buttonCancelText,\r\n            buttonConfirmText,\r\n            children,\r\n            closeModal,\r\n            confirmAction,\r\n            title,\r\n            draggableDisabled,\r\n        } = this.props;\r\n        return (\r\n                <div className={`modal ${modalMainClassName}`} style={{display: 'block'}}>\r\n                    <div className={`modal-dialog ${modalClassName}`}>\r\n                        <div className=\"modal-content\">\r\n                            <div className={`modal-header` + (draggableDisabled ? '' : ' draggable-header')}>\r\n                                <h4 className=\"modal-title\">{title}</h4>\r\n                            </div>\r\n                            <div className=\"modal-body\">{children}</div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-default\" onClick={closeModal}>\r\n                                    {buttonCancelText}\r\n                                </button>\r\n                                {this.props.showConfirmAction && (\r\n                                    <button type=\"button\" className={buttonClassName} onClick={confirmAction}>\r\n                                        {buttonConfirmText}\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nModal.defaultProps = {\r\n    buttonClassName: 'btn-success btn-sm',\r\n    modalClassName: '',\r\n    modalMainClassName: '',\r\n    buttonConfirmText: 'Opslaan',\r\n    buttonCancelText: 'Annuleren',\r\n    showConfirmAction: true,\r\n    confirmAction: () => {},\r\n    draggableDisabled: false,\r\n    loading: false,\r\n};\r\n\r\nModal.propTypes = {\r\n    buttonCancelText: PropTypes.string,\r\n    buttonConfirmText: PropTypes.string,\r\n    children: PropTypes.oneOfType([PropTypes.element.isRequired, PropTypes.array.isRequired]),\r\n    closeModal: PropTypes.func.isRequired,\r\n    confirmAction: PropTypes.func,\r\n    showConfirmAction: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    draggableDisabled: PropTypes.bool,\r\n    loading: PropTypes.bool,\r\n};\r\n\r\nexport default Modal;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Modal from '../../components/modal/Modal';\r\nimport ContactAvailabilityAPI from \"../../api/portal-user/ContactAvailabilityAPI\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport {FaCopy} from \"react-icons/fa\";\r\n\r\nexport default function ContactAvailabilityDetailsPlanningCopyModal({weekOptions, copyFromWeek}) {\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [copyToWeek, setCopyToWeek] = useState('');\r\n    const [numberOfWeeks, setNumberOfWeeks] = useState(1);\r\n\r\n    useEffect(() => {\r\n        let currentIndex = weekOptions.findIndex((option) => {\r\n            return option.value === copyFromWeek;\r\n        });\r\n\r\n        let nextWeek = weekOptions[currentIndex + 1];\r\n\r\n        setCopyToWeek(nextWeek ? nextWeek.value : copyFromWeek);\r\n    }, [showModal]);\r\n\r\n    const save = () => {\r\n        ContactAvailabilityAPI.copyAvailabilities({\r\n            copyFromWeek: copyFromWeek,\r\n            copyToWeek: copyToWeek,\r\n            numberOfWeeks: numberOfWeeks,\r\n        }).then(() => {\r\n            setShowModal(false);\r\n        }).catch(() => {\r\n            alert('Er is iets misgegaan met opslaan, probeer het opnieuw.');\r\n        });\r\n    };\r\n\r\n    const getNumberOfWeekOptions = () => {\r\n        let currentIndex = weekOptions.findIndex((option) => {\r\n            return option.value === copyToWeek;\r\n        });\r\n\r\n        let max = weekOptions.length - currentIndex;\r\n\r\n        let options = [];\r\n        for (let i = 1; i <= max; i++) {\r\n            options.push({value: i, text: i});\r\n        }\r\n        return options;\r\n    }\r\n\r\n    if (showModal) {\r\n        return (\r\n            <div style={{textAlign: 'left'}}>\r\n                <Modal\r\n                    buttonConfirmText=\"Kopiëren\"\r\n                    closeModal={() => setShowModal(false)}\r\n                    confirmAction={save}\r\n                    title=\"Beschikbaarheid kopiëren\"\r\n                >\r\n                    <div>\r\n                        <div className=\"row\">\r\n                            <div className={'col-sm-12'}>\r\n                                <p>Beschikbaarheid van <strong>{weekOptions.find(w => w.value === copyFromWeek).text }</strong> kopiëren.</p>\r\n                                <p>De beschikbaarheid van de huidige week in het overzicht wordt gekopieerd naar de gekozen week en de x aantal daaropvolgende weken.</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mb-2\">\r\n                            <div className={'col-sm-6'}>\r\n                                <label>Maar week</label>\r\n                            </div>\r\n                            <div className={'col-sm-6'}>\r\n                                <select\r\n                                    className=\"form-control input-sm\"\r\n                                    value={copyToWeek}\r\n                                    onChange={(event) => setCopyToWeek(event.target.value)}\r\n                                >\r\n                                    {weekOptions.map(option => {\r\n                                        return (\r\n                                            <option key={option.value} value={option.value}>\r\n                                                {option.text}\r\n                                            </option>\r\n                                        );\r\n                                    })}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className={'col-sm-6'}>\r\n                                <label>Aantal weken</label>\r\n                            </div>\r\n                            <div className={'col-sm-6'}>\r\n                                <select\r\n                                    className=\"form-control input-sm\"\r\n                                    value={numberOfWeeks}\r\n                                    onChange={(event) => setNumberOfWeeks(event.target.value)}\r\n                                >\r\n                                    {getNumberOfWeekOptions().map(option => {\r\n                                        return (\r\n                                            <option key={option.value} value={option.value}>\r\n                                                {option.text}\r\n                                            </option>\r\n                                        );\r\n                                    })}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Button className={'btn-light btn-sm'} onClick={() => setShowModal(true)}>\r\n            <FaCopy />\r\n        </Button>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\r\nimport TableDragSelect from \"./TableDragSelect\"\r\nimport \"./style.css\";\r\nimport moment from \"moment/moment\";\r\nimport ContactAvailabilityAPI from \"../../api/portal-user/ContactAvailabilityAPI\";\r\nimport ContactAvailabilityDetailsPlanningCopyModal from \"./ContactAvailabilityDetailsPlanningCopyModal\";\r\nimport {FaArrowLeft, FaArrowRight} from 'react-icons/fa';\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nexport default function ContactAvailabilityDetailsPlanningPanel() {\r\n    const intervalMinutes = 30;\r\n\r\n    /**\r\n     * De 7 dagen van de week in het huidige overzicht in moment objecten.\r\n     */\r\n    const [days, setDays] = useState([]);\r\n\r\n    /**\r\n     * De tijdsblokken in het huidige overzicht in integers met minuten vanaf middernacht, dus 0, 30, 60, 90, etc.\r\n     */\r\n    const [timeslots, setTimeslots] = useState([]);\r\n\r\n    /**\r\n     * De maandag-datum van de huidige geselecteerde week in de dropdown in format YYYY-MM-DD.\r\n     */\r\n    const [currentWeek, setCurrentWeek] = useState('');\r\n\r\n    /**\r\n     * De contact_availabilities database records van de huidige geselecteerde week/contact.\r\n     * Het \"to\" in de database is \"tot\" (en dus niet \"tot en met\"), dus als je tijdslot 8:00 hebt geselecteerd, dan is het \"from\" 8:00 en \"to\" 8:30.\r\n     */\r\n    const [availabilities, setAvailabilities] = useState([]);\r\n\r\n    useEffect(() => {\r\n        /**\r\n         * Bij laden de weekinstelling op de huidige instellen\r\n         */\r\n        setCurrentWeek(moment().startOf('isoWeek').format('YYYY-MM-DD'));\r\n\r\n        /**\r\n         * De timeslots zijn hetzelfde ongeacht de gekozen week, dus deze hoeven maar één keer te worden ingesteld.\r\n         */\r\n        initTimeslots();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!currentWeek) {\r\n            return;\r\n        }\r\n\r\n        ContactAvailabilityAPI.fetchContactAvailabilitiesByWeek(currentWeek).then(data => {\r\n            setAvailabilities(data);\r\n        });\r\n\r\n        initDays();\r\n    }, [currentWeek]);\r\n\r\n    const initTimeslots = () => {\r\n        /**\r\n         * De tijdsblokken in het huidige overzicht in integers met minuten vanaf middernacht, dus 0, 30, 60, 90, etc.\r\n         */\r\n        let temp = [];\r\n        for (let i = 6 * 60; i < 22 * 60; i = i + intervalMinutes) {\r\n            temp.push(i);\r\n        }\r\n        setTimeslots(temp);\r\n    }\r\n\r\n    const initDays = () => {\r\n        /**\r\n         * De 7 dagen van de week in het huidige overzicht in moment objecten vullen.\r\n         */\r\n        let temp = [];\r\n        let day = moment(currentWeek);\r\n        let endOfWeek = day.clone().endOf('isoWeek');\r\n        while (day <= endOfWeek) {\r\n            temp.push(day.clone());\r\n            day.add(1, 'd');\r\n        }\r\n        setDays(temp);\r\n    }\r\n\r\n    const getTableDragSelectCells = () => {\r\n        /**\r\n         * De input waarde van het TableDragSelect component is een array met arrays van de geselecteerde cellen.\r\n         * Zie voorbeeld op https://github.com/mcjohnalds/react-table-drag-select.\r\n         */\r\n        let cells = [];\r\n        timeslots.map(timeslot => {\r\n            let subCells = [];\r\n            days.map(day => {\r\n                subCells.push(getTimeslotValue(day, timeslot));\r\n            });\r\n            cells.push(subCells);\r\n        });\r\n        return cells;\r\n    }\r\n\r\n    /**\r\n     * Bepaal of een gegeven dag/timeslot op een gegeven dag geactiveerd is.\r\n     * Oftewel; of het dag/timeslot binnen een van de contact_availabilities database records valt.\r\n     */\r\n    const getTimeslotValue = (day, timeslot) => {\r\n        return availabilities.some(availability => {\r\n            /**\r\n             * Kijk of er een availability is waar het timeslot volledig binnen valt.\r\n             * availabilties kunnen niet aansluitend zijn in de database (dan zouden ze samengevoegd moeten worden), dus het is niet nodig om te kijken of het timeslot door meerdere availabilities wordt gedekt.\r\n             */\r\n            return moment(availability.from) <= moment(day).add(timeslot, 'minutes')\r\n                && moment(availability.to) >= moment(day).add(timeslot + intervalMinutes, 'minutes');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * De output van het TableDragSelect component is een array met arrays van de geselecteerde cellen.\r\n     * Dit omvormen naar een array met contact_availabilities database records om te versturen naar de backend.\r\n     */\r\n    const saveTableDragSelectCells = (values) => {\r\n        let availabilities = [];\r\n\r\n        for (let i = 0; i < days.length; i++) {\r\n            let firstActiveIndex = false;\r\n            for (let j = 0; j < timeslots.length; j++) {\r\n                if (values[j][i]) {\r\n                    /**\r\n                     * Huidige timeslot is actief.\r\n                     * Als de vorige timeslot niet actief was, dan is dit eerste actieve timeslot van deze reeks.\r\n                     */\r\n                    if (firstActiveIndex === false) { // strict check, want eerste item met index 0 is ook false\r\n                        firstActiveIndex = j;\r\n                    }\r\n                } else {\r\n                    /**\r\n                     * Huidige timeslot is niet actief.\r\n                     * Als vorige timeslot niet actie was hoeven we niets te doen.\r\n                     * Als vorige timeslot wel actief was, dan was het vorige timeslot het laatste actieve timeslot van die reeks, dus dan moeten we die opslaan.\r\n                     */\r\n                    if (firstActiveIndex !== false) {\r\n                        availabilities.push({\r\n                            day: i, // Van de dag slaan we de index op, want de dagen zijn altijd hetzelfde. 0 = maandag, 1 = dinsdag, etc.\r\n                            from: formatMinutesToTime(timeslots[firstActiveIndex]),\r\n                            to: formatMinutesToTime(timeslots[j - 1] + intervalMinutes), // Het \"to\" in de database is \"tot\" (en dus niet \"tot en met\"), dus als je tijdslot 8:00 hebt geselecteerd, dan is het \"from\" 8:00 en \"to\" 8:30. Dus intervalMinutes erbij optellen.\r\n                        });\r\n                        firstActiveIndex = false;\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Als we aan het einde van de timeslots zitten, maar de laatste timeslot was wel actief, dan moet die ook nog opgeslagen worden.\r\n                 */\r\n                if (j === timeslots.length - 1 && firstActiveIndex) {\r\n                    availabilities.push({\r\n                        day: i,\r\n                        from: formatMinutesToTime(timeslots[firstActiveIndex]),\r\n                        to: formatMinutesToTime(timeslots[j] + intervalMinutes),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        ContactAvailabilityAPI.updateContactAvailabilities({\r\n            startOfWeek: currentWeek,\r\n            availabilities: availabilities,\r\n        }).catch(() => {\r\n            alert('Er is iets misgegaan met opslaan, probeer het opnieuw.');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Formatteer een aantal minuten vanaf middernacht naar een tijd in het formaat HH:mm.\r\n     */\r\n    const formatMinutesToTime = (minutes) => {\r\n        let hours = Math.floor(minutes / 60);\r\n        let minutesLeft = minutes % 60;\r\n\r\n        // Voorloop en achterloop nul toevoegen als dat nodig is.\r\n        hours = hours < 10 ? '0' + hours : hours;\r\n        minutesLeft = minutesLeft < 10 ? '0' + minutesLeft : minutesLeft;\r\n\r\n        return hours + ':' + minutesLeft;\r\n    }\r\n\r\n    /**\r\n     * Geef de opties voor de weekselectie.\r\n     */\r\n    const getWeekOptions = () => {\r\n        let current = moment().startOf('isoWeek');\r\n        let options = [];\r\n        for (let i = 0; i < 78; i++) {\r\n            options.push({\r\n                value: current.format('YYYY-MM-DD'),\r\n                text: 'Week ' + current.format('W') + ' (' + current.format('DD-MM-YY') + ')',\r\n            });\r\n            current.add(1, 'w');\r\n        }\r\n        return options;\r\n    }\r\n\r\n    const getPreviousWeek = () => {\r\n        let currentIndex = getWeekOptions().findIndex((option) => {\r\n            return option.value === currentWeek;\r\n        });\r\n\r\n        if (currentIndex > 0) {\r\n            return getWeekOptions()[currentIndex - 1].value;\r\n        }\r\n    }\r\n\r\n    const getNextWeek = () => {\r\n        let currentIndex = getWeekOptions().findIndex((option) => {\r\n            return option.value === currentWeek;\r\n        });\r\n\r\n        if (currentIndex < getWeekOptions().length - 1) {\r\n            return getWeekOptions()[currentIndex + 1].value;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className={'col-sm-4'}>\r\n                        <Button disabled={!getPreviousWeek()} className={'btn-light btn-sm'} onClick={() => setCurrentWeek(getPreviousWeek())}>\r\n                            <FaArrowLeft />\r\n                        </Button>\r\n                    </div>\r\n                    <div className={'col-sm-4'}>\r\n                        <select\r\n                            className=\"form-control input-sm\"\r\n                            value={currentWeek}\r\n                            onChange={(event) => setCurrentWeek(event.target.value)}\r\n                        >\r\n                            {getWeekOptions().map(option => {\r\n                                return (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.text}\r\n                                    </option>\r\n                                );\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                    <div className={'col-sm-4'} style={{textAlign: 'right'}}>\r\n                        <ContactAvailabilityDetailsPlanningCopyModal weekOptions={getWeekOptions()} copyFromWeek={currentWeek}/>\r\n                        {' '}\r\n                        <Button disabled={!getNextWeek()} className={'btn-light btn-sm'} onClick={() => setCurrentWeek(getNextWeek())}>\r\n                            <FaArrowRight />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <table className=\"table-drag-select\">\r\n                            <thead>\r\n                            <tr>\r\n                                {\r\n                                    days.map((day, j) => {\r\n                                        return (\r\n                                            <th key={j}\r\n                                                style={{textAlign: 'center'}}>{day.format('dd DD-MM-YY')}</th>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </tr>\r\n                            </thead>\r\n                            <TableDragSelect\r\n                                value={getTableDragSelectCells()}\r\n                                onChange={cells => saveTableDragSelectCells(cells)}\r\n                            >\r\n                                {\r\n                                    timeslots.map((timeslot, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                {\r\n                                                    days.map((day, j) => {\r\n                                                        return (\r\n                                                            <td key={j}>{formatMinutesToTime(timeslot)}</td>\r\n                                                        );\r\n                                                    })\r\n                                                }\r\n                                            </tr>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </TableDragSelect>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ContactAvailabilityDetailsPlanningPanel from \"./ContactAvailabilityDetailsPlanningPanel\";\r\n\r\nexport default function AvailabilityDetails() {\r\n    return (\r\n        <Container className={'content-section'}>\r\n            <ContactAvailabilityDetailsPlanningPanel/>\r\n        </Container>\r\n    );\r\n}\r\n","import axiosInstance from '../default-setup/AxiosInstance';\n\nexport default {\n    fetchDocumentDetails: id => {\n        const requestUrl = `/jory/document/${id}`;\n\n        return axiosInstance.get(requestUrl, {\n            params: {\n                jory: {\n                    fld: ['id', 'filename', 'description'],\n                },\n            },\n        });\n    },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const CustomPrevButton = props => {\n    const { page, pages, handlePrevClick } = props;\n    if (page === 1) return <div />;\n\n    return (\n        <h3\n            style={{ cursor: 'pointer', display: 'inline-block', marginRight: 24, marginTop: 0 }}\n            onClick={handlePrevClick}\n        >\n            {'<'}\n        </h3>\n    );\n};\nCustomPrevButton.propTypes = {\n    page: PropTypes.number.isRequired,\n    pages: PropTypes.number.isRequired,\n    handlePrevClick: PropTypes.func.isRequired,\n};\n\nexport const CustomNextButton = props => {\n    const { page, pages, handleNextClick } = props;\n    if (page === pages) return <div />;\n\n    return (\n        <h3\n            style={{ cursor: 'pointer', display: 'inline-block', marginLeft: 24, marginTop: 0 }}\n            onClick={handleNextClick}\n        >\n            {'>'}\n        </h3>\n    );\n};\nCustomNextButton.propTypes = {\n    page: PropTypes.number.isRequired,\n    pages: PropTypes.number.isRequired,\n    handleNextClick: PropTypes.func.isRequired,\n};\n\nexport const CustomPages = props => {\n    const { page, pages } = props;\n    return (\n        <h3 style={{ display: 'inline-block', marginTop: 0 }}>\n            Pagina {page} van {pages}\n        </h3>\n    );\n};\nCustomPages.propTypes = {\n    page: PropTypes.number.isRequired,\n    pages: PropTypes.number.isRequired,\n};\n\nconst CustomNavigation = props => {\n    const { page, pages } = props;\n\n    const { handlePrevClick, handleNextClick } = props;\n\n    return (\n        <div className=\"customWrapper\">\n            <CustomPrevButton page={page} pages={pages} handlePrevClick={handlePrevClick} />\n            <CustomPages page={page} pages={pages} />\n            <CustomNextButton page={page} pages={pages} handleNextClick={handleNextClick} />\n        </div>\n    );\n};\nCustomNavigation.propTypes = {\n    page: PropTypes.number.isRequired,\n    pages: PropTypes.number.isRequired,\n    handlePrevClick: PropTypes.func.isRequired,\n    handleNextClick: PropTypes.func.isRequired,\n};\n\nexport default CustomNavigation;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PDFViewer from 'mgr-pdf-viewer-react';\r\nimport CustomNavigation from './CustomNavigation';\r\n\r\nconst PdfViewer = props => {\r\n    const { file, scale } = props;\r\n    return (\r\n        <div className={`panel-heading`}>\r\n            <PDFViewer\r\n                document={{\r\n                    file: file,\r\n                }}\r\n                navigation={CustomNavigation}\r\n                scale={scale}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nPDFViewer.defaultProps = {\r\n    file: '',\r\n    scale: 1,\r\n};\r\n\r\nPDFViewer.propTypes = {\r\n    file: PropTypes.string,\r\n    scale: PropTypes.number,\r\n};\r\n\r\nexport default PdfViewer;\r\n","import React, { useEffect, useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport LoadingView from '../../../../components/general/LoadingView';\nimport fileDownload from 'js-file-download';\nimport { FaFileDownload, FiZoomIn, FiZoomOut } from 'react-icons/all';\nimport DocumentAPI from '../../../../api/document/DocumentAPI';\nimport PdfViewer from '../../../../components/pdf/PdfViewer';\nimport { Button } from 'react-bootstrap';\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Row from 'react-bootstrap/Row';\nimport QuotationRequestAPI from '../../../../api/quotation-request/QuotationRequestAPI';\n\nfunction DocumentPreview({ match, history }) {\n    const [isLoading, setLoading] = useState(true);\n    const [scale, setScale] = useState(1);\n    const [file, setFile] = useState(null);\n    const [initialDocument, setInitialDocument] = useState({});\n\n    useEffect(() => {\n        DocumentAPI.fetchDocumentDetails(match.params.id)\n            .then(payload => {\n                setInitialDocument(payload.data.data);\n            })\n            .catch(error => {\n                if (error.response.status === 403) {\n                    alert('Niet geautoriseerd voor dit document.');\n                } else {\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuwd.');\n                }\n            });\n        QuotationRequestAPI.quotationRequestDownloadDocument(match.params.quotationRequestId, match.params.id)\n            .then(payload => {\n                setFile(payload.data);\n            })\n            .catch(error => {\n                if (error.response.status === 403) {\n                    alert('Niet geautoriseerd voor dit document.');\n                } else {\n                    alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuwd.');\n                }\n            });\n\n        setLoading(false);\n        // });\n    }, []);\n\n    function zoomIn() {\n        setScale(scale + 0.2);\n    }\n\n    function zoomOut() {\n        setScale(scale - 0.2);\n    }\n\n    function downloadFile(e) {\n        e.preventDefault();\n\n        QuotationRequestAPI.quotationRequestDownloadDocument(match.params.quotationRequestId, match.params.id)\n            .then(payload => {\n                fileDownload(payload.data, initialDocument.filename);\n            })\n            .catch(() => {\n                alert('Er is iets misgegaan met laden. Herlaad de pagina opnieuw.');\n            });\n    }\n\n    return (\n        <Container className={'content-section'}>\n            {isLoading ? (\n                <LoadingView />\n            ) : (\n                <>\n                    {file && initialDocument.filename && initialDocument.filename.toLowerCase().endsWith('.pdf') ? (\n                        <>\n                            <Row className={'mb-1'}>\n                                <Col xs={12} md={10}>\n                                    <ButtonGroup aria-label=\"document-preview\" className=\"w-button-group-left\">\n                                        <Button className={'w-button btn-sm'} onClick={() => zoomIn()}>\n                                            <FiZoomIn />\n                                            &nbsp;Inzoomen\n                                        </Button>\n                                        <Button className={'w-button btn-sm'} onClick={() => zoomOut()}>\n                                            <FiZoomOut />\n                                            &nbsp;Uitzoomen\n                                        </Button>\n                                        <Button className={'w-button btn-sm'} onClick={e => downloadFile(e)}>\n                                            <FaFileDownload />\n                                            &nbsp;Downloaden\n                                        </Button>\n                                    </ButtonGroup>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col xs={12} md={10}>\n                                    <PdfViewer file={file} scale={scale} />\n                                </Col>\n                            </Row>\n                        </>\n                    ) : null}\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default DocumentPreview;\n","import React from 'react';\r\nimport { HashRouter as Router, Switch } from 'react-router-dom';\r\nimport ProtectedRoute from './route/ProtectedRoute';\r\nimport PublicRoute from './route/PublicRoute';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport { PortalUserProvider } from './context/PortalUserContext';\r\nimport Login from './container/authorization/login';\r\nimport TwoFactorConfirm from './container/authorization/two-factor';\r\nimport TwoFactorRecover from './container/authorization/two-factor/recover';\r\nimport Register from './container/authorization/register';\r\nimport Forgot from './container/authorization/forgot';\r\nimport Reset from './container/authorization/reset';\r\nimport Dashboard from './container/dashboard';\r\nimport ContactDetails from './container/contact-details';\r\nimport MyAreasOfInterest from './container/my-areas-of-interest';\r\nimport RegisterProject from './container/register';\r\nimport ProjectList from './container/project/list';\r\nimport ProjectDetails from './container/project/details';\r\nimport RegistrationList from './container/registration/list';\r\nimport NewAccount from './container/authorization/new-account';\r\nimport NewAccountSuccess from './container/authorization/new-account/NewAccountSuccess';\r\nimport ChangeAccount from './container/authorization/change-account';\r\nimport AboutUs from './container/about-us/list';\r\nimport RegistrationDetails from './container/registration/details';\r\nimport FinancialOverviewDocuments from './container/financial-overview-documents/list';\r\nimport { ThemeSettingsProvider } from './context/ThemeSettingsContext';\r\nimport AboutUsAdministration from './container/about-us/details';\r\nimport ProjectMollieRedirectWithContext from './container/register/mollie-redirect';\r\nimport CoachInspectList from './container/inspect/list';\r\nimport CoachInspectDetails from './container/inspect/details';\r\nimport AvailabilityDetails from './container/availability/index';\r\nimport DocumentPreview from './container/inspect/details/document';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n                <PortalUserProvider>\r\n                    <ThemeSettingsProvider>\r\n                        <Switch>\r\n                            <ProtectedRoute exact path=\"/\" component={Dashboard} />\r\n                            <ProtectedRoute path=\"/dashboard\" component={Dashboard} />\r\n                            <ProtectedRoute path=\"/gegevens\" component={ContactDetails} />\r\n                            <ProtectedRoute path=\"/mijn-interessegebieden\" component={MyAreasOfInterest} />\r\n                            <ProtectedRoute\r\n                                path=\"/inschrijven/mollie-resultaat/:code\"\r\n                                component={ProjectMollieRedirectWithContext}\r\n                            />\r\n                            <ProtectedRoute path=\"/inschrijven/:id\" component={RegisterProject} />\r\n                            <ProtectedRoute path=\"/inschrijven-projecten\" component={ProjectList} />\r\n                            <ProtectedRoute path=\"/inschrijvingen-projecten\" component={RegistrationList} />\r\n                            <ProtectedRoute path=\"/project-deelname/:id\" component={RegistrationDetails} />\r\n                            <ProtectedRoute path=\"/project/:id\" component={ProjectDetails} />\r\n                            <ProtectedRoute path=\"/waardestaat-documenten\" component={FinancialOverviewDocuments} />\r\n                            <ProtectedRoute path=\"/wijzig-inloggegevens\" component={ChangeAccount} />\r\n                            <ProtectedRoute path=\"/over-ons\" component={AboutUs} />\r\n                            <ProtectedRoute path=\"/over-ons-organisatie/:id\" component={AboutUsAdministration} />\r\n                            <ProtectedRoute\r\n                                path=\"/schouwen/:quotationRequestId/document/:id\"\r\n                                component={DocumentPreview}\r\n                            />\r\n                            <ProtectedRoute path=\"/schouwen/:id\" component={CoachInspectDetails} />\r\n                            <ProtectedRoute path=\"/schouwen\" component={CoachInspectList} />\r\n                            <ProtectedRoute path=\"/beschikbaarheid\" component={AvailabilityDetails} />\r\n                            <PublicRoute path=\"/login\" component={Login} />\r\n                            <PublicRoute path=\"/two-factor/confirm\" component={TwoFactorConfirm} />\r\n                            <PublicRoute path=\"/two-factor/recover\" component={TwoFactorRecover} />\r\n                            <PublicRoute path=\"/activeer-registratie/:registrationCode/:email\" component={Register} />\r\n                            <PublicRoute path=\"/wachtwoord-vergeten\" component={Forgot} />\r\n                            <PublicRoute path=\"/wachtwoord-wijzigen/:token/:email\" component={Reset} />\r\n                            <PublicRoute path=\"/nieuw-account\" component={NewAccount} />\r\n                            <PublicRoute path=\"/nieuw-account-succes\" component={NewAccountSuccess} />\r\n                        </Switch>\r\n                    </ThemeSettingsProvider>\r\n                </PortalUserProvider>\r\n            </AuthProvider>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/normalize.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-day-picker/lib/style.css';\nimport './css/webflow.css';\nimport './css/econobis.webflow.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'moment/locale/nl';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Server data is set and can now removed\nvar serverDataScript = document.getElementById('server-data');\nserverDataScript.remove();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}